// Code generated by mockery v2.39.2. DO NOT EDIT.

package mocks

import (
	context "context"

	cloudfront "github.com/aws/aws-sdk-go-v2/service/cloudfront"

	mock "github.com/stretchr/testify/mock"
)

// IClient is an autogenerated mock type for the IClient type
type IClient struct {
	mock.Mock
}

// AssociateAlias provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) AssociateAlias(ctx context.Context, params *cloudfront.AssociateAliasInput, optFns ...func(*cloudfront.Options)) (*cloudfront.AssociateAliasOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for AssociateAlias")
	}

	var r0 *cloudfront.AssociateAliasOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *cloudfront.AssociateAliasInput, ...func(*cloudfront.Options)) (*cloudfront.AssociateAliasOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *cloudfront.AssociateAliasInput, ...func(*cloudfront.Options)) *cloudfront.AssociateAliasOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cloudfront.AssociateAliasOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *cloudfront.AssociateAliasInput, ...func(*cloudfront.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CopyDistribution provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CopyDistribution(ctx context.Context, params *cloudfront.CopyDistributionInput, optFns ...func(*cloudfront.Options)) (*cloudfront.CopyDistributionOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CopyDistribution")
	}

	var r0 *cloudfront.CopyDistributionOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *cloudfront.CopyDistributionInput, ...func(*cloudfront.Options)) (*cloudfront.CopyDistributionOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *cloudfront.CopyDistributionInput, ...func(*cloudfront.Options)) *cloudfront.CopyDistributionOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cloudfront.CopyDistributionOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *cloudfront.CopyDistributionInput, ...func(*cloudfront.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateCachePolicy provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CreateCachePolicy(ctx context.Context, params *cloudfront.CreateCachePolicyInput, optFns ...func(*cloudfront.Options)) (*cloudfront.CreateCachePolicyOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateCachePolicy")
	}

	var r0 *cloudfront.CreateCachePolicyOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *cloudfront.CreateCachePolicyInput, ...func(*cloudfront.Options)) (*cloudfront.CreateCachePolicyOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *cloudfront.CreateCachePolicyInput, ...func(*cloudfront.Options)) *cloudfront.CreateCachePolicyOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cloudfront.CreateCachePolicyOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *cloudfront.CreateCachePolicyInput, ...func(*cloudfront.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateCloudFrontOriginAccessIdentity provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CreateCloudFrontOriginAccessIdentity(ctx context.Context, params *cloudfront.CreateCloudFrontOriginAccessIdentityInput, optFns ...func(*cloudfront.Options)) (*cloudfront.CreateCloudFrontOriginAccessIdentityOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateCloudFrontOriginAccessIdentity")
	}

	var r0 *cloudfront.CreateCloudFrontOriginAccessIdentityOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *cloudfront.CreateCloudFrontOriginAccessIdentityInput, ...func(*cloudfront.Options)) (*cloudfront.CreateCloudFrontOriginAccessIdentityOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *cloudfront.CreateCloudFrontOriginAccessIdentityInput, ...func(*cloudfront.Options)) *cloudfront.CreateCloudFrontOriginAccessIdentityOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cloudfront.CreateCloudFrontOriginAccessIdentityOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *cloudfront.CreateCloudFrontOriginAccessIdentityInput, ...func(*cloudfront.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateContinuousDeploymentPolicy provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CreateContinuousDeploymentPolicy(ctx context.Context, params *cloudfront.CreateContinuousDeploymentPolicyInput, optFns ...func(*cloudfront.Options)) (*cloudfront.CreateContinuousDeploymentPolicyOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateContinuousDeploymentPolicy")
	}

	var r0 *cloudfront.CreateContinuousDeploymentPolicyOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *cloudfront.CreateContinuousDeploymentPolicyInput, ...func(*cloudfront.Options)) (*cloudfront.CreateContinuousDeploymentPolicyOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *cloudfront.CreateContinuousDeploymentPolicyInput, ...func(*cloudfront.Options)) *cloudfront.CreateContinuousDeploymentPolicyOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cloudfront.CreateContinuousDeploymentPolicyOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *cloudfront.CreateContinuousDeploymentPolicyInput, ...func(*cloudfront.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateDistribution provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CreateDistribution(ctx context.Context, params *cloudfront.CreateDistributionInput, optFns ...func(*cloudfront.Options)) (*cloudfront.CreateDistributionOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateDistribution")
	}

	var r0 *cloudfront.CreateDistributionOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *cloudfront.CreateDistributionInput, ...func(*cloudfront.Options)) (*cloudfront.CreateDistributionOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *cloudfront.CreateDistributionInput, ...func(*cloudfront.Options)) *cloudfront.CreateDistributionOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cloudfront.CreateDistributionOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *cloudfront.CreateDistributionInput, ...func(*cloudfront.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateDistributionWithTags provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CreateDistributionWithTags(ctx context.Context, params *cloudfront.CreateDistributionWithTagsInput, optFns ...func(*cloudfront.Options)) (*cloudfront.CreateDistributionWithTagsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateDistributionWithTags")
	}

	var r0 *cloudfront.CreateDistributionWithTagsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *cloudfront.CreateDistributionWithTagsInput, ...func(*cloudfront.Options)) (*cloudfront.CreateDistributionWithTagsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *cloudfront.CreateDistributionWithTagsInput, ...func(*cloudfront.Options)) *cloudfront.CreateDistributionWithTagsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cloudfront.CreateDistributionWithTagsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *cloudfront.CreateDistributionWithTagsInput, ...func(*cloudfront.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateFieldLevelEncryptionConfig provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CreateFieldLevelEncryptionConfig(ctx context.Context, params *cloudfront.CreateFieldLevelEncryptionConfigInput, optFns ...func(*cloudfront.Options)) (*cloudfront.CreateFieldLevelEncryptionConfigOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateFieldLevelEncryptionConfig")
	}

	var r0 *cloudfront.CreateFieldLevelEncryptionConfigOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *cloudfront.CreateFieldLevelEncryptionConfigInput, ...func(*cloudfront.Options)) (*cloudfront.CreateFieldLevelEncryptionConfigOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *cloudfront.CreateFieldLevelEncryptionConfigInput, ...func(*cloudfront.Options)) *cloudfront.CreateFieldLevelEncryptionConfigOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cloudfront.CreateFieldLevelEncryptionConfigOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *cloudfront.CreateFieldLevelEncryptionConfigInput, ...func(*cloudfront.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateFieldLevelEncryptionProfile provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CreateFieldLevelEncryptionProfile(ctx context.Context, params *cloudfront.CreateFieldLevelEncryptionProfileInput, optFns ...func(*cloudfront.Options)) (*cloudfront.CreateFieldLevelEncryptionProfileOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateFieldLevelEncryptionProfile")
	}

	var r0 *cloudfront.CreateFieldLevelEncryptionProfileOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *cloudfront.CreateFieldLevelEncryptionProfileInput, ...func(*cloudfront.Options)) (*cloudfront.CreateFieldLevelEncryptionProfileOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *cloudfront.CreateFieldLevelEncryptionProfileInput, ...func(*cloudfront.Options)) *cloudfront.CreateFieldLevelEncryptionProfileOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cloudfront.CreateFieldLevelEncryptionProfileOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *cloudfront.CreateFieldLevelEncryptionProfileInput, ...func(*cloudfront.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateFunction provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CreateFunction(ctx context.Context, params *cloudfront.CreateFunctionInput, optFns ...func(*cloudfront.Options)) (*cloudfront.CreateFunctionOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateFunction")
	}

	var r0 *cloudfront.CreateFunctionOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *cloudfront.CreateFunctionInput, ...func(*cloudfront.Options)) (*cloudfront.CreateFunctionOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *cloudfront.CreateFunctionInput, ...func(*cloudfront.Options)) *cloudfront.CreateFunctionOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cloudfront.CreateFunctionOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *cloudfront.CreateFunctionInput, ...func(*cloudfront.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateInvalidation provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CreateInvalidation(ctx context.Context, params *cloudfront.CreateInvalidationInput, optFns ...func(*cloudfront.Options)) (*cloudfront.CreateInvalidationOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateInvalidation")
	}

	var r0 *cloudfront.CreateInvalidationOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *cloudfront.CreateInvalidationInput, ...func(*cloudfront.Options)) (*cloudfront.CreateInvalidationOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *cloudfront.CreateInvalidationInput, ...func(*cloudfront.Options)) *cloudfront.CreateInvalidationOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cloudfront.CreateInvalidationOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *cloudfront.CreateInvalidationInput, ...func(*cloudfront.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateKeyGroup provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CreateKeyGroup(ctx context.Context, params *cloudfront.CreateKeyGroupInput, optFns ...func(*cloudfront.Options)) (*cloudfront.CreateKeyGroupOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateKeyGroup")
	}

	var r0 *cloudfront.CreateKeyGroupOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *cloudfront.CreateKeyGroupInput, ...func(*cloudfront.Options)) (*cloudfront.CreateKeyGroupOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *cloudfront.CreateKeyGroupInput, ...func(*cloudfront.Options)) *cloudfront.CreateKeyGroupOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cloudfront.CreateKeyGroupOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *cloudfront.CreateKeyGroupInput, ...func(*cloudfront.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateKeyValueStore provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CreateKeyValueStore(ctx context.Context, params *cloudfront.CreateKeyValueStoreInput, optFns ...func(*cloudfront.Options)) (*cloudfront.CreateKeyValueStoreOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateKeyValueStore")
	}

	var r0 *cloudfront.CreateKeyValueStoreOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *cloudfront.CreateKeyValueStoreInput, ...func(*cloudfront.Options)) (*cloudfront.CreateKeyValueStoreOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *cloudfront.CreateKeyValueStoreInput, ...func(*cloudfront.Options)) *cloudfront.CreateKeyValueStoreOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cloudfront.CreateKeyValueStoreOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *cloudfront.CreateKeyValueStoreInput, ...func(*cloudfront.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateMonitoringSubscription provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CreateMonitoringSubscription(ctx context.Context, params *cloudfront.CreateMonitoringSubscriptionInput, optFns ...func(*cloudfront.Options)) (*cloudfront.CreateMonitoringSubscriptionOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateMonitoringSubscription")
	}

	var r0 *cloudfront.CreateMonitoringSubscriptionOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *cloudfront.CreateMonitoringSubscriptionInput, ...func(*cloudfront.Options)) (*cloudfront.CreateMonitoringSubscriptionOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *cloudfront.CreateMonitoringSubscriptionInput, ...func(*cloudfront.Options)) *cloudfront.CreateMonitoringSubscriptionOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cloudfront.CreateMonitoringSubscriptionOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *cloudfront.CreateMonitoringSubscriptionInput, ...func(*cloudfront.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateOriginAccessControl provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CreateOriginAccessControl(ctx context.Context, params *cloudfront.CreateOriginAccessControlInput, optFns ...func(*cloudfront.Options)) (*cloudfront.CreateOriginAccessControlOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateOriginAccessControl")
	}

	var r0 *cloudfront.CreateOriginAccessControlOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *cloudfront.CreateOriginAccessControlInput, ...func(*cloudfront.Options)) (*cloudfront.CreateOriginAccessControlOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *cloudfront.CreateOriginAccessControlInput, ...func(*cloudfront.Options)) *cloudfront.CreateOriginAccessControlOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cloudfront.CreateOriginAccessControlOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *cloudfront.CreateOriginAccessControlInput, ...func(*cloudfront.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateOriginRequestPolicy provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CreateOriginRequestPolicy(ctx context.Context, params *cloudfront.CreateOriginRequestPolicyInput, optFns ...func(*cloudfront.Options)) (*cloudfront.CreateOriginRequestPolicyOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateOriginRequestPolicy")
	}

	var r0 *cloudfront.CreateOriginRequestPolicyOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *cloudfront.CreateOriginRequestPolicyInput, ...func(*cloudfront.Options)) (*cloudfront.CreateOriginRequestPolicyOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *cloudfront.CreateOriginRequestPolicyInput, ...func(*cloudfront.Options)) *cloudfront.CreateOriginRequestPolicyOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cloudfront.CreateOriginRequestPolicyOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *cloudfront.CreateOriginRequestPolicyInput, ...func(*cloudfront.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreatePublicKey provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CreatePublicKey(ctx context.Context, params *cloudfront.CreatePublicKeyInput, optFns ...func(*cloudfront.Options)) (*cloudfront.CreatePublicKeyOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreatePublicKey")
	}

	var r0 *cloudfront.CreatePublicKeyOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *cloudfront.CreatePublicKeyInput, ...func(*cloudfront.Options)) (*cloudfront.CreatePublicKeyOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *cloudfront.CreatePublicKeyInput, ...func(*cloudfront.Options)) *cloudfront.CreatePublicKeyOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cloudfront.CreatePublicKeyOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *cloudfront.CreatePublicKeyInput, ...func(*cloudfront.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateRealtimeLogConfig provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CreateRealtimeLogConfig(ctx context.Context, params *cloudfront.CreateRealtimeLogConfigInput, optFns ...func(*cloudfront.Options)) (*cloudfront.CreateRealtimeLogConfigOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateRealtimeLogConfig")
	}

	var r0 *cloudfront.CreateRealtimeLogConfigOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *cloudfront.CreateRealtimeLogConfigInput, ...func(*cloudfront.Options)) (*cloudfront.CreateRealtimeLogConfigOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *cloudfront.CreateRealtimeLogConfigInput, ...func(*cloudfront.Options)) *cloudfront.CreateRealtimeLogConfigOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cloudfront.CreateRealtimeLogConfigOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *cloudfront.CreateRealtimeLogConfigInput, ...func(*cloudfront.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateResponseHeadersPolicy provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CreateResponseHeadersPolicy(ctx context.Context, params *cloudfront.CreateResponseHeadersPolicyInput, optFns ...func(*cloudfront.Options)) (*cloudfront.CreateResponseHeadersPolicyOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateResponseHeadersPolicy")
	}

	var r0 *cloudfront.CreateResponseHeadersPolicyOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *cloudfront.CreateResponseHeadersPolicyInput, ...func(*cloudfront.Options)) (*cloudfront.CreateResponseHeadersPolicyOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *cloudfront.CreateResponseHeadersPolicyInput, ...func(*cloudfront.Options)) *cloudfront.CreateResponseHeadersPolicyOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cloudfront.CreateResponseHeadersPolicyOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *cloudfront.CreateResponseHeadersPolicyInput, ...func(*cloudfront.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateStreamingDistribution provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CreateStreamingDistribution(ctx context.Context, params *cloudfront.CreateStreamingDistributionInput, optFns ...func(*cloudfront.Options)) (*cloudfront.CreateStreamingDistributionOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateStreamingDistribution")
	}

	var r0 *cloudfront.CreateStreamingDistributionOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *cloudfront.CreateStreamingDistributionInput, ...func(*cloudfront.Options)) (*cloudfront.CreateStreamingDistributionOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *cloudfront.CreateStreamingDistributionInput, ...func(*cloudfront.Options)) *cloudfront.CreateStreamingDistributionOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cloudfront.CreateStreamingDistributionOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *cloudfront.CreateStreamingDistributionInput, ...func(*cloudfront.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateStreamingDistributionWithTags provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CreateStreamingDistributionWithTags(ctx context.Context, params *cloudfront.CreateStreamingDistributionWithTagsInput, optFns ...func(*cloudfront.Options)) (*cloudfront.CreateStreamingDistributionWithTagsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateStreamingDistributionWithTags")
	}

	var r0 *cloudfront.CreateStreamingDistributionWithTagsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *cloudfront.CreateStreamingDistributionWithTagsInput, ...func(*cloudfront.Options)) (*cloudfront.CreateStreamingDistributionWithTagsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *cloudfront.CreateStreamingDistributionWithTagsInput, ...func(*cloudfront.Options)) *cloudfront.CreateStreamingDistributionWithTagsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cloudfront.CreateStreamingDistributionWithTagsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *cloudfront.CreateStreamingDistributionWithTagsInput, ...func(*cloudfront.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteCachePolicy provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteCachePolicy(ctx context.Context, params *cloudfront.DeleteCachePolicyInput, optFns ...func(*cloudfront.Options)) (*cloudfront.DeleteCachePolicyOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteCachePolicy")
	}

	var r0 *cloudfront.DeleteCachePolicyOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *cloudfront.DeleteCachePolicyInput, ...func(*cloudfront.Options)) (*cloudfront.DeleteCachePolicyOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *cloudfront.DeleteCachePolicyInput, ...func(*cloudfront.Options)) *cloudfront.DeleteCachePolicyOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cloudfront.DeleteCachePolicyOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *cloudfront.DeleteCachePolicyInput, ...func(*cloudfront.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteCloudFrontOriginAccessIdentity provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteCloudFrontOriginAccessIdentity(ctx context.Context, params *cloudfront.DeleteCloudFrontOriginAccessIdentityInput, optFns ...func(*cloudfront.Options)) (*cloudfront.DeleteCloudFrontOriginAccessIdentityOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteCloudFrontOriginAccessIdentity")
	}

	var r0 *cloudfront.DeleteCloudFrontOriginAccessIdentityOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *cloudfront.DeleteCloudFrontOriginAccessIdentityInput, ...func(*cloudfront.Options)) (*cloudfront.DeleteCloudFrontOriginAccessIdentityOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *cloudfront.DeleteCloudFrontOriginAccessIdentityInput, ...func(*cloudfront.Options)) *cloudfront.DeleteCloudFrontOriginAccessIdentityOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cloudfront.DeleteCloudFrontOriginAccessIdentityOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *cloudfront.DeleteCloudFrontOriginAccessIdentityInput, ...func(*cloudfront.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteContinuousDeploymentPolicy provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteContinuousDeploymentPolicy(ctx context.Context, params *cloudfront.DeleteContinuousDeploymentPolicyInput, optFns ...func(*cloudfront.Options)) (*cloudfront.DeleteContinuousDeploymentPolicyOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteContinuousDeploymentPolicy")
	}

	var r0 *cloudfront.DeleteContinuousDeploymentPolicyOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *cloudfront.DeleteContinuousDeploymentPolicyInput, ...func(*cloudfront.Options)) (*cloudfront.DeleteContinuousDeploymentPolicyOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *cloudfront.DeleteContinuousDeploymentPolicyInput, ...func(*cloudfront.Options)) *cloudfront.DeleteContinuousDeploymentPolicyOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cloudfront.DeleteContinuousDeploymentPolicyOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *cloudfront.DeleteContinuousDeploymentPolicyInput, ...func(*cloudfront.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteDistribution provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteDistribution(ctx context.Context, params *cloudfront.DeleteDistributionInput, optFns ...func(*cloudfront.Options)) (*cloudfront.DeleteDistributionOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteDistribution")
	}

	var r0 *cloudfront.DeleteDistributionOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *cloudfront.DeleteDistributionInput, ...func(*cloudfront.Options)) (*cloudfront.DeleteDistributionOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *cloudfront.DeleteDistributionInput, ...func(*cloudfront.Options)) *cloudfront.DeleteDistributionOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cloudfront.DeleteDistributionOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *cloudfront.DeleteDistributionInput, ...func(*cloudfront.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteFieldLevelEncryptionConfig provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteFieldLevelEncryptionConfig(ctx context.Context, params *cloudfront.DeleteFieldLevelEncryptionConfigInput, optFns ...func(*cloudfront.Options)) (*cloudfront.DeleteFieldLevelEncryptionConfigOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteFieldLevelEncryptionConfig")
	}

	var r0 *cloudfront.DeleteFieldLevelEncryptionConfigOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *cloudfront.DeleteFieldLevelEncryptionConfigInput, ...func(*cloudfront.Options)) (*cloudfront.DeleteFieldLevelEncryptionConfigOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *cloudfront.DeleteFieldLevelEncryptionConfigInput, ...func(*cloudfront.Options)) *cloudfront.DeleteFieldLevelEncryptionConfigOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cloudfront.DeleteFieldLevelEncryptionConfigOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *cloudfront.DeleteFieldLevelEncryptionConfigInput, ...func(*cloudfront.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteFieldLevelEncryptionProfile provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteFieldLevelEncryptionProfile(ctx context.Context, params *cloudfront.DeleteFieldLevelEncryptionProfileInput, optFns ...func(*cloudfront.Options)) (*cloudfront.DeleteFieldLevelEncryptionProfileOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteFieldLevelEncryptionProfile")
	}

	var r0 *cloudfront.DeleteFieldLevelEncryptionProfileOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *cloudfront.DeleteFieldLevelEncryptionProfileInput, ...func(*cloudfront.Options)) (*cloudfront.DeleteFieldLevelEncryptionProfileOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *cloudfront.DeleteFieldLevelEncryptionProfileInput, ...func(*cloudfront.Options)) *cloudfront.DeleteFieldLevelEncryptionProfileOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cloudfront.DeleteFieldLevelEncryptionProfileOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *cloudfront.DeleteFieldLevelEncryptionProfileInput, ...func(*cloudfront.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteFunction provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteFunction(ctx context.Context, params *cloudfront.DeleteFunctionInput, optFns ...func(*cloudfront.Options)) (*cloudfront.DeleteFunctionOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteFunction")
	}

	var r0 *cloudfront.DeleteFunctionOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *cloudfront.DeleteFunctionInput, ...func(*cloudfront.Options)) (*cloudfront.DeleteFunctionOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *cloudfront.DeleteFunctionInput, ...func(*cloudfront.Options)) *cloudfront.DeleteFunctionOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cloudfront.DeleteFunctionOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *cloudfront.DeleteFunctionInput, ...func(*cloudfront.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteKeyGroup provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteKeyGroup(ctx context.Context, params *cloudfront.DeleteKeyGroupInput, optFns ...func(*cloudfront.Options)) (*cloudfront.DeleteKeyGroupOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteKeyGroup")
	}

	var r0 *cloudfront.DeleteKeyGroupOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *cloudfront.DeleteKeyGroupInput, ...func(*cloudfront.Options)) (*cloudfront.DeleteKeyGroupOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *cloudfront.DeleteKeyGroupInput, ...func(*cloudfront.Options)) *cloudfront.DeleteKeyGroupOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cloudfront.DeleteKeyGroupOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *cloudfront.DeleteKeyGroupInput, ...func(*cloudfront.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteKeyValueStore provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteKeyValueStore(ctx context.Context, params *cloudfront.DeleteKeyValueStoreInput, optFns ...func(*cloudfront.Options)) (*cloudfront.DeleteKeyValueStoreOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteKeyValueStore")
	}

	var r0 *cloudfront.DeleteKeyValueStoreOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *cloudfront.DeleteKeyValueStoreInput, ...func(*cloudfront.Options)) (*cloudfront.DeleteKeyValueStoreOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *cloudfront.DeleteKeyValueStoreInput, ...func(*cloudfront.Options)) *cloudfront.DeleteKeyValueStoreOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cloudfront.DeleteKeyValueStoreOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *cloudfront.DeleteKeyValueStoreInput, ...func(*cloudfront.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteMonitoringSubscription provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteMonitoringSubscription(ctx context.Context, params *cloudfront.DeleteMonitoringSubscriptionInput, optFns ...func(*cloudfront.Options)) (*cloudfront.DeleteMonitoringSubscriptionOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteMonitoringSubscription")
	}

	var r0 *cloudfront.DeleteMonitoringSubscriptionOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *cloudfront.DeleteMonitoringSubscriptionInput, ...func(*cloudfront.Options)) (*cloudfront.DeleteMonitoringSubscriptionOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *cloudfront.DeleteMonitoringSubscriptionInput, ...func(*cloudfront.Options)) *cloudfront.DeleteMonitoringSubscriptionOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cloudfront.DeleteMonitoringSubscriptionOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *cloudfront.DeleteMonitoringSubscriptionInput, ...func(*cloudfront.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteOriginAccessControl provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteOriginAccessControl(ctx context.Context, params *cloudfront.DeleteOriginAccessControlInput, optFns ...func(*cloudfront.Options)) (*cloudfront.DeleteOriginAccessControlOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteOriginAccessControl")
	}

	var r0 *cloudfront.DeleteOriginAccessControlOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *cloudfront.DeleteOriginAccessControlInput, ...func(*cloudfront.Options)) (*cloudfront.DeleteOriginAccessControlOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *cloudfront.DeleteOriginAccessControlInput, ...func(*cloudfront.Options)) *cloudfront.DeleteOriginAccessControlOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cloudfront.DeleteOriginAccessControlOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *cloudfront.DeleteOriginAccessControlInput, ...func(*cloudfront.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteOriginRequestPolicy provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteOriginRequestPolicy(ctx context.Context, params *cloudfront.DeleteOriginRequestPolicyInput, optFns ...func(*cloudfront.Options)) (*cloudfront.DeleteOriginRequestPolicyOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteOriginRequestPolicy")
	}

	var r0 *cloudfront.DeleteOriginRequestPolicyOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *cloudfront.DeleteOriginRequestPolicyInput, ...func(*cloudfront.Options)) (*cloudfront.DeleteOriginRequestPolicyOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *cloudfront.DeleteOriginRequestPolicyInput, ...func(*cloudfront.Options)) *cloudfront.DeleteOriginRequestPolicyOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cloudfront.DeleteOriginRequestPolicyOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *cloudfront.DeleteOriginRequestPolicyInput, ...func(*cloudfront.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeletePublicKey provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeletePublicKey(ctx context.Context, params *cloudfront.DeletePublicKeyInput, optFns ...func(*cloudfront.Options)) (*cloudfront.DeletePublicKeyOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeletePublicKey")
	}

	var r0 *cloudfront.DeletePublicKeyOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *cloudfront.DeletePublicKeyInput, ...func(*cloudfront.Options)) (*cloudfront.DeletePublicKeyOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *cloudfront.DeletePublicKeyInput, ...func(*cloudfront.Options)) *cloudfront.DeletePublicKeyOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cloudfront.DeletePublicKeyOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *cloudfront.DeletePublicKeyInput, ...func(*cloudfront.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteRealtimeLogConfig provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteRealtimeLogConfig(ctx context.Context, params *cloudfront.DeleteRealtimeLogConfigInput, optFns ...func(*cloudfront.Options)) (*cloudfront.DeleteRealtimeLogConfigOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteRealtimeLogConfig")
	}

	var r0 *cloudfront.DeleteRealtimeLogConfigOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *cloudfront.DeleteRealtimeLogConfigInput, ...func(*cloudfront.Options)) (*cloudfront.DeleteRealtimeLogConfigOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *cloudfront.DeleteRealtimeLogConfigInput, ...func(*cloudfront.Options)) *cloudfront.DeleteRealtimeLogConfigOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cloudfront.DeleteRealtimeLogConfigOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *cloudfront.DeleteRealtimeLogConfigInput, ...func(*cloudfront.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteResponseHeadersPolicy provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteResponseHeadersPolicy(ctx context.Context, params *cloudfront.DeleteResponseHeadersPolicyInput, optFns ...func(*cloudfront.Options)) (*cloudfront.DeleteResponseHeadersPolicyOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteResponseHeadersPolicy")
	}

	var r0 *cloudfront.DeleteResponseHeadersPolicyOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *cloudfront.DeleteResponseHeadersPolicyInput, ...func(*cloudfront.Options)) (*cloudfront.DeleteResponseHeadersPolicyOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *cloudfront.DeleteResponseHeadersPolicyInput, ...func(*cloudfront.Options)) *cloudfront.DeleteResponseHeadersPolicyOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cloudfront.DeleteResponseHeadersPolicyOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *cloudfront.DeleteResponseHeadersPolicyInput, ...func(*cloudfront.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteStreamingDistribution provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteStreamingDistribution(ctx context.Context, params *cloudfront.DeleteStreamingDistributionInput, optFns ...func(*cloudfront.Options)) (*cloudfront.DeleteStreamingDistributionOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteStreamingDistribution")
	}

	var r0 *cloudfront.DeleteStreamingDistributionOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *cloudfront.DeleteStreamingDistributionInput, ...func(*cloudfront.Options)) (*cloudfront.DeleteStreamingDistributionOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *cloudfront.DeleteStreamingDistributionInput, ...func(*cloudfront.Options)) *cloudfront.DeleteStreamingDistributionOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cloudfront.DeleteStreamingDistributionOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *cloudfront.DeleteStreamingDistributionInput, ...func(*cloudfront.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeFunction provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DescribeFunction(ctx context.Context, params *cloudfront.DescribeFunctionInput, optFns ...func(*cloudfront.Options)) (*cloudfront.DescribeFunctionOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DescribeFunction")
	}

	var r0 *cloudfront.DescribeFunctionOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *cloudfront.DescribeFunctionInput, ...func(*cloudfront.Options)) (*cloudfront.DescribeFunctionOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *cloudfront.DescribeFunctionInput, ...func(*cloudfront.Options)) *cloudfront.DescribeFunctionOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cloudfront.DescribeFunctionOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *cloudfront.DescribeFunctionInput, ...func(*cloudfront.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeKeyValueStore provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DescribeKeyValueStore(ctx context.Context, params *cloudfront.DescribeKeyValueStoreInput, optFns ...func(*cloudfront.Options)) (*cloudfront.DescribeKeyValueStoreOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DescribeKeyValueStore")
	}

	var r0 *cloudfront.DescribeKeyValueStoreOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *cloudfront.DescribeKeyValueStoreInput, ...func(*cloudfront.Options)) (*cloudfront.DescribeKeyValueStoreOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *cloudfront.DescribeKeyValueStoreInput, ...func(*cloudfront.Options)) *cloudfront.DescribeKeyValueStoreOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cloudfront.DescribeKeyValueStoreOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *cloudfront.DescribeKeyValueStoreInput, ...func(*cloudfront.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetCachePolicy provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetCachePolicy(ctx context.Context, params *cloudfront.GetCachePolicyInput, optFns ...func(*cloudfront.Options)) (*cloudfront.GetCachePolicyOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetCachePolicy")
	}

	var r0 *cloudfront.GetCachePolicyOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *cloudfront.GetCachePolicyInput, ...func(*cloudfront.Options)) (*cloudfront.GetCachePolicyOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *cloudfront.GetCachePolicyInput, ...func(*cloudfront.Options)) *cloudfront.GetCachePolicyOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cloudfront.GetCachePolicyOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *cloudfront.GetCachePolicyInput, ...func(*cloudfront.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetCachePolicyConfig provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetCachePolicyConfig(ctx context.Context, params *cloudfront.GetCachePolicyConfigInput, optFns ...func(*cloudfront.Options)) (*cloudfront.GetCachePolicyConfigOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetCachePolicyConfig")
	}

	var r0 *cloudfront.GetCachePolicyConfigOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *cloudfront.GetCachePolicyConfigInput, ...func(*cloudfront.Options)) (*cloudfront.GetCachePolicyConfigOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *cloudfront.GetCachePolicyConfigInput, ...func(*cloudfront.Options)) *cloudfront.GetCachePolicyConfigOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cloudfront.GetCachePolicyConfigOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *cloudfront.GetCachePolicyConfigInput, ...func(*cloudfront.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetCloudFrontOriginAccessIdentity provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetCloudFrontOriginAccessIdentity(ctx context.Context, params *cloudfront.GetCloudFrontOriginAccessIdentityInput, optFns ...func(*cloudfront.Options)) (*cloudfront.GetCloudFrontOriginAccessIdentityOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetCloudFrontOriginAccessIdentity")
	}

	var r0 *cloudfront.GetCloudFrontOriginAccessIdentityOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *cloudfront.GetCloudFrontOriginAccessIdentityInput, ...func(*cloudfront.Options)) (*cloudfront.GetCloudFrontOriginAccessIdentityOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *cloudfront.GetCloudFrontOriginAccessIdentityInput, ...func(*cloudfront.Options)) *cloudfront.GetCloudFrontOriginAccessIdentityOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cloudfront.GetCloudFrontOriginAccessIdentityOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *cloudfront.GetCloudFrontOriginAccessIdentityInput, ...func(*cloudfront.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetCloudFrontOriginAccessIdentityConfig provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetCloudFrontOriginAccessIdentityConfig(ctx context.Context, params *cloudfront.GetCloudFrontOriginAccessIdentityConfigInput, optFns ...func(*cloudfront.Options)) (*cloudfront.GetCloudFrontOriginAccessIdentityConfigOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetCloudFrontOriginAccessIdentityConfig")
	}

	var r0 *cloudfront.GetCloudFrontOriginAccessIdentityConfigOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *cloudfront.GetCloudFrontOriginAccessIdentityConfigInput, ...func(*cloudfront.Options)) (*cloudfront.GetCloudFrontOriginAccessIdentityConfigOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *cloudfront.GetCloudFrontOriginAccessIdentityConfigInput, ...func(*cloudfront.Options)) *cloudfront.GetCloudFrontOriginAccessIdentityConfigOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cloudfront.GetCloudFrontOriginAccessIdentityConfigOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *cloudfront.GetCloudFrontOriginAccessIdentityConfigInput, ...func(*cloudfront.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetContinuousDeploymentPolicy provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetContinuousDeploymentPolicy(ctx context.Context, params *cloudfront.GetContinuousDeploymentPolicyInput, optFns ...func(*cloudfront.Options)) (*cloudfront.GetContinuousDeploymentPolicyOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetContinuousDeploymentPolicy")
	}

	var r0 *cloudfront.GetContinuousDeploymentPolicyOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *cloudfront.GetContinuousDeploymentPolicyInput, ...func(*cloudfront.Options)) (*cloudfront.GetContinuousDeploymentPolicyOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *cloudfront.GetContinuousDeploymentPolicyInput, ...func(*cloudfront.Options)) *cloudfront.GetContinuousDeploymentPolicyOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cloudfront.GetContinuousDeploymentPolicyOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *cloudfront.GetContinuousDeploymentPolicyInput, ...func(*cloudfront.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetContinuousDeploymentPolicyConfig provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetContinuousDeploymentPolicyConfig(ctx context.Context, params *cloudfront.GetContinuousDeploymentPolicyConfigInput, optFns ...func(*cloudfront.Options)) (*cloudfront.GetContinuousDeploymentPolicyConfigOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetContinuousDeploymentPolicyConfig")
	}

	var r0 *cloudfront.GetContinuousDeploymentPolicyConfigOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *cloudfront.GetContinuousDeploymentPolicyConfigInput, ...func(*cloudfront.Options)) (*cloudfront.GetContinuousDeploymentPolicyConfigOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *cloudfront.GetContinuousDeploymentPolicyConfigInput, ...func(*cloudfront.Options)) *cloudfront.GetContinuousDeploymentPolicyConfigOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cloudfront.GetContinuousDeploymentPolicyConfigOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *cloudfront.GetContinuousDeploymentPolicyConfigInput, ...func(*cloudfront.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetDistribution provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetDistribution(ctx context.Context, params *cloudfront.GetDistributionInput, optFns ...func(*cloudfront.Options)) (*cloudfront.GetDistributionOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetDistribution")
	}

	var r0 *cloudfront.GetDistributionOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *cloudfront.GetDistributionInput, ...func(*cloudfront.Options)) (*cloudfront.GetDistributionOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *cloudfront.GetDistributionInput, ...func(*cloudfront.Options)) *cloudfront.GetDistributionOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cloudfront.GetDistributionOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *cloudfront.GetDistributionInput, ...func(*cloudfront.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetDistributionConfig provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetDistributionConfig(ctx context.Context, params *cloudfront.GetDistributionConfigInput, optFns ...func(*cloudfront.Options)) (*cloudfront.GetDistributionConfigOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetDistributionConfig")
	}

	var r0 *cloudfront.GetDistributionConfigOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *cloudfront.GetDistributionConfigInput, ...func(*cloudfront.Options)) (*cloudfront.GetDistributionConfigOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *cloudfront.GetDistributionConfigInput, ...func(*cloudfront.Options)) *cloudfront.GetDistributionConfigOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cloudfront.GetDistributionConfigOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *cloudfront.GetDistributionConfigInput, ...func(*cloudfront.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetFieldLevelEncryption provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetFieldLevelEncryption(ctx context.Context, params *cloudfront.GetFieldLevelEncryptionInput, optFns ...func(*cloudfront.Options)) (*cloudfront.GetFieldLevelEncryptionOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetFieldLevelEncryption")
	}

	var r0 *cloudfront.GetFieldLevelEncryptionOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *cloudfront.GetFieldLevelEncryptionInput, ...func(*cloudfront.Options)) (*cloudfront.GetFieldLevelEncryptionOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *cloudfront.GetFieldLevelEncryptionInput, ...func(*cloudfront.Options)) *cloudfront.GetFieldLevelEncryptionOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cloudfront.GetFieldLevelEncryptionOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *cloudfront.GetFieldLevelEncryptionInput, ...func(*cloudfront.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetFieldLevelEncryptionConfig provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetFieldLevelEncryptionConfig(ctx context.Context, params *cloudfront.GetFieldLevelEncryptionConfigInput, optFns ...func(*cloudfront.Options)) (*cloudfront.GetFieldLevelEncryptionConfigOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetFieldLevelEncryptionConfig")
	}

	var r0 *cloudfront.GetFieldLevelEncryptionConfigOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *cloudfront.GetFieldLevelEncryptionConfigInput, ...func(*cloudfront.Options)) (*cloudfront.GetFieldLevelEncryptionConfigOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *cloudfront.GetFieldLevelEncryptionConfigInput, ...func(*cloudfront.Options)) *cloudfront.GetFieldLevelEncryptionConfigOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cloudfront.GetFieldLevelEncryptionConfigOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *cloudfront.GetFieldLevelEncryptionConfigInput, ...func(*cloudfront.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetFieldLevelEncryptionProfile provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetFieldLevelEncryptionProfile(ctx context.Context, params *cloudfront.GetFieldLevelEncryptionProfileInput, optFns ...func(*cloudfront.Options)) (*cloudfront.GetFieldLevelEncryptionProfileOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetFieldLevelEncryptionProfile")
	}

	var r0 *cloudfront.GetFieldLevelEncryptionProfileOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *cloudfront.GetFieldLevelEncryptionProfileInput, ...func(*cloudfront.Options)) (*cloudfront.GetFieldLevelEncryptionProfileOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *cloudfront.GetFieldLevelEncryptionProfileInput, ...func(*cloudfront.Options)) *cloudfront.GetFieldLevelEncryptionProfileOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cloudfront.GetFieldLevelEncryptionProfileOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *cloudfront.GetFieldLevelEncryptionProfileInput, ...func(*cloudfront.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetFieldLevelEncryptionProfileConfig provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetFieldLevelEncryptionProfileConfig(ctx context.Context, params *cloudfront.GetFieldLevelEncryptionProfileConfigInput, optFns ...func(*cloudfront.Options)) (*cloudfront.GetFieldLevelEncryptionProfileConfigOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetFieldLevelEncryptionProfileConfig")
	}

	var r0 *cloudfront.GetFieldLevelEncryptionProfileConfigOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *cloudfront.GetFieldLevelEncryptionProfileConfigInput, ...func(*cloudfront.Options)) (*cloudfront.GetFieldLevelEncryptionProfileConfigOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *cloudfront.GetFieldLevelEncryptionProfileConfigInput, ...func(*cloudfront.Options)) *cloudfront.GetFieldLevelEncryptionProfileConfigOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cloudfront.GetFieldLevelEncryptionProfileConfigOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *cloudfront.GetFieldLevelEncryptionProfileConfigInput, ...func(*cloudfront.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetFunction provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetFunction(ctx context.Context, params *cloudfront.GetFunctionInput, optFns ...func(*cloudfront.Options)) (*cloudfront.GetFunctionOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetFunction")
	}

	var r0 *cloudfront.GetFunctionOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *cloudfront.GetFunctionInput, ...func(*cloudfront.Options)) (*cloudfront.GetFunctionOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *cloudfront.GetFunctionInput, ...func(*cloudfront.Options)) *cloudfront.GetFunctionOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cloudfront.GetFunctionOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *cloudfront.GetFunctionInput, ...func(*cloudfront.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetInvalidation provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetInvalidation(ctx context.Context, params *cloudfront.GetInvalidationInput, optFns ...func(*cloudfront.Options)) (*cloudfront.GetInvalidationOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetInvalidation")
	}

	var r0 *cloudfront.GetInvalidationOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *cloudfront.GetInvalidationInput, ...func(*cloudfront.Options)) (*cloudfront.GetInvalidationOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *cloudfront.GetInvalidationInput, ...func(*cloudfront.Options)) *cloudfront.GetInvalidationOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cloudfront.GetInvalidationOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *cloudfront.GetInvalidationInput, ...func(*cloudfront.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetKeyGroup provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetKeyGroup(ctx context.Context, params *cloudfront.GetKeyGroupInput, optFns ...func(*cloudfront.Options)) (*cloudfront.GetKeyGroupOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetKeyGroup")
	}

	var r0 *cloudfront.GetKeyGroupOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *cloudfront.GetKeyGroupInput, ...func(*cloudfront.Options)) (*cloudfront.GetKeyGroupOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *cloudfront.GetKeyGroupInput, ...func(*cloudfront.Options)) *cloudfront.GetKeyGroupOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cloudfront.GetKeyGroupOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *cloudfront.GetKeyGroupInput, ...func(*cloudfront.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetKeyGroupConfig provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetKeyGroupConfig(ctx context.Context, params *cloudfront.GetKeyGroupConfigInput, optFns ...func(*cloudfront.Options)) (*cloudfront.GetKeyGroupConfigOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetKeyGroupConfig")
	}

	var r0 *cloudfront.GetKeyGroupConfigOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *cloudfront.GetKeyGroupConfigInput, ...func(*cloudfront.Options)) (*cloudfront.GetKeyGroupConfigOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *cloudfront.GetKeyGroupConfigInput, ...func(*cloudfront.Options)) *cloudfront.GetKeyGroupConfigOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cloudfront.GetKeyGroupConfigOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *cloudfront.GetKeyGroupConfigInput, ...func(*cloudfront.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetMonitoringSubscription provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetMonitoringSubscription(ctx context.Context, params *cloudfront.GetMonitoringSubscriptionInput, optFns ...func(*cloudfront.Options)) (*cloudfront.GetMonitoringSubscriptionOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetMonitoringSubscription")
	}

	var r0 *cloudfront.GetMonitoringSubscriptionOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *cloudfront.GetMonitoringSubscriptionInput, ...func(*cloudfront.Options)) (*cloudfront.GetMonitoringSubscriptionOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *cloudfront.GetMonitoringSubscriptionInput, ...func(*cloudfront.Options)) *cloudfront.GetMonitoringSubscriptionOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cloudfront.GetMonitoringSubscriptionOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *cloudfront.GetMonitoringSubscriptionInput, ...func(*cloudfront.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetOriginAccessControl provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetOriginAccessControl(ctx context.Context, params *cloudfront.GetOriginAccessControlInput, optFns ...func(*cloudfront.Options)) (*cloudfront.GetOriginAccessControlOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetOriginAccessControl")
	}

	var r0 *cloudfront.GetOriginAccessControlOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *cloudfront.GetOriginAccessControlInput, ...func(*cloudfront.Options)) (*cloudfront.GetOriginAccessControlOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *cloudfront.GetOriginAccessControlInput, ...func(*cloudfront.Options)) *cloudfront.GetOriginAccessControlOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cloudfront.GetOriginAccessControlOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *cloudfront.GetOriginAccessControlInput, ...func(*cloudfront.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetOriginAccessControlConfig provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetOriginAccessControlConfig(ctx context.Context, params *cloudfront.GetOriginAccessControlConfigInput, optFns ...func(*cloudfront.Options)) (*cloudfront.GetOriginAccessControlConfigOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetOriginAccessControlConfig")
	}

	var r0 *cloudfront.GetOriginAccessControlConfigOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *cloudfront.GetOriginAccessControlConfigInput, ...func(*cloudfront.Options)) (*cloudfront.GetOriginAccessControlConfigOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *cloudfront.GetOriginAccessControlConfigInput, ...func(*cloudfront.Options)) *cloudfront.GetOriginAccessControlConfigOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cloudfront.GetOriginAccessControlConfigOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *cloudfront.GetOriginAccessControlConfigInput, ...func(*cloudfront.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetOriginRequestPolicy provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetOriginRequestPolicy(ctx context.Context, params *cloudfront.GetOriginRequestPolicyInput, optFns ...func(*cloudfront.Options)) (*cloudfront.GetOriginRequestPolicyOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetOriginRequestPolicy")
	}

	var r0 *cloudfront.GetOriginRequestPolicyOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *cloudfront.GetOriginRequestPolicyInput, ...func(*cloudfront.Options)) (*cloudfront.GetOriginRequestPolicyOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *cloudfront.GetOriginRequestPolicyInput, ...func(*cloudfront.Options)) *cloudfront.GetOriginRequestPolicyOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cloudfront.GetOriginRequestPolicyOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *cloudfront.GetOriginRequestPolicyInput, ...func(*cloudfront.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetOriginRequestPolicyConfig provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetOriginRequestPolicyConfig(ctx context.Context, params *cloudfront.GetOriginRequestPolicyConfigInput, optFns ...func(*cloudfront.Options)) (*cloudfront.GetOriginRequestPolicyConfigOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetOriginRequestPolicyConfig")
	}

	var r0 *cloudfront.GetOriginRequestPolicyConfigOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *cloudfront.GetOriginRequestPolicyConfigInput, ...func(*cloudfront.Options)) (*cloudfront.GetOriginRequestPolicyConfigOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *cloudfront.GetOriginRequestPolicyConfigInput, ...func(*cloudfront.Options)) *cloudfront.GetOriginRequestPolicyConfigOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cloudfront.GetOriginRequestPolicyConfigOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *cloudfront.GetOriginRequestPolicyConfigInput, ...func(*cloudfront.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetPublicKey provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetPublicKey(ctx context.Context, params *cloudfront.GetPublicKeyInput, optFns ...func(*cloudfront.Options)) (*cloudfront.GetPublicKeyOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetPublicKey")
	}

	var r0 *cloudfront.GetPublicKeyOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *cloudfront.GetPublicKeyInput, ...func(*cloudfront.Options)) (*cloudfront.GetPublicKeyOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *cloudfront.GetPublicKeyInput, ...func(*cloudfront.Options)) *cloudfront.GetPublicKeyOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cloudfront.GetPublicKeyOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *cloudfront.GetPublicKeyInput, ...func(*cloudfront.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetPublicKeyConfig provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetPublicKeyConfig(ctx context.Context, params *cloudfront.GetPublicKeyConfigInput, optFns ...func(*cloudfront.Options)) (*cloudfront.GetPublicKeyConfigOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetPublicKeyConfig")
	}

	var r0 *cloudfront.GetPublicKeyConfigOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *cloudfront.GetPublicKeyConfigInput, ...func(*cloudfront.Options)) (*cloudfront.GetPublicKeyConfigOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *cloudfront.GetPublicKeyConfigInput, ...func(*cloudfront.Options)) *cloudfront.GetPublicKeyConfigOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cloudfront.GetPublicKeyConfigOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *cloudfront.GetPublicKeyConfigInput, ...func(*cloudfront.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetRealtimeLogConfig provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetRealtimeLogConfig(ctx context.Context, params *cloudfront.GetRealtimeLogConfigInput, optFns ...func(*cloudfront.Options)) (*cloudfront.GetRealtimeLogConfigOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetRealtimeLogConfig")
	}

	var r0 *cloudfront.GetRealtimeLogConfigOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *cloudfront.GetRealtimeLogConfigInput, ...func(*cloudfront.Options)) (*cloudfront.GetRealtimeLogConfigOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *cloudfront.GetRealtimeLogConfigInput, ...func(*cloudfront.Options)) *cloudfront.GetRealtimeLogConfigOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cloudfront.GetRealtimeLogConfigOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *cloudfront.GetRealtimeLogConfigInput, ...func(*cloudfront.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetResponseHeadersPolicy provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetResponseHeadersPolicy(ctx context.Context, params *cloudfront.GetResponseHeadersPolicyInput, optFns ...func(*cloudfront.Options)) (*cloudfront.GetResponseHeadersPolicyOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetResponseHeadersPolicy")
	}

	var r0 *cloudfront.GetResponseHeadersPolicyOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *cloudfront.GetResponseHeadersPolicyInput, ...func(*cloudfront.Options)) (*cloudfront.GetResponseHeadersPolicyOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *cloudfront.GetResponseHeadersPolicyInput, ...func(*cloudfront.Options)) *cloudfront.GetResponseHeadersPolicyOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cloudfront.GetResponseHeadersPolicyOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *cloudfront.GetResponseHeadersPolicyInput, ...func(*cloudfront.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetResponseHeadersPolicyConfig provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetResponseHeadersPolicyConfig(ctx context.Context, params *cloudfront.GetResponseHeadersPolicyConfigInput, optFns ...func(*cloudfront.Options)) (*cloudfront.GetResponseHeadersPolicyConfigOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetResponseHeadersPolicyConfig")
	}

	var r0 *cloudfront.GetResponseHeadersPolicyConfigOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *cloudfront.GetResponseHeadersPolicyConfigInput, ...func(*cloudfront.Options)) (*cloudfront.GetResponseHeadersPolicyConfigOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *cloudfront.GetResponseHeadersPolicyConfigInput, ...func(*cloudfront.Options)) *cloudfront.GetResponseHeadersPolicyConfigOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cloudfront.GetResponseHeadersPolicyConfigOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *cloudfront.GetResponseHeadersPolicyConfigInput, ...func(*cloudfront.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetStreamingDistribution provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetStreamingDistribution(ctx context.Context, params *cloudfront.GetStreamingDistributionInput, optFns ...func(*cloudfront.Options)) (*cloudfront.GetStreamingDistributionOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetStreamingDistribution")
	}

	var r0 *cloudfront.GetStreamingDistributionOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *cloudfront.GetStreamingDistributionInput, ...func(*cloudfront.Options)) (*cloudfront.GetStreamingDistributionOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *cloudfront.GetStreamingDistributionInput, ...func(*cloudfront.Options)) *cloudfront.GetStreamingDistributionOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cloudfront.GetStreamingDistributionOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *cloudfront.GetStreamingDistributionInput, ...func(*cloudfront.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetStreamingDistributionConfig provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetStreamingDistributionConfig(ctx context.Context, params *cloudfront.GetStreamingDistributionConfigInput, optFns ...func(*cloudfront.Options)) (*cloudfront.GetStreamingDistributionConfigOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetStreamingDistributionConfig")
	}

	var r0 *cloudfront.GetStreamingDistributionConfigOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *cloudfront.GetStreamingDistributionConfigInput, ...func(*cloudfront.Options)) (*cloudfront.GetStreamingDistributionConfigOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *cloudfront.GetStreamingDistributionConfigInput, ...func(*cloudfront.Options)) *cloudfront.GetStreamingDistributionConfigOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cloudfront.GetStreamingDistributionConfigOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *cloudfront.GetStreamingDistributionConfigInput, ...func(*cloudfront.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListCachePolicies provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListCachePolicies(ctx context.Context, params *cloudfront.ListCachePoliciesInput, optFns ...func(*cloudfront.Options)) (*cloudfront.ListCachePoliciesOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListCachePolicies")
	}

	var r0 *cloudfront.ListCachePoliciesOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *cloudfront.ListCachePoliciesInput, ...func(*cloudfront.Options)) (*cloudfront.ListCachePoliciesOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *cloudfront.ListCachePoliciesInput, ...func(*cloudfront.Options)) *cloudfront.ListCachePoliciesOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cloudfront.ListCachePoliciesOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *cloudfront.ListCachePoliciesInput, ...func(*cloudfront.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListCloudFrontOriginAccessIdentities provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListCloudFrontOriginAccessIdentities(ctx context.Context, params *cloudfront.ListCloudFrontOriginAccessIdentitiesInput, optFns ...func(*cloudfront.Options)) (*cloudfront.ListCloudFrontOriginAccessIdentitiesOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListCloudFrontOriginAccessIdentities")
	}

	var r0 *cloudfront.ListCloudFrontOriginAccessIdentitiesOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *cloudfront.ListCloudFrontOriginAccessIdentitiesInput, ...func(*cloudfront.Options)) (*cloudfront.ListCloudFrontOriginAccessIdentitiesOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *cloudfront.ListCloudFrontOriginAccessIdentitiesInput, ...func(*cloudfront.Options)) *cloudfront.ListCloudFrontOriginAccessIdentitiesOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cloudfront.ListCloudFrontOriginAccessIdentitiesOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *cloudfront.ListCloudFrontOriginAccessIdentitiesInput, ...func(*cloudfront.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListConflictingAliases provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListConflictingAliases(ctx context.Context, params *cloudfront.ListConflictingAliasesInput, optFns ...func(*cloudfront.Options)) (*cloudfront.ListConflictingAliasesOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListConflictingAliases")
	}

	var r0 *cloudfront.ListConflictingAliasesOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *cloudfront.ListConflictingAliasesInput, ...func(*cloudfront.Options)) (*cloudfront.ListConflictingAliasesOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *cloudfront.ListConflictingAliasesInput, ...func(*cloudfront.Options)) *cloudfront.ListConflictingAliasesOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cloudfront.ListConflictingAliasesOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *cloudfront.ListConflictingAliasesInput, ...func(*cloudfront.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListContinuousDeploymentPolicies provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListContinuousDeploymentPolicies(ctx context.Context, params *cloudfront.ListContinuousDeploymentPoliciesInput, optFns ...func(*cloudfront.Options)) (*cloudfront.ListContinuousDeploymentPoliciesOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListContinuousDeploymentPolicies")
	}

	var r0 *cloudfront.ListContinuousDeploymentPoliciesOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *cloudfront.ListContinuousDeploymentPoliciesInput, ...func(*cloudfront.Options)) (*cloudfront.ListContinuousDeploymentPoliciesOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *cloudfront.ListContinuousDeploymentPoliciesInput, ...func(*cloudfront.Options)) *cloudfront.ListContinuousDeploymentPoliciesOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cloudfront.ListContinuousDeploymentPoliciesOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *cloudfront.ListContinuousDeploymentPoliciesInput, ...func(*cloudfront.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListDistributions provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListDistributions(ctx context.Context, params *cloudfront.ListDistributionsInput, optFns ...func(*cloudfront.Options)) (*cloudfront.ListDistributionsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListDistributions")
	}

	var r0 *cloudfront.ListDistributionsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *cloudfront.ListDistributionsInput, ...func(*cloudfront.Options)) (*cloudfront.ListDistributionsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *cloudfront.ListDistributionsInput, ...func(*cloudfront.Options)) *cloudfront.ListDistributionsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cloudfront.ListDistributionsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *cloudfront.ListDistributionsInput, ...func(*cloudfront.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListDistributionsByCachePolicyId provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListDistributionsByCachePolicyId(ctx context.Context, params *cloudfront.ListDistributionsByCachePolicyIdInput, optFns ...func(*cloudfront.Options)) (*cloudfront.ListDistributionsByCachePolicyIdOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListDistributionsByCachePolicyId")
	}

	var r0 *cloudfront.ListDistributionsByCachePolicyIdOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *cloudfront.ListDistributionsByCachePolicyIdInput, ...func(*cloudfront.Options)) (*cloudfront.ListDistributionsByCachePolicyIdOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *cloudfront.ListDistributionsByCachePolicyIdInput, ...func(*cloudfront.Options)) *cloudfront.ListDistributionsByCachePolicyIdOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cloudfront.ListDistributionsByCachePolicyIdOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *cloudfront.ListDistributionsByCachePolicyIdInput, ...func(*cloudfront.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListDistributionsByKeyGroup provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListDistributionsByKeyGroup(ctx context.Context, params *cloudfront.ListDistributionsByKeyGroupInput, optFns ...func(*cloudfront.Options)) (*cloudfront.ListDistributionsByKeyGroupOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListDistributionsByKeyGroup")
	}

	var r0 *cloudfront.ListDistributionsByKeyGroupOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *cloudfront.ListDistributionsByKeyGroupInput, ...func(*cloudfront.Options)) (*cloudfront.ListDistributionsByKeyGroupOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *cloudfront.ListDistributionsByKeyGroupInput, ...func(*cloudfront.Options)) *cloudfront.ListDistributionsByKeyGroupOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cloudfront.ListDistributionsByKeyGroupOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *cloudfront.ListDistributionsByKeyGroupInput, ...func(*cloudfront.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListDistributionsByOriginRequestPolicyId provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListDistributionsByOriginRequestPolicyId(ctx context.Context, params *cloudfront.ListDistributionsByOriginRequestPolicyIdInput, optFns ...func(*cloudfront.Options)) (*cloudfront.ListDistributionsByOriginRequestPolicyIdOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListDistributionsByOriginRequestPolicyId")
	}

	var r0 *cloudfront.ListDistributionsByOriginRequestPolicyIdOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *cloudfront.ListDistributionsByOriginRequestPolicyIdInput, ...func(*cloudfront.Options)) (*cloudfront.ListDistributionsByOriginRequestPolicyIdOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *cloudfront.ListDistributionsByOriginRequestPolicyIdInput, ...func(*cloudfront.Options)) *cloudfront.ListDistributionsByOriginRequestPolicyIdOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cloudfront.ListDistributionsByOriginRequestPolicyIdOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *cloudfront.ListDistributionsByOriginRequestPolicyIdInput, ...func(*cloudfront.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListDistributionsByRealtimeLogConfig provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListDistributionsByRealtimeLogConfig(ctx context.Context, params *cloudfront.ListDistributionsByRealtimeLogConfigInput, optFns ...func(*cloudfront.Options)) (*cloudfront.ListDistributionsByRealtimeLogConfigOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListDistributionsByRealtimeLogConfig")
	}

	var r0 *cloudfront.ListDistributionsByRealtimeLogConfigOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *cloudfront.ListDistributionsByRealtimeLogConfigInput, ...func(*cloudfront.Options)) (*cloudfront.ListDistributionsByRealtimeLogConfigOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *cloudfront.ListDistributionsByRealtimeLogConfigInput, ...func(*cloudfront.Options)) *cloudfront.ListDistributionsByRealtimeLogConfigOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cloudfront.ListDistributionsByRealtimeLogConfigOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *cloudfront.ListDistributionsByRealtimeLogConfigInput, ...func(*cloudfront.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListDistributionsByResponseHeadersPolicyId provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListDistributionsByResponseHeadersPolicyId(ctx context.Context, params *cloudfront.ListDistributionsByResponseHeadersPolicyIdInput, optFns ...func(*cloudfront.Options)) (*cloudfront.ListDistributionsByResponseHeadersPolicyIdOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListDistributionsByResponseHeadersPolicyId")
	}

	var r0 *cloudfront.ListDistributionsByResponseHeadersPolicyIdOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *cloudfront.ListDistributionsByResponseHeadersPolicyIdInput, ...func(*cloudfront.Options)) (*cloudfront.ListDistributionsByResponseHeadersPolicyIdOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *cloudfront.ListDistributionsByResponseHeadersPolicyIdInput, ...func(*cloudfront.Options)) *cloudfront.ListDistributionsByResponseHeadersPolicyIdOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cloudfront.ListDistributionsByResponseHeadersPolicyIdOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *cloudfront.ListDistributionsByResponseHeadersPolicyIdInput, ...func(*cloudfront.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListDistributionsByWebACLId provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListDistributionsByWebACLId(ctx context.Context, params *cloudfront.ListDistributionsByWebACLIdInput, optFns ...func(*cloudfront.Options)) (*cloudfront.ListDistributionsByWebACLIdOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListDistributionsByWebACLId")
	}

	var r0 *cloudfront.ListDistributionsByWebACLIdOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *cloudfront.ListDistributionsByWebACLIdInput, ...func(*cloudfront.Options)) (*cloudfront.ListDistributionsByWebACLIdOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *cloudfront.ListDistributionsByWebACLIdInput, ...func(*cloudfront.Options)) *cloudfront.ListDistributionsByWebACLIdOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cloudfront.ListDistributionsByWebACLIdOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *cloudfront.ListDistributionsByWebACLIdInput, ...func(*cloudfront.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListFieldLevelEncryptionConfigs provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListFieldLevelEncryptionConfigs(ctx context.Context, params *cloudfront.ListFieldLevelEncryptionConfigsInput, optFns ...func(*cloudfront.Options)) (*cloudfront.ListFieldLevelEncryptionConfigsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListFieldLevelEncryptionConfigs")
	}

	var r0 *cloudfront.ListFieldLevelEncryptionConfigsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *cloudfront.ListFieldLevelEncryptionConfigsInput, ...func(*cloudfront.Options)) (*cloudfront.ListFieldLevelEncryptionConfigsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *cloudfront.ListFieldLevelEncryptionConfigsInput, ...func(*cloudfront.Options)) *cloudfront.ListFieldLevelEncryptionConfigsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cloudfront.ListFieldLevelEncryptionConfigsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *cloudfront.ListFieldLevelEncryptionConfigsInput, ...func(*cloudfront.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListFieldLevelEncryptionProfiles provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListFieldLevelEncryptionProfiles(ctx context.Context, params *cloudfront.ListFieldLevelEncryptionProfilesInput, optFns ...func(*cloudfront.Options)) (*cloudfront.ListFieldLevelEncryptionProfilesOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListFieldLevelEncryptionProfiles")
	}

	var r0 *cloudfront.ListFieldLevelEncryptionProfilesOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *cloudfront.ListFieldLevelEncryptionProfilesInput, ...func(*cloudfront.Options)) (*cloudfront.ListFieldLevelEncryptionProfilesOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *cloudfront.ListFieldLevelEncryptionProfilesInput, ...func(*cloudfront.Options)) *cloudfront.ListFieldLevelEncryptionProfilesOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cloudfront.ListFieldLevelEncryptionProfilesOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *cloudfront.ListFieldLevelEncryptionProfilesInput, ...func(*cloudfront.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListFunctions provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListFunctions(ctx context.Context, params *cloudfront.ListFunctionsInput, optFns ...func(*cloudfront.Options)) (*cloudfront.ListFunctionsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListFunctions")
	}

	var r0 *cloudfront.ListFunctionsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *cloudfront.ListFunctionsInput, ...func(*cloudfront.Options)) (*cloudfront.ListFunctionsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *cloudfront.ListFunctionsInput, ...func(*cloudfront.Options)) *cloudfront.ListFunctionsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cloudfront.ListFunctionsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *cloudfront.ListFunctionsInput, ...func(*cloudfront.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListInvalidations provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListInvalidations(ctx context.Context, params *cloudfront.ListInvalidationsInput, optFns ...func(*cloudfront.Options)) (*cloudfront.ListInvalidationsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListInvalidations")
	}

	var r0 *cloudfront.ListInvalidationsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *cloudfront.ListInvalidationsInput, ...func(*cloudfront.Options)) (*cloudfront.ListInvalidationsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *cloudfront.ListInvalidationsInput, ...func(*cloudfront.Options)) *cloudfront.ListInvalidationsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cloudfront.ListInvalidationsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *cloudfront.ListInvalidationsInput, ...func(*cloudfront.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListKeyGroups provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListKeyGroups(ctx context.Context, params *cloudfront.ListKeyGroupsInput, optFns ...func(*cloudfront.Options)) (*cloudfront.ListKeyGroupsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListKeyGroups")
	}

	var r0 *cloudfront.ListKeyGroupsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *cloudfront.ListKeyGroupsInput, ...func(*cloudfront.Options)) (*cloudfront.ListKeyGroupsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *cloudfront.ListKeyGroupsInput, ...func(*cloudfront.Options)) *cloudfront.ListKeyGroupsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cloudfront.ListKeyGroupsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *cloudfront.ListKeyGroupsInput, ...func(*cloudfront.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListKeyValueStores provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListKeyValueStores(ctx context.Context, params *cloudfront.ListKeyValueStoresInput, optFns ...func(*cloudfront.Options)) (*cloudfront.ListKeyValueStoresOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListKeyValueStores")
	}

	var r0 *cloudfront.ListKeyValueStoresOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *cloudfront.ListKeyValueStoresInput, ...func(*cloudfront.Options)) (*cloudfront.ListKeyValueStoresOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *cloudfront.ListKeyValueStoresInput, ...func(*cloudfront.Options)) *cloudfront.ListKeyValueStoresOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cloudfront.ListKeyValueStoresOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *cloudfront.ListKeyValueStoresInput, ...func(*cloudfront.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListOriginAccessControls provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListOriginAccessControls(ctx context.Context, params *cloudfront.ListOriginAccessControlsInput, optFns ...func(*cloudfront.Options)) (*cloudfront.ListOriginAccessControlsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListOriginAccessControls")
	}

	var r0 *cloudfront.ListOriginAccessControlsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *cloudfront.ListOriginAccessControlsInput, ...func(*cloudfront.Options)) (*cloudfront.ListOriginAccessControlsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *cloudfront.ListOriginAccessControlsInput, ...func(*cloudfront.Options)) *cloudfront.ListOriginAccessControlsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cloudfront.ListOriginAccessControlsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *cloudfront.ListOriginAccessControlsInput, ...func(*cloudfront.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListOriginRequestPolicies provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListOriginRequestPolicies(ctx context.Context, params *cloudfront.ListOriginRequestPoliciesInput, optFns ...func(*cloudfront.Options)) (*cloudfront.ListOriginRequestPoliciesOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListOriginRequestPolicies")
	}

	var r0 *cloudfront.ListOriginRequestPoliciesOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *cloudfront.ListOriginRequestPoliciesInput, ...func(*cloudfront.Options)) (*cloudfront.ListOriginRequestPoliciesOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *cloudfront.ListOriginRequestPoliciesInput, ...func(*cloudfront.Options)) *cloudfront.ListOriginRequestPoliciesOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cloudfront.ListOriginRequestPoliciesOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *cloudfront.ListOriginRequestPoliciesInput, ...func(*cloudfront.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListPublicKeys provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListPublicKeys(ctx context.Context, params *cloudfront.ListPublicKeysInput, optFns ...func(*cloudfront.Options)) (*cloudfront.ListPublicKeysOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListPublicKeys")
	}

	var r0 *cloudfront.ListPublicKeysOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *cloudfront.ListPublicKeysInput, ...func(*cloudfront.Options)) (*cloudfront.ListPublicKeysOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *cloudfront.ListPublicKeysInput, ...func(*cloudfront.Options)) *cloudfront.ListPublicKeysOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cloudfront.ListPublicKeysOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *cloudfront.ListPublicKeysInput, ...func(*cloudfront.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListRealtimeLogConfigs provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListRealtimeLogConfigs(ctx context.Context, params *cloudfront.ListRealtimeLogConfigsInput, optFns ...func(*cloudfront.Options)) (*cloudfront.ListRealtimeLogConfigsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListRealtimeLogConfigs")
	}

	var r0 *cloudfront.ListRealtimeLogConfigsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *cloudfront.ListRealtimeLogConfigsInput, ...func(*cloudfront.Options)) (*cloudfront.ListRealtimeLogConfigsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *cloudfront.ListRealtimeLogConfigsInput, ...func(*cloudfront.Options)) *cloudfront.ListRealtimeLogConfigsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cloudfront.ListRealtimeLogConfigsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *cloudfront.ListRealtimeLogConfigsInput, ...func(*cloudfront.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListResponseHeadersPolicies provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListResponseHeadersPolicies(ctx context.Context, params *cloudfront.ListResponseHeadersPoliciesInput, optFns ...func(*cloudfront.Options)) (*cloudfront.ListResponseHeadersPoliciesOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListResponseHeadersPolicies")
	}

	var r0 *cloudfront.ListResponseHeadersPoliciesOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *cloudfront.ListResponseHeadersPoliciesInput, ...func(*cloudfront.Options)) (*cloudfront.ListResponseHeadersPoliciesOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *cloudfront.ListResponseHeadersPoliciesInput, ...func(*cloudfront.Options)) *cloudfront.ListResponseHeadersPoliciesOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cloudfront.ListResponseHeadersPoliciesOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *cloudfront.ListResponseHeadersPoliciesInput, ...func(*cloudfront.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListStreamingDistributions provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListStreamingDistributions(ctx context.Context, params *cloudfront.ListStreamingDistributionsInput, optFns ...func(*cloudfront.Options)) (*cloudfront.ListStreamingDistributionsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListStreamingDistributions")
	}

	var r0 *cloudfront.ListStreamingDistributionsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *cloudfront.ListStreamingDistributionsInput, ...func(*cloudfront.Options)) (*cloudfront.ListStreamingDistributionsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *cloudfront.ListStreamingDistributionsInput, ...func(*cloudfront.Options)) *cloudfront.ListStreamingDistributionsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cloudfront.ListStreamingDistributionsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *cloudfront.ListStreamingDistributionsInput, ...func(*cloudfront.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListTagsForResource provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListTagsForResource(ctx context.Context, params *cloudfront.ListTagsForResourceInput, optFns ...func(*cloudfront.Options)) (*cloudfront.ListTagsForResourceOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListTagsForResource")
	}

	var r0 *cloudfront.ListTagsForResourceOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *cloudfront.ListTagsForResourceInput, ...func(*cloudfront.Options)) (*cloudfront.ListTagsForResourceOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *cloudfront.ListTagsForResourceInput, ...func(*cloudfront.Options)) *cloudfront.ListTagsForResourceOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cloudfront.ListTagsForResourceOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *cloudfront.ListTagsForResourceInput, ...func(*cloudfront.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Options provides a mock function with given fields:
func (_m *IClient) Options() cloudfront.Options {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Options")
	}

	var r0 cloudfront.Options
	if rf, ok := ret.Get(0).(func() cloudfront.Options); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(cloudfront.Options)
	}

	return r0
}

// PublishFunction provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) PublishFunction(ctx context.Context, params *cloudfront.PublishFunctionInput, optFns ...func(*cloudfront.Options)) (*cloudfront.PublishFunctionOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for PublishFunction")
	}

	var r0 *cloudfront.PublishFunctionOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *cloudfront.PublishFunctionInput, ...func(*cloudfront.Options)) (*cloudfront.PublishFunctionOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *cloudfront.PublishFunctionInput, ...func(*cloudfront.Options)) *cloudfront.PublishFunctionOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cloudfront.PublishFunctionOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *cloudfront.PublishFunctionInput, ...func(*cloudfront.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// TagResource provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) TagResource(ctx context.Context, params *cloudfront.TagResourceInput, optFns ...func(*cloudfront.Options)) (*cloudfront.TagResourceOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for TagResource")
	}

	var r0 *cloudfront.TagResourceOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *cloudfront.TagResourceInput, ...func(*cloudfront.Options)) (*cloudfront.TagResourceOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *cloudfront.TagResourceInput, ...func(*cloudfront.Options)) *cloudfront.TagResourceOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cloudfront.TagResourceOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *cloudfront.TagResourceInput, ...func(*cloudfront.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// TestFunction provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) TestFunction(ctx context.Context, params *cloudfront.TestFunctionInput, optFns ...func(*cloudfront.Options)) (*cloudfront.TestFunctionOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for TestFunction")
	}

	var r0 *cloudfront.TestFunctionOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *cloudfront.TestFunctionInput, ...func(*cloudfront.Options)) (*cloudfront.TestFunctionOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *cloudfront.TestFunctionInput, ...func(*cloudfront.Options)) *cloudfront.TestFunctionOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cloudfront.TestFunctionOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *cloudfront.TestFunctionInput, ...func(*cloudfront.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UntagResource provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UntagResource(ctx context.Context, params *cloudfront.UntagResourceInput, optFns ...func(*cloudfront.Options)) (*cloudfront.UntagResourceOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UntagResource")
	}

	var r0 *cloudfront.UntagResourceOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *cloudfront.UntagResourceInput, ...func(*cloudfront.Options)) (*cloudfront.UntagResourceOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *cloudfront.UntagResourceInput, ...func(*cloudfront.Options)) *cloudfront.UntagResourceOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cloudfront.UntagResourceOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *cloudfront.UntagResourceInput, ...func(*cloudfront.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateCachePolicy provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UpdateCachePolicy(ctx context.Context, params *cloudfront.UpdateCachePolicyInput, optFns ...func(*cloudfront.Options)) (*cloudfront.UpdateCachePolicyOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateCachePolicy")
	}

	var r0 *cloudfront.UpdateCachePolicyOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *cloudfront.UpdateCachePolicyInput, ...func(*cloudfront.Options)) (*cloudfront.UpdateCachePolicyOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *cloudfront.UpdateCachePolicyInput, ...func(*cloudfront.Options)) *cloudfront.UpdateCachePolicyOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cloudfront.UpdateCachePolicyOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *cloudfront.UpdateCachePolicyInput, ...func(*cloudfront.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateCloudFrontOriginAccessIdentity provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UpdateCloudFrontOriginAccessIdentity(ctx context.Context, params *cloudfront.UpdateCloudFrontOriginAccessIdentityInput, optFns ...func(*cloudfront.Options)) (*cloudfront.UpdateCloudFrontOriginAccessIdentityOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateCloudFrontOriginAccessIdentity")
	}

	var r0 *cloudfront.UpdateCloudFrontOriginAccessIdentityOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *cloudfront.UpdateCloudFrontOriginAccessIdentityInput, ...func(*cloudfront.Options)) (*cloudfront.UpdateCloudFrontOriginAccessIdentityOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *cloudfront.UpdateCloudFrontOriginAccessIdentityInput, ...func(*cloudfront.Options)) *cloudfront.UpdateCloudFrontOriginAccessIdentityOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cloudfront.UpdateCloudFrontOriginAccessIdentityOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *cloudfront.UpdateCloudFrontOriginAccessIdentityInput, ...func(*cloudfront.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateContinuousDeploymentPolicy provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UpdateContinuousDeploymentPolicy(ctx context.Context, params *cloudfront.UpdateContinuousDeploymentPolicyInput, optFns ...func(*cloudfront.Options)) (*cloudfront.UpdateContinuousDeploymentPolicyOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateContinuousDeploymentPolicy")
	}

	var r0 *cloudfront.UpdateContinuousDeploymentPolicyOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *cloudfront.UpdateContinuousDeploymentPolicyInput, ...func(*cloudfront.Options)) (*cloudfront.UpdateContinuousDeploymentPolicyOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *cloudfront.UpdateContinuousDeploymentPolicyInput, ...func(*cloudfront.Options)) *cloudfront.UpdateContinuousDeploymentPolicyOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cloudfront.UpdateContinuousDeploymentPolicyOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *cloudfront.UpdateContinuousDeploymentPolicyInput, ...func(*cloudfront.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateDistribution provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UpdateDistribution(ctx context.Context, params *cloudfront.UpdateDistributionInput, optFns ...func(*cloudfront.Options)) (*cloudfront.UpdateDistributionOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateDistribution")
	}

	var r0 *cloudfront.UpdateDistributionOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *cloudfront.UpdateDistributionInput, ...func(*cloudfront.Options)) (*cloudfront.UpdateDistributionOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *cloudfront.UpdateDistributionInput, ...func(*cloudfront.Options)) *cloudfront.UpdateDistributionOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cloudfront.UpdateDistributionOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *cloudfront.UpdateDistributionInput, ...func(*cloudfront.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateDistributionWithStagingConfig provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UpdateDistributionWithStagingConfig(ctx context.Context, params *cloudfront.UpdateDistributionWithStagingConfigInput, optFns ...func(*cloudfront.Options)) (*cloudfront.UpdateDistributionWithStagingConfigOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateDistributionWithStagingConfig")
	}

	var r0 *cloudfront.UpdateDistributionWithStagingConfigOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *cloudfront.UpdateDistributionWithStagingConfigInput, ...func(*cloudfront.Options)) (*cloudfront.UpdateDistributionWithStagingConfigOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *cloudfront.UpdateDistributionWithStagingConfigInput, ...func(*cloudfront.Options)) *cloudfront.UpdateDistributionWithStagingConfigOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cloudfront.UpdateDistributionWithStagingConfigOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *cloudfront.UpdateDistributionWithStagingConfigInput, ...func(*cloudfront.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateFieldLevelEncryptionConfig provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UpdateFieldLevelEncryptionConfig(ctx context.Context, params *cloudfront.UpdateFieldLevelEncryptionConfigInput, optFns ...func(*cloudfront.Options)) (*cloudfront.UpdateFieldLevelEncryptionConfigOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateFieldLevelEncryptionConfig")
	}

	var r0 *cloudfront.UpdateFieldLevelEncryptionConfigOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *cloudfront.UpdateFieldLevelEncryptionConfigInput, ...func(*cloudfront.Options)) (*cloudfront.UpdateFieldLevelEncryptionConfigOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *cloudfront.UpdateFieldLevelEncryptionConfigInput, ...func(*cloudfront.Options)) *cloudfront.UpdateFieldLevelEncryptionConfigOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cloudfront.UpdateFieldLevelEncryptionConfigOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *cloudfront.UpdateFieldLevelEncryptionConfigInput, ...func(*cloudfront.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateFieldLevelEncryptionProfile provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UpdateFieldLevelEncryptionProfile(ctx context.Context, params *cloudfront.UpdateFieldLevelEncryptionProfileInput, optFns ...func(*cloudfront.Options)) (*cloudfront.UpdateFieldLevelEncryptionProfileOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateFieldLevelEncryptionProfile")
	}

	var r0 *cloudfront.UpdateFieldLevelEncryptionProfileOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *cloudfront.UpdateFieldLevelEncryptionProfileInput, ...func(*cloudfront.Options)) (*cloudfront.UpdateFieldLevelEncryptionProfileOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *cloudfront.UpdateFieldLevelEncryptionProfileInput, ...func(*cloudfront.Options)) *cloudfront.UpdateFieldLevelEncryptionProfileOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cloudfront.UpdateFieldLevelEncryptionProfileOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *cloudfront.UpdateFieldLevelEncryptionProfileInput, ...func(*cloudfront.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateFunction provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UpdateFunction(ctx context.Context, params *cloudfront.UpdateFunctionInput, optFns ...func(*cloudfront.Options)) (*cloudfront.UpdateFunctionOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateFunction")
	}

	var r0 *cloudfront.UpdateFunctionOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *cloudfront.UpdateFunctionInput, ...func(*cloudfront.Options)) (*cloudfront.UpdateFunctionOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *cloudfront.UpdateFunctionInput, ...func(*cloudfront.Options)) *cloudfront.UpdateFunctionOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cloudfront.UpdateFunctionOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *cloudfront.UpdateFunctionInput, ...func(*cloudfront.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateKeyGroup provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UpdateKeyGroup(ctx context.Context, params *cloudfront.UpdateKeyGroupInput, optFns ...func(*cloudfront.Options)) (*cloudfront.UpdateKeyGroupOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateKeyGroup")
	}

	var r0 *cloudfront.UpdateKeyGroupOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *cloudfront.UpdateKeyGroupInput, ...func(*cloudfront.Options)) (*cloudfront.UpdateKeyGroupOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *cloudfront.UpdateKeyGroupInput, ...func(*cloudfront.Options)) *cloudfront.UpdateKeyGroupOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cloudfront.UpdateKeyGroupOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *cloudfront.UpdateKeyGroupInput, ...func(*cloudfront.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateKeyValueStore provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UpdateKeyValueStore(ctx context.Context, params *cloudfront.UpdateKeyValueStoreInput, optFns ...func(*cloudfront.Options)) (*cloudfront.UpdateKeyValueStoreOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateKeyValueStore")
	}

	var r0 *cloudfront.UpdateKeyValueStoreOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *cloudfront.UpdateKeyValueStoreInput, ...func(*cloudfront.Options)) (*cloudfront.UpdateKeyValueStoreOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *cloudfront.UpdateKeyValueStoreInput, ...func(*cloudfront.Options)) *cloudfront.UpdateKeyValueStoreOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cloudfront.UpdateKeyValueStoreOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *cloudfront.UpdateKeyValueStoreInput, ...func(*cloudfront.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateOriginAccessControl provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UpdateOriginAccessControl(ctx context.Context, params *cloudfront.UpdateOriginAccessControlInput, optFns ...func(*cloudfront.Options)) (*cloudfront.UpdateOriginAccessControlOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateOriginAccessControl")
	}

	var r0 *cloudfront.UpdateOriginAccessControlOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *cloudfront.UpdateOriginAccessControlInput, ...func(*cloudfront.Options)) (*cloudfront.UpdateOriginAccessControlOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *cloudfront.UpdateOriginAccessControlInput, ...func(*cloudfront.Options)) *cloudfront.UpdateOriginAccessControlOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cloudfront.UpdateOriginAccessControlOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *cloudfront.UpdateOriginAccessControlInput, ...func(*cloudfront.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateOriginRequestPolicy provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UpdateOriginRequestPolicy(ctx context.Context, params *cloudfront.UpdateOriginRequestPolicyInput, optFns ...func(*cloudfront.Options)) (*cloudfront.UpdateOriginRequestPolicyOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateOriginRequestPolicy")
	}

	var r0 *cloudfront.UpdateOriginRequestPolicyOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *cloudfront.UpdateOriginRequestPolicyInput, ...func(*cloudfront.Options)) (*cloudfront.UpdateOriginRequestPolicyOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *cloudfront.UpdateOriginRequestPolicyInput, ...func(*cloudfront.Options)) *cloudfront.UpdateOriginRequestPolicyOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cloudfront.UpdateOriginRequestPolicyOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *cloudfront.UpdateOriginRequestPolicyInput, ...func(*cloudfront.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdatePublicKey provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UpdatePublicKey(ctx context.Context, params *cloudfront.UpdatePublicKeyInput, optFns ...func(*cloudfront.Options)) (*cloudfront.UpdatePublicKeyOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdatePublicKey")
	}

	var r0 *cloudfront.UpdatePublicKeyOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *cloudfront.UpdatePublicKeyInput, ...func(*cloudfront.Options)) (*cloudfront.UpdatePublicKeyOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *cloudfront.UpdatePublicKeyInput, ...func(*cloudfront.Options)) *cloudfront.UpdatePublicKeyOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cloudfront.UpdatePublicKeyOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *cloudfront.UpdatePublicKeyInput, ...func(*cloudfront.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateRealtimeLogConfig provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UpdateRealtimeLogConfig(ctx context.Context, params *cloudfront.UpdateRealtimeLogConfigInput, optFns ...func(*cloudfront.Options)) (*cloudfront.UpdateRealtimeLogConfigOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateRealtimeLogConfig")
	}

	var r0 *cloudfront.UpdateRealtimeLogConfigOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *cloudfront.UpdateRealtimeLogConfigInput, ...func(*cloudfront.Options)) (*cloudfront.UpdateRealtimeLogConfigOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *cloudfront.UpdateRealtimeLogConfigInput, ...func(*cloudfront.Options)) *cloudfront.UpdateRealtimeLogConfigOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cloudfront.UpdateRealtimeLogConfigOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *cloudfront.UpdateRealtimeLogConfigInput, ...func(*cloudfront.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateResponseHeadersPolicy provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UpdateResponseHeadersPolicy(ctx context.Context, params *cloudfront.UpdateResponseHeadersPolicyInput, optFns ...func(*cloudfront.Options)) (*cloudfront.UpdateResponseHeadersPolicyOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateResponseHeadersPolicy")
	}

	var r0 *cloudfront.UpdateResponseHeadersPolicyOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *cloudfront.UpdateResponseHeadersPolicyInput, ...func(*cloudfront.Options)) (*cloudfront.UpdateResponseHeadersPolicyOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *cloudfront.UpdateResponseHeadersPolicyInput, ...func(*cloudfront.Options)) *cloudfront.UpdateResponseHeadersPolicyOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cloudfront.UpdateResponseHeadersPolicyOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *cloudfront.UpdateResponseHeadersPolicyInput, ...func(*cloudfront.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateStreamingDistribution provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UpdateStreamingDistribution(ctx context.Context, params *cloudfront.UpdateStreamingDistributionInput, optFns ...func(*cloudfront.Options)) (*cloudfront.UpdateStreamingDistributionOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateStreamingDistribution")
	}

	var r0 *cloudfront.UpdateStreamingDistributionOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *cloudfront.UpdateStreamingDistributionInput, ...func(*cloudfront.Options)) (*cloudfront.UpdateStreamingDistributionOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *cloudfront.UpdateStreamingDistributionInput, ...func(*cloudfront.Options)) *cloudfront.UpdateStreamingDistributionOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cloudfront.UpdateStreamingDistributionOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *cloudfront.UpdateStreamingDistributionInput, ...func(*cloudfront.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewIClient creates a new instance of IClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewIClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *IClient {
	mock := &IClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
