// Code generated by mockery v2.43.2. DO NOT EDIT.

package mocks

import (
	context "context"

	pinpointsmsvoice "github.com/aws/aws-sdk-go-v2/service/pinpointsmsvoice"
	mock "github.com/stretchr/testify/mock"
)

// IClient is an autogenerated mock type for the IClient type
type IClient struct {
	mock.Mock
}

// CreateConfigurationSet provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CreateConfigurationSet(ctx context.Context, params *pinpointsmsvoice.CreateConfigurationSetInput, optFns ...func(*pinpointsmsvoice.Options)) (*pinpointsmsvoice.CreateConfigurationSetOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateConfigurationSet")
	}

	var r0 *pinpointsmsvoice.CreateConfigurationSetOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *pinpointsmsvoice.CreateConfigurationSetInput, ...func(*pinpointsmsvoice.Options)) (*pinpointsmsvoice.CreateConfigurationSetOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *pinpointsmsvoice.CreateConfigurationSetInput, ...func(*pinpointsmsvoice.Options)) *pinpointsmsvoice.CreateConfigurationSetOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*pinpointsmsvoice.CreateConfigurationSetOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *pinpointsmsvoice.CreateConfigurationSetInput, ...func(*pinpointsmsvoice.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateConfigurationSetEventDestination provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CreateConfigurationSetEventDestination(ctx context.Context, params *pinpointsmsvoice.CreateConfigurationSetEventDestinationInput, optFns ...func(*pinpointsmsvoice.Options)) (*pinpointsmsvoice.CreateConfigurationSetEventDestinationOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateConfigurationSetEventDestination")
	}

	var r0 *pinpointsmsvoice.CreateConfigurationSetEventDestinationOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *pinpointsmsvoice.CreateConfigurationSetEventDestinationInput, ...func(*pinpointsmsvoice.Options)) (*pinpointsmsvoice.CreateConfigurationSetEventDestinationOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *pinpointsmsvoice.CreateConfigurationSetEventDestinationInput, ...func(*pinpointsmsvoice.Options)) *pinpointsmsvoice.CreateConfigurationSetEventDestinationOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*pinpointsmsvoice.CreateConfigurationSetEventDestinationOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *pinpointsmsvoice.CreateConfigurationSetEventDestinationInput, ...func(*pinpointsmsvoice.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteConfigurationSet provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteConfigurationSet(ctx context.Context, params *pinpointsmsvoice.DeleteConfigurationSetInput, optFns ...func(*pinpointsmsvoice.Options)) (*pinpointsmsvoice.DeleteConfigurationSetOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteConfigurationSet")
	}

	var r0 *pinpointsmsvoice.DeleteConfigurationSetOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *pinpointsmsvoice.DeleteConfigurationSetInput, ...func(*pinpointsmsvoice.Options)) (*pinpointsmsvoice.DeleteConfigurationSetOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *pinpointsmsvoice.DeleteConfigurationSetInput, ...func(*pinpointsmsvoice.Options)) *pinpointsmsvoice.DeleteConfigurationSetOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*pinpointsmsvoice.DeleteConfigurationSetOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *pinpointsmsvoice.DeleteConfigurationSetInput, ...func(*pinpointsmsvoice.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteConfigurationSetEventDestination provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteConfigurationSetEventDestination(ctx context.Context, params *pinpointsmsvoice.DeleteConfigurationSetEventDestinationInput, optFns ...func(*pinpointsmsvoice.Options)) (*pinpointsmsvoice.DeleteConfigurationSetEventDestinationOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteConfigurationSetEventDestination")
	}

	var r0 *pinpointsmsvoice.DeleteConfigurationSetEventDestinationOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *pinpointsmsvoice.DeleteConfigurationSetEventDestinationInput, ...func(*pinpointsmsvoice.Options)) (*pinpointsmsvoice.DeleteConfigurationSetEventDestinationOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *pinpointsmsvoice.DeleteConfigurationSetEventDestinationInput, ...func(*pinpointsmsvoice.Options)) *pinpointsmsvoice.DeleteConfigurationSetEventDestinationOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*pinpointsmsvoice.DeleteConfigurationSetEventDestinationOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *pinpointsmsvoice.DeleteConfigurationSetEventDestinationInput, ...func(*pinpointsmsvoice.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetConfigurationSetEventDestinations provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetConfigurationSetEventDestinations(ctx context.Context, params *pinpointsmsvoice.GetConfigurationSetEventDestinationsInput, optFns ...func(*pinpointsmsvoice.Options)) (*pinpointsmsvoice.GetConfigurationSetEventDestinationsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetConfigurationSetEventDestinations")
	}

	var r0 *pinpointsmsvoice.GetConfigurationSetEventDestinationsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *pinpointsmsvoice.GetConfigurationSetEventDestinationsInput, ...func(*pinpointsmsvoice.Options)) (*pinpointsmsvoice.GetConfigurationSetEventDestinationsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *pinpointsmsvoice.GetConfigurationSetEventDestinationsInput, ...func(*pinpointsmsvoice.Options)) *pinpointsmsvoice.GetConfigurationSetEventDestinationsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*pinpointsmsvoice.GetConfigurationSetEventDestinationsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *pinpointsmsvoice.GetConfigurationSetEventDestinationsInput, ...func(*pinpointsmsvoice.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListConfigurationSets provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListConfigurationSets(ctx context.Context, params *pinpointsmsvoice.ListConfigurationSetsInput, optFns ...func(*pinpointsmsvoice.Options)) (*pinpointsmsvoice.ListConfigurationSetsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListConfigurationSets")
	}

	var r0 *pinpointsmsvoice.ListConfigurationSetsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *pinpointsmsvoice.ListConfigurationSetsInput, ...func(*pinpointsmsvoice.Options)) (*pinpointsmsvoice.ListConfigurationSetsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *pinpointsmsvoice.ListConfigurationSetsInput, ...func(*pinpointsmsvoice.Options)) *pinpointsmsvoice.ListConfigurationSetsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*pinpointsmsvoice.ListConfigurationSetsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *pinpointsmsvoice.ListConfigurationSetsInput, ...func(*pinpointsmsvoice.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Options provides a mock function with given fields:
func (_m *IClient) Options() pinpointsmsvoice.Options {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Options")
	}

	var r0 pinpointsmsvoice.Options
	if rf, ok := ret.Get(0).(func() pinpointsmsvoice.Options); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(pinpointsmsvoice.Options)
	}

	return r0
}

// SendVoiceMessage provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) SendVoiceMessage(ctx context.Context, params *pinpointsmsvoice.SendVoiceMessageInput, optFns ...func(*pinpointsmsvoice.Options)) (*pinpointsmsvoice.SendVoiceMessageOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for SendVoiceMessage")
	}

	var r0 *pinpointsmsvoice.SendVoiceMessageOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *pinpointsmsvoice.SendVoiceMessageInput, ...func(*pinpointsmsvoice.Options)) (*pinpointsmsvoice.SendVoiceMessageOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *pinpointsmsvoice.SendVoiceMessageInput, ...func(*pinpointsmsvoice.Options)) *pinpointsmsvoice.SendVoiceMessageOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*pinpointsmsvoice.SendVoiceMessageOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *pinpointsmsvoice.SendVoiceMessageInput, ...func(*pinpointsmsvoice.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateConfigurationSetEventDestination provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UpdateConfigurationSetEventDestination(ctx context.Context, params *pinpointsmsvoice.UpdateConfigurationSetEventDestinationInput, optFns ...func(*pinpointsmsvoice.Options)) (*pinpointsmsvoice.UpdateConfigurationSetEventDestinationOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateConfigurationSetEventDestination")
	}

	var r0 *pinpointsmsvoice.UpdateConfigurationSetEventDestinationOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *pinpointsmsvoice.UpdateConfigurationSetEventDestinationInput, ...func(*pinpointsmsvoice.Options)) (*pinpointsmsvoice.UpdateConfigurationSetEventDestinationOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *pinpointsmsvoice.UpdateConfigurationSetEventDestinationInput, ...func(*pinpointsmsvoice.Options)) *pinpointsmsvoice.UpdateConfigurationSetEventDestinationOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*pinpointsmsvoice.UpdateConfigurationSetEventDestinationOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *pinpointsmsvoice.UpdateConfigurationSetEventDestinationInput, ...func(*pinpointsmsvoice.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewIClient creates a new instance of IClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewIClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *IClient {
	mock := &IClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
