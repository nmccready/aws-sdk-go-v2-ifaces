// Code generated by mockery v2.43.2. DO NOT EDIT.

package mocks

import (
	context "context"

	socialmessaging "github.com/aws/aws-sdk-go-v2/service/socialmessaging"
	mock "github.com/stretchr/testify/mock"
)

// IClient is an autogenerated mock type for the IClient type
type IClient struct {
	mock.Mock
}

// AssociateWhatsAppBusinessAccount provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) AssociateWhatsAppBusinessAccount(ctx context.Context, params *socialmessaging.AssociateWhatsAppBusinessAccountInput, optFns ...func(*socialmessaging.Options)) (*socialmessaging.AssociateWhatsAppBusinessAccountOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for AssociateWhatsAppBusinessAccount")
	}

	var r0 *socialmessaging.AssociateWhatsAppBusinessAccountOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *socialmessaging.AssociateWhatsAppBusinessAccountInput, ...func(*socialmessaging.Options)) (*socialmessaging.AssociateWhatsAppBusinessAccountOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *socialmessaging.AssociateWhatsAppBusinessAccountInput, ...func(*socialmessaging.Options)) *socialmessaging.AssociateWhatsAppBusinessAccountOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*socialmessaging.AssociateWhatsAppBusinessAccountOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *socialmessaging.AssociateWhatsAppBusinessAccountInput, ...func(*socialmessaging.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteWhatsAppMessageMedia provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteWhatsAppMessageMedia(ctx context.Context, params *socialmessaging.DeleteWhatsAppMessageMediaInput, optFns ...func(*socialmessaging.Options)) (*socialmessaging.DeleteWhatsAppMessageMediaOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteWhatsAppMessageMedia")
	}

	var r0 *socialmessaging.DeleteWhatsAppMessageMediaOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *socialmessaging.DeleteWhatsAppMessageMediaInput, ...func(*socialmessaging.Options)) (*socialmessaging.DeleteWhatsAppMessageMediaOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *socialmessaging.DeleteWhatsAppMessageMediaInput, ...func(*socialmessaging.Options)) *socialmessaging.DeleteWhatsAppMessageMediaOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*socialmessaging.DeleteWhatsAppMessageMediaOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *socialmessaging.DeleteWhatsAppMessageMediaInput, ...func(*socialmessaging.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DisassociateWhatsAppBusinessAccount provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DisassociateWhatsAppBusinessAccount(ctx context.Context, params *socialmessaging.DisassociateWhatsAppBusinessAccountInput, optFns ...func(*socialmessaging.Options)) (*socialmessaging.DisassociateWhatsAppBusinessAccountOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DisassociateWhatsAppBusinessAccount")
	}

	var r0 *socialmessaging.DisassociateWhatsAppBusinessAccountOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *socialmessaging.DisassociateWhatsAppBusinessAccountInput, ...func(*socialmessaging.Options)) (*socialmessaging.DisassociateWhatsAppBusinessAccountOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *socialmessaging.DisassociateWhatsAppBusinessAccountInput, ...func(*socialmessaging.Options)) *socialmessaging.DisassociateWhatsAppBusinessAccountOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*socialmessaging.DisassociateWhatsAppBusinessAccountOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *socialmessaging.DisassociateWhatsAppBusinessAccountInput, ...func(*socialmessaging.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetLinkedWhatsAppBusinessAccount provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetLinkedWhatsAppBusinessAccount(ctx context.Context, params *socialmessaging.GetLinkedWhatsAppBusinessAccountInput, optFns ...func(*socialmessaging.Options)) (*socialmessaging.GetLinkedWhatsAppBusinessAccountOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetLinkedWhatsAppBusinessAccount")
	}

	var r0 *socialmessaging.GetLinkedWhatsAppBusinessAccountOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *socialmessaging.GetLinkedWhatsAppBusinessAccountInput, ...func(*socialmessaging.Options)) (*socialmessaging.GetLinkedWhatsAppBusinessAccountOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *socialmessaging.GetLinkedWhatsAppBusinessAccountInput, ...func(*socialmessaging.Options)) *socialmessaging.GetLinkedWhatsAppBusinessAccountOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*socialmessaging.GetLinkedWhatsAppBusinessAccountOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *socialmessaging.GetLinkedWhatsAppBusinessAccountInput, ...func(*socialmessaging.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetLinkedWhatsAppBusinessAccountPhoneNumber provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetLinkedWhatsAppBusinessAccountPhoneNumber(ctx context.Context, params *socialmessaging.GetLinkedWhatsAppBusinessAccountPhoneNumberInput, optFns ...func(*socialmessaging.Options)) (*socialmessaging.GetLinkedWhatsAppBusinessAccountPhoneNumberOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetLinkedWhatsAppBusinessAccountPhoneNumber")
	}

	var r0 *socialmessaging.GetLinkedWhatsAppBusinessAccountPhoneNumberOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *socialmessaging.GetLinkedWhatsAppBusinessAccountPhoneNumberInput, ...func(*socialmessaging.Options)) (*socialmessaging.GetLinkedWhatsAppBusinessAccountPhoneNumberOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *socialmessaging.GetLinkedWhatsAppBusinessAccountPhoneNumberInput, ...func(*socialmessaging.Options)) *socialmessaging.GetLinkedWhatsAppBusinessAccountPhoneNumberOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*socialmessaging.GetLinkedWhatsAppBusinessAccountPhoneNumberOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *socialmessaging.GetLinkedWhatsAppBusinessAccountPhoneNumberInput, ...func(*socialmessaging.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetWhatsAppMessageMedia provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetWhatsAppMessageMedia(ctx context.Context, params *socialmessaging.GetWhatsAppMessageMediaInput, optFns ...func(*socialmessaging.Options)) (*socialmessaging.GetWhatsAppMessageMediaOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetWhatsAppMessageMedia")
	}

	var r0 *socialmessaging.GetWhatsAppMessageMediaOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *socialmessaging.GetWhatsAppMessageMediaInput, ...func(*socialmessaging.Options)) (*socialmessaging.GetWhatsAppMessageMediaOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *socialmessaging.GetWhatsAppMessageMediaInput, ...func(*socialmessaging.Options)) *socialmessaging.GetWhatsAppMessageMediaOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*socialmessaging.GetWhatsAppMessageMediaOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *socialmessaging.GetWhatsAppMessageMediaInput, ...func(*socialmessaging.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListLinkedWhatsAppBusinessAccounts provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListLinkedWhatsAppBusinessAccounts(ctx context.Context, params *socialmessaging.ListLinkedWhatsAppBusinessAccountsInput, optFns ...func(*socialmessaging.Options)) (*socialmessaging.ListLinkedWhatsAppBusinessAccountsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListLinkedWhatsAppBusinessAccounts")
	}

	var r0 *socialmessaging.ListLinkedWhatsAppBusinessAccountsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *socialmessaging.ListLinkedWhatsAppBusinessAccountsInput, ...func(*socialmessaging.Options)) (*socialmessaging.ListLinkedWhatsAppBusinessAccountsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *socialmessaging.ListLinkedWhatsAppBusinessAccountsInput, ...func(*socialmessaging.Options)) *socialmessaging.ListLinkedWhatsAppBusinessAccountsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*socialmessaging.ListLinkedWhatsAppBusinessAccountsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *socialmessaging.ListLinkedWhatsAppBusinessAccountsInput, ...func(*socialmessaging.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListTagsForResource provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListTagsForResource(ctx context.Context, params *socialmessaging.ListTagsForResourceInput, optFns ...func(*socialmessaging.Options)) (*socialmessaging.ListTagsForResourceOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListTagsForResource")
	}

	var r0 *socialmessaging.ListTagsForResourceOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *socialmessaging.ListTagsForResourceInput, ...func(*socialmessaging.Options)) (*socialmessaging.ListTagsForResourceOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *socialmessaging.ListTagsForResourceInput, ...func(*socialmessaging.Options)) *socialmessaging.ListTagsForResourceOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*socialmessaging.ListTagsForResourceOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *socialmessaging.ListTagsForResourceInput, ...func(*socialmessaging.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Options provides a mock function with given fields:
func (_m *IClient) Options() socialmessaging.Options {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Options")
	}

	var r0 socialmessaging.Options
	if rf, ok := ret.Get(0).(func() socialmessaging.Options); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(socialmessaging.Options)
	}

	return r0
}

// PostWhatsAppMessageMedia provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) PostWhatsAppMessageMedia(ctx context.Context, params *socialmessaging.PostWhatsAppMessageMediaInput, optFns ...func(*socialmessaging.Options)) (*socialmessaging.PostWhatsAppMessageMediaOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for PostWhatsAppMessageMedia")
	}

	var r0 *socialmessaging.PostWhatsAppMessageMediaOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *socialmessaging.PostWhatsAppMessageMediaInput, ...func(*socialmessaging.Options)) (*socialmessaging.PostWhatsAppMessageMediaOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *socialmessaging.PostWhatsAppMessageMediaInput, ...func(*socialmessaging.Options)) *socialmessaging.PostWhatsAppMessageMediaOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*socialmessaging.PostWhatsAppMessageMediaOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *socialmessaging.PostWhatsAppMessageMediaInput, ...func(*socialmessaging.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PutWhatsAppBusinessAccountEventDestinations provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) PutWhatsAppBusinessAccountEventDestinations(ctx context.Context, params *socialmessaging.PutWhatsAppBusinessAccountEventDestinationsInput, optFns ...func(*socialmessaging.Options)) (*socialmessaging.PutWhatsAppBusinessAccountEventDestinationsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for PutWhatsAppBusinessAccountEventDestinations")
	}

	var r0 *socialmessaging.PutWhatsAppBusinessAccountEventDestinationsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *socialmessaging.PutWhatsAppBusinessAccountEventDestinationsInput, ...func(*socialmessaging.Options)) (*socialmessaging.PutWhatsAppBusinessAccountEventDestinationsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *socialmessaging.PutWhatsAppBusinessAccountEventDestinationsInput, ...func(*socialmessaging.Options)) *socialmessaging.PutWhatsAppBusinessAccountEventDestinationsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*socialmessaging.PutWhatsAppBusinessAccountEventDestinationsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *socialmessaging.PutWhatsAppBusinessAccountEventDestinationsInput, ...func(*socialmessaging.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SendWhatsAppMessage provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) SendWhatsAppMessage(ctx context.Context, params *socialmessaging.SendWhatsAppMessageInput, optFns ...func(*socialmessaging.Options)) (*socialmessaging.SendWhatsAppMessageOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for SendWhatsAppMessage")
	}

	var r0 *socialmessaging.SendWhatsAppMessageOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *socialmessaging.SendWhatsAppMessageInput, ...func(*socialmessaging.Options)) (*socialmessaging.SendWhatsAppMessageOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *socialmessaging.SendWhatsAppMessageInput, ...func(*socialmessaging.Options)) *socialmessaging.SendWhatsAppMessageOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*socialmessaging.SendWhatsAppMessageOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *socialmessaging.SendWhatsAppMessageInput, ...func(*socialmessaging.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// TagResource provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) TagResource(ctx context.Context, params *socialmessaging.TagResourceInput, optFns ...func(*socialmessaging.Options)) (*socialmessaging.TagResourceOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for TagResource")
	}

	var r0 *socialmessaging.TagResourceOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *socialmessaging.TagResourceInput, ...func(*socialmessaging.Options)) (*socialmessaging.TagResourceOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *socialmessaging.TagResourceInput, ...func(*socialmessaging.Options)) *socialmessaging.TagResourceOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*socialmessaging.TagResourceOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *socialmessaging.TagResourceInput, ...func(*socialmessaging.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UntagResource provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UntagResource(ctx context.Context, params *socialmessaging.UntagResourceInput, optFns ...func(*socialmessaging.Options)) (*socialmessaging.UntagResourceOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UntagResource")
	}

	var r0 *socialmessaging.UntagResourceOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *socialmessaging.UntagResourceInput, ...func(*socialmessaging.Options)) (*socialmessaging.UntagResourceOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *socialmessaging.UntagResourceInput, ...func(*socialmessaging.Options)) *socialmessaging.UntagResourceOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*socialmessaging.UntagResourceOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *socialmessaging.UntagResourceInput, ...func(*socialmessaging.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewIClient creates a new instance of IClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewIClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *IClient {
	mock := &IClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
