// Code generated by mockery v2.39.2. DO NOT EDIT.

package mocks

import (
	context "context"

	costandusagereportservice "github.com/aws/aws-sdk-go-v2/service/costandusagereportservice"
	mock "github.com/stretchr/testify/mock"
)

// IClient is an autogenerated mock type for the IClient type
type IClient struct {
	mock.Mock
}

// DeleteReportDefinition provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteReportDefinition(ctx context.Context, params *costandusagereportservice.DeleteReportDefinitionInput, optFns ...func(*costandusagereportservice.Options)) (*costandusagereportservice.DeleteReportDefinitionOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteReportDefinition")
	}

	var r0 *costandusagereportservice.DeleteReportDefinitionOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *costandusagereportservice.DeleteReportDefinitionInput, ...func(*costandusagereportservice.Options)) (*costandusagereportservice.DeleteReportDefinitionOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *costandusagereportservice.DeleteReportDefinitionInput, ...func(*costandusagereportservice.Options)) *costandusagereportservice.DeleteReportDefinitionOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*costandusagereportservice.DeleteReportDefinitionOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *costandusagereportservice.DeleteReportDefinitionInput, ...func(*costandusagereportservice.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeReportDefinitions provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DescribeReportDefinitions(ctx context.Context, params *costandusagereportservice.DescribeReportDefinitionsInput, optFns ...func(*costandusagereportservice.Options)) (*costandusagereportservice.DescribeReportDefinitionsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DescribeReportDefinitions")
	}

	var r0 *costandusagereportservice.DescribeReportDefinitionsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *costandusagereportservice.DescribeReportDefinitionsInput, ...func(*costandusagereportservice.Options)) (*costandusagereportservice.DescribeReportDefinitionsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *costandusagereportservice.DescribeReportDefinitionsInput, ...func(*costandusagereportservice.Options)) *costandusagereportservice.DescribeReportDefinitionsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*costandusagereportservice.DescribeReportDefinitionsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *costandusagereportservice.DescribeReportDefinitionsInput, ...func(*costandusagereportservice.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListTagsForResource provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListTagsForResource(ctx context.Context, params *costandusagereportservice.ListTagsForResourceInput, optFns ...func(*costandusagereportservice.Options)) (*costandusagereportservice.ListTagsForResourceOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListTagsForResource")
	}

	var r0 *costandusagereportservice.ListTagsForResourceOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *costandusagereportservice.ListTagsForResourceInput, ...func(*costandusagereportservice.Options)) (*costandusagereportservice.ListTagsForResourceOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *costandusagereportservice.ListTagsForResourceInput, ...func(*costandusagereportservice.Options)) *costandusagereportservice.ListTagsForResourceOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*costandusagereportservice.ListTagsForResourceOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *costandusagereportservice.ListTagsForResourceInput, ...func(*costandusagereportservice.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ModifyReportDefinition provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ModifyReportDefinition(ctx context.Context, params *costandusagereportservice.ModifyReportDefinitionInput, optFns ...func(*costandusagereportservice.Options)) (*costandusagereportservice.ModifyReportDefinitionOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ModifyReportDefinition")
	}

	var r0 *costandusagereportservice.ModifyReportDefinitionOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *costandusagereportservice.ModifyReportDefinitionInput, ...func(*costandusagereportservice.Options)) (*costandusagereportservice.ModifyReportDefinitionOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *costandusagereportservice.ModifyReportDefinitionInput, ...func(*costandusagereportservice.Options)) *costandusagereportservice.ModifyReportDefinitionOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*costandusagereportservice.ModifyReportDefinitionOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *costandusagereportservice.ModifyReportDefinitionInput, ...func(*costandusagereportservice.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Options provides a mock function with given fields:
func (_m *IClient) Options() costandusagereportservice.Options {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Options")
	}

	var r0 costandusagereportservice.Options
	if rf, ok := ret.Get(0).(func() costandusagereportservice.Options); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(costandusagereportservice.Options)
	}

	return r0
}

// PutReportDefinition provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) PutReportDefinition(ctx context.Context, params *costandusagereportservice.PutReportDefinitionInput, optFns ...func(*costandusagereportservice.Options)) (*costandusagereportservice.PutReportDefinitionOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for PutReportDefinition")
	}

	var r0 *costandusagereportservice.PutReportDefinitionOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *costandusagereportservice.PutReportDefinitionInput, ...func(*costandusagereportservice.Options)) (*costandusagereportservice.PutReportDefinitionOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *costandusagereportservice.PutReportDefinitionInput, ...func(*costandusagereportservice.Options)) *costandusagereportservice.PutReportDefinitionOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*costandusagereportservice.PutReportDefinitionOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *costandusagereportservice.PutReportDefinitionInput, ...func(*costandusagereportservice.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// TagResource provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) TagResource(ctx context.Context, params *costandusagereportservice.TagResourceInput, optFns ...func(*costandusagereportservice.Options)) (*costandusagereportservice.TagResourceOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for TagResource")
	}

	var r0 *costandusagereportservice.TagResourceOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *costandusagereportservice.TagResourceInput, ...func(*costandusagereportservice.Options)) (*costandusagereportservice.TagResourceOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *costandusagereportservice.TagResourceInput, ...func(*costandusagereportservice.Options)) *costandusagereportservice.TagResourceOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*costandusagereportservice.TagResourceOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *costandusagereportservice.TagResourceInput, ...func(*costandusagereportservice.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UntagResource provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UntagResource(ctx context.Context, params *costandusagereportservice.UntagResourceInput, optFns ...func(*costandusagereportservice.Options)) (*costandusagereportservice.UntagResourceOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UntagResource")
	}

	var r0 *costandusagereportservice.UntagResourceOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *costandusagereportservice.UntagResourceInput, ...func(*costandusagereportservice.Options)) (*costandusagereportservice.UntagResourceOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *costandusagereportservice.UntagResourceInput, ...func(*costandusagereportservice.Options)) *costandusagereportservice.UntagResourceOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*costandusagereportservice.UntagResourceOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *costandusagereportservice.UntagResourceInput, ...func(*costandusagereportservice.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewIClient creates a new instance of IClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewIClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *IClient {
	mock := &IClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
