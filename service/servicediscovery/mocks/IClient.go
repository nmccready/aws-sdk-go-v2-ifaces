// Code generated by mockery v2.53.4. DO NOT EDIT.

package mocks

import (
	context "context"

	servicediscovery "github.com/aws/aws-sdk-go-v2/service/servicediscovery"
	mock "github.com/stretchr/testify/mock"
)

// IClient is an autogenerated mock type for the IClient type
type IClient struct {
	mock.Mock
}

// CreateHttpNamespace provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CreateHttpNamespace(ctx context.Context, params *servicediscovery.CreateHttpNamespaceInput, optFns ...func(*servicediscovery.Options)) (*servicediscovery.CreateHttpNamespaceOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateHttpNamespace")
	}

	var r0 *servicediscovery.CreateHttpNamespaceOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *servicediscovery.CreateHttpNamespaceInput, ...func(*servicediscovery.Options)) (*servicediscovery.CreateHttpNamespaceOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *servicediscovery.CreateHttpNamespaceInput, ...func(*servicediscovery.Options)) *servicediscovery.CreateHttpNamespaceOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*servicediscovery.CreateHttpNamespaceOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *servicediscovery.CreateHttpNamespaceInput, ...func(*servicediscovery.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreatePrivateDnsNamespace provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CreatePrivateDnsNamespace(ctx context.Context, params *servicediscovery.CreatePrivateDnsNamespaceInput, optFns ...func(*servicediscovery.Options)) (*servicediscovery.CreatePrivateDnsNamespaceOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreatePrivateDnsNamespace")
	}

	var r0 *servicediscovery.CreatePrivateDnsNamespaceOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *servicediscovery.CreatePrivateDnsNamespaceInput, ...func(*servicediscovery.Options)) (*servicediscovery.CreatePrivateDnsNamespaceOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *servicediscovery.CreatePrivateDnsNamespaceInput, ...func(*servicediscovery.Options)) *servicediscovery.CreatePrivateDnsNamespaceOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*servicediscovery.CreatePrivateDnsNamespaceOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *servicediscovery.CreatePrivateDnsNamespaceInput, ...func(*servicediscovery.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreatePublicDnsNamespace provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CreatePublicDnsNamespace(ctx context.Context, params *servicediscovery.CreatePublicDnsNamespaceInput, optFns ...func(*servicediscovery.Options)) (*servicediscovery.CreatePublicDnsNamespaceOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreatePublicDnsNamespace")
	}

	var r0 *servicediscovery.CreatePublicDnsNamespaceOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *servicediscovery.CreatePublicDnsNamespaceInput, ...func(*servicediscovery.Options)) (*servicediscovery.CreatePublicDnsNamespaceOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *servicediscovery.CreatePublicDnsNamespaceInput, ...func(*servicediscovery.Options)) *servicediscovery.CreatePublicDnsNamespaceOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*servicediscovery.CreatePublicDnsNamespaceOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *servicediscovery.CreatePublicDnsNamespaceInput, ...func(*servicediscovery.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateService provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CreateService(ctx context.Context, params *servicediscovery.CreateServiceInput, optFns ...func(*servicediscovery.Options)) (*servicediscovery.CreateServiceOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateService")
	}

	var r0 *servicediscovery.CreateServiceOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *servicediscovery.CreateServiceInput, ...func(*servicediscovery.Options)) (*servicediscovery.CreateServiceOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *servicediscovery.CreateServiceInput, ...func(*servicediscovery.Options)) *servicediscovery.CreateServiceOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*servicediscovery.CreateServiceOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *servicediscovery.CreateServiceInput, ...func(*servicediscovery.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteNamespace provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteNamespace(ctx context.Context, params *servicediscovery.DeleteNamespaceInput, optFns ...func(*servicediscovery.Options)) (*servicediscovery.DeleteNamespaceOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteNamespace")
	}

	var r0 *servicediscovery.DeleteNamespaceOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *servicediscovery.DeleteNamespaceInput, ...func(*servicediscovery.Options)) (*servicediscovery.DeleteNamespaceOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *servicediscovery.DeleteNamespaceInput, ...func(*servicediscovery.Options)) *servicediscovery.DeleteNamespaceOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*servicediscovery.DeleteNamespaceOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *servicediscovery.DeleteNamespaceInput, ...func(*servicediscovery.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteService provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteService(ctx context.Context, params *servicediscovery.DeleteServiceInput, optFns ...func(*servicediscovery.Options)) (*servicediscovery.DeleteServiceOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteService")
	}

	var r0 *servicediscovery.DeleteServiceOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *servicediscovery.DeleteServiceInput, ...func(*servicediscovery.Options)) (*servicediscovery.DeleteServiceOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *servicediscovery.DeleteServiceInput, ...func(*servicediscovery.Options)) *servicediscovery.DeleteServiceOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*servicediscovery.DeleteServiceOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *servicediscovery.DeleteServiceInput, ...func(*servicediscovery.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteServiceAttributes provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteServiceAttributes(ctx context.Context, params *servicediscovery.DeleteServiceAttributesInput, optFns ...func(*servicediscovery.Options)) (*servicediscovery.DeleteServiceAttributesOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteServiceAttributes")
	}

	var r0 *servicediscovery.DeleteServiceAttributesOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *servicediscovery.DeleteServiceAttributesInput, ...func(*servicediscovery.Options)) (*servicediscovery.DeleteServiceAttributesOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *servicediscovery.DeleteServiceAttributesInput, ...func(*servicediscovery.Options)) *servicediscovery.DeleteServiceAttributesOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*servicediscovery.DeleteServiceAttributesOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *servicediscovery.DeleteServiceAttributesInput, ...func(*servicediscovery.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeregisterInstance provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeregisterInstance(ctx context.Context, params *servicediscovery.DeregisterInstanceInput, optFns ...func(*servicediscovery.Options)) (*servicediscovery.DeregisterInstanceOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeregisterInstance")
	}

	var r0 *servicediscovery.DeregisterInstanceOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *servicediscovery.DeregisterInstanceInput, ...func(*servicediscovery.Options)) (*servicediscovery.DeregisterInstanceOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *servicediscovery.DeregisterInstanceInput, ...func(*servicediscovery.Options)) *servicediscovery.DeregisterInstanceOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*servicediscovery.DeregisterInstanceOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *servicediscovery.DeregisterInstanceInput, ...func(*servicediscovery.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DiscoverInstances provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DiscoverInstances(ctx context.Context, params *servicediscovery.DiscoverInstancesInput, optFns ...func(*servicediscovery.Options)) (*servicediscovery.DiscoverInstancesOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DiscoverInstances")
	}

	var r0 *servicediscovery.DiscoverInstancesOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *servicediscovery.DiscoverInstancesInput, ...func(*servicediscovery.Options)) (*servicediscovery.DiscoverInstancesOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *servicediscovery.DiscoverInstancesInput, ...func(*servicediscovery.Options)) *servicediscovery.DiscoverInstancesOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*servicediscovery.DiscoverInstancesOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *servicediscovery.DiscoverInstancesInput, ...func(*servicediscovery.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DiscoverInstancesRevision provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DiscoverInstancesRevision(ctx context.Context, params *servicediscovery.DiscoverInstancesRevisionInput, optFns ...func(*servicediscovery.Options)) (*servicediscovery.DiscoverInstancesRevisionOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DiscoverInstancesRevision")
	}

	var r0 *servicediscovery.DiscoverInstancesRevisionOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *servicediscovery.DiscoverInstancesRevisionInput, ...func(*servicediscovery.Options)) (*servicediscovery.DiscoverInstancesRevisionOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *servicediscovery.DiscoverInstancesRevisionInput, ...func(*servicediscovery.Options)) *servicediscovery.DiscoverInstancesRevisionOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*servicediscovery.DiscoverInstancesRevisionOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *servicediscovery.DiscoverInstancesRevisionInput, ...func(*servicediscovery.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetInstance provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetInstance(ctx context.Context, params *servicediscovery.GetInstanceInput, optFns ...func(*servicediscovery.Options)) (*servicediscovery.GetInstanceOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetInstance")
	}

	var r0 *servicediscovery.GetInstanceOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *servicediscovery.GetInstanceInput, ...func(*servicediscovery.Options)) (*servicediscovery.GetInstanceOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *servicediscovery.GetInstanceInput, ...func(*servicediscovery.Options)) *servicediscovery.GetInstanceOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*servicediscovery.GetInstanceOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *servicediscovery.GetInstanceInput, ...func(*servicediscovery.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetInstancesHealthStatus provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetInstancesHealthStatus(ctx context.Context, params *servicediscovery.GetInstancesHealthStatusInput, optFns ...func(*servicediscovery.Options)) (*servicediscovery.GetInstancesHealthStatusOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetInstancesHealthStatus")
	}

	var r0 *servicediscovery.GetInstancesHealthStatusOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *servicediscovery.GetInstancesHealthStatusInput, ...func(*servicediscovery.Options)) (*servicediscovery.GetInstancesHealthStatusOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *servicediscovery.GetInstancesHealthStatusInput, ...func(*servicediscovery.Options)) *servicediscovery.GetInstancesHealthStatusOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*servicediscovery.GetInstancesHealthStatusOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *servicediscovery.GetInstancesHealthStatusInput, ...func(*servicediscovery.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetNamespace provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetNamespace(ctx context.Context, params *servicediscovery.GetNamespaceInput, optFns ...func(*servicediscovery.Options)) (*servicediscovery.GetNamespaceOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetNamespace")
	}

	var r0 *servicediscovery.GetNamespaceOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *servicediscovery.GetNamespaceInput, ...func(*servicediscovery.Options)) (*servicediscovery.GetNamespaceOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *servicediscovery.GetNamespaceInput, ...func(*servicediscovery.Options)) *servicediscovery.GetNamespaceOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*servicediscovery.GetNamespaceOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *servicediscovery.GetNamespaceInput, ...func(*servicediscovery.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetOperation provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetOperation(ctx context.Context, params *servicediscovery.GetOperationInput, optFns ...func(*servicediscovery.Options)) (*servicediscovery.GetOperationOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetOperation")
	}

	var r0 *servicediscovery.GetOperationOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *servicediscovery.GetOperationInput, ...func(*servicediscovery.Options)) (*servicediscovery.GetOperationOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *servicediscovery.GetOperationInput, ...func(*servicediscovery.Options)) *servicediscovery.GetOperationOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*servicediscovery.GetOperationOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *servicediscovery.GetOperationInput, ...func(*servicediscovery.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetService provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetService(ctx context.Context, params *servicediscovery.GetServiceInput, optFns ...func(*servicediscovery.Options)) (*servicediscovery.GetServiceOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetService")
	}

	var r0 *servicediscovery.GetServiceOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *servicediscovery.GetServiceInput, ...func(*servicediscovery.Options)) (*servicediscovery.GetServiceOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *servicediscovery.GetServiceInput, ...func(*servicediscovery.Options)) *servicediscovery.GetServiceOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*servicediscovery.GetServiceOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *servicediscovery.GetServiceInput, ...func(*servicediscovery.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetServiceAttributes provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetServiceAttributes(ctx context.Context, params *servicediscovery.GetServiceAttributesInput, optFns ...func(*servicediscovery.Options)) (*servicediscovery.GetServiceAttributesOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetServiceAttributes")
	}

	var r0 *servicediscovery.GetServiceAttributesOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *servicediscovery.GetServiceAttributesInput, ...func(*servicediscovery.Options)) (*servicediscovery.GetServiceAttributesOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *servicediscovery.GetServiceAttributesInput, ...func(*servicediscovery.Options)) *servicediscovery.GetServiceAttributesOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*servicediscovery.GetServiceAttributesOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *servicediscovery.GetServiceAttributesInput, ...func(*servicediscovery.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListInstances provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListInstances(ctx context.Context, params *servicediscovery.ListInstancesInput, optFns ...func(*servicediscovery.Options)) (*servicediscovery.ListInstancesOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListInstances")
	}

	var r0 *servicediscovery.ListInstancesOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *servicediscovery.ListInstancesInput, ...func(*servicediscovery.Options)) (*servicediscovery.ListInstancesOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *servicediscovery.ListInstancesInput, ...func(*servicediscovery.Options)) *servicediscovery.ListInstancesOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*servicediscovery.ListInstancesOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *servicediscovery.ListInstancesInput, ...func(*servicediscovery.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListNamespaces provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListNamespaces(ctx context.Context, params *servicediscovery.ListNamespacesInput, optFns ...func(*servicediscovery.Options)) (*servicediscovery.ListNamespacesOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListNamespaces")
	}

	var r0 *servicediscovery.ListNamespacesOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *servicediscovery.ListNamespacesInput, ...func(*servicediscovery.Options)) (*servicediscovery.ListNamespacesOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *servicediscovery.ListNamespacesInput, ...func(*servicediscovery.Options)) *servicediscovery.ListNamespacesOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*servicediscovery.ListNamespacesOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *servicediscovery.ListNamespacesInput, ...func(*servicediscovery.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListOperations provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListOperations(ctx context.Context, params *servicediscovery.ListOperationsInput, optFns ...func(*servicediscovery.Options)) (*servicediscovery.ListOperationsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListOperations")
	}

	var r0 *servicediscovery.ListOperationsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *servicediscovery.ListOperationsInput, ...func(*servicediscovery.Options)) (*servicediscovery.ListOperationsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *servicediscovery.ListOperationsInput, ...func(*servicediscovery.Options)) *servicediscovery.ListOperationsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*servicediscovery.ListOperationsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *servicediscovery.ListOperationsInput, ...func(*servicediscovery.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListServices provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListServices(ctx context.Context, params *servicediscovery.ListServicesInput, optFns ...func(*servicediscovery.Options)) (*servicediscovery.ListServicesOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListServices")
	}

	var r0 *servicediscovery.ListServicesOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *servicediscovery.ListServicesInput, ...func(*servicediscovery.Options)) (*servicediscovery.ListServicesOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *servicediscovery.ListServicesInput, ...func(*servicediscovery.Options)) *servicediscovery.ListServicesOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*servicediscovery.ListServicesOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *servicediscovery.ListServicesInput, ...func(*servicediscovery.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListTagsForResource provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListTagsForResource(ctx context.Context, params *servicediscovery.ListTagsForResourceInput, optFns ...func(*servicediscovery.Options)) (*servicediscovery.ListTagsForResourceOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListTagsForResource")
	}

	var r0 *servicediscovery.ListTagsForResourceOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *servicediscovery.ListTagsForResourceInput, ...func(*servicediscovery.Options)) (*servicediscovery.ListTagsForResourceOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *servicediscovery.ListTagsForResourceInput, ...func(*servicediscovery.Options)) *servicediscovery.ListTagsForResourceOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*servicediscovery.ListTagsForResourceOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *servicediscovery.ListTagsForResourceInput, ...func(*servicediscovery.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Options provides a mock function with no fields
func (_m *IClient) Options() servicediscovery.Options {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Options")
	}

	var r0 servicediscovery.Options
	if rf, ok := ret.Get(0).(func() servicediscovery.Options); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(servicediscovery.Options)
	}

	return r0
}

// RegisterInstance provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) RegisterInstance(ctx context.Context, params *servicediscovery.RegisterInstanceInput, optFns ...func(*servicediscovery.Options)) (*servicediscovery.RegisterInstanceOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for RegisterInstance")
	}

	var r0 *servicediscovery.RegisterInstanceOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *servicediscovery.RegisterInstanceInput, ...func(*servicediscovery.Options)) (*servicediscovery.RegisterInstanceOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *servicediscovery.RegisterInstanceInput, ...func(*servicediscovery.Options)) *servicediscovery.RegisterInstanceOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*servicediscovery.RegisterInstanceOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *servicediscovery.RegisterInstanceInput, ...func(*servicediscovery.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// TagResource provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) TagResource(ctx context.Context, params *servicediscovery.TagResourceInput, optFns ...func(*servicediscovery.Options)) (*servicediscovery.TagResourceOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for TagResource")
	}

	var r0 *servicediscovery.TagResourceOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *servicediscovery.TagResourceInput, ...func(*servicediscovery.Options)) (*servicediscovery.TagResourceOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *servicediscovery.TagResourceInput, ...func(*servicediscovery.Options)) *servicediscovery.TagResourceOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*servicediscovery.TagResourceOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *servicediscovery.TagResourceInput, ...func(*servicediscovery.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UntagResource provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UntagResource(ctx context.Context, params *servicediscovery.UntagResourceInput, optFns ...func(*servicediscovery.Options)) (*servicediscovery.UntagResourceOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UntagResource")
	}

	var r0 *servicediscovery.UntagResourceOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *servicediscovery.UntagResourceInput, ...func(*servicediscovery.Options)) (*servicediscovery.UntagResourceOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *servicediscovery.UntagResourceInput, ...func(*servicediscovery.Options)) *servicediscovery.UntagResourceOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*servicediscovery.UntagResourceOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *servicediscovery.UntagResourceInput, ...func(*servicediscovery.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateHttpNamespace provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UpdateHttpNamespace(ctx context.Context, params *servicediscovery.UpdateHttpNamespaceInput, optFns ...func(*servicediscovery.Options)) (*servicediscovery.UpdateHttpNamespaceOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateHttpNamespace")
	}

	var r0 *servicediscovery.UpdateHttpNamespaceOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *servicediscovery.UpdateHttpNamespaceInput, ...func(*servicediscovery.Options)) (*servicediscovery.UpdateHttpNamespaceOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *servicediscovery.UpdateHttpNamespaceInput, ...func(*servicediscovery.Options)) *servicediscovery.UpdateHttpNamespaceOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*servicediscovery.UpdateHttpNamespaceOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *servicediscovery.UpdateHttpNamespaceInput, ...func(*servicediscovery.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateInstanceCustomHealthStatus provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UpdateInstanceCustomHealthStatus(ctx context.Context, params *servicediscovery.UpdateInstanceCustomHealthStatusInput, optFns ...func(*servicediscovery.Options)) (*servicediscovery.UpdateInstanceCustomHealthStatusOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateInstanceCustomHealthStatus")
	}

	var r0 *servicediscovery.UpdateInstanceCustomHealthStatusOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *servicediscovery.UpdateInstanceCustomHealthStatusInput, ...func(*servicediscovery.Options)) (*servicediscovery.UpdateInstanceCustomHealthStatusOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *servicediscovery.UpdateInstanceCustomHealthStatusInput, ...func(*servicediscovery.Options)) *servicediscovery.UpdateInstanceCustomHealthStatusOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*servicediscovery.UpdateInstanceCustomHealthStatusOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *servicediscovery.UpdateInstanceCustomHealthStatusInput, ...func(*servicediscovery.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdatePrivateDnsNamespace provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UpdatePrivateDnsNamespace(ctx context.Context, params *servicediscovery.UpdatePrivateDnsNamespaceInput, optFns ...func(*servicediscovery.Options)) (*servicediscovery.UpdatePrivateDnsNamespaceOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdatePrivateDnsNamespace")
	}

	var r0 *servicediscovery.UpdatePrivateDnsNamespaceOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *servicediscovery.UpdatePrivateDnsNamespaceInput, ...func(*servicediscovery.Options)) (*servicediscovery.UpdatePrivateDnsNamespaceOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *servicediscovery.UpdatePrivateDnsNamespaceInput, ...func(*servicediscovery.Options)) *servicediscovery.UpdatePrivateDnsNamespaceOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*servicediscovery.UpdatePrivateDnsNamespaceOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *servicediscovery.UpdatePrivateDnsNamespaceInput, ...func(*servicediscovery.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdatePublicDnsNamespace provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UpdatePublicDnsNamespace(ctx context.Context, params *servicediscovery.UpdatePublicDnsNamespaceInput, optFns ...func(*servicediscovery.Options)) (*servicediscovery.UpdatePublicDnsNamespaceOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdatePublicDnsNamespace")
	}

	var r0 *servicediscovery.UpdatePublicDnsNamespaceOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *servicediscovery.UpdatePublicDnsNamespaceInput, ...func(*servicediscovery.Options)) (*servicediscovery.UpdatePublicDnsNamespaceOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *servicediscovery.UpdatePublicDnsNamespaceInput, ...func(*servicediscovery.Options)) *servicediscovery.UpdatePublicDnsNamespaceOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*servicediscovery.UpdatePublicDnsNamespaceOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *servicediscovery.UpdatePublicDnsNamespaceInput, ...func(*servicediscovery.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateService provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UpdateService(ctx context.Context, params *servicediscovery.UpdateServiceInput, optFns ...func(*servicediscovery.Options)) (*servicediscovery.UpdateServiceOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateService")
	}

	var r0 *servicediscovery.UpdateServiceOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *servicediscovery.UpdateServiceInput, ...func(*servicediscovery.Options)) (*servicediscovery.UpdateServiceOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *servicediscovery.UpdateServiceInput, ...func(*servicediscovery.Options)) *servicediscovery.UpdateServiceOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*servicediscovery.UpdateServiceOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *servicediscovery.UpdateServiceInput, ...func(*servicediscovery.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateServiceAttributes provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UpdateServiceAttributes(ctx context.Context, params *servicediscovery.UpdateServiceAttributesInput, optFns ...func(*servicediscovery.Options)) (*servicediscovery.UpdateServiceAttributesOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateServiceAttributes")
	}

	var r0 *servicediscovery.UpdateServiceAttributesOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *servicediscovery.UpdateServiceAttributesInput, ...func(*servicediscovery.Options)) (*servicediscovery.UpdateServiceAttributesOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *servicediscovery.UpdateServiceAttributesInput, ...func(*servicediscovery.Options)) *servicediscovery.UpdateServiceAttributesOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*servicediscovery.UpdateServiceAttributesOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *servicediscovery.UpdateServiceAttributesInput, ...func(*servicediscovery.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewIClient creates a new instance of IClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewIClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *IClient {
	mock := &IClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
