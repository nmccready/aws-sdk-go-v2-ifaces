// Code generated by mockery v2.53.4. DO NOT EDIT.

package mocks

import (
	arcregionswitch "github.com/aws/aws-sdk-go-v2/service/arcregionswitch"

	context "context"

	mock "github.com/stretchr/testify/mock"
)

// IClient is an autogenerated mock type for the IClient type
type IClient struct {
	mock.Mock
}

// ApprovePlanExecutionStep provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ApprovePlanExecutionStep(ctx context.Context, params *arcregionswitch.ApprovePlanExecutionStepInput, optFns ...func(*arcregionswitch.Options)) (*arcregionswitch.ApprovePlanExecutionStepOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ApprovePlanExecutionStep")
	}

	var r0 *arcregionswitch.ApprovePlanExecutionStepOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *arcregionswitch.ApprovePlanExecutionStepInput, ...func(*arcregionswitch.Options)) (*arcregionswitch.ApprovePlanExecutionStepOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *arcregionswitch.ApprovePlanExecutionStepInput, ...func(*arcregionswitch.Options)) *arcregionswitch.ApprovePlanExecutionStepOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*arcregionswitch.ApprovePlanExecutionStepOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *arcregionswitch.ApprovePlanExecutionStepInput, ...func(*arcregionswitch.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CancelPlanExecution provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CancelPlanExecution(ctx context.Context, params *arcregionswitch.CancelPlanExecutionInput, optFns ...func(*arcregionswitch.Options)) (*arcregionswitch.CancelPlanExecutionOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CancelPlanExecution")
	}

	var r0 *arcregionswitch.CancelPlanExecutionOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *arcregionswitch.CancelPlanExecutionInput, ...func(*arcregionswitch.Options)) (*arcregionswitch.CancelPlanExecutionOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *arcregionswitch.CancelPlanExecutionInput, ...func(*arcregionswitch.Options)) *arcregionswitch.CancelPlanExecutionOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*arcregionswitch.CancelPlanExecutionOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *arcregionswitch.CancelPlanExecutionInput, ...func(*arcregionswitch.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreatePlan provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CreatePlan(ctx context.Context, params *arcregionswitch.CreatePlanInput, optFns ...func(*arcregionswitch.Options)) (*arcregionswitch.CreatePlanOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreatePlan")
	}

	var r0 *arcregionswitch.CreatePlanOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *arcregionswitch.CreatePlanInput, ...func(*arcregionswitch.Options)) (*arcregionswitch.CreatePlanOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *arcregionswitch.CreatePlanInput, ...func(*arcregionswitch.Options)) *arcregionswitch.CreatePlanOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*arcregionswitch.CreatePlanOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *arcregionswitch.CreatePlanInput, ...func(*arcregionswitch.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeletePlan provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeletePlan(ctx context.Context, params *arcregionswitch.DeletePlanInput, optFns ...func(*arcregionswitch.Options)) (*arcregionswitch.DeletePlanOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeletePlan")
	}

	var r0 *arcregionswitch.DeletePlanOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *arcregionswitch.DeletePlanInput, ...func(*arcregionswitch.Options)) (*arcregionswitch.DeletePlanOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *arcregionswitch.DeletePlanInput, ...func(*arcregionswitch.Options)) *arcregionswitch.DeletePlanOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*arcregionswitch.DeletePlanOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *arcregionswitch.DeletePlanInput, ...func(*arcregionswitch.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetPlan provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetPlan(ctx context.Context, params *arcregionswitch.GetPlanInput, optFns ...func(*arcregionswitch.Options)) (*arcregionswitch.GetPlanOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetPlan")
	}

	var r0 *arcregionswitch.GetPlanOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *arcregionswitch.GetPlanInput, ...func(*arcregionswitch.Options)) (*arcregionswitch.GetPlanOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *arcregionswitch.GetPlanInput, ...func(*arcregionswitch.Options)) *arcregionswitch.GetPlanOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*arcregionswitch.GetPlanOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *arcregionswitch.GetPlanInput, ...func(*arcregionswitch.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetPlanEvaluationStatus provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetPlanEvaluationStatus(ctx context.Context, params *arcregionswitch.GetPlanEvaluationStatusInput, optFns ...func(*arcregionswitch.Options)) (*arcregionswitch.GetPlanEvaluationStatusOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetPlanEvaluationStatus")
	}

	var r0 *arcregionswitch.GetPlanEvaluationStatusOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *arcregionswitch.GetPlanEvaluationStatusInput, ...func(*arcregionswitch.Options)) (*arcregionswitch.GetPlanEvaluationStatusOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *arcregionswitch.GetPlanEvaluationStatusInput, ...func(*arcregionswitch.Options)) *arcregionswitch.GetPlanEvaluationStatusOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*arcregionswitch.GetPlanEvaluationStatusOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *arcregionswitch.GetPlanEvaluationStatusInput, ...func(*arcregionswitch.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetPlanExecution provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetPlanExecution(ctx context.Context, params *arcregionswitch.GetPlanExecutionInput, optFns ...func(*arcregionswitch.Options)) (*arcregionswitch.GetPlanExecutionOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetPlanExecution")
	}

	var r0 *arcregionswitch.GetPlanExecutionOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *arcregionswitch.GetPlanExecutionInput, ...func(*arcregionswitch.Options)) (*arcregionswitch.GetPlanExecutionOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *arcregionswitch.GetPlanExecutionInput, ...func(*arcregionswitch.Options)) *arcregionswitch.GetPlanExecutionOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*arcregionswitch.GetPlanExecutionOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *arcregionswitch.GetPlanExecutionInput, ...func(*arcregionswitch.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetPlanInRegion provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetPlanInRegion(ctx context.Context, params *arcregionswitch.GetPlanInRegionInput, optFns ...func(*arcregionswitch.Options)) (*arcregionswitch.GetPlanInRegionOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetPlanInRegion")
	}

	var r0 *arcregionswitch.GetPlanInRegionOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *arcregionswitch.GetPlanInRegionInput, ...func(*arcregionswitch.Options)) (*arcregionswitch.GetPlanInRegionOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *arcregionswitch.GetPlanInRegionInput, ...func(*arcregionswitch.Options)) *arcregionswitch.GetPlanInRegionOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*arcregionswitch.GetPlanInRegionOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *arcregionswitch.GetPlanInRegionInput, ...func(*arcregionswitch.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListPlanExecutionEvents provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListPlanExecutionEvents(ctx context.Context, params *arcregionswitch.ListPlanExecutionEventsInput, optFns ...func(*arcregionswitch.Options)) (*arcregionswitch.ListPlanExecutionEventsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListPlanExecutionEvents")
	}

	var r0 *arcregionswitch.ListPlanExecutionEventsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *arcregionswitch.ListPlanExecutionEventsInput, ...func(*arcregionswitch.Options)) (*arcregionswitch.ListPlanExecutionEventsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *arcregionswitch.ListPlanExecutionEventsInput, ...func(*arcregionswitch.Options)) *arcregionswitch.ListPlanExecutionEventsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*arcregionswitch.ListPlanExecutionEventsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *arcregionswitch.ListPlanExecutionEventsInput, ...func(*arcregionswitch.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListPlanExecutions provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListPlanExecutions(ctx context.Context, params *arcregionswitch.ListPlanExecutionsInput, optFns ...func(*arcregionswitch.Options)) (*arcregionswitch.ListPlanExecutionsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListPlanExecutions")
	}

	var r0 *arcregionswitch.ListPlanExecutionsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *arcregionswitch.ListPlanExecutionsInput, ...func(*arcregionswitch.Options)) (*arcregionswitch.ListPlanExecutionsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *arcregionswitch.ListPlanExecutionsInput, ...func(*arcregionswitch.Options)) *arcregionswitch.ListPlanExecutionsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*arcregionswitch.ListPlanExecutionsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *arcregionswitch.ListPlanExecutionsInput, ...func(*arcregionswitch.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListPlans provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListPlans(ctx context.Context, params *arcregionswitch.ListPlansInput, optFns ...func(*arcregionswitch.Options)) (*arcregionswitch.ListPlansOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListPlans")
	}

	var r0 *arcregionswitch.ListPlansOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *arcregionswitch.ListPlansInput, ...func(*arcregionswitch.Options)) (*arcregionswitch.ListPlansOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *arcregionswitch.ListPlansInput, ...func(*arcregionswitch.Options)) *arcregionswitch.ListPlansOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*arcregionswitch.ListPlansOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *arcregionswitch.ListPlansInput, ...func(*arcregionswitch.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListPlansInRegion provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListPlansInRegion(ctx context.Context, params *arcregionswitch.ListPlansInRegionInput, optFns ...func(*arcregionswitch.Options)) (*arcregionswitch.ListPlansInRegionOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListPlansInRegion")
	}

	var r0 *arcregionswitch.ListPlansInRegionOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *arcregionswitch.ListPlansInRegionInput, ...func(*arcregionswitch.Options)) (*arcregionswitch.ListPlansInRegionOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *arcregionswitch.ListPlansInRegionInput, ...func(*arcregionswitch.Options)) *arcregionswitch.ListPlansInRegionOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*arcregionswitch.ListPlansInRegionOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *arcregionswitch.ListPlansInRegionInput, ...func(*arcregionswitch.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListRoute53HealthChecks provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListRoute53HealthChecks(ctx context.Context, params *arcregionswitch.ListRoute53HealthChecksInput, optFns ...func(*arcregionswitch.Options)) (*arcregionswitch.ListRoute53HealthChecksOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListRoute53HealthChecks")
	}

	var r0 *arcregionswitch.ListRoute53HealthChecksOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *arcregionswitch.ListRoute53HealthChecksInput, ...func(*arcregionswitch.Options)) (*arcregionswitch.ListRoute53HealthChecksOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *arcregionswitch.ListRoute53HealthChecksInput, ...func(*arcregionswitch.Options)) *arcregionswitch.ListRoute53HealthChecksOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*arcregionswitch.ListRoute53HealthChecksOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *arcregionswitch.ListRoute53HealthChecksInput, ...func(*arcregionswitch.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListTagsForResource provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListTagsForResource(ctx context.Context, params *arcregionswitch.ListTagsForResourceInput, optFns ...func(*arcregionswitch.Options)) (*arcregionswitch.ListTagsForResourceOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListTagsForResource")
	}

	var r0 *arcregionswitch.ListTagsForResourceOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *arcregionswitch.ListTagsForResourceInput, ...func(*arcregionswitch.Options)) (*arcregionswitch.ListTagsForResourceOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *arcregionswitch.ListTagsForResourceInput, ...func(*arcregionswitch.Options)) *arcregionswitch.ListTagsForResourceOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*arcregionswitch.ListTagsForResourceOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *arcregionswitch.ListTagsForResourceInput, ...func(*arcregionswitch.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Options provides a mock function with no fields
func (_m *IClient) Options() arcregionswitch.Options {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Options")
	}

	var r0 arcregionswitch.Options
	if rf, ok := ret.Get(0).(func() arcregionswitch.Options); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(arcregionswitch.Options)
	}

	return r0
}

// StartPlanExecution provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) StartPlanExecution(ctx context.Context, params *arcregionswitch.StartPlanExecutionInput, optFns ...func(*arcregionswitch.Options)) (*arcregionswitch.StartPlanExecutionOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for StartPlanExecution")
	}

	var r0 *arcregionswitch.StartPlanExecutionOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *arcregionswitch.StartPlanExecutionInput, ...func(*arcregionswitch.Options)) (*arcregionswitch.StartPlanExecutionOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *arcregionswitch.StartPlanExecutionInput, ...func(*arcregionswitch.Options)) *arcregionswitch.StartPlanExecutionOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*arcregionswitch.StartPlanExecutionOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *arcregionswitch.StartPlanExecutionInput, ...func(*arcregionswitch.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// TagResource provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) TagResource(ctx context.Context, params *arcregionswitch.TagResourceInput, optFns ...func(*arcregionswitch.Options)) (*arcregionswitch.TagResourceOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for TagResource")
	}

	var r0 *arcregionswitch.TagResourceOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *arcregionswitch.TagResourceInput, ...func(*arcregionswitch.Options)) (*arcregionswitch.TagResourceOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *arcregionswitch.TagResourceInput, ...func(*arcregionswitch.Options)) *arcregionswitch.TagResourceOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*arcregionswitch.TagResourceOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *arcregionswitch.TagResourceInput, ...func(*arcregionswitch.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UntagResource provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UntagResource(ctx context.Context, params *arcregionswitch.UntagResourceInput, optFns ...func(*arcregionswitch.Options)) (*arcregionswitch.UntagResourceOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UntagResource")
	}

	var r0 *arcregionswitch.UntagResourceOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *arcregionswitch.UntagResourceInput, ...func(*arcregionswitch.Options)) (*arcregionswitch.UntagResourceOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *arcregionswitch.UntagResourceInput, ...func(*arcregionswitch.Options)) *arcregionswitch.UntagResourceOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*arcregionswitch.UntagResourceOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *arcregionswitch.UntagResourceInput, ...func(*arcregionswitch.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdatePlan provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UpdatePlan(ctx context.Context, params *arcregionswitch.UpdatePlanInput, optFns ...func(*arcregionswitch.Options)) (*arcregionswitch.UpdatePlanOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdatePlan")
	}

	var r0 *arcregionswitch.UpdatePlanOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *arcregionswitch.UpdatePlanInput, ...func(*arcregionswitch.Options)) (*arcregionswitch.UpdatePlanOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *arcregionswitch.UpdatePlanInput, ...func(*arcregionswitch.Options)) *arcregionswitch.UpdatePlanOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*arcregionswitch.UpdatePlanOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *arcregionswitch.UpdatePlanInput, ...func(*arcregionswitch.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdatePlanExecution provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UpdatePlanExecution(ctx context.Context, params *arcregionswitch.UpdatePlanExecutionInput, optFns ...func(*arcregionswitch.Options)) (*arcregionswitch.UpdatePlanExecutionOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdatePlanExecution")
	}

	var r0 *arcregionswitch.UpdatePlanExecutionOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *arcregionswitch.UpdatePlanExecutionInput, ...func(*arcregionswitch.Options)) (*arcregionswitch.UpdatePlanExecutionOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *arcregionswitch.UpdatePlanExecutionInput, ...func(*arcregionswitch.Options)) *arcregionswitch.UpdatePlanExecutionOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*arcregionswitch.UpdatePlanExecutionOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *arcregionswitch.UpdatePlanExecutionInput, ...func(*arcregionswitch.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdatePlanExecutionStep provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UpdatePlanExecutionStep(ctx context.Context, params *arcregionswitch.UpdatePlanExecutionStepInput, optFns ...func(*arcregionswitch.Options)) (*arcregionswitch.UpdatePlanExecutionStepOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdatePlanExecutionStep")
	}

	var r0 *arcregionswitch.UpdatePlanExecutionStepOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *arcregionswitch.UpdatePlanExecutionStepInput, ...func(*arcregionswitch.Options)) (*arcregionswitch.UpdatePlanExecutionStepOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *arcregionswitch.UpdatePlanExecutionStepInput, ...func(*arcregionswitch.Options)) *arcregionswitch.UpdatePlanExecutionStepOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*arcregionswitch.UpdatePlanExecutionStepOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *arcregionswitch.UpdatePlanExecutionStepInput, ...func(*arcregionswitch.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewIClient creates a new instance of IClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewIClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *IClient {
	mock := &IClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
