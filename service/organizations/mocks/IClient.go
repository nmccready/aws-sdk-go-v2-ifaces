// Code generated by mockery v2.53.4. DO NOT EDIT.

package mocks

import (
	context "context"

	organizations "github.com/aws/aws-sdk-go-v2/service/organizations"
	mock "github.com/stretchr/testify/mock"
)

// IClient is an autogenerated mock type for the IClient type
type IClient struct {
	mock.Mock
}

// AcceptHandshake provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) AcceptHandshake(ctx context.Context, params *organizations.AcceptHandshakeInput, optFns ...func(*organizations.Options)) (*organizations.AcceptHandshakeOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for AcceptHandshake")
	}

	var r0 *organizations.AcceptHandshakeOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *organizations.AcceptHandshakeInput, ...func(*organizations.Options)) (*organizations.AcceptHandshakeOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *organizations.AcceptHandshakeInput, ...func(*organizations.Options)) *organizations.AcceptHandshakeOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*organizations.AcceptHandshakeOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *organizations.AcceptHandshakeInput, ...func(*organizations.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AttachPolicy provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) AttachPolicy(ctx context.Context, params *organizations.AttachPolicyInput, optFns ...func(*organizations.Options)) (*organizations.AttachPolicyOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for AttachPolicy")
	}

	var r0 *organizations.AttachPolicyOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *organizations.AttachPolicyInput, ...func(*organizations.Options)) (*organizations.AttachPolicyOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *organizations.AttachPolicyInput, ...func(*organizations.Options)) *organizations.AttachPolicyOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*organizations.AttachPolicyOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *organizations.AttachPolicyInput, ...func(*organizations.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CancelHandshake provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CancelHandshake(ctx context.Context, params *organizations.CancelHandshakeInput, optFns ...func(*organizations.Options)) (*organizations.CancelHandshakeOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CancelHandshake")
	}

	var r0 *organizations.CancelHandshakeOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *organizations.CancelHandshakeInput, ...func(*organizations.Options)) (*organizations.CancelHandshakeOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *organizations.CancelHandshakeInput, ...func(*organizations.Options)) *organizations.CancelHandshakeOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*organizations.CancelHandshakeOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *organizations.CancelHandshakeInput, ...func(*organizations.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CloseAccount provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CloseAccount(ctx context.Context, params *organizations.CloseAccountInput, optFns ...func(*organizations.Options)) (*organizations.CloseAccountOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CloseAccount")
	}

	var r0 *organizations.CloseAccountOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *organizations.CloseAccountInput, ...func(*organizations.Options)) (*organizations.CloseAccountOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *organizations.CloseAccountInput, ...func(*organizations.Options)) *organizations.CloseAccountOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*organizations.CloseAccountOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *organizations.CloseAccountInput, ...func(*organizations.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateAccount provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CreateAccount(ctx context.Context, params *organizations.CreateAccountInput, optFns ...func(*organizations.Options)) (*organizations.CreateAccountOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateAccount")
	}

	var r0 *organizations.CreateAccountOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *organizations.CreateAccountInput, ...func(*organizations.Options)) (*organizations.CreateAccountOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *organizations.CreateAccountInput, ...func(*organizations.Options)) *organizations.CreateAccountOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*organizations.CreateAccountOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *organizations.CreateAccountInput, ...func(*organizations.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateGovCloudAccount provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CreateGovCloudAccount(ctx context.Context, params *organizations.CreateGovCloudAccountInput, optFns ...func(*organizations.Options)) (*organizations.CreateGovCloudAccountOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateGovCloudAccount")
	}

	var r0 *organizations.CreateGovCloudAccountOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *organizations.CreateGovCloudAccountInput, ...func(*organizations.Options)) (*organizations.CreateGovCloudAccountOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *organizations.CreateGovCloudAccountInput, ...func(*organizations.Options)) *organizations.CreateGovCloudAccountOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*organizations.CreateGovCloudAccountOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *organizations.CreateGovCloudAccountInput, ...func(*organizations.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateOrganization provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CreateOrganization(ctx context.Context, params *organizations.CreateOrganizationInput, optFns ...func(*organizations.Options)) (*organizations.CreateOrganizationOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateOrganization")
	}

	var r0 *organizations.CreateOrganizationOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *organizations.CreateOrganizationInput, ...func(*organizations.Options)) (*organizations.CreateOrganizationOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *organizations.CreateOrganizationInput, ...func(*organizations.Options)) *organizations.CreateOrganizationOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*organizations.CreateOrganizationOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *organizations.CreateOrganizationInput, ...func(*organizations.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateOrganizationalUnit provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CreateOrganizationalUnit(ctx context.Context, params *organizations.CreateOrganizationalUnitInput, optFns ...func(*organizations.Options)) (*organizations.CreateOrganizationalUnitOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateOrganizationalUnit")
	}

	var r0 *organizations.CreateOrganizationalUnitOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *organizations.CreateOrganizationalUnitInput, ...func(*organizations.Options)) (*organizations.CreateOrganizationalUnitOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *organizations.CreateOrganizationalUnitInput, ...func(*organizations.Options)) *organizations.CreateOrganizationalUnitOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*organizations.CreateOrganizationalUnitOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *organizations.CreateOrganizationalUnitInput, ...func(*organizations.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreatePolicy provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CreatePolicy(ctx context.Context, params *organizations.CreatePolicyInput, optFns ...func(*organizations.Options)) (*organizations.CreatePolicyOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreatePolicy")
	}

	var r0 *organizations.CreatePolicyOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *organizations.CreatePolicyInput, ...func(*organizations.Options)) (*organizations.CreatePolicyOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *organizations.CreatePolicyInput, ...func(*organizations.Options)) *organizations.CreatePolicyOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*organizations.CreatePolicyOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *organizations.CreatePolicyInput, ...func(*organizations.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeclineHandshake provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeclineHandshake(ctx context.Context, params *organizations.DeclineHandshakeInput, optFns ...func(*organizations.Options)) (*organizations.DeclineHandshakeOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeclineHandshake")
	}

	var r0 *organizations.DeclineHandshakeOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *organizations.DeclineHandshakeInput, ...func(*organizations.Options)) (*organizations.DeclineHandshakeOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *organizations.DeclineHandshakeInput, ...func(*organizations.Options)) *organizations.DeclineHandshakeOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*organizations.DeclineHandshakeOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *organizations.DeclineHandshakeInput, ...func(*organizations.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteOrganization provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteOrganization(ctx context.Context, params *organizations.DeleteOrganizationInput, optFns ...func(*organizations.Options)) (*organizations.DeleteOrganizationOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteOrganization")
	}

	var r0 *organizations.DeleteOrganizationOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *organizations.DeleteOrganizationInput, ...func(*organizations.Options)) (*organizations.DeleteOrganizationOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *organizations.DeleteOrganizationInput, ...func(*organizations.Options)) *organizations.DeleteOrganizationOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*organizations.DeleteOrganizationOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *organizations.DeleteOrganizationInput, ...func(*organizations.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteOrganizationalUnit provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteOrganizationalUnit(ctx context.Context, params *organizations.DeleteOrganizationalUnitInput, optFns ...func(*organizations.Options)) (*organizations.DeleteOrganizationalUnitOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteOrganizationalUnit")
	}

	var r0 *organizations.DeleteOrganizationalUnitOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *organizations.DeleteOrganizationalUnitInput, ...func(*organizations.Options)) (*organizations.DeleteOrganizationalUnitOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *organizations.DeleteOrganizationalUnitInput, ...func(*organizations.Options)) *organizations.DeleteOrganizationalUnitOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*organizations.DeleteOrganizationalUnitOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *organizations.DeleteOrganizationalUnitInput, ...func(*organizations.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeletePolicy provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeletePolicy(ctx context.Context, params *organizations.DeletePolicyInput, optFns ...func(*organizations.Options)) (*organizations.DeletePolicyOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeletePolicy")
	}

	var r0 *organizations.DeletePolicyOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *organizations.DeletePolicyInput, ...func(*organizations.Options)) (*organizations.DeletePolicyOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *organizations.DeletePolicyInput, ...func(*organizations.Options)) *organizations.DeletePolicyOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*organizations.DeletePolicyOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *organizations.DeletePolicyInput, ...func(*organizations.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteResourcePolicy provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteResourcePolicy(ctx context.Context, params *organizations.DeleteResourcePolicyInput, optFns ...func(*organizations.Options)) (*organizations.DeleteResourcePolicyOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteResourcePolicy")
	}

	var r0 *organizations.DeleteResourcePolicyOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *organizations.DeleteResourcePolicyInput, ...func(*organizations.Options)) (*organizations.DeleteResourcePolicyOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *organizations.DeleteResourcePolicyInput, ...func(*organizations.Options)) *organizations.DeleteResourcePolicyOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*organizations.DeleteResourcePolicyOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *organizations.DeleteResourcePolicyInput, ...func(*organizations.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeregisterDelegatedAdministrator provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeregisterDelegatedAdministrator(ctx context.Context, params *organizations.DeregisterDelegatedAdministratorInput, optFns ...func(*organizations.Options)) (*organizations.DeregisterDelegatedAdministratorOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeregisterDelegatedAdministrator")
	}

	var r0 *organizations.DeregisterDelegatedAdministratorOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *organizations.DeregisterDelegatedAdministratorInput, ...func(*organizations.Options)) (*organizations.DeregisterDelegatedAdministratorOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *organizations.DeregisterDelegatedAdministratorInput, ...func(*organizations.Options)) *organizations.DeregisterDelegatedAdministratorOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*organizations.DeregisterDelegatedAdministratorOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *organizations.DeregisterDelegatedAdministratorInput, ...func(*organizations.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeAccount provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DescribeAccount(ctx context.Context, params *organizations.DescribeAccountInput, optFns ...func(*organizations.Options)) (*organizations.DescribeAccountOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DescribeAccount")
	}

	var r0 *organizations.DescribeAccountOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *organizations.DescribeAccountInput, ...func(*organizations.Options)) (*organizations.DescribeAccountOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *organizations.DescribeAccountInput, ...func(*organizations.Options)) *organizations.DescribeAccountOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*organizations.DescribeAccountOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *organizations.DescribeAccountInput, ...func(*organizations.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeCreateAccountStatus provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DescribeCreateAccountStatus(ctx context.Context, params *organizations.DescribeCreateAccountStatusInput, optFns ...func(*organizations.Options)) (*organizations.DescribeCreateAccountStatusOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DescribeCreateAccountStatus")
	}

	var r0 *organizations.DescribeCreateAccountStatusOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *organizations.DescribeCreateAccountStatusInput, ...func(*organizations.Options)) (*organizations.DescribeCreateAccountStatusOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *organizations.DescribeCreateAccountStatusInput, ...func(*organizations.Options)) *organizations.DescribeCreateAccountStatusOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*organizations.DescribeCreateAccountStatusOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *organizations.DescribeCreateAccountStatusInput, ...func(*organizations.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeEffectivePolicy provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DescribeEffectivePolicy(ctx context.Context, params *organizations.DescribeEffectivePolicyInput, optFns ...func(*organizations.Options)) (*organizations.DescribeEffectivePolicyOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DescribeEffectivePolicy")
	}

	var r0 *organizations.DescribeEffectivePolicyOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *organizations.DescribeEffectivePolicyInput, ...func(*organizations.Options)) (*organizations.DescribeEffectivePolicyOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *organizations.DescribeEffectivePolicyInput, ...func(*organizations.Options)) *organizations.DescribeEffectivePolicyOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*organizations.DescribeEffectivePolicyOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *organizations.DescribeEffectivePolicyInput, ...func(*organizations.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeHandshake provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DescribeHandshake(ctx context.Context, params *organizations.DescribeHandshakeInput, optFns ...func(*organizations.Options)) (*organizations.DescribeHandshakeOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DescribeHandshake")
	}

	var r0 *organizations.DescribeHandshakeOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *organizations.DescribeHandshakeInput, ...func(*organizations.Options)) (*organizations.DescribeHandshakeOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *organizations.DescribeHandshakeInput, ...func(*organizations.Options)) *organizations.DescribeHandshakeOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*organizations.DescribeHandshakeOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *organizations.DescribeHandshakeInput, ...func(*organizations.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeOrganization provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DescribeOrganization(ctx context.Context, params *organizations.DescribeOrganizationInput, optFns ...func(*organizations.Options)) (*organizations.DescribeOrganizationOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DescribeOrganization")
	}

	var r0 *organizations.DescribeOrganizationOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *organizations.DescribeOrganizationInput, ...func(*organizations.Options)) (*organizations.DescribeOrganizationOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *organizations.DescribeOrganizationInput, ...func(*organizations.Options)) *organizations.DescribeOrganizationOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*organizations.DescribeOrganizationOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *organizations.DescribeOrganizationInput, ...func(*organizations.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeOrganizationalUnit provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DescribeOrganizationalUnit(ctx context.Context, params *organizations.DescribeOrganizationalUnitInput, optFns ...func(*organizations.Options)) (*organizations.DescribeOrganizationalUnitOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DescribeOrganizationalUnit")
	}

	var r0 *organizations.DescribeOrganizationalUnitOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *organizations.DescribeOrganizationalUnitInput, ...func(*organizations.Options)) (*organizations.DescribeOrganizationalUnitOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *organizations.DescribeOrganizationalUnitInput, ...func(*organizations.Options)) *organizations.DescribeOrganizationalUnitOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*organizations.DescribeOrganizationalUnitOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *organizations.DescribeOrganizationalUnitInput, ...func(*organizations.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribePolicy provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DescribePolicy(ctx context.Context, params *organizations.DescribePolicyInput, optFns ...func(*organizations.Options)) (*organizations.DescribePolicyOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DescribePolicy")
	}

	var r0 *organizations.DescribePolicyOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *organizations.DescribePolicyInput, ...func(*organizations.Options)) (*organizations.DescribePolicyOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *organizations.DescribePolicyInput, ...func(*organizations.Options)) *organizations.DescribePolicyOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*organizations.DescribePolicyOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *organizations.DescribePolicyInput, ...func(*organizations.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeResourcePolicy provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DescribeResourcePolicy(ctx context.Context, params *organizations.DescribeResourcePolicyInput, optFns ...func(*organizations.Options)) (*organizations.DescribeResourcePolicyOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DescribeResourcePolicy")
	}

	var r0 *organizations.DescribeResourcePolicyOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *organizations.DescribeResourcePolicyInput, ...func(*organizations.Options)) (*organizations.DescribeResourcePolicyOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *organizations.DescribeResourcePolicyInput, ...func(*organizations.Options)) *organizations.DescribeResourcePolicyOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*organizations.DescribeResourcePolicyOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *organizations.DescribeResourcePolicyInput, ...func(*organizations.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DetachPolicy provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DetachPolicy(ctx context.Context, params *organizations.DetachPolicyInput, optFns ...func(*organizations.Options)) (*organizations.DetachPolicyOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DetachPolicy")
	}

	var r0 *organizations.DetachPolicyOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *organizations.DetachPolicyInput, ...func(*organizations.Options)) (*organizations.DetachPolicyOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *organizations.DetachPolicyInput, ...func(*organizations.Options)) *organizations.DetachPolicyOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*organizations.DetachPolicyOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *organizations.DetachPolicyInput, ...func(*organizations.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DisableAWSServiceAccess provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DisableAWSServiceAccess(ctx context.Context, params *organizations.DisableAWSServiceAccessInput, optFns ...func(*organizations.Options)) (*organizations.DisableAWSServiceAccessOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DisableAWSServiceAccess")
	}

	var r0 *organizations.DisableAWSServiceAccessOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *organizations.DisableAWSServiceAccessInput, ...func(*organizations.Options)) (*organizations.DisableAWSServiceAccessOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *organizations.DisableAWSServiceAccessInput, ...func(*organizations.Options)) *organizations.DisableAWSServiceAccessOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*organizations.DisableAWSServiceAccessOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *organizations.DisableAWSServiceAccessInput, ...func(*organizations.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DisablePolicyType provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DisablePolicyType(ctx context.Context, params *organizations.DisablePolicyTypeInput, optFns ...func(*organizations.Options)) (*organizations.DisablePolicyTypeOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DisablePolicyType")
	}

	var r0 *organizations.DisablePolicyTypeOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *organizations.DisablePolicyTypeInput, ...func(*organizations.Options)) (*organizations.DisablePolicyTypeOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *organizations.DisablePolicyTypeInput, ...func(*organizations.Options)) *organizations.DisablePolicyTypeOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*organizations.DisablePolicyTypeOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *organizations.DisablePolicyTypeInput, ...func(*organizations.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// EnableAWSServiceAccess provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) EnableAWSServiceAccess(ctx context.Context, params *organizations.EnableAWSServiceAccessInput, optFns ...func(*organizations.Options)) (*organizations.EnableAWSServiceAccessOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for EnableAWSServiceAccess")
	}

	var r0 *organizations.EnableAWSServiceAccessOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *organizations.EnableAWSServiceAccessInput, ...func(*organizations.Options)) (*organizations.EnableAWSServiceAccessOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *organizations.EnableAWSServiceAccessInput, ...func(*organizations.Options)) *organizations.EnableAWSServiceAccessOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*organizations.EnableAWSServiceAccessOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *organizations.EnableAWSServiceAccessInput, ...func(*organizations.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// EnableAllFeatures provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) EnableAllFeatures(ctx context.Context, params *organizations.EnableAllFeaturesInput, optFns ...func(*organizations.Options)) (*organizations.EnableAllFeaturesOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for EnableAllFeatures")
	}

	var r0 *organizations.EnableAllFeaturesOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *organizations.EnableAllFeaturesInput, ...func(*organizations.Options)) (*organizations.EnableAllFeaturesOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *organizations.EnableAllFeaturesInput, ...func(*organizations.Options)) *organizations.EnableAllFeaturesOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*organizations.EnableAllFeaturesOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *organizations.EnableAllFeaturesInput, ...func(*organizations.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// EnablePolicyType provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) EnablePolicyType(ctx context.Context, params *organizations.EnablePolicyTypeInput, optFns ...func(*organizations.Options)) (*organizations.EnablePolicyTypeOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for EnablePolicyType")
	}

	var r0 *organizations.EnablePolicyTypeOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *organizations.EnablePolicyTypeInput, ...func(*organizations.Options)) (*organizations.EnablePolicyTypeOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *organizations.EnablePolicyTypeInput, ...func(*organizations.Options)) *organizations.EnablePolicyTypeOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*organizations.EnablePolicyTypeOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *organizations.EnablePolicyTypeInput, ...func(*organizations.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// InviteAccountToOrganization provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) InviteAccountToOrganization(ctx context.Context, params *organizations.InviteAccountToOrganizationInput, optFns ...func(*organizations.Options)) (*organizations.InviteAccountToOrganizationOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for InviteAccountToOrganization")
	}

	var r0 *organizations.InviteAccountToOrganizationOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *organizations.InviteAccountToOrganizationInput, ...func(*organizations.Options)) (*organizations.InviteAccountToOrganizationOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *organizations.InviteAccountToOrganizationInput, ...func(*organizations.Options)) *organizations.InviteAccountToOrganizationOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*organizations.InviteAccountToOrganizationOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *organizations.InviteAccountToOrganizationInput, ...func(*organizations.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// LeaveOrganization provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) LeaveOrganization(ctx context.Context, params *organizations.LeaveOrganizationInput, optFns ...func(*organizations.Options)) (*organizations.LeaveOrganizationOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for LeaveOrganization")
	}

	var r0 *organizations.LeaveOrganizationOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *organizations.LeaveOrganizationInput, ...func(*organizations.Options)) (*organizations.LeaveOrganizationOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *organizations.LeaveOrganizationInput, ...func(*organizations.Options)) *organizations.LeaveOrganizationOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*organizations.LeaveOrganizationOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *organizations.LeaveOrganizationInput, ...func(*organizations.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListAWSServiceAccessForOrganization provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListAWSServiceAccessForOrganization(ctx context.Context, params *organizations.ListAWSServiceAccessForOrganizationInput, optFns ...func(*organizations.Options)) (*organizations.ListAWSServiceAccessForOrganizationOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListAWSServiceAccessForOrganization")
	}

	var r0 *organizations.ListAWSServiceAccessForOrganizationOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *organizations.ListAWSServiceAccessForOrganizationInput, ...func(*organizations.Options)) (*organizations.ListAWSServiceAccessForOrganizationOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *organizations.ListAWSServiceAccessForOrganizationInput, ...func(*organizations.Options)) *organizations.ListAWSServiceAccessForOrganizationOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*organizations.ListAWSServiceAccessForOrganizationOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *organizations.ListAWSServiceAccessForOrganizationInput, ...func(*organizations.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListAccounts provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListAccounts(ctx context.Context, params *organizations.ListAccountsInput, optFns ...func(*organizations.Options)) (*organizations.ListAccountsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListAccounts")
	}

	var r0 *organizations.ListAccountsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *organizations.ListAccountsInput, ...func(*organizations.Options)) (*organizations.ListAccountsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *organizations.ListAccountsInput, ...func(*organizations.Options)) *organizations.ListAccountsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*organizations.ListAccountsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *organizations.ListAccountsInput, ...func(*organizations.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListAccountsForParent provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListAccountsForParent(ctx context.Context, params *organizations.ListAccountsForParentInput, optFns ...func(*organizations.Options)) (*organizations.ListAccountsForParentOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListAccountsForParent")
	}

	var r0 *organizations.ListAccountsForParentOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *organizations.ListAccountsForParentInput, ...func(*organizations.Options)) (*organizations.ListAccountsForParentOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *organizations.ListAccountsForParentInput, ...func(*organizations.Options)) *organizations.ListAccountsForParentOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*organizations.ListAccountsForParentOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *organizations.ListAccountsForParentInput, ...func(*organizations.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListChildren provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListChildren(ctx context.Context, params *organizations.ListChildrenInput, optFns ...func(*organizations.Options)) (*organizations.ListChildrenOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListChildren")
	}

	var r0 *organizations.ListChildrenOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *organizations.ListChildrenInput, ...func(*organizations.Options)) (*organizations.ListChildrenOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *organizations.ListChildrenInput, ...func(*organizations.Options)) *organizations.ListChildrenOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*organizations.ListChildrenOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *organizations.ListChildrenInput, ...func(*organizations.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListCreateAccountStatus provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListCreateAccountStatus(ctx context.Context, params *organizations.ListCreateAccountStatusInput, optFns ...func(*organizations.Options)) (*organizations.ListCreateAccountStatusOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListCreateAccountStatus")
	}

	var r0 *organizations.ListCreateAccountStatusOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *organizations.ListCreateAccountStatusInput, ...func(*organizations.Options)) (*organizations.ListCreateAccountStatusOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *organizations.ListCreateAccountStatusInput, ...func(*organizations.Options)) *organizations.ListCreateAccountStatusOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*organizations.ListCreateAccountStatusOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *organizations.ListCreateAccountStatusInput, ...func(*organizations.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListDelegatedAdministrators provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListDelegatedAdministrators(ctx context.Context, params *organizations.ListDelegatedAdministratorsInput, optFns ...func(*organizations.Options)) (*organizations.ListDelegatedAdministratorsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListDelegatedAdministrators")
	}

	var r0 *organizations.ListDelegatedAdministratorsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *organizations.ListDelegatedAdministratorsInput, ...func(*organizations.Options)) (*organizations.ListDelegatedAdministratorsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *organizations.ListDelegatedAdministratorsInput, ...func(*organizations.Options)) *organizations.ListDelegatedAdministratorsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*organizations.ListDelegatedAdministratorsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *organizations.ListDelegatedAdministratorsInput, ...func(*organizations.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListDelegatedServicesForAccount provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListDelegatedServicesForAccount(ctx context.Context, params *organizations.ListDelegatedServicesForAccountInput, optFns ...func(*organizations.Options)) (*organizations.ListDelegatedServicesForAccountOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListDelegatedServicesForAccount")
	}

	var r0 *organizations.ListDelegatedServicesForAccountOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *organizations.ListDelegatedServicesForAccountInput, ...func(*organizations.Options)) (*organizations.ListDelegatedServicesForAccountOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *organizations.ListDelegatedServicesForAccountInput, ...func(*organizations.Options)) *organizations.ListDelegatedServicesForAccountOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*organizations.ListDelegatedServicesForAccountOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *organizations.ListDelegatedServicesForAccountInput, ...func(*organizations.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListHandshakesForAccount provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListHandshakesForAccount(ctx context.Context, params *organizations.ListHandshakesForAccountInput, optFns ...func(*organizations.Options)) (*organizations.ListHandshakesForAccountOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListHandshakesForAccount")
	}

	var r0 *organizations.ListHandshakesForAccountOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *organizations.ListHandshakesForAccountInput, ...func(*organizations.Options)) (*organizations.ListHandshakesForAccountOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *organizations.ListHandshakesForAccountInput, ...func(*organizations.Options)) *organizations.ListHandshakesForAccountOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*organizations.ListHandshakesForAccountOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *organizations.ListHandshakesForAccountInput, ...func(*organizations.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListHandshakesForOrganization provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListHandshakesForOrganization(ctx context.Context, params *organizations.ListHandshakesForOrganizationInput, optFns ...func(*organizations.Options)) (*organizations.ListHandshakesForOrganizationOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListHandshakesForOrganization")
	}

	var r0 *organizations.ListHandshakesForOrganizationOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *organizations.ListHandshakesForOrganizationInput, ...func(*organizations.Options)) (*organizations.ListHandshakesForOrganizationOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *organizations.ListHandshakesForOrganizationInput, ...func(*organizations.Options)) *organizations.ListHandshakesForOrganizationOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*organizations.ListHandshakesForOrganizationOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *organizations.ListHandshakesForOrganizationInput, ...func(*organizations.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListOrganizationalUnitsForParent provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListOrganizationalUnitsForParent(ctx context.Context, params *organizations.ListOrganizationalUnitsForParentInput, optFns ...func(*organizations.Options)) (*organizations.ListOrganizationalUnitsForParentOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListOrganizationalUnitsForParent")
	}

	var r0 *organizations.ListOrganizationalUnitsForParentOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *organizations.ListOrganizationalUnitsForParentInput, ...func(*organizations.Options)) (*organizations.ListOrganizationalUnitsForParentOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *organizations.ListOrganizationalUnitsForParentInput, ...func(*organizations.Options)) *organizations.ListOrganizationalUnitsForParentOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*organizations.ListOrganizationalUnitsForParentOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *organizations.ListOrganizationalUnitsForParentInput, ...func(*organizations.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListParents provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListParents(ctx context.Context, params *organizations.ListParentsInput, optFns ...func(*organizations.Options)) (*organizations.ListParentsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListParents")
	}

	var r0 *organizations.ListParentsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *organizations.ListParentsInput, ...func(*organizations.Options)) (*organizations.ListParentsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *organizations.ListParentsInput, ...func(*organizations.Options)) *organizations.ListParentsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*organizations.ListParentsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *organizations.ListParentsInput, ...func(*organizations.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListPolicies provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListPolicies(ctx context.Context, params *organizations.ListPoliciesInput, optFns ...func(*organizations.Options)) (*organizations.ListPoliciesOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListPolicies")
	}

	var r0 *organizations.ListPoliciesOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *organizations.ListPoliciesInput, ...func(*organizations.Options)) (*organizations.ListPoliciesOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *organizations.ListPoliciesInput, ...func(*organizations.Options)) *organizations.ListPoliciesOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*organizations.ListPoliciesOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *organizations.ListPoliciesInput, ...func(*organizations.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListPoliciesForTarget provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListPoliciesForTarget(ctx context.Context, params *organizations.ListPoliciesForTargetInput, optFns ...func(*organizations.Options)) (*organizations.ListPoliciesForTargetOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListPoliciesForTarget")
	}

	var r0 *organizations.ListPoliciesForTargetOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *organizations.ListPoliciesForTargetInput, ...func(*organizations.Options)) (*organizations.ListPoliciesForTargetOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *organizations.ListPoliciesForTargetInput, ...func(*organizations.Options)) *organizations.ListPoliciesForTargetOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*organizations.ListPoliciesForTargetOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *organizations.ListPoliciesForTargetInput, ...func(*organizations.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListRoots provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListRoots(ctx context.Context, params *organizations.ListRootsInput, optFns ...func(*organizations.Options)) (*organizations.ListRootsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListRoots")
	}

	var r0 *organizations.ListRootsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *organizations.ListRootsInput, ...func(*organizations.Options)) (*organizations.ListRootsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *organizations.ListRootsInput, ...func(*organizations.Options)) *organizations.ListRootsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*organizations.ListRootsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *organizations.ListRootsInput, ...func(*organizations.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListTagsForResource provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListTagsForResource(ctx context.Context, params *organizations.ListTagsForResourceInput, optFns ...func(*organizations.Options)) (*organizations.ListTagsForResourceOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListTagsForResource")
	}

	var r0 *organizations.ListTagsForResourceOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *organizations.ListTagsForResourceInput, ...func(*organizations.Options)) (*organizations.ListTagsForResourceOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *organizations.ListTagsForResourceInput, ...func(*organizations.Options)) *organizations.ListTagsForResourceOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*organizations.ListTagsForResourceOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *organizations.ListTagsForResourceInput, ...func(*organizations.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListTargetsForPolicy provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListTargetsForPolicy(ctx context.Context, params *organizations.ListTargetsForPolicyInput, optFns ...func(*organizations.Options)) (*organizations.ListTargetsForPolicyOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListTargetsForPolicy")
	}

	var r0 *organizations.ListTargetsForPolicyOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *organizations.ListTargetsForPolicyInput, ...func(*organizations.Options)) (*organizations.ListTargetsForPolicyOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *organizations.ListTargetsForPolicyInput, ...func(*organizations.Options)) *organizations.ListTargetsForPolicyOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*organizations.ListTargetsForPolicyOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *organizations.ListTargetsForPolicyInput, ...func(*organizations.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MoveAccount provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) MoveAccount(ctx context.Context, params *organizations.MoveAccountInput, optFns ...func(*organizations.Options)) (*organizations.MoveAccountOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for MoveAccount")
	}

	var r0 *organizations.MoveAccountOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *organizations.MoveAccountInput, ...func(*organizations.Options)) (*organizations.MoveAccountOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *organizations.MoveAccountInput, ...func(*organizations.Options)) *organizations.MoveAccountOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*organizations.MoveAccountOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *organizations.MoveAccountInput, ...func(*organizations.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Options provides a mock function with no fields
func (_m *IClient) Options() organizations.Options {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Options")
	}

	var r0 organizations.Options
	if rf, ok := ret.Get(0).(func() organizations.Options); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(organizations.Options)
	}

	return r0
}

// PutResourcePolicy provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) PutResourcePolicy(ctx context.Context, params *organizations.PutResourcePolicyInput, optFns ...func(*organizations.Options)) (*organizations.PutResourcePolicyOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for PutResourcePolicy")
	}

	var r0 *organizations.PutResourcePolicyOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *organizations.PutResourcePolicyInput, ...func(*organizations.Options)) (*organizations.PutResourcePolicyOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *organizations.PutResourcePolicyInput, ...func(*organizations.Options)) *organizations.PutResourcePolicyOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*organizations.PutResourcePolicyOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *organizations.PutResourcePolicyInput, ...func(*organizations.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RegisterDelegatedAdministrator provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) RegisterDelegatedAdministrator(ctx context.Context, params *organizations.RegisterDelegatedAdministratorInput, optFns ...func(*organizations.Options)) (*organizations.RegisterDelegatedAdministratorOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for RegisterDelegatedAdministrator")
	}

	var r0 *organizations.RegisterDelegatedAdministratorOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *organizations.RegisterDelegatedAdministratorInput, ...func(*organizations.Options)) (*organizations.RegisterDelegatedAdministratorOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *organizations.RegisterDelegatedAdministratorInput, ...func(*organizations.Options)) *organizations.RegisterDelegatedAdministratorOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*organizations.RegisterDelegatedAdministratorOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *organizations.RegisterDelegatedAdministratorInput, ...func(*organizations.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RemoveAccountFromOrganization provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) RemoveAccountFromOrganization(ctx context.Context, params *organizations.RemoveAccountFromOrganizationInput, optFns ...func(*organizations.Options)) (*organizations.RemoveAccountFromOrganizationOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for RemoveAccountFromOrganization")
	}

	var r0 *organizations.RemoveAccountFromOrganizationOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *organizations.RemoveAccountFromOrganizationInput, ...func(*organizations.Options)) (*organizations.RemoveAccountFromOrganizationOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *organizations.RemoveAccountFromOrganizationInput, ...func(*organizations.Options)) *organizations.RemoveAccountFromOrganizationOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*organizations.RemoveAccountFromOrganizationOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *organizations.RemoveAccountFromOrganizationInput, ...func(*organizations.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// TagResource provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) TagResource(ctx context.Context, params *organizations.TagResourceInput, optFns ...func(*organizations.Options)) (*organizations.TagResourceOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for TagResource")
	}

	var r0 *organizations.TagResourceOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *organizations.TagResourceInput, ...func(*organizations.Options)) (*organizations.TagResourceOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *organizations.TagResourceInput, ...func(*organizations.Options)) *organizations.TagResourceOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*organizations.TagResourceOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *organizations.TagResourceInput, ...func(*organizations.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UntagResource provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UntagResource(ctx context.Context, params *organizations.UntagResourceInput, optFns ...func(*organizations.Options)) (*organizations.UntagResourceOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UntagResource")
	}

	var r0 *organizations.UntagResourceOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *organizations.UntagResourceInput, ...func(*organizations.Options)) (*organizations.UntagResourceOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *organizations.UntagResourceInput, ...func(*organizations.Options)) *organizations.UntagResourceOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*organizations.UntagResourceOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *organizations.UntagResourceInput, ...func(*organizations.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateOrganizationalUnit provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UpdateOrganizationalUnit(ctx context.Context, params *organizations.UpdateOrganizationalUnitInput, optFns ...func(*organizations.Options)) (*organizations.UpdateOrganizationalUnitOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateOrganizationalUnit")
	}

	var r0 *organizations.UpdateOrganizationalUnitOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *organizations.UpdateOrganizationalUnitInput, ...func(*organizations.Options)) (*organizations.UpdateOrganizationalUnitOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *organizations.UpdateOrganizationalUnitInput, ...func(*organizations.Options)) *organizations.UpdateOrganizationalUnitOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*organizations.UpdateOrganizationalUnitOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *organizations.UpdateOrganizationalUnitInput, ...func(*organizations.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdatePolicy provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UpdatePolicy(ctx context.Context, params *organizations.UpdatePolicyInput, optFns ...func(*organizations.Options)) (*organizations.UpdatePolicyOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdatePolicy")
	}

	var r0 *organizations.UpdatePolicyOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *organizations.UpdatePolicyInput, ...func(*organizations.Options)) (*organizations.UpdatePolicyOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *organizations.UpdatePolicyInput, ...func(*organizations.Options)) *organizations.UpdatePolicyOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*organizations.UpdatePolicyOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *organizations.UpdatePolicyInput, ...func(*organizations.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewIClient creates a new instance of IClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewIClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *IClient {
	mock := &IClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
