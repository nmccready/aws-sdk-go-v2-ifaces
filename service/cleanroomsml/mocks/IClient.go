// Code generated by mockery v2.43.2. DO NOT EDIT.

package mocks

import (
	cleanroomsml "github.com/aws/aws-sdk-go-v2/service/cleanroomsml"

	context "context"

	mock "github.com/stretchr/testify/mock"
)

// IClient is an autogenerated mock type for the IClient type
type IClient struct {
	mock.Mock
}

// CancelTrainedModel provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CancelTrainedModel(ctx context.Context, params *cleanroomsml.CancelTrainedModelInput, optFns ...func(*cleanroomsml.Options)) (*cleanroomsml.CancelTrainedModelOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CancelTrainedModel")
	}

	var r0 *cleanroomsml.CancelTrainedModelOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *cleanroomsml.CancelTrainedModelInput, ...func(*cleanroomsml.Options)) (*cleanroomsml.CancelTrainedModelOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *cleanroomsml.CancelTrainedModelInput, ...func(*cleanroomsml.Options)) *cleanroomsml.CancelTrainedModelOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cleanroomsml.CancelTrainedModelOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *cleanroomsml.CancelTrainedModelInput, ...func(*cleanroomsml.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CancelTrainedModelInferenceJob provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CancelTrainedModelInferenceJob(ctx context.Context, params *cleanroomsml.CancelTrainedModelInferenceJobInput, optFns ...func(*cleanroomsml.Options)) (*cleanroomsml.CancelTrainedModelInferenceJobOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CancelTrainedModelInferenceJob")
	}

	var r0 *cleanroomsml.CancelTrainedModelInferenceJobOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *cleanroomsml.CancelTrainedModelInferenceJobInput, ...func(*cleanroomsml.Options)) (*cleanroomsml.CancelTrainedModelInferenceJobOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *cleanroomsml.CancelTrainedModelInferenceJobInput, ...func(*cleanroomsml.Options)) *cleanroomsml.CancelTrainedModelInferenceJobOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cleanroomsml.CancelTrainedModelInferenceJobOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *cleanroomsml.CancelTrainedModelInferenceJobInput, ...func(*cleanroomsml.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateAudienceModel provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CreateAudienceModel(ctx context.Context, params *cleanroomsml.CreateAudienceModelInput, optFns ...func(*cleanroomsml.Options)) (*cleanroomsml.CreateAudienceModelOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateAudienceModel")
	}

	var r0 *cleanroomsml.CreateAudienceModelOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *cleanroomsml.CreateAudienceModelInput, ...func(*cleanroomsml.Options)) (*cleanroomsml.CreateAudienceModelOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *cleanroomsml.CreateAudienceModelInput, ...func(*cleanroomsml.Options)) *cleanroomsml.CreateAudienceModelOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cleanroomsml.CreateAudienceModelOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *cleanroomsml.CreateAudienceModelInput, ...func(*cleanroomsml.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateConfiguredAudienceModel provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CreateConfiguredAudienceModel(ctx context.Context, params *cleanroomsml.CreateConfiguredAudienceModelInput, optFns ...func(*cleanroomsml.Options)) (*cleanroomsml.CreateConfiguredAudienceModelOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateConfiguredAudienceModel")
	}

	var r0 *cleanroomsml.CreateConfiguredAudienceModelOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *cleanroomsml.CreateConfiguredAudienceModelInput, ...func(*cleanroomsml.Options)) (*cleanroomsml.CreateConfiguredAudienceModelOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *cleanroomsml.CreateConfiguredAudienceModelInput, ...func(*cleanroomsml.Options)) *cleanroomsml.CreateConfiguredAudienceModelOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cleanroomsml.CreateConfiguredAudienceModelOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *cleanroomsml.CreateConfiguredAudienceModelInput, ...func(*cleanroomsml.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateConfiguredModelAlgorithm provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CreateConfiguredModelAlgorithm(ctx context.Context, params *cleanroomsml.CreateConfiguredModelAlgorithmInput, optFns ...func(*cleanroomsml.Options)) (*cleanroomsml.CreateConfiguredModelAlgorithmOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateConfiguredModelAlgorithm")
	}

	var r0 *cleanroomsml.CreateConfiguredModelAlgorithmOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *cleanroomsml.CreateConfiguredModelAlgorithmInput, ...func(*cleanroomsml.Options)) (*cleanroomsml.CreateConfiguredModelAlgorithmOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *cleanroomsml.CreateConfiguredModelAlgorithmInput, ...func(*cleanroomsml.Options)) *cleanroomsml.CreateConfiguredModelAlgorithmOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cleanroomsml.CreateConfiguredModelAlgorithmOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *cleanroomsml.CreateConfiguredModelAlgorithmInput, ...func(*cleanroomsml.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateConfiguredModelAlgorithmAssociation provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CreateConfiguredModelAlgorithmAssociation(ctx context.Context, params *cleanroomsml.CreateConfiguredModelAlgorithmAssociationInput, optFns ...func(*cleanroomsml.Options)) (*cleanroomsml.CreateConfiguredModelAlgorithmAssociationOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateConfiguredModelAlgorithmAssociation")
	}

	var r0 *cleanroomsml.CreateConfiguredModelAlgorithmAssociationOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *cleanroomsml.CreateConfiguredModelAlgorithmAssociationInput, ...func(*cleanroomsml.Options)) (*cleanroomsml.CreateConfiguredModelAlgorithmAssociationOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *cleanroomsml.CreateConfiguredModelAlgorithmAssociationInput, ...func(*cleanroomsml.Options)) *cleanroomsml.CreateConfiguredModelAlgorithmAssociationOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cleanroomsml.CreateConfiguredModelAlgorithmAssociationOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *cleanroomsml.CreateConfiguredModelAlgorithmAssociationInput, ...func(*cleanroomsml.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateMLInputChannel provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CreateMLInputChannel(ctx context.Context, params *cleanroomsml.CreateMLInputChannelInput, optFns ...func(*cleanroomsml.Options)) (*cleanroomsml.CreateMLInputChannelOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateMLInputChannel")
	}

	var r0 *cleanroomsml.CreateMLInputChannelOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *cleanroomsml.CreateMLInputChannelInput, ...func(*cleanroomsml.Options)) (*cleanroomsml.CreateMLInputChannelOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *cleanroomsml.CreateMLInputChannelInput, ...func(*cleanroomsml.Options)) *cleanroomsml.CreateMLInputChannelOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cleanroomsml.CreateMLInputChannelOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *cleanroomsml.CreateMLInputChannelInput, ...func(*cleanroomsml.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateTrainedModel provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CreateTrainedModel(ctx context.Context, params *cleanroomsml.CreateTrainedModelInput, optFns ...func(*cleanroomsml.Options)) (*cleanroomsml.CreateTrainedModelOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateTrainedModel")
	}

	var r0 *cleanroomsml.CreateTrainedModelOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *cleanroomsml.CreateTrainedModelInput, ...func(*cleanroomsml.Options)) (*cleanroomsml.CreateTrainedModelOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *cleanroomsml.CreateTrainedModelInput, ...func(*cleanroomsml.Options)) *cleanroomsml.CreateTrainedModelOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cleanroomsml.CreateTrainedModelOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *cleanroomsml.CreateTrainedModelInput, ...func(*cleanroomsml.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateTrainingDataset provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CreateTrainingDataset(ctx context.Context, params *cleanroomsml.CreateTrainingDatasetInput, optFns ...func(*cleanroomsml.Options)) (*cleanroomsml.CreateTrainingDatasetOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateTrainingDataset")
	}

	var r0 *cleanroomsml.CreateTrainingDatasetOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *cleanroomsml.CreateTrainingDatasetInput, ...func(*cleanroomsml.Options)) (*cleanroomsml.CreateTrainingDatasetOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *cleanroomsml.CreateTrainingDatasetInput, ...func(*cleanroomsml.Options)) *cleanroomsml.CreateTrainingDatasetOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cleanroomsml.CreateTrainingDatasetOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *cleanroomsml.CreateTrainingDatasetInput, ...func(*cleanroomsml.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteAudienceGenerationJob provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteAudienceGenerationJob(ctx context.Context, params *cleanroomsml.DeleteAudienceGenerationJobInput, optFns ...func(*cleanroomsml.Options)) (*cleanroomsml.DeleteAudienceGenerationJobOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteAudienceGenerationJob")
	}

	var r0 *cleanroomsml.DeleteAudienceGenerationJobOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *cleanroomsml.DeleteAudienceGenerationJobInput, ...func(*cleanroomsml.Options)) (*cleanroomsml.DeleteAudienceGenerationJobOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *cleanroomsml.DeleteAudienceGenerationJobInput, ...func(*cleanroomsml.Options)) *cleanroomsml.DeleteAudienceGenerationJobOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cleanroomsml.DeleteAudienceGenerationJobOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *cleanroomsml.DeleteAudienceGenerationJobInput, ...func(*cleanroomsml.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteAudienceModel provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteAudienceModel(ctx context.Context, params *cleanroomsml.DeleteAudienceModelInput, optFns ...func(*cleanroomsml.Options)) (*cleanroomsml.DeleteAudienceModelOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteAudienceModel")
	}

	var r0 *cleanroomsml.DeleteAudienceModelOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *cleanroomsml.DeleteAudienceModelInput, ...func(*cleanroomsml.Options)) (*cleanroomsml.DeleteAudienceModelOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *cleanroomsml.DeleteAudienceModelInput, ...func(*cleanroomsml.Options)) *cleanroomsml.DeleteAudienceModelOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cleanroomsml.DeleteAudienceModelOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *cleanroomsml.DeleteAudienceModelInput, ...func(*cleanroomsml.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteConfiguredAudienceModel provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteConfiguredAudienceModel(ctx context.Context, params *cleanroomsml.DeleteConfiguredAudienceModelInput, optFns ...func(*cleanroomsml.Options)) (*cleanroomsml.DeleteConfiguredAudienceModelOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteConfiguredAudienceModel")
	}

	var r0 *cleanroomsml.DeleteConfiguredAudienceModelOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *cleanroomsml.DeleteConfiguredAudienceModelInput, ...func(*cleanroomsml.Options)) (*cleanroomsml.DeleteConfiguredAudienceModelOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *cleanroomsml.DeleteConfiguredAudienceModelInput, ...func(*cleanroomsml.Options)) *cleanroomsml.DeleteConfiguredAudienceModelOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cleanroomsml.DeleteConfiguredAudienceModelOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *cleanroomsml.DeleteConfiguredAudienceModelInput, ...func(*cleanroomsml.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteConfiguredAudienceModelPolicy provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteConfiguredAudienceModelPolicy(ctx context.Context, params *cleanroomsml.DeleteConfiguredAudienceModelPolicyInput, optFns ...func(*cleanroomsml.Options)) (*cleanroomsml.DeleteConfiguredAudienceModelPolicyOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteConfiguredAudienceModelPolicy")
	}

	var r0 *cleanroomsml.DeleteConfiguredAudienceModelPolicyOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *cleanroomsml.DeleteConfiguredAudienceModelPolicyInput, ...func(*cleanroomsml.Options)) (*cleanroomsml.DeleteConfiguredAudienceModelPolicyOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *cleanroomsml.DeleteConfiguredAudienceModelPolicyInput, ...func(*cleanroomsml.Options)) *cleanroomsml.DeleteConfiguredAudienceModelPolicyOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cleanroomsml.DeleteConfiguredAudienceModelPolicyOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *cleanroomsml.DeleteConfiguredAudienceModelPolicyInput, ...func(*cleanroomsml.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteConfiguredModelAlgorithm provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteConfiguredModelAlgorithm(ctx context.Context, params *cleanroomsml.DeleteConfiguredModelAlgorithmInput, optFns ...func(*cleanroomsml.Options)) (*cleanroomsml.DeleteConfiguredModelAlgorithmOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteConfiguredModelAlgorithm")
	}

	var r0 *cleanroomsml.DeleteConfiguredModelAlgorithmOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *cleanroomsml.DeleteConfiguredModelAlgorithmInput, ...func(*cleanroomsml.Options)) (*cleanroomsml.DeleteConfiguredModelAlgorithmOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *cleanroomsml.DeleteConfiguredModelAlgorithmInput, ...func(*cleanroomsml.Options)) *cleanroomsml.DeleteConfiguredModelAlgorithmOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cleanroomsml.DeleteConfiguredModelAlgorithmOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *cleanroomsml.DeleteConfiguredModelAlgorithmInput, ...func(*cleanroomsml.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteConfiguredModelAlgorithmAssociation provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteConfiguredModelAlgorithmAssociation(ctx context.Context, params *cleanroomsml.DeleteConfiguredModelAlgorithmAssociationInput, optFns ...func(*cleanroomsml.Options)) (*cleanroomsml.DeleteConfiguredModelAlgorithmAssociationOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteConfiguredModelAlgorithmAssociation")
	}

	var r0 *cleanroomsml.DeleteConfiguredModelAlgorithmAssociationOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *cleanroomsml.DeleteConfiguredModelAlgorithmAssociationInput, ...func(*cleanroomsml.Options)) (*cleanroomsml.DeleteConfiguredModelAlgorithmAssociationOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *cleanroomsml.DeleteConfiguredModelAlgorithmAssociationInput, ...func(*cleanroomsml.Options)) *cleanroomsml.DeleteConfiguredModelAlgorithmAssociationOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cleanroomsml.DeleteConfiguredModelAlgorithmAssociationOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *cleanroomsml.DeleteConfiguredModelAlgorithmAssociationInput, ...func(*cleanroomsml.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteMLConfiguration provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteMLConfiguration(ctx context.Context, params *cleanroomsml.DeleteMLConfigurationInput, optFns ...func(*cleanroomsml.Options)) (*cleanroomsml.DeleteMLConfigurationOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteMLConfiguration")
	}

	var r0 *cleanroomsml.DeleteMLConfigurationOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *cleanroomsml.DeleteMLConfigurationInput, ...func(*cleanroomsml.Options)) (*cleanroomsml.DeleteMLConfigurationOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *cleanroomsml.DeleteMLConfigurationInput, ...func(*cleanroomsml.Options)) *cleanroomsml.DeleteMLConfigurationOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cleanroomsml.DeleteMLConfigurationOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *cleanroomsml.DeleteMLConfigurationInput, ...func(*cleanroomsml.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteMLInputChannelData provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteMLInputChannelData(ctx context.Context, params *cleanroomsml.DeleteMLInputChannelDataInput, optFns ...func(*cleanroomsml.Options)) (*cleanroomsml.DeleteMLInputChannelDataOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteMLInputChannelData")
	}

	var r0 *cleanroomsml.DeleteMLInputChannelDataOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *cleanroomsml.DeleteMLInputChannelDataInput, ...func(*cleanroomsml.Options)) (*cleanroomsml.DeleteMLInputChannelDataOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *cleanroomsml.DeleteMLInputChannelDataInput, ...func(*cleanroomsml.Options)) *cleanroomsml.DeleteMLInputChannelDataOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cleanroomsml.DeleteMLInputChannelDataOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *cleanroomsml.DeleteMLInputChannelDataInput, ...func(*cleanroomsml.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteTrainedModelOutput provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteTrainedModelOutput(ctx context.Context, params *cleanroomsml.DeleteTrainedModelOutputInput, optFns ...func(*cleanroomsml.Options)) (*cleanroomsml.DeleteTrainedModelOutputOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteTrainedModelOutput")
	}

	var r0 *cleanroomsml.DeleteTrainedModelOutputOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *cleanroomsml.DeleteTrainedModelOutputInput, ...func(*cleanroomsml.Options)) (*cleanroomsml.DeleteTrainedModelOutputOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *cleanroomsml.DeleteTrainedModelOutputInput, ...func(*cleanroomsml.Options)) *cleanroomsml.DeleteTrainedModelOutputOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cleanroomsml.DeleteTrainedModelOutputOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *cleanroomsml.DeleteTrainedModelOutputInput, ...func(*cleanroomsml.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteTrainingDataset provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteTrainingDataset(ctx context.Context, params *cleanroomsml.DeleteTrainingDatasetInput, optFns ...func(*cleanroomsml.Options)) (*cleanroomsml.DeleteTrainingDatasetOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteTrainingDataset")
	}

	var r0 *cleanroomsml.DeleteTrainingDatasetOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *cleanroomsml.DeleteTrainingDatasetInput, ...func(*cleanroomsml.Options)) (*cleanroomsml.DeleteTrainingDatasetOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *cleanroomsml.DeleteTrainingDatasetInput, ...func(*cleanroomsml.Options)) *cleanroomsml.DeleteTrainingDatasetOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cleanroomsml.DeleteTrainingDatasetOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *cleanroomsml.DeleteTrainingDatasetInput, ...func(*cleanroomsml.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAudienceGenerationJob provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetAudienceGenerationJob(ctx context.Context, params *cleanroomsml.GetAudienceGenerationJobInput, optFns ...func(*cleanroomsml.Options)) (*cleanroomsml.GetAudienceGenerationJobOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetAudienceGenerationJob")
	}

	var r0 *cleanroomsml.GetAudienceGenerationJobOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *cleanroomsml.GetAudienceGenerationJobInput, ...func(*cleanroomsml.Options)) (*cleanroomsml.GetAudienceGenerationJobOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *cleanroomsml.GetAudienceGenerationJobInput, ...func(*cleanroomsml.Options)) *cleanroomsml.GetAudienceGenerationJobOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cleanroomsml.GetAudienceGenerationJobOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *cleanroomsml.GetAudienceGenerationJobInput, ...func(*cleanroomsml.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAudienceModel provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetAudienceModel(ctx context.Context, params *cleanroomsml.GetAudienceModelInput, optFns ...func(*cleanroomsml.Options)) (*cleanroomsml.GetAudienceModelOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetAudienceModel")
	}

	var r0 *cleanroomsml.GetAudienceModelOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *cleanroomsml.GetAudienceModelInput, ...func(*cleanroomsml.Options)) (*cleanroomsml.GetAudienceModelOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *cleanroomsml.GetAudienceModelInput, ...func(*cleanroomsml.Options)) *cleanroomsml.GetAudienceModelOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cleanroomsml.GetAudienceModelOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *cleanroomsml.GetAudienceModelInput, ...func(*cleanroomsml.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetCollaborationConfiguredModelAlgorithmAssociation provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetCollaborationConfiguredModelAlgorithmAssociation(ctx context.Context, params *cleanroomsml.GetCollaborationConfiguredModelAlgorithmAssociationInput, optFns ...func(*cleanroomsml.Options)) (*cleanroomsml.GetCollaborationConfiguredModelAlgorithmAssociationOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetCollaborationConfiguredModelAlgorithmAssociation")
	}

	var r0 *cleanroomsml.GetCollaborationConfiguredModelAlgorithmAssociationOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *cleanroomsml.GetCollaborationConfiguredModelAlgorithmAssociationInput, ...func(*cleanroomsml.Options)) (*cleanroomsml.GetCollaborationConfiguredModelAlgorithmAssociationOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *cleanroomsml.GetCollaborationConfiguredModelAlgorithmAssociationInput, ...func(*cleanroomsml.Options)) *cleanroomsml.GetCollaborationConfiguredModelAlgorithmAssociationOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cleanroomsml.GetCollaborationConfiguredModelAlgorithmAssociationOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *cleanroomsml.GetCollaborationConfiguredModelAlgorithmAssociationInput, ...func(*cleanroomsml.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetCollaborationMLInputChannel provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetCollaborationMLInputChannel(ctx context.Context, params *cleanroomsml.GetCollaborationMLInputChannelInput, optFns ...func(*cleanroomsml.Options)) (*cleanroomsml.GetCollaborationMLInputChannelOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetCollaborationMLInputChannel")
	}

	var r0 *cleanroomsml.GetCollaborationMLInputChannelOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *cleanroomsml.GetCollaborationMLInputChannelInput, ...func(*cleanroomsml.Options)) (*cleanroomsml.GetCollaborationMLInputChannelOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *cleanroomsml.GetCollaborationMLInputChannelInput, ...func(*cleanroomsml.Options)) *cleanroomsml.GetCollaborationMLInputChannelOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cleanroomsml.GetCollaborationMLInputChannelOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *cleanroomsml.GetCollaborationMLInputChannelInput, ...func(*cleanroomsml.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetCollaborationTrainedModel provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetCollaborationTrainedModel(ctx context.Context, params *cleanroomsml.GetCollaborationTrainedModelInput, optFns ...func(*cleanroomsml.Options)) (*cleanroomsml.GetCollaborationTrainedModelOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetCollaborationTrainedModel")
	}

	var r0 *cleanroomsml.GetCollaborationTrainedModelOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *cleanroomsml.GetCollaborationTrainedModelInput, ...func(*cleanroomsml.Options)) (*cleanroomsml.GetCollaborationTrainedModelOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *cleanroomsml.GetCollaborationTrainedModelInput, ...func(*cleanroomsml.Options)) *cleanroomsml.GetCollaborationTrainedModelOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cleanroomsml.GetCollaborationTrainedModelOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *cleanroomsml.GetCollaborationTrainedModelInput, ...func(*cleanroomsml.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetConfiguredAudienceModel provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetConfiguredAudienceModel(ctx context.Context, params *cleanroomsml.GetConfiguredAudienceModelInput, optFns ...func(*cleanroomsml.Options)) (*cleanroomsml.GetConfiguredAudienceModelOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetConfiguredAudienceModel")
	}

	var r0 *cleanroomsml.GetConfiguredAudienceModelOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *cleanroomsml.GetConfiguredAudienceModelInput, ...func(*cleanroomsml.Options)) (*cleanroomsml.GetConfiguredAudienceModelOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *cleanroomsml.GetConfiguredAudienceModelInput, ...func(*cleanroomsml.Options)) *cleanroomsml.GetConfiguredAudienceModelOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cleanroomsml.GetConfiguredAudienceModelOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *cleanroomsml.GetConfiguredAudienceModelInput, ...func(*cleanroomsml.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetConfiguredAudienceModelPolicy provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetConfiguredAudienceModelPolicy(ctx context.Context, params *cleanroomsml.GetConfiguredAudienceModelPolicyInput, optFns ...func(*cleanroomsml.Options)) (*cleanroomsml.GetConfiguredAudienceModelPolicyOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetConfiguredAudienceModelPolicy")
	}

	var r0 *cleanroomsml.GetConfiguredAudienceModelPolicyOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *cleanroomsml.GetConfiguredAudienceModelPolicyInput, ...func(*cleanroomsml.Options)) (*cleanroomsml.GetConfiguredAudienceModelPolicyOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *cleanroomsml.GetConfiguredAudienceModelPolicyInput, ...func(*cleanroomsml.Options)) *cleanroomsml.GetConfiguredAudienceModelPolicyOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cleanroomsml.GetConfiguredAudienceModelPolicyOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *cleanroomsml.GetConfiguredAudienceModelPolicyInput, ...func(*cleanroomsml.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetConfiguredModelAlgorithm provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetConfiguredModelAlgorithm(ctx context.Context, params *cleanroomsml.GetConfiguredModelAlgorithmInput, optFns ...func(*cleanroomsml.Options)) (*cleanroomsml.GetConfiguredModelAlgorithmOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetConfiguredModelAlgorithm")
	}

	var r0 *cleanroomsml.GetConfiguredModelAlgorithmOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *cleanroomsml.GetConfiguredModelAlgorithmInput, ...func(*cleanroomsml.Options)) (*cleanroomsml.GetConfiguredModelAlgorithmOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *cleanroomsml.GetConfiguredModelAlgorithmInput, ...func(*cleanroomsml.Options)) *cleanroomsml.GetConfiguredModelAlgorithmOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cleanroomsml.GetConfiguredModelAlgorithmOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *cleanroomsml.GetConfiguredModelAlgorithmInput, ...func(*cleanroomsml.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetConfiguredModelAlgorithmAssociation provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetConfiguredModelAlgorithmAssociation(ctx context.Context, params *cleanroomsml.GetConfiguredModelAlgorithmAssociationInput, optFns ...func(*cleanroomsml.Options)) (*cleanroomsml.GetConfiguredModelAlgorithmAssociationOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetConfiguredModelAlgorithmAssociation")
	}

	var r0 *cleanroomsml.GetConfiguredModelAlgorithmAssociationOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *cleanroomsml.GetConfiguredModelAlgorithmAssociationInput, ...func(*cleanroomsml.Options)) (*cleanroomsml.GetConfiguredModelAlgorithmAssociationOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *cleanroomsml.GetConfiguredModelAlgorithmAssociationInput, ...func(*cleanroomsml.Options)) *cleanroomsml.GetConfiguredModelAlgorithmAssociationOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cleanroomsml.GetConfiguredModelAlgorithmAssociationOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *cleanroomsml.GetConfiguredModelAlgorithmAssociationInput, ...func(*cleanroomsml.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetMLConfiguration provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetMLConfiguration(ctx context.Context, params *cleanroomsml.GetMLConfigurationInput, optFns ...func(*cleanroomsml.Options)) (*cleanroomsml.GetMLConfigurationOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetMLConfiguration")
	}

	var r0 *cleanroomsml.GetMLConfigurationOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *cleanroomsml.GetMLConfigurationInput, ...func(*cleanroomsml.Options)) (*cleanroomsml.GetMLConfigurationOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *cleanroomsml.GetMLConfigurationInput, ...func(*cleanroomsml.Options)) *cleanroomsml.GetMLConfigurationOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cleanroomsml.GetMLConfigurationOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *cleanroomsml.GetMLConfigurationInput, ...func(*cleanroomsml.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetMLInputChannel provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetMLInputChannel(ctx context.Context, params *cleanroomsml.GetMLInputChannelInput, optFns ...func(*cleanroomsml.Options)) (*cleanroomsml.GetMLInputChannelOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetMLInputChannel")
	}

	var r0 *cleanroomsml.GetMLInputChannelOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *cleanroomsml.GetMLInputChannelInput, ...func(*cleanroomsml.Options)) (*cleanroomsml.GetMLInputChannelOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *cleanroomsml.GetMLInputChannelInput, ...func(*cleanroomsml.Options)) *cleanroomsml.GetMLInputChannelOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cleanroomsml.GetMLInputChannelOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *cleanroomsml.GetMLInputChannelInput, ...func(*cleanroomsml.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetTrainedModel provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetTrainedModel(ctx context.Context, params *cleanroomsml.GetTrainedModelInput, optFns ...func(*cleanroomsml.Options)) (*cleanroomsml.GetTrainedModelOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetTrainedModel")
	}

	var r0 *cleanroomsml.GetTrainedModelOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *cleanroomsml.GetTrainedModelInput, ...func(*cleanroomsml.Options)) (*cleanroomsml.GetTrainedModelOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *cleanroomsml.GetTrainedModelInput, ...func(*cleanroomsml.Options)) *cleanroomsml.GetTrainedModelOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cleanroomsml.GetTrainedModelOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *cleanroomsml.GetTrainedModelInput, ...func(*cleanroomsml.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetTrainedModelInferenceJob provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetTrainedModelInferenceJob(ctx context.Context, params *cleanroomsml.GetTrainedModelInferenceJobInput, optFns ...func(*cleanroomsml.Options)) (*cleanroomsml.GetTrainedModelInferenceJobOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetTrainedModelInferenceJob")
	}

	var r0 *cleanroomsml.GetTrainedModelInferenceJobOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *cleanroomsml.GetTrainedModelInferenceJobInput, ...func(*cleanroomsml.Options)) (*cleanroomsml.GetTrainedModelInferenceJobOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *cleanroomsml.GetTrainedModelInferenceJobInput, ...func(*cleanroomsml.Options)) *cleanroomsml.GetTrainedModelInferenceJobOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cleanroomsml.GetTrainedModelInferenceJobOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *cleanroomsml.GetTrainedModelInferenceJobInput, ...func(*cleanroomsml.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetTrainingDataset provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetTrainingDataset(ctx context.Context, params *cleanroomsml.GetTrainingDatasetInput, optFns ...func(*cleanroomsml.Options)) (*cleanroomsml.GetTrainingDatasetOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetTrainingDataset")
	}

	var r0 *cleanroomsml.GetTrainingDatasetOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *cleanroomsml.GetTrainingDatasetInput, ...func(*cleanroomsml.Options)) (*cleanroomsml.GetTrainingDatasetOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *cleanroomsml.GetTrainingDatasetInput, ...func(*cleanroomsml.Options)) *cleanroomsml.GetTrainingDatasetOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cleanroomsml.GetTrainingDatasetOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *cleanroomsml.GetTrainingDatasetInput, ...func(*cleanroomsml.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListAudienceExportJobs provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListAudienceExportJobs(ctx context.Context, params *cleanroomsml.ListAudienceExportJobsInput, optFns ...func(*cleanroomsml.Options)) (*cleanroomsml.ListAudienceExportJobsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListAudienceExportJobs")
	}

	var r0 *cleanroomsml.ListAudienceExportJobsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *cleanroomsml.ListAudienceExportJobsInput, ...func(*cleanroomsml.Options)) (*cleanroomsml.ListAudienceExportJobsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *cleanroomsml.ListAudienceExportJobsInput, ...func(*cleanroomsml.Options)) *cleanroomsml.ListAudienceExportJobsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cleanroomsml.ListAudienceExportJobsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *cleanroomsml.ListAudienceExportJobsInput, ...func(*cleanroomsml.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListAudienceGenerationJobs provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListAudienceGenerationJobs(ctx context.Context, params *cleanroomsml.ListAudienceGenerationJobsInput, optFns ...func(*cleanroomsml.Options)) (*cleanroomsml.ListAudienceGenerationJobsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListAudienceGenerationJobs")
	}

	var r0 *cleanroomsml.ListAudienceGenerationJobsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *cleanroomsml.ListAudienceGenerationJobsInput, ...func(*cleanroomsml.Options)) (*cleanroomsml.ListAudienceGenerationJobsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *cleanroomsml.ListAudienceGenerationJobsInput, ...func(*cleanroomsml.Options)) *cleanroomsml.ListAudienceGenerationJobsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cleanroomsml.ListAudienceGenerationJobsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *cleanroomsml.ListAudienceGenerationJobsInput, ...func(*cleanroomsml.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListAudienceModels provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListAudienceModels(ctx context.Context, params *cleanroomsml.ListAudienceModelsInput, optFns ...func(*cleanroomsml.Options)) (*cleanroomsml.ListAudienceModelsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListAudienceModels")
	}

	var r0 *cleanroomsml.ListAudienceModelsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *cleanroomsml.ListAudienceModelsInput, ...func(*cleanroomsml.Options)) (*cleanroomsml.ListAudienceModelsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *cleanroomsml.ListAudienceModelsInput, ...func(*cleanroomsml.Options)) *cleanroomsml.ListAudienceModelsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cleanroomsml.ListAudienceModelsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *cleanroomsml.ListAudienceModelsInput, ...func(*cleanroomsml.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListCollaborationConfiguredModelAlgorithmAssociations provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListCollaborationConfiguredModelAlgorithmAssociations(ctx context.Context, params *cleanroomsml.ListCollaborationConfiguredModelAlgorithmAssociationsInput, optFns ...func(*cleanroomsml.Options)) (*cleanroomsml.ListCollaborationConfiguredModelAlgorithmAssociationsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListCollaborationConfiguredModelAlgorithmAssociations")
	}

	var r0 *cleanroomsml.ListCollaborationConfiguredModelAlgorithmAssociationsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *cleanroomsml.ListCollaborationConfiguredModelAlgorithmAssociationsInput, ...func(*cleanroomsml.Options)) (*cleanroomsml.ListCollaborationConfiguredModelAlgorithmAssociationsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *cleanroomsml.ListCollaborationConfiguredModelAlgorithmAssociationsInput, ...func(*cleanroomsml.Options)) *cleanroomsml.ListCollaborationConfiguredModelAlgorithmAssociationsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cleanroomsml.ListCollaborationConfiguredModelAlgorithmAssociationsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *cleanroomsml.ListCollaborationConfiguredModelAlgorithmAssociationsInput, ...func(*cleanroomsml.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListCollaborationMLInputChannels provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListCollaborationMLInputChannels(ctx context.Context, params *cleanroomsml.ListCollaborationMLInputChannelsInput, optFns ...func(*cleanroomsml.Options)) (*cleanroomsml.ListCollaborationMLInputChannelsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListCollaborationMLInputChannels")
	}

	var r0 *cleanroomsml.ListCollaborationMLInputChannelsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *cleanroomsml.ListCollaborationMLInputChannelsInput, ...func(*cleanroomsml.Options)) (*cleanroomsml.ListCollaborationMLInputChannelsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *cleanroomsml.ListCollaborationMLInputChannelsInput, ...func(*cleanroomsml.Options)) *cleanroomsml.ListCollaborationMLInputChannelsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cleanroomsml.ListCollaborationMLInputChannelsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *cleanroomsml.ListCollaborationMLInputChannelsInput, ...func(*cleanroomsml.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListCollaborationTrainedModelExportJobs provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListCollaborationTrainedModelExportJobs(ctx context.Context, params *cleanroomsml.ListCollaborationTrainedModelExportJobsInput, optFns ...func(*cleanroomsml.Options)) (*cleanroomsml.ListCollaborationTrainedModelExportJobsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListCollaborationTrainedModelExportJobs")
	}

	var r0 *cleanroomsml.ListCollaborationTrainedModelExportJobsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *cleanroomsml.ListCollaborationTrainedModelExportJobsInput, ...func(*cleanroomsml.Options)) (*cleanroomsml.ListCollaborationTrainedModelExportJobsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *cleanroomsml.ListCollaborationTrainedModelExportJobsInput, ...func(*cleanroomsml.Options)) *cleanroomsml.ListCollaborationTrainedModelExportJobsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cleanroomsml.ListCollaborationTrainedModelExportJobsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *cleanroomsml.ListCollaborationTrainedModelExportJobsInput, ...func(*cleanroomsml.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListCollaborationTrainedModelInferenceJobs provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListCollaborationTrainedModelInferenceJobs(ctx context.Context, params *cleanroomsml.ListCollaborationTrainedModelInferenceJobsInput, optFns ...func(*cleanroomsml.Options)) (*cleanroomsml.ListCollaborationTrainedModelInferenceJobsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListCollaborationTrainedModelInferenceJobs")
	}

	var r0 *cleanroomsml.ListCollaborationTrainedModelInferenceJobsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *cleanroomsml.ListCollaborationTrainedModelInferenceJobsInput, ...func(*cleanroomsml.Options)) (*cleanroomsml.ListCollaborationTrainedModelInferenceJobsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *cleanroomsml.ListCollaborationTrainedModelInferenceJobsInput, ...func(*cleanroomsml.Options)) *cleanroomsml.ListCollaborationTrainedModelInferenceJobsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cleanroomsml.ListCollaborationTrainedModelInferenceJobsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *cleanroomsml.ListCollaborationTrainedModelInferenceJobsInput, ...func(*cleanroomsml.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListCollaborationTrainedModels provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListCollaborationTrainedModels(ctx context.Context, params *cleanroomsml.ListCollaborationTrainedModelsInput, optFns ...func(*cleanroomsml.Options)) (*cleanroomsml.ListCollaborationTrainedModelsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListCollaborationTrainedModels")
	}

	var r0 *cleanroomsml.ListCollaborationTrainedModelsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *cleanroomsml.ListCollaborationTrainedModelsInput, ...func(*cleanroomsml.Options)) (*cleanroomsml.ListCollaborationTrainedModelsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *cleanroomsml.ListCollaborationTrainedModelsInput, ...func(*cleanroomsml.Options)) *cleanroomsml.ListCollaborationTrainedModelsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cleanroomsml.ListCollaborationTrainedModelsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *cleanroomsml.ListCollaborationTrainedModelsInput, ...func(*cleanroomsml.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListConfiguredAudienceModels provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListConfiguredAudienceModels(ctx context.Context, params *cleanroomsml.ListConfiguredAudienceModelsInput, optFns ...func(*cleanroomsml.Options)) (*cleanroomsml.ListConfiguredAudienceModelsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListConfiguredAudienceModels")
	}

	var r0 *cleanroomsml.ListConfiguredAudienceModelsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *cleanroomsml.ListConfiguredAudienceModelsInput, ...func(*cleanroomsml.Options)) (*cleanroomsml.ListConfiguredAudienceModelsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *cleanroomsml.ListConfiguredAudienceModelsInput, ...func(*cleanroomsml.Options)) *cleanroomsml.ListConfiguredAudienceModelsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cleanroomsml.ListConfiguredAudienceModelsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *cleanroomsml.ListConfiguredAudienceModelsInput, ...func(*cleanroomsml.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListConfiguredModelAlgorithmAssociations provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListConfiguredModelAlgorithmAssociations(ctx context.Context, params *cleanroomsml.ListConfiguredModelAlgorithmAssociationsInput, optFns ...func(*cleanroomsml.Options)) (*cleanroomsml.ListConfiguredModelAlgorithmAssociationsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListConfiguredModelAlgorithmAssociations")
	}

	var r0 *cleanroomsml.ListConfiguredModelAlgorithmAssociationsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *cleanroomsml.ListConfiguredModelAlgorithmAssociationsInput, ...func(*cleanroomsml.Options)) (*cleanroomsml.ListConfiguredModelAlgorithmAssociationsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *cleanroomsml.ListConfiguredModelAlgorithmAssociationsInput, ...func(*cleanroomsml.Options)) *cleanroomsml.ListConfiguredModelAlgorithmAssociationsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cleanroomsml.ListConfiguredModelAlgorithmAssociationsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *cleanroomsml.ListConfiguredModelAlgorithmAssociationsInput, ...func(*cleanroomsml.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListConfiguredModelAlgorithms provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListConfiguredModelAlgorithms(ctx context.Context, params *cleanroomsml.ListConfiguredModelAlgorithmsInput, optFns ...func(*cleanroomsml.Options)) (*cleanroomsml.ListConfiguredModelAlgorithmsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListConfiguredModelAlgorithms")
	}

	var r0 *cleanroomsml.ListConfiguredModelAlgorithmsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *cleanroomsml.ListConfiguredModelAlgorithmsInput, ...func(*cleanroomsml.Options)) (*cleanroomsml.ListConfiguredModelAlgorithmsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *cleanroomsml.ListConfiguredModelAlgorithmsInput, ...func(*cleanroomsml.Options)) *cleanroomsml.ListConfiguredModelAlgorithmsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cleanroomsml.ListConfiguredModelAlgorithmsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *cleanroomsml.ListConfiguredModelAlgorithmsInput, ...func(*cleanroomsml.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListMLInputChannels provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListMLInputChannels(ctx context.Context, params *cleanroomsml.ListMLInputChannelsInput, optFns ...func(*cleanroomsml.Options)) (*cleanroomsml.ListMLInputChannelsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListMLInputChannels")
	}

	var r0 *cleanroomsml.ListMLInputChannelsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *cleanroomsml.ListMLInputChannelsInput, ...func(*cleanroomsml.Options)) (*cleanroomsml.ListMLInputChannelsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *cleanroomsml.ListMLInputChannelsInput, ...func(*cleanroomsml.Options)) *cleanroomsml.ListMLInputChannelsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cleanroomsml.ListMLInputChannelsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *cleanroomsml.ListMLInputChannelsInput, ...func(*cleanroomsml.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListTagsForResource provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListTagsForResource(ctx context.Context, params *cleanroomsml.ListTagsForResourceInput, optFns ...func(*cleanroomsml.Options)) (*cleanroomsml.ListTagsForResourceOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListTagsForResource")
	}

	var r0 *cleanroomsml.ListTagsForResourceOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *cleanroomsml.ListTagsForResourceInput, ...func(*cleanroomsml.Options)) (*cleanroomsml.ListTagsForResourceOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *cleanroomsml.ListTagsForResourceInput, ...func(*cleanroomsml.Options)) *cleanroomsml.ListTagsForResourceOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cleanroomsml.ListTagsForResourceOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *cleanroomsml.ListTagsForResourceInput, ...func(*cleanroomsml.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListTrainedModelInferenceJobs provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListTrainedModelInferenceJobs(ctx context.Context, params *cleanroomsml.ListTrainedModelInferenceJobsInput, optFns ...func(*cleanroomsml.Options)) (*cleanroomsml.ListTrainedModelInferenceJobsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListTrainedModelInferenceJobs")
	}

	var r0 *cleanroomsml.ListTrainedModelInferenceJobsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *cleanroomsml.ListTrainedModelInferenceJobsInput, ...func(*cleanroomsml.Options)) (*cleanroomsml.ListTrainedModelInferenceJobsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *cleanroomsml.ListTrainedModelInferenceJobsInput, ...func(*cleanroomsml.Options)) *cleanroomsml.ListTrainedModelInferenceJobsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cleanroomsml.ListTrainedModelInferenceJobsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *cleanroomsml.ListTrainedModelInferenceJobsInput, ...func(*cleanroomsml.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListTrainedModels provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListTrainedModels(ctx context.Context, params *cleanroomsml.ListTrainedModelsInput, optFns ...func(*cleanroomsml.Options)) (*cleanroomsml.ListTrainedModelsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListTrainedModels")
	}

	var r0 *cleanroomsml.ListTrainedModelsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *cleanroomsml.ListTrainedModelsInput, ...func(*cleanroomsml.Options)) (*cleanroomsml.ListTrainedModelsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *cleanroomsml.ListTrainedModelsInput, ...func(*cleanroomsml.Options)) *cleanroomsml.ListTrainedModelsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cleanroomsml.ListTrainedModelsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *cleanroomsml.ListTrainedModelsInput, ...func(*cleanroomsml.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListTrainingDatasets provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListTrainingDatasets(ctx context.Context, params *cleanroomsml.ListTrainingDatasetsInput, optFns ...func(*cleanroomsml.Options)) (*cleanroomsml.ListTrainingDatasetsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListTrainingDatasets")
	}

	var r0 *cleanroomsml.ListTrainingDatasetsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *cleanroomsml.ListTrainingDatasetsInput, ...func(*cleanroomsml.Options)) (*cleanroomsml.ListTrainingDatasetsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *cleanroomsml.ListTrainingDatasetsInput, ...func(*cleanroomsml.Options)) *cleanroomsml.ListTrainingDatasetsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cleanroomsml.ListTrainingDatasetsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *cleanroomsml.ListTrainingDatasetsInput, ...func(*cleanroomsml.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Options provides a mock function with given fields:
func (_m *IClient) Options() cleanroomsml.Options {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Options")
	}

	var r0 cleanroomsml.Options
	if rf, ok := ret.Get(0).(func() cleanroomsml.Options); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(cleanroomsml.Options)
	}

	return r0
}

// PutConfiguredAudienceModelPolicy provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) PutConfiguredAudienceModelPolicy(ctx context.Context, params *cleanroomsml.PutConfiguredAudienceModelPolicyInput, optFns ...func(*cleanroomsml.Options)) (*cleanroomsml.PutConfiguredAudienceModelPolicyOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for PutConfiguredAudienceModelPolicy")
	}

	var r0 *cleanroomsml.PutConfiguredAudienceModelPolicyOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *cleanroomsml.PutConfiguredAudienceModelPolicyInput, ...func(*cleanroomsml.Options)) (*cleanroomsml.PutConfiguredAudienceModelPolicyOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *cleanroomsml.PutConfiguredAudienceModelPolicyInput, ...func(*cleanroomsml.Options)) *cleanroomsml.PutConfiguredAudienceModelPolicyOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cleanroomsml.PutConfiguredAudienceModelPolicyOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *cleanroomsml.PutConfiguredAudienceModelPolicyInput, ...func(*cleanroomsml.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PutMLConfiguration provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) PutMLConfiguration(ctx context.Context, params *cleanroomsml.PutMLConfigurationInput, optFns ...func(*cleanroomsml.Options)) (*cleanroomsml.PutMLConfigurationOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for PutMLConfiguration")
	}

	var r0 *cleanroomsml.PutMLConfigurationOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *cleanroomsml.PutMLConfigurationInput, ...func(*cleanroomsml.Options)) (*cleanroomsml.PutMLConfigurationOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *cleanroomsml.PutMLConfigurationInput, ...func(*cleanroomsml.Options)) *cleanroomsml.PutMLConfigurationOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cleanroomsml.PutMLConfigurationOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *cleanroomsml.PutMLConfigurationInput, ...func(*cleanroomsml.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// StartAudienceExportJob provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) StartAudienceExportJob(ctx context.Context, params *cleanroomsml.StartAudienceExportJobInput, optFns ...func(*cleanroomsml.Options)) (*cleanroomsml.StartAudienceExportJobOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for StartAudienceExportJob")
	}

	var r0 *cleanroomsml.StartAudienceExportJobOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *cleanroomsml.StartAudienceExportJobInput, ...func(*cleanroomsml.Options)) (*cleanroomsml.StartAudienceExportJobOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *cleanroomsml.StartAudienceExportJobInput, ...func(*cleanroomsml.Options)) *cleanroomsml.StartAudienceExportJobOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cleanroomsml.StartAudienceExportJobOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *cleanroomsml.StartAudienceExportJobInput, ...func(*cleanroomsml.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// StartAudienceGenerationJob provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) StartAudienceGenerationJob(ctx context.Context, params *cleanroomsml.StartAudienceGenerationJobInput, optFns ...func(*cleanroomsml.Options)) (*cleanroomsml.StartAudienceGenerationJobOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for StartAudienceGenerationJob")
	}

	var r0 *cleanroomsml.StartAudienceGenerationJobOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *cleanroomsml.StartAudienceGenerationJobInput, ...func(*cleanroomsml.Options)) (*cleanroomsml.StartAudienceGenerationJobOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *cleanroomsml.StartAudienceGenerationJobInput, ...func(*cleanroomsml.Options)) *cleanroomsml.StartAudienceGenerationJobOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cleanroomsml.StartAudienceGenerationJobOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *cleanroomsml.StartAudienceGenerationJobInput, ...func(*cleanroomsml.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// StartTrainedModelExportJob provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) StartTrainedModelExportJob(ctx context.Context, params *cleanroomsml.StartTrainedModelExportJobInput, optFns ...func(*cleanroomsml.Options)) (*cleanroomsml.StartTrainedModelExportJobOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for StartTrainedModelExportJob")
	}

	var r0 *cleanroomsml.StartTrainedModelExportJobOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *cleanroomsml.StartTrainedModelExportJobInput, ...func(*cleanroomsml.Options)) (*cleanroomsml.StartTrainedModelExportJobOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *cleanroomsml.StartTrainedModelExportJobInput, ...func(*cleanroomsml.Options)) *cleanroomsml.StartTrainedModelExportJobOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cleanroomsml.StartTrainedModelExportJobOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *cleanroomsml.StartTrainedModelExportJobInput, ...func(*cleanroomsml.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// StartTrainedModelInferenceJob provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) StartTrainedModelInferenceJob(ctx context.Context, params *cleanroomsml.StartTrainedModelInferenceJobInput, optFns ...func(*cleanroomsml.Options)) (*cleanroomsml.StartTrainedModelInferenceJobOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for StartTrainedModelInferenceJob")
	}

	var r0 *cleanroomsml.StartTrainedModelInferenceJobOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *cleanroomsml.StartTrainedModelInferenceJobInput, ...func(*cleanroomsml.Options)) (*cleanroomsml.StartTrainedModelInferenceJobOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *cleanroomsml.StartTrainedModelInferenceJobInput, ...func(*cleanroomsml.Options)) *cleanroomsml.StartTrainedModelInferenceJobOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cleanroomsml.StartTrainedModelInferenceJobOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *cleanroomsml.StartTrainedModelInferenceJobInput, ...func(*cleanroomsml.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// TagResource provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) TagResource(ctx context.Context, params *cleanroomsml.TagResourceInput, optFns ...func(*cleanroomsml.Options)) (*cleanroomsml.TagResourceOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for TagResource")
	}

	var r0 *cleanroomsml.TagResourceOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *cleanroomsml.TagResourceInput, ...func(*cleanroomsml.Options)) (*cleanroomsml.TagResourceOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *cleanroomsml.TagResourceInput, ...func(*cleanroomsml.Options)) *cleanroomsml.TagResourceOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cleanroomsml.TagResourceOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *cleanroomsml.TagResourceInput, ...func(*cleanroomsml.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UntagResource provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UntagResource(ctx context.Context, params *cleanroomsml.UntagResourceInput, optFns ...func(*cleanroomsml.Options)) (*cleanroomsml.UntagResourceOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UntagResource")
	}

	var r0 *cleanroomsml.UntagResourceOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *cleanroomsml.UntagResourceInput, ...func(*cleanroomsml.Options)) (*cleanroomsml.UntagResourceOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *cleanroomsml.UntagResourceInput, ...func(*cleanroomsml.Options)) *cleanroomsml.UntagResourceOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cleanroomsml.UntagResourceOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *cleanroomsml.UntagResourceInput, ...func(*cleanroomsml.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateConfiguredAudienceModel provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UpdateConfiguredAudienceModel(ctx context.Context, params *cleanroomsml.UpdateConfiguredAudienceModelInput, optFns ...func(*cleanroomsml.Options)) (*cleanroomsml.UpdateConfiguredAudienceModelOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateConfiguredAudienceModel")
	}

	var r0 *cleanroomsml.UpdateConfiguredAudienceModelOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *cleanroomsml.UpdateConfiguredAudienceModelInput, ...func(*cleanroomsml.Options)) (*cleanroomsml.UpdateConfiguredAudienceModelOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *cleanroomsml.UpdateConfiguredAudienceModelInput, ...func(*cleanroomsml.Options)) *cleanroomsml.UpdateConfiguredAudienceModelOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cleanroomsml.UpdateConfiguredAudienceModelOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *cleanroomsml.UpdateConfiguredAudienceModelInput, ...func(*cleanroomsml.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewIClient creates a new instance of IClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewIClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *IClient {
	mock := &IClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
