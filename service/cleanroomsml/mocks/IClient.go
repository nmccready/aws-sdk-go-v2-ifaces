// Code generated by mockery v2.39.2. DO NOT EDIT.

package mocks

import (
	cleanroomsml "github.com/aws/aws-sdk-go-v2/service/cleanroomsml"

	context "context"

	mock "github.com/stretchr/testify/mock"
)

// IClient is an autogenerated mock type for the IClient type
type IClient struct {
	mock.Mock
}

// CreateAudienceModel provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CreateAudienceModel(ctx context.Context, params *cleanroomsml.CreateAudienceModelInput, optFns ...func(*cleanroomsml.Options)) (*cleanroomsml.CreateAudienceModelOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateAudienceModel")
	}

	var r0 *cleanroomsml.CreateAudienceModelOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *cleanroomsml.CreateAudienceModelInput, ...func(*cleanroomsml.Options)) (*cleanroomsml.CreateAudienceModelOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *cleanroomsml.CreateAudienceModelInput, ...func(*cleanroomsml.Options)) *cleanroomsml.CreateAudienceModelOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cleanroomsml.CreateAudienceModelOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *cleanroomsml.CreateAudienceModelInput, ...func(*cleanroomsml.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateConfiguredAudienceModel provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CreateConfiguredAudienceModel(ctx context.Context, params *cleanroomsml.CreateConfiguredAudienceModelInput, optFns ...func(*cleanroomsml.Options)) (*cleanroomsml.CreateConfiguredAudienceModelOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateConfiguredAudienceModel")
	}

	var r0 *cleanroomsml.CreateConfiguredAudienceModelOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *cleanroomsml.CreateConfiguredAudienceModelInput, ...func(*cleanroomsml.Options)) (*cleanroomsml.CreateConfiguredAudienceModelOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *cleanroomsml.CreateConfiguredAudienceModelInput, ...func(*cleanroomsml.Options)) *cleanroomsml.CreateConfiguredAudienceModelOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cleanroomsml.CreateConfiguredAudienceModelOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *cleanroomsml.CreateConfiguredAudienceModelInput, ...func(*cleanroomsml.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateTrainingDataset provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CreateTrainingDataset(ctx context.Context, params *cleanroomsml.CreateTrainingDatasetInput, optFns ...func(*cleanroomsml.Options)) (*cleanroomsml.CreateTrainingDatasetOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateTrainingDataset")
	}

	var r0 *cleanroomsml.CreateTrainingDatasetOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *cleanroomsml.CreateTrainingDatasetInput, ...func(*cleanroomsml.Options)) (*cleanroomsml.CreateTrainingDatasetOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *cleanroomsml.CreateTrainingDatasetInput, ...func(*cleanroomsml.Options)) *cleanroomsml.CreateTrainingDatasetOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cleanroomsml.CreateTrainingDatasetOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *cleanroomsml.CreateTrainingDatasetInput, ...func(*cleanroomsml.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteAudienceGenerationJob provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteAudienceGenerationJob(ctx context.Context, params *cleanroomsml.DeleteAudienceGenerationJobInput, optFns ...func(*cleanroomsml.Options)) (*cleanroomsml.DeleteAudienceGenerationJobOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteAudienceGenerationJob")
	}

	var r0 *cleanroomsml.DeleteAudienceGenerationJobOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *cleanroomsml.DeleteAudienceGenerationJobInput, ...func(*cleanroomsml.Options)) (*cleanroomsml.DeleteAudienceGenerationJobOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *cleanroomsml.DeleteAudienceGenerationJobInput, ...func(*cleanroomsml.Options)) *cleanroomsml.DeleteAudienceGenerationJobOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cleanroomsml.DeleteAudienceGenerationJobOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *cleanroomsml.DeleteAudienceGenerationJobInput, ...func(*cleanroomsml.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteAudienceModel provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteAudienceModel(ctx context.Context, params *cleanroomsml.DeleteAudienceModelInput, optFns ...func(*cleanroomsml.Options)) (*cleanroomsml.DeleteAudienceModelOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteAudienceModel")
	}

	var r0 *cleanroomsml.DeleteAudienceModelOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *cleanroomsml.DeleteAudienceModelInput, ...func(*cleanroomsml.Options)) (*cleanroomsml.DeleteAudienceModelOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *cleanroomsml.DeleteAudienceModelInput, ...func(*cleanroomsml.Options)) *cleanroomsml.DeleteAudienceModelOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cleanroomsml.DeleteAudienceModelOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *cleanroomsml.DeleteAudienceModelInput, ...func(*cleanroomsml.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteConfiguredAudienceModel provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteConfiguredAudienceModel(ctx context.Context, params *cleanroomsml.DeleteConfiguredAudienceModelInput, optFns ...func(*cleanroomsml.Options)) (*cleanroomsml.DeleteConfiguredAudienceModelOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteConfiguredAudienceModel")
	}

	var r0 *cleanroomsml.DeleteConfiguredAudienceModelOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *cleanroomsml.DeleteConfiguredAudienceModelInput, ...func(*cleanroomsml.Options)) (*cleanroomsml.DeleteConfiguredAudienceModelOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *cleanroomsml.DeleteConfiguredAudienceModelInput, ...func(*cleanroomsml.Options)) *cleanroomsml.DeleteConfiguredAudienceModelOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cleanroomsml.DeleteConfiguredAudienceModelOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *cleanroomsml.DeleteConfiguredAudienceModelInput, ...func(*cleanroomsml.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteConfiguredAudienceModelPolicy provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteConfiguredAudienceModelPolicy(ctx context.Context, params *cleanroomsml.DeleteConfiguredAudienceModelPolicyInput, optFns ...func(*cleanroomsml.Options)) (*cleanroomsml.DeleteConfiguredAudienceModelPolicyOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteConfiguredAudienceModelPolicy")
	}

	var r0 *cleanroomsml.DeleteConfiguredAudienceModelPolicyOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *cleanroomsml.DeleteConfiguredAudienceModelPolicyInput, ...func(*cleanroomsml.Options)) (*cleanroomsml.DeleteConfiguredAudienceModelPolicyOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *cleanroomsml.DeleteConfiguredAudienceModelPolicyInput, ...func(*cleanroomsml.Options)) *cleanroomsml.DeleteConfiguredAudienceModelPolicyOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cleanroomsml.DeleteConfiguredAudienceModelPolicyOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *cleanroomsml.DeleteConfiguredAudienceModelPolicyInput, ...func(*cleanroomsml.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteTrainingDataset provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteTrainingDataset(ctx context.Context, params *cleanroomsml.DeleteTrainingDatasetInput, optFns ...func(*cleanroomsml.Options)) (*cleanroomsml.DeleteTrainingDatasetOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteTrainingDataset")
	}

	var r0 *cleanroomsml.DeleteTrainingDatasetOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *cleanroomsml.DeleteTrainingDatasetInput, ...func(*cleanroomsml.Options)) (*cleanroomsml.DeleteTrainingDatasetOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *cleanroomsml.DeleteTrainingDatasetInput, ...func(*cleanroomsml.Options)) *cleanroomsml.DeleteTrainingDatasetOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cleanroomsml.DeleteTrainingDatasetOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *cleanroomsml.DeleteTrainingDatasetInput, ...func(*cleanroomsml.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAudienceGenerationJob provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetAudienceGenerationJob(ctx context.Context, params *cleanroomsml.GetAudienceGenerationJobInput, optFns ...func(*cleanroomsml.Options)) (*cleanroomsml.GetAudienceGenerationJobOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetAudienceGenerationJob")
	}

	var r0 *cleanroomsml.GetAudienceGenerationJobOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *cleanroomsml.GetAudienceGenerationJobInput, ...func(*cleanroomsml.Options)) (*cleanroomsml.GetAudienceGenerationJobOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *cleanroomsml.GetAudienceGenerationJobInput, ...func(*cleanroomsml.Options)) *cleanroomsml.GetAudienceGenerationJobOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cleanroomsml.GetAudienceGenerationJobOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *cleanroomsml.GetAudienceGenerationJobInput, ...func(*cleanroomsml.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAudienceModel provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetAudienceModel(ctx context.Context, params *cleanroomsml.GetAudienceModelInput, optFns ...func(*cleanroomsml.Options)) (*cleanroomsml.GetAudienceModelOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetAudienceModel")
	}

	var r0 *cleanroomsml.GetAudienceModelOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *cleanroomsml.GetAudienceModelInput, ...func(*cleanroomsml.Options)) (*cleanroomsml.GetAudienceModelOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *cleanroomsml.GetAudienceModelInput, ...func(*cleanroomsml.Options)) *cleanroomsml.GetAudienceModelOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cleanroomsml.GetAudienceModelOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *cleanroomsml.GetAudienceModelInput, ...func(*cleanroomsml.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetConfiguredAudienceModel provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetConfiguredAudienceModel(ctx context.Context, params *cleanroomsml.GetConfiguredAudienceModelInput, optFns ...func(*cleanroomsml.Options)) (*cleanroomsml.GetConfiguredAudienceModelOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetConfiguredAudienceModel")
	}

	var r0 *cleanroomsml.GetConfiguredAudienceModelOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *cleanroomsml.GetConfiguredAudienceModelInput, ...func(*cleanroomsml.Options)) (*cleanroomsml.GetConfiguredAudienceModelOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *cleanroomsml.GetConfiguredAudienceModelInput, ...func(*cleanroomsml.Options)) *cleanroomsml.GetConfiguredAudienceModelOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cleanroomsml.GetConfiguredAudienceModelOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *cleanroomsml.GetConfiguredAudienceModelInput, ...func(*cleanroomsml.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetConfiguredAudienceModelPolicy provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetConfiguredAudienceModelPolicy(ctx context.Context, params *cleanroomsml.GetConfiguredAudienceModelPolicyInput, optFns ...func(*cleanroomsml.Options)) (*cleanroomsml.GetConfiguredAudienceModelPolicyOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetConfiguredAudienceModelPolicy")
	}

	var r0 *cleanroomsml.GetConfiguredAudienceModelPolicyOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *cleanroomsml.GetConfiguredAudienceModelPolicyInput, ...func(*cleanroomsml.Options)) (*cleanroomsml.GetConfiguredAudienceModelPolicyOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *cleanroomsml.GetConfiguredAudienceModelPolicyInput, ...func(*cleanroomsml.Options)) *cleanroomsml.GetConfiguredAudienceModelPolicyOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cleanroomsml.GetConfiguredAudienceModelPolicyOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *cleanroomsml.GetConfiguredAudienceModelPolicyInput, ...func(*cleanroomsml.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetTrainingDataset provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetTrainingDataset(ctx context.Context, params *cleanroomsml.GetTrainingDatasetInput, optFns ...func(*cleanroomsml.Options)) (*cleanroomsml.GetTrainingDatasetOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetTrainingDataset")
	}

	var r0 *cleanroomsml.GetTrainingDatasetOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *cleanroomsml.GetTrainingDatasetInput, ...func(*cleanroomsml.Options)) (*cleanroomsml.GetTrainingDatasetOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *cleanroomsml.GetTrainingDatasetInput, ...func(*cleanroomsml.Options)) *cleanroomsml.GetTrainingDatasetOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cleanroomsml.GetTrainingDatasetOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *cleanroomsml.GetTrainingDatasetInput, ...func(*cleanroomsml.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListAudienceExportJobs provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListAudienceExportJobs(ctx context.Context, params *cleanroomsml.ListAudienceExportJobsInput, optFns ...func(*cleanroomsml.Options)) (*cleanroomsml.ListAudienceExportJobsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListAudienceExportJobs")
	}

	var r0 *cleanroomsml.ListAudienceExportJobsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *cleanroomsml.ListAudienceExportJobsInput, ...func(*cleanroomsml.Options)) (*cleanroomsml.ListAudienceExportJobsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *cleanroomsml.ListAudienceExportJobsInput, ...func(*cleanroomsml.Options)) *cleanroomsml.ListAudienceExportJobsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cleanroomsml.ListAudienceExportJobsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *cleanroomsml.ListAudienceExportJobsInput, ...func(*cleanroomsml.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListAudienceGenerationJobs provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListAudienceGenerationJobs(ctx context.Context, params *cleanroomsml.ListAudienceGenerationJobsInput, optFns ...func(*cleanroomsml.Options)) (*cleanroomsml.ListAudienceGenerationJobsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListAudienceGenerationJobs")
	}

	var r0 *cleanroomsml.ListAudienceGenerationJobsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *cleanroomsml.ListAudienceGenerationJobsInput, ...func(*cleanroomsml.Options)) (*cleanroomsml.ListAudienceGenerationJobsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *cleanroomsml.ListAudienceGenerationJobsInput, ...func(*cleanroomsml.Options)) *cleanroomsml.ListAudienceGenerationJobsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cleanroomsml.ListAudienceGenerationJobsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *cleanroomsml.ListAudienceGenerationJobsInput, ...func(*cleanroomsml.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListAudienceModels provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListAudienceModels(ctx context.Context, params *cleanroomsml.ListAudienceModelsInput, optFns ...func(*cleanroomsml.Options)) (*cleanroomsml.ListAudienceModelsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListAudienceModels")
	}

	var r0 *cleanroomsml.ListAudienceModelsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *cleanroomsml.ListAudienceModelsInput, ...func(*cleanroomsml.Options)) (*cleanroomsml.ListAudienceModelsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *cleanroomsml.ListAudienceModelsInput, ...func(*cleanroomsml.Options)) *cleanroomsml.ListAudienceModelsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cleanroomsml.ListAudienceModelsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *cleanroomsml.ListAudienceModelsInput, ...func(*cleanroomsml.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListConfiguredAudienceModels provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListConfiguredAudienceModels(ctx context.Context, params *cleanroomsml.ListConfiguredAudienceModelsInput, optFns ...func(*cleanroomsml.Options)) (*cleanroomsml.ListConfiguredAudienceModelsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListConfiguredAudienceModels")
	}

	var r0 *cleanroomsml.ListConfiguredAudienceModelsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *cleanroomsml.ListConfiguredAudienceModelsInput, ...func(*cleanroomsml.Options)) (*cleanroomsml.ListConfiguredAudienceModelsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *cleanroomsml.ListConfiguredAudienceModelsInput, ...func(*cleanroomsml.Options)) *cleanroomsml.ListConfiguredAudienceModelsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cleanroomsml.ListConfiguredAudienceModelsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *cleanroomsml.ListConfiguredAudienceModelsInput, ...func(*cleanroomsml.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListTagsForResource provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListTagsForResource(ctx context.Context, params *cleanroomsml.ListTagsForResourceInput, optFns ...func(*cleanroomsml.Options)) (*cleanroomsml.ListTagsForResourceOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListTagsForResource")
	}

	var r0 *cleanroomsml.ListTagsForResourceOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *cleanroomsml.ListTagsForResourceInput, ...func(*cleanroomsml.Options)) (*cleanroomsml.ListTagsForResourceOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *cleanroomsml.ListTagsForResourceInput, ...func(*cleanroomsml.Options)) *cleanroomsml.ListTagsForResourceOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cleanroomsml.ListTagsForResourceOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *cleanroomsml.ListTagsForResourceInput, ...func(*cleanroomsml.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListTrainingDatasets provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListTrainingDatasets(ctx context.Context, params *cleanroomsml.ListTrainingDatasetsInput, optFns ...func(*cleanroomsml.Options)) (*cleanroomsml.ListTrainingDatasetsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListTrainingDatasets")
	}

	var r0 *cleanroomsml.ListTrainingDatasetsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *cleanroomsml.ListTrainingDatasetsInput, ...func(*cleanroomsml.Options)) (*cleanroomsml.ListTrainingDatasetsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *cleanroomsml.ListTrainingDatasetsInput, ...func(*cleanroomsml.Options)) *cleanroomsml.ListTrainingDatasetsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cleanroomsml.ListTrainingDatasetsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *cleanroomsml.ListTrainingDatasetsInput, ...func(*cleanroomsml.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Options provides a mock function with given fields:
func (_m *IClient) Options() cleanroomsml.Options {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Options")
	}

	var r0 cleanroomsml.Options
	if rf, ok := ret.Get(0).(func() cleanroomsml.Options); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(cleanroomsml.Options)
	}

	return r0
}

// PutConfiguredAudienceModelPolicy provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) PutConfiguredAudienceModelPolicy(ctx context.Context, params *cleanroomsml.PutConfiguredAudienceModelPolicyInput, optFns ...func(*cleanroomsml.Options)) (*cleanroomsml.PutConfiguredAudienceModelPolicyOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for PutConfiguredAudienceModelPolicy")
	}

	var r0 *cleanroomsml.PutConfiguredAudienceModelPolicyOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *cleanroomsml.PutConfiguredAudienceModelPolicyInput, ...func(*cleanroomsml.Options)) (*cleanroomsml.PutConfiguredAudienceModelPolicyOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *cleanroomsml.PutConfiguredAudienceModelPolicyInput, ...func(*cleanroomsml.Options)) *cleanroomsml.PutConfiguredAudienceModelPolicyOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cleanroomsml.PutConfiguredAudienceModelPolicyOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *cleanroomsml.PutConfiguredAudienceModelPolicyInput, ...func(*cleanroomsml.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// StartAudienceExportJob provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) StartAudienceExportJob(ctx context.Context, params *cleanroomsml.StartAudienceExportJobInput, optFns ...func(*cleanroomsml.Options)) (*cleanroomsml.StartAudienceExportJobOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for StartAudienceExportJob")
	}

	var r0 *cleanroomsml.StartAudienceExportJobOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *cleanroomsml.StartAudienceExportJobInput, ...func(*cleanroomsml.Options)) (*cleanroomsml.StartAudienceExportJobOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *cleanroomsml.StartAudienceExportJobInput, ...func(*cleanroomsml.Options)) *cleanroomsml.StartAudienceExportJobOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cleanroomsml.StartAudienceExportJobOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *cleanroomsml.StartAudienceExportJobInput, ...func(*cleanroomsml.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// StartAudienceGenerationJob provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) StartAudienceGenerationJob(ctx context.Context, params *cleanroomsml.StartAudienceGenerationJobInput, optFns ...func(*cleanroomsml.Options)) (*cleanroomsml.StartAudienceGenerationJobOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for StartAudienceGenerationJob")
	}

	var r0 *cleanroomsml.StartAudienceGenerationJobOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *cleanroomsml.StartAudienceGenerationJobInput, ...func(*cleanroomsml.Options)) (*cleanroomsml.StartAudienceGenerationJobOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *cleanroomsml.StartAudienceGenerationJobInput, ...func(*cleanroomsml.Options)) *cleanroomsml.StartAudienceGenerationJobOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cleanroomsml.StartAudienceGenerationJobOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *cleanroomsml.StartAudienceGenerationJobInput, ...func(*cleanroomsml.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// TagResource provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) TagResource(ctx context.Context, params *cleanroomsml.TagResourceInput, optFns ...func(*cleanroomsml.Options)) (*cleanroomsml.TagResourceOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for TagResource")
	}

	var r0 *cleanroomsml.TagResourceOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *cleanroomsml.TagResourceInput, ...func(*cleanroomsml.Options)) (*cleanroomsml.TagResourceOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *cleanroomsml.TagResourceInput, ...func(*cleanroomsml.Options)) *cleanroomsml.TagResourceOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cleanroomsml.TagResourceOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *cleanroomsml.TagResourceInput, ...func(*cleanroomsml.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UntagResource provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UntagResource(ctx context.Context, params *cleanroomsml.UntagResourceInput, optFns ...func(*cleanroomsml.Options)) (*cleanroomsml.UntagResourceOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UntagResource")
	}

	var r0 *cleanroomsml.UntagResourceOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *cleanroomsml.UntagResourceInput, ...func(*cleanroomsml.Options)) (*cleanroomsml.UntagResourceOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *cleanroomsml.UntagResourceInput, ...func(*cleanroomsml.Options)) *cleanroomsml.UntagResourceOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cleanroomsml.UntagResourceOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *cleanroomsml.UntagResourceInput, ...func(*cleanroomsml.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateConfiguredAudienceModel provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UpdateConfiguredAudienceModel(ctx context.Context, params *cleanroomsml.UpdateConfiguredAudienceModelInput, optFns ...func(*cleanroomsml.Options)) (*cleanroomsml.UpdateConfiguredAudienceModelOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateConfiguredAudienceModel")
	}

	var r0 *cleanroomsml.UpdateConfiguredAudienceModelOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *cleanroomsml.UpdateConfiguredAudienceModelInput, ...func(*cleanroomsml.Options)) (*cleanroomsml.UpdateConfiguredAudienceModelOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *cleanroomsml.UpdateConfiguredAudienceModelInput, ...func(*cleanroomsml.Options)) *cleanroomsml.UpdateConfiguredAudienceModelOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cleanroomsml.UpdateConfiguredAudienceModelOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *cleanroomsml.UpdateConfiguredAudienceModelInput, ...func(*cleanroomsml.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewIClient creates a new instance of IClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewIClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *IClient {
	mock := &IClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
