// Code generated by mockery v2.39.2. DO NOT EDIT.

package mocks

import (
	context "context"

	amplify "github.com/aws/aws-sdk-go-v2/service/amplify"

	mock "github.com/stretchr/testify/mock"
)

// IClient is an autogenerated mock type for the IClient type
type IClient struct {
	mock.Mock
}

// CreateApp provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CreateApp(ctx context.Context, params *amplify.CreateAppInput, optFns ...func(*amplify.Options)) (*amplify.CreateAppOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateApp")
	}

	var r0 *amplify.CreateAppOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *amplify.CreateAppInput, ...func(*amplify.Options)) (*amplify.CreateAppOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *amplify.CreateAppInput, ...func(*amplify.Options)) *amplify.CreateAppOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*amplify.CreateAppOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *amplify.CreateAppInput, ...func(*amplify.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateBackendEnvironment provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CreateBackendEnvironment(ctx context.Context, params *amplify.CreateBackendEnvironmentInput, optFns ...func(*amplify.Options)) (*amplify.CreateBackendEnvironmentOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateBackendEnvironment")
	}

	var r0 *amplify.CreateBackendEnvironmentOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *amplify.CreateBackendEnvironmentInput, ...func(*amplify.Options)) (*amplify.CreateBackendEnvironmentOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *amplify.CreateBackendEnvironmentInput, ...func(*amplify.Options)) *amplify.CreateBackendEnvironmentOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*amplify.CreateBackendEnvironmentOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *amplify.CreateBackendEnvironmentInput, ...func(*amplify.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateBranch provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CreateBranch(ctx context.Context, params *amplify.CreateBranchInput, optFns ...func(*amplify.Options)) (*amplify.CreateBranchOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateBranch")
	}

	var r0 *amplify.CreateBranchOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *amplify.CreateBranchInput, ...func(*amplify.Options)) (*amplify.CreateBranchOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *amplify.CreateBranchInput, ...func(*amplify.Options)) *amplify.CreateBranchOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*amplify.CreateBranchOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *amplify.CreateBranchInput, ...func(*amplify.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateDeployment provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CreateDeployment(ctx context.Context, params *amplify.CreateDeploymentInput, optFns ...func(*amplify.Options)) (*amplify.CreateDeploymentOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateDeployment")
	}

	var r0 *amplify.CreateDeploymentOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *amplify.CreateDeploymentInput, ...func(*amplify.Options)) (*amplify.CreateDeploymentOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *amplify.CreateDeploymentInput, ...func(*amplify.Options)) *amplify.CreateDeploymentOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*amplify.CreateDeploymentOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *amplify.CreateDeploymentInput, ...func(*amplify.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateDomainAssociation provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CreateDomainAssociation(ctx context.Context, params *amplify.CreateDomainAssociationInput, optFns ...func(*amplify.Options)) (*amplify.CreateDomainAssociationOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateDomainAssociation")
	}

	var r0 *amplify.CreateDomainAssociationOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *amplify.CreateDomainAssociationInput, ...func(*amplify.Options)) (*amplify.CreateDomainAssociationOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *amplify.CreateDomainAssociationInput, ...func(*amplify.Options)) *amplify.CreateDomainAssociationOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*amplify.CreateDomainAssociationOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *amplify.CreateDomainAssociationInput, ...func(*amplify.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateWebhook provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CreateWebhook(ctx context.Context, params *amplify.CreateWebhookInput, optFns ...func(*amplify.Options)) (*amplify.CreateWebhookOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateWebhook")
	}

	var r0 *amplify.CreateWebhookOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *amplify.CreateWebhookInput, ...func(*amplify.Options)) (*amplify.CreateWebhookOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *amplify.CreateWebhookInput, ...func(*amplify.Options)) *amplify.CreateWebhookOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*amplify.CreateWebhookOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *amplify.CreateWebhookInput, ...func(*amplify.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteApp provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteApp(ctx context.Context, params *amplify.DeleteAppInput, optFns ...func(*amplify.Options)) (*amplify.DeleteAppOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteApp")
	}

	var r0 *amplify.DeleteAppOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *amplify.DeleteAppInput, ...func(*amplify.Options)) (*amplify.DeleteAppOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *amplify.DeleteAppInput, ...func(*amplify.Options)) *amplify.DeleteAppOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*amplify.DeleteAppOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *amplify.DeleteAppInput, ...func(*amplify.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteBackendEnvironment provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteBackendEnvironment(ctx context.Context, params *amplify.DeleteBackendEnvironmentInput, optFns ...func(*amplify.Options)) (*amplify.DeleteBackendEnvironmentOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteBackendEnvironment")
	}

	var r0 *amplify.DeleteBackendEnvironmentOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *amplify.DeleteBackendEnvironmentInput, ...func(*amplify.Options)) (*amplify.DeleteBackendEnvironmentOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *amplify.DeleteBackendEnvironmentInput, ...func(*amplify.Options)) *amplify.DeleteBackendEnvironmentOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*amplify.DeleteBackendEnvironmentOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *amplify.DeleteBackendEnvironmentInput, ...func(*amplify.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteBranch provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteBranch(ctx context.Context, params *amplify.DeleteBranchInput, optFns ...func(*amplify.Options)) (*amplify.DeleteBranchOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteBranch")
	}

	var r0 *amplify.DeleteBranchOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *amplify.DeleteBranchInput, ...func(*amplify.Options)) (*amplify.DeleteBranchOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *amplify.DeleteBranchInput, ...func(*amplify.Options)) *amplify.DeleteBranchOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*amplify.DeleteBranchOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *amplify.DeleteBranchInput, ...func(*amplify.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteDomainAssociation provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteDomainAssociation(ctx context.Context, params *amplify.DeleteDomainAssociationInput, optFns ...func(*amplify.Options)) (*amplify.DeleteDomainAssociationOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteDomainAssociation")
	}

	var r0 *amplify.DeleteDomainAssociationOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *amplify.DeleteDomainAssociationInput, ...func(*amplify.Options)) (*amplify.DeleteDomainAssociationOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *amplify.DeleteDomainAssociationInput, ...func(*amplify.Options)) *amplify.DeleteDomainAssociationOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*amplify.DeleteDomainAssociationOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *amplify.DeleteDomainAssociationInput, ...func(*amplify.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteJob provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteJob(ctx context.Context, params *amplify.DeleteJobInput, optFns ...func(*amplify.Options)) (*amplify.DeleteJobOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteJob")
	}

	var r0 *amplify.DeleteJobOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *amplify.DeleteJobInput, ...func(*amplify.Options)) (*amplify.DeleteJobOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *amplify.DeleteJobInput, ...func(*amplify.Options)) *amplify.DeleteJobOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*amplify.DeleteJobOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *amplify.DeleteJobInput, ...func(*amplify.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteWebhook provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteWebhook(ctx context.Context, params *amplify.DeleteWebhookInput, optFns ...func(*amplify.Options)) (*amplify.DeleteWebhookOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteWebhook")
	}

	var r0 *amplify.DeleteWebhookOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *amplify.DeleteWebhookInput, ...func(*amplify.Options)) (*amplify.DeleteWebhookOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *amplify.DeleteWebhookInput, ...func(*amplify.Options)) *amplify.DeleteWebhookOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*amplify.DeleteWebhookOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *amplify.DeleteWebhookInput, ...func(*amplify.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GenerateAccessLogs provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GenerateAccessLogs(ctx context.Context, params *amplify.GenerateAccessLogsInput, optFns ...func(*amplify.Options)) (*amplify.GenerateAccessLogsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GenerateAccessLogs")
	}

	var r0 *amplify.GenerateAccessLogsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *amplify.GenerateAccessLogsInput, ...func(*amplify.Options)) (*amplify.GenerateAccessLogsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *amplify.GenerateAccessLogsInput, ...func(*amplify.Options)) *amplify.GenerateAccessLogsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*amplify.GenerateAccessLogsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *amplify.GenerateAccessLogsInput, ...func(*amplify.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetApp provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetApp(ctx context.Context, params *amplify.GetAppInput, optFns ...func(*amplify.Options)) (*amplify.GetAppOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetApp")
	}

	var r0 *amplify.GetAppOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *amplify.GetAppInput, ...func(*amplify.Options)) (*amplify.GetAppOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *amplify.GetAppInput, ...func(*amplify.Options)) *amplify.GetAppOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*amplify.GetAppOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *amplify.GetAppInput, ...func(*amplify.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetArtifactUrl provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetArtifactUrl(ctx context.Context, params *amplify.GetArtifactUrlInput, optFns ...func(*amplify.Options)) (*amplify.GetArtifactUrlOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetArtifactUrl")
	}

	var r0 *amplify.GetArtifactUrlOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *amplify.GetArtifactUrlInput, ...func(*amplify.Options)) (*amplify.GetArtifactUrlOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *amplify.GetArtifactUrlInput, ...func(*amplify.Options)) *amplify.GetArtifactUrlOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*amplify.GetArtifactUrlOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *amplify.GetArtifactUrlInput, ...func(*amplify.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetBackendEnvironment provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetBackendEnvironment(ctx context.Context, params *amplify.GetBackendEnvironmentInput, optFns ...func(*amplify.Options)) (*amplify.GetBackendEnvironmentOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetBackendEnvironment")
	}

	var r0 *amplify.GetBackendEnvironmentOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *amplify.GetBackendEnvironmentInput, ...func(*amplify.Options)) (*amplify.GetBackendEnvironmentOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *amplify.GetBackendEnvironmentInput, ...func(*amplify.Options)) *amplify.GetBackendEnvironmentOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*amplify.GetBackendEnvironmentOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *amplify.GetBackendEnvironmentInput, ...func(*amplify.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetBranch provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetBranch(ctx context.Context, params *amplify.GetBranchInput, optFns ...func(*amplify.Options)) (*amplify.GetBranchOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetBranch")
	}

	var r0 *amplify.GetBranchOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *amplify.GetBranchInput, ...func(*amplify.Options)) (*amplify.GetBranchOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *amplify.GetBranchInput, ...func(*amplify.Options)) *amplify.GetBranchOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*amplify.GetBranchOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *amplify.GetBranchInput, ...func(*amplify.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetDomainAssociation provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetDomainAssociation(ctx context.Context, params *amplify.GetDomainAssociationInput, optFns ...func(*amplify.Options)) (*amplify.GetDomainAssociationOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetDomainAssociation")
	}

	var r0 *amplify.GetDomainAssociationOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *amplify.GetDomainAssociationInput, ...func(*amplify.Options)) (*amplify.GetDomainAssociationOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *amplify.GetDomainAssociationInput, ...func(*amplify.Options)) *amplify.GetDomainAssociationOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*amplify.GetDomainAssociationOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *amplify.GetDomainAssociationInput, ...func(*amplify.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetJob provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetJob(ctx context.Context, params *amplify.GetJobInput, optFns ...func(*amplify.Options)) (*amplify.GetJobOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetJob")
	}

	var r0 *amplify.GetJobOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *amplify.GetJobInput, ...func(*amplify.Options)) (*amplify.GetJobOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *amplify.GetJobInput, ...func(*amplify.Options)) *amplify.GetJobOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*amplify.GetJobOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *amplify.GetJobInput, ...func(*amplify.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetWebhook provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetWebhook(ctx context.Context, params *amplify.GetWebhookInput, optFns ...func(*amplify.Options)) (*amplify.GetWebhookOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetWebhook")
	}

	var r0 *amplify.GetWebhookOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *amplify.GetWebhookInput, ...func(*amplify.Options)) (*amplify.GetWebhookOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *amplify.GetWebhookInput, ...func(*amplify.Options)) *amplify.GetWebhookOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*amplify.GetWebhookOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *amplify.GetWebhookInput, ...func(*amplify.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListApps provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListApps(ctx context.Context, params *amplify.ListAppsInput, optFns ...func(*amplify.Options)) (*amplify.ListAppsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListApps")
	}

	var r0 *amplify.ListAppsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *amplify.ListAppsInput, ...func(*amplify.Options)) (*amplify.ListAppsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *amplify.ListAppsInput, ...func(*amplify.Options)) *amplify.ListAppsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*amplify.ListAppsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *amplify.ListAppsInput, ...func(*amplify.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListArtifacts provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListArtifacts(ctx context.Context, params *amplify.ListArtifactsInput, optFns ...func(*amplify.Options)) (*amplify.ListArtifactsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListArtifacts")
	}

	var r0 *amplify.ListArtifactsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *amplify.ListArtifactsInput, ...func(*amplify.Options)) (*amplify.ListArtifactsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *amplify.ListArtifactsInput, ...func(*amplify.Options)) *amplify.ListArtifactsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*amplify.ListArtifactsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *amplify.ListArtifactsInput, ...func(*amplify.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListBackendEnvironments provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListBackendEnvironments(ctx context.Context, params *amplify.ListBackendEnvironmentsInput, optFns ...func(*amplify.Options)) (*amplify.ListBackendEnvironmentsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListBackendEnvironments")
	}

	var r0 *amplify.ListBackendEnvironmentsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *amplify.ListBackendEnvironmentsInput, ...func(*amplify.Options)) (*amplify.ListBackendEnvironmentsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *amplify.ListBackendEnvironmentsInput, ...func(*amplify.Options)) *amplify.ListBackendEnvironmentsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*amplify.ListBackendEnvironmentsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *amplify.ListBackendEnvironmentsInput, ...func(*amplify.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListBranches provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListBranches(ctx context.Context, params *amplify.ListBranchesInput, optFns ...func(*amplify.Options)) (*amplify.ListBranchesOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListBranches")
	}

	var r0 *amplify.ListBranchesOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *amplify.ListBranchesInput, ...func(*amplify.Options)) (*amplify.ListBranchesOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *amplify.ListBranchesInput, ...func(*amplify.Options)) *amplify.ListBranchesOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*amplify.ListBranchesOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *amplify.ListBranchesInput, ...func(*amplify.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListDomainAssociations provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListDomainAssociations(ctx context.Context, params *amplify.ListDomainAssociationsInput, optFns ...func(*amplify.Options)) (*amplify.ListDomainAssociationsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListDomainAssociations")
	}

	var r0 *amplify.ListDomainAssociationsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *amplify.ListDomainAssociationsInput, ...func(*amplify.Options)) (*amplify.ListDomainAssociationsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *amplify.ListDomainAssociationsInput, ...func(*amplify.Options)) *amplify.ListDomainAssociationsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*amplify.ListDomainAssociationsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *amplify.ListDomainAssociationsInput, ...func(*amplify.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListJobs provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListJobs(ctx context.Context, params *amplify.ListJobsInput, optFns ...func(*amplify.Options)) (*amplify.ListJobsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListJobs")
	}

	var r0 *amplify.ListJobsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *amplify.ListJobsInput, ...func(*amplify.Options)) (*amplify.ListJobsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *amplify.ListJobsInput, ...func(*amplify.Options)) *amplify.ListJobsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*amplify.ListJobsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *amplify.ListJobsInput, ...func(*amplify.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListTagsForResource provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListTagsForResource(ctx context.Context, params *amplify.ListTagsForResourceInput, optFns ...func(*amplify.Options)) (*amplify.ListTagsForResourceOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListTagsForResource")
	}

	var r0 *amplify.ListTagsForResourceOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *amplify.ListTagsForResourceInput, ...func(*amplify.Options)) (*amplify.ListTagsForResourceOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *amplify.ListTagsForResourceInput, ...func(*amplify.Options)) *amplify.ListTagsForResourceOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*amplify.ListTagsForResourceOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *amplify.ListTagsForResourceInput, ...func(*amplify.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListWebhooks provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListWebhooks(ctx context.Context, params *amplify.ListWebhooksInput, optFns ...func(*amplify.Options)) (*amplify.ListWebhooksOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListWebhooks")
	}

	var r0 *amplify.ListWebhooksOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *amplify.ListWebhooksInput, ...func(*amplify.Options)) (*amplify.ListWebhooksOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *amplify.ListWebhooksInput, ...func(*amplify.Options)) *amplify.ListWebhooksOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*amplify.ListWebhooksOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *amplify.ListWebhooksInput, ...func(*amplify.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Options provides a mock function with given fields:
func (_m *IClient) Options() amplify.Options {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Options")
	}

	var r0 amplify.Options
	if rf, ok := ret.Get(0).(func() amplify.Options); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(amplify.Options)
	}

	return r0
}

// StartDeployment provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) StartDeployment(ctx context.Context, params *amplify.StartDeploymentInput, optFns ...func(*amplify.Options)) (*amplify.StartDeploymentOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for StartDeployment")
	}

	var r0 *amplify.StartDeploymentOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *amplify.StartDeploymentInput, ...func(*amplify.Options)) (*amplify.StartDeploymentOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *amplify.StartDeploymentInput, ...func(*amplify.Options)) *amplify.StartDeploymentOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*amplify.StartDeploymentOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *amplify.StartDeploymentInput, ...func(*amplify.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// StartJob provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) StartJob(ctx context.Context, params *amplify.StartJobInput, optFns ...func(*amplify.Options)) (*amplify.StartJobOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for StartJob")
	}

	var r0 *amplify.StartJobOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *amplify.StartJobInput, ...func(*amplify.Options)) (*amplify.StartJobOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *amplify.StartJobInput, ...func(*amplify.Options)) *amplify.StartJobOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*amplify.StartJobOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *amplify.StartJobInput, ...func(*amplify.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// StopJob provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) StopJob(ctx context.Context, params *amplify.StopJobInput, optFns ...func(*amplify.Options)) (*amplify.StopJobOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for StopJob")
	}

	var r0 *amplify.StopJobOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *amplify.StopJobInput, ...func(*amplify.Options)) (*amplify.StopJobOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *amplify.StopJobInput, ...func(*amplify.Options)) *amplify.StopJobOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*amplify.StopJobOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *amplify.StopJobInput, ...func(*amplify.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// TagResource provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) TagResource(ctx context.Context, params *amplify.TagResourceInput, optFns ...func(*amplify.Options)) (*amplify.TagResourceOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for TagResource")
	}

	var r0 *amplify.TagResourceOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *amplify.TagResourceInput, ...func(*amplify.Options)) (*amplify.TagResourceOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *amplify.TagResourceInput, ...func(*amplify.Options)) *amplify.TagResourceOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*amplify.TagResourceOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *amplify.TagResourceInput, ...func(*amplify.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UntagResource provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UntagResource(ctx context.Context, params *amplify.UntagResourceInput, optFns ...func(*amplify.Options)) (*amplify.UntagResourceOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UntagResource")
	}

	var r0 *amplify.UntagResourceOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *amplify.UntagResourceInput, ...func(*amplify.Options)) (*amplify.UntagResourceOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *amplify.UntagResourceInput, ...func(*amplify.Options)) *amplify.UntagResourceOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*amplify.UntagResourceOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *amplify.UntagResourceInput, ...func(*amplify.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateApp provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UpdateApp(ctx context.Context, params *amplify.UpdateAppInput, optFns ...func(*amplify.Options)) (*amplify.UpdateAppOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateApp")
	}

	var r0 *amplify.UpdateAppOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *amplify.UpdateAppInput, ...func(*amplify.Options)) (*amplify.UpdateAppOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *amplify.UpdateAppInput, ...func(*amplify.Options)) *amplify.UpdateAppOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*amplify.UpdateAppOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *amplify.UpdateAppInput, ...func(*amplify.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateBranch provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UpdateBranch(ctx context.Context, params *amplify.UpdateBranchInput, optFns ...func(*amplify.Options)) (*amplify.UpdateBranchOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateBranch")
	}

	var r0 *amplify.UpdateBranchOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *amplify.UpdateBranchInput, ...func(*amplify.Options)) (*amplify.UpdateBranchOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *amplify.UpdateBranchInput, ...func(*amplify.Options)) *amplify.UpdateBranchOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*amplify.UpdateBranchOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *amplify.UpdateBranchInput, ...func(*amplify.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateDomainAssociation provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UpdateDomainAssociation(ctx context.Context, params *amplify.UpdateDomainAssociationInput, optFns ...func(*amplify.Options)) (*amplify.UpdateDomainAssociationOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateDomainAssociation")
	}

	var r0 *amplify.UpdateDomainAssociationOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *amplify.UpdateDomainAssociationInput, ...func(*amplify.Options)) (*amplify.UpdateDomainAssociationOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *amplify.UpdateDomainAssociationInput, ...func(*amplify.Options)) *amplify.UpdateDomainAssociationOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*amplify.UpdateDomainAssociationOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *amplify.UpdateDomainAssociationInput, ...func(*amplify.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateWebhook provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UpdateWebhook(ctx context.Context, params *amplify.UpdateWebhookInput, optFns ...func(*amplify.Options)) (*amplify.UpdateWebhookOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateWebhook")
	}

	var r0 *amplify.UpdateWebhookOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *amplify.UpdateWebhookInput, ...func(*amplify.Options)) (*amplify.UpdateWebhookOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *amplify.UpdateWebhookInput, ...func(*amplify.Options)) *amplify.UpdateWebhookOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*amplify.UpdateWebhookOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *amplify.UpdateWebhookInput, ...func(*amplify.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewIClient creates a new instance of IClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewIClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *IClient {
	mock := &IClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
