// Code generated by mockery v2.43.2. DO NOT EDIT.

package mocks

import (
	context "context"

	rds "github.com/aws/aws-sdk-go-v2/service/rds"
	mock "github.com/stretchr/testify/mock"
)

// IClient is an autogenerated mock type for the IClient type
type IClient struct {
	mock.Mock
}

// AddRoleToDBCluster provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) AddRoleToDBCluster(ctx context.Context, params *rds.AddRoleToDBClusterInput, optFns ...func(*rds.Options)) (*rds.AddRoleToDBClusterOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for AddRoleToDBCluster")
	}

	var r0 *rds.AddRoleToDBClusterOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *rds.AddRoleToDBClusterInput, ...func(*rds.Options)) (*rds.AddRoleToDBClusterOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *rds.AddRoleToDBClusterInput, ...func(*rds.Options)) *rds.AddRoleToDBClusterOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*rds.AddRoleToDBClusterOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *rds.AddRoleToDBClusterInput, ...func(*rds.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AddRoleToDBInstance provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) AddRoleToDBInstance(ctx context.Context, params *rds.AddRoleToDBInstanceInput, optFns ...func(*rds.Options)) (*rds.AddRoleToDBInstanceOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for AddRoleToDBInstance")
	}

	var r0 *rds.AddRoleToDBInstanceOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *rds.AddRoleToDBInstanceInput, ...func(*rds.Options)) (*rds.AddRoleToDBInstanceOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *rds.AddRoleToDBInstanceInput, ...func(*rds.Options)) *rds.AddRoleToDBInstanceOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*rds.AddRoleToDBInstanceOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *rds.AddRoleToDBInstanceInput, ...func(*rds.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AddSourceIdentifierToSubscription provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) AddSourceIdentifierToSubscription(ctx context.Context, params *rds.AddSourceIdentifierToSubscriptionInput, optFns ...func(*rds.Options)) (*rds.AddSourceIdentifierToSubscriptionOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for AddSourceIdentifierToSubscription")
	}

	var r0 *rds.AddSourceIdentifierToSubscriptionOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *rds.AddSourceIdentifierToSubscriptionInput, ...func(*rds.Options)) (*rds.AddSourceIdentifierToSubscriptionOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *rds.AddSourceIdentifierToSubscriptionInput, ...func(*rds.Options)) *rds.AddSourceIdentifierToSubscriptionOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*rds.AddSourceIdentifierToSubscriptionOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *rds.AddSourceIdentifierToSubscriptionInput, ...func(*rds.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AddTagsToResource provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) AddTagsToResource(ctx context.Context, params *rds.AddTagsToResourceInput, optFns ...func(*rds.Options)) (*rds.AddTagsToResourceOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for AddTagsToResource")
	}

	var r0 *rds.AddTagsToResourceOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *rds.AddTagsToResourceInput, ...func(*rds.Options)) (*rds.AddTagsToResourceOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *rds.AddTagsToResourceInput, ...func(*rds.Options)) *rds.AddTagsToResourceOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*rds.AddTagsToResourceOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *rds.AddTagsToResourceInput, ...func(*rds.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ApplyPendingMaintenanceAction provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ApplyPendingMaintenanceAction(ctx context.Context, params *rds.ApplyPendingMaintenanceActionInput, optFns ...func(*rds.Options)) (*rds.ApplyPendingMaintenanceActionOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ApplyPendingMaintenanceAction")
	}

	var r0 *rds.ApplyPendingMaintenanceActionOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *rds.ApplyPendingMaintenanceActionInput, ...func(*rds.Options)) (*rds.ApplyPendingMaintenanceActionOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *rds.ApplyPendingMaintenanceActionInput, ...func(*rds.Options)) *rds.ApplyPendingMaintenanceActionOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*rds.ApplyPendingMaintenanceActionOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *rds.ApplyPendingMaintenanceActionInput, ...func(*rds.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AuthorizeDBSecurityGroupIngress provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) AuthorizeDBSecurityGroupIngress(ctx context.Context, params *rds.AuthorizeDBSecurityGroupIngressInput, optFns ...func(*rds.Options)) (*rds.AuthorizeDBSecurityGroupIngressOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for AuthorizeDBSecurityGroupIngress")
	}

	var r0 *rds.AuthorizeDBSecurityGroupIngressOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *rds.AuthorizeDBSecurityGroupIngressInput, ...func(*rds.Options)) (*rds.AuthorizeDBSecurityGroupIngressOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *rds.AuthorizeDBSecurityGroupIngressInput, ...func(*rds.Options)) *rds.AuthorizeDBSecurityGroupIngressOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*rds.AuthorizeDBSecurityGroupIngressOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *rds.AuthorizeDBSecurityGroupIngressInput, ...func(*rds.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// BacktrackDBCluster provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) BacktrackDBCluster(ctx context.Context, params *rds.BacktrackDBClusterInput, optFns ...func(*rds.Options)) (*rds.BacktrackDBClusterOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for BacktrackDBCluster")
	}

	var r0 *rds.BacktrackDBClusterOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *rds.BacktrackDBClusterInput, ...func(*rds.Options)) (*rds.BacktrackDBClusterOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *rds.BacktrackDBClusterInput, ...func(*rds.Options)) *rds.BacktrackDBClusterOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*rds.BacktrackDBClusterOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *rds.BacktrackDBClusterInput, ...func(*rds.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CancelExportTask provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CancelExportTask(ctx context.Context, params *rds.CancelExportTaskInput, optFns ...func(*rds.Options)) (*rds.CancelExportTaskOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CancelExportTask")
	}

	var r0 *rds.CancelExportTaskOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *rds.CancelExportTaskInput, ...func(*rds.Options)) (*rds.CancelExportTaskOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *rds.CancelExportTaskInput, ...func(*rds.Options)) *rds.CancelExportTaskOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*rds.CancelExportTaskOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *rds.CancelExportTaskInput, ...func(*rds.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CopyDBClusterParameterGroup provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CopyDBClusterParameterGroup(ctx context.Context, params *rds.CopyDBClusterParameterGroupInput, optFns ...func(*rds.Options)) (*rds.CopyDBClusterParameterGroupOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CopyDBClusterParameterGroup")
	}

	var r0 *rds.CopyDBClusterParameterGroupOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *rds.CopyDBClusterParameterGroupInput, ...func(*rds.Options)) (*rds.CopyDBClusterParameterGroupOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *rds.CopyDBClusterParameterGroupInput, ...func(*rds.Options)) *rds.CopyDBClusterParameterGroupOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*rds.CopyDBClusterParameterGroupOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *rds.CopyDBClusterParameterGroupInput, ...func(*rds.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CopyDBClusterSnapshot provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CopyDBClusterSnapshot(ctx context.Context, params *rds.CopyDBClusterSnapshotInput, optFns ...func(*rds.Options)) (*rds.CopyDBClusterSnapshotOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CopyDBClusterSnapshot")
	}

	var r0 *rds.CopyDBClusterSnapshotOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *rds.CopyDBClusterSnapshotInput, ...func(*rds.Options)) (*rds.CopyDBClusterSnapshotOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *rds.CopyDBClusterSnapshotInput, ...func(*rds.Options)) *rds.CopyDBClusterSnapshotOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*rds.CopyDBClusterSnapshotOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *rds.CopyDBClusterSnapshotInput, ...func(*rds.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CopyDBParameterGroup provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CopyDBParameterGroup(ctx context.Context, params *rds.CopyDBParameterGroupInput, optFns ...func(*rds.Options)) (*rds.CopyDBParameterGroupOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CopyDBParameterGroup")
	}

	var r0 *rds.CopyDBParameterGroupOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *rds.CopyDBParameterGroupInput, ...func(*rds.Options)) (*rds.CopyDBParameterGroupOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *rds.CopyDBParameterGroupInput, ...func(*rds.Options)) *rds.CopyDBParameterGroupOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*rds.CopyDBParameterGroupOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *rds.CopyDBParameterGroupInput, ...func(*rds.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CopyDBSnapshot provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CopyDBSnapshot(ctx context.Context, params *rds.CopyDBSnapshotInput, optFns ...func(*rds.Options)) (*rds.CopyDBSnapshotOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CopyDBSnapshot")
	}

	var r0 *rds.CopyDBSnapshotOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *rds.CopyDBSnapshotInput, ...func(*rds.Options)) (*rds.CopyDBSnapshotOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *rds.CopyDBSnapshotInput, ...func(*rds.Options)) *rds.CopyDBSnapshotOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*rds.CopyDBSnapshotOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *rds.CopyDBSnapshotInput, ...func(*rds.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CopyOptionGroup provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CopyOptionGroup(ctx context.Context, params *rds.CopyOptionGroupInput, optFns ...func(*rds.Options)) (*rds.CopyOptionGroupOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CopyOptionGroup")
	}

	var r0 *rds.CopyOptionGroupOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *rds.CopyOptionGroupInput, ...func(*rds.Options)) (*rds.CopyOptionGroupOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *rds.CopyOptionGroupInput, ...func(*rds.Options)) *rds.CopyOptionGroupOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*rds.CopyOptionGroupOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *rds.CopyOptionGroupInput, ...func(*rds.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateBlueGreenDeployment provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CreateBlueGreenDeployment(ctx context.Context, params *rds.CreateBlueGreenDeploymentInput, optFns ...func(*rds.Options)) (*rds.CreateBlueGreenDeploymentOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateBlueGreenDeployment")
	}

	var r0 *rds.CreateBlueGreenDeploymentOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *rds.CreateBlueGreenDeploymentInput, ...func(*rds.Options)) (*rds.CreateBlueGreenDeploymentOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *rds.CreateBlueGreenDeploymentInput, ...func(*rds.Options)) *rds.CreateBlueGreenDeploymentOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*rds.CreateBlueGreenDeploymentOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *rds.CreateBlueGreenDeploymentInput, ...func(*rds.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateCustomDBEngineVersion provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CreateCustomDBEngineVersion(ctx context.Context, params *rds.CreateCustomDBEngineVersionInput, optFns ...func(*rds.Options)) (*rds.CreateCustomDBEngineVersionOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateCustomDBEngineVersion")
	}

	var r0 *rds.CreateCustomDBEngineVersionOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *rds.CreateCustomDBEngineVersionInput, ...func(*rds.Options)) (*rds.CreateCustomDBEngineVersionOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *rds.CreateCustomDBEngineVersionInput, ...func(*rds.Options)) *rds.CreateCustomDBEngineVersionOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*rds.CreateCustomDBEngineVersionOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *rds.CreateCustomDBEngineVersionInput, ...func(*rds.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateDBCluster provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CreateDBCluster(ctx context.Context, params *rds.CreateDBClusterInput, optFns ...func(*rds.Options)) (*rds.CreateDBClusterOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateDBCluster")
	}

	var r0 *rds.CreateDBClusterOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *rds.CreateDBClusterInput, ...func(*rds.Options)) (*rds.CreateDBClusterOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *rds.CreateDBClusterInput, ...func(*rds.Options)) *rds.CreateDBClusterOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*rds.CreateDBClusterOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *rds.CreateDBClusterInput, ...func(*rds.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateDBClusterEndpoint provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CreateDBClusterEndpoint(ctx context.Context, params *rds.CreateDBClusterEndpointInput, optFns ...func(*rds.Options)) (*rds.CreateDBClusterEndpointOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateDBClusterEndpoint")
	}

	var r0 *rds.CreateDBClusterEndpointOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *rds.CreateDBClusterEndpointInput, ...func(*rds.Options)) (*rds.CreateDBClusterEndpointOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *rds.CreateDBClusterEndpointInput, ...func(*rds.Options)) *rds.CreateDBClusterEndpointOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*rds.CreateDBClusterEndpointOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *rds.CreateDBClusterEndpointInput, ...func(*rds.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateDBClusterParameterGroup provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CreateDBClusterParameterGroup(ctx context.Context, params *rds.CreateDBClusterParameterGroupInput, optFns ...func(*rds.Options)) (*rds.CreateDBClusterParameterGroupOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateDBClusterParameterGroup")
	}

	var r0 *rds.CreateDBClusterParameterGroupOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *rds.CreateDBClusterParameterGroupInput, ...func(*rds.Options)) (*rds.CreateDBClusterParameterGroupOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *rds.CreateDBClusterParameterGroupInput, ...func(*rds.Options)) *rds.CreateDBClusterParameterGroupOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*rds.CreateDBClusterParameterGroupOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *rds.CreateDBClusterParameterGroupInput, ...func(*rds.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateDBClusterSnapshot provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CreateDBClusterSnapshot(ctx context.Context, params *rds.CreateDBClusterSnapshotInput, optFns ...func(*rds.Options)) (*rds.CreateDBClusterSnapshotOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateDBClusterSnapshot")
	}

	var r0 *rds.CreateDBClusterSnapshotOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *rds.CreateDBClusterSnapshotInput, ...func(*rds.Options)) (*rds.CreateDBClusterSnapshotOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *rds.CreateDBClusterSnapshotInput, ...func(*rds.Options)) *rds.CreateDBClusterSnapshotOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*rds.CreateDBClusterSnapshotOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *rds.CreateDBClusterSnapshotInput, ...func(*rds.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateDBInstance provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CreateDBInstance(ctx context.Context, params *rds.CreateDBInstanceInput, optFns ...func(*rds.Options)) (*rds.CreateDBInstanceOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateDBInstance")
	}

	var r0 *rds.CreateDBInstanceOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *rds.CreateDBInstanceInput, ...func(*rds.Options)) (*rds.CreateDBInstanceOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *rds.CreateDBInstanceInput, ...func(*rds.Options)) *rds.CreateDBInstanceOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*rds.CreateDBInstanceOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *rds.CreateDBInstanceInput, ...func(*rds.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateDBInstanceReadReplica provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CreateDBInstanceReadReplica(ctx context.Context, params *rds.CreateDBInstanceReadReplicaInput, optFns ...func(*rds.Options)) (*rds.CreateDBInstanceReadReplicaOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateDBInstanceReadReplica")
	}

	var r0 *rds.CreateDBInstanceReadReplicaOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *rds.CreateDBInstanceReadReplicaInput, ...func(*rds.Options)) (*rds.CreateDBInstanceReadReplicaOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *rds.CreateDBInstanceReadReplicaInput, ...func(*rds.Options)) *rds.CreateDBInstanceReadReplicaOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*rds.CreateDBInstanceReadReplicaOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *rds.CreateDBInstanceReadReplicaInput, ...func(*rds.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateDBParameterGroup provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CreateDBParameterGroup(ctx context.Context, params *rds.CreateDBParameterGroupInput, optFns ...func(*rds.Options)) (*rds.CreateDBParameterGroupOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateDBParameterGroup")
	}

	var r0 *rds.CreateDBParameterGroupOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *rds.CreateDBParameterGroupInput, ...func(*rds.Options)) (*rds.CreateDBParameterGroupOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *rds.CreateDBParameterGroupInput, ...func(*rds.Options)) *rds.CreateDBParameterGroupOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*rds.CreateDBParameterGroupOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *rds.CreateDBParameterGroupInput, ...func(*rds.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateDBProxy provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CreateDBProxy(ctx context.Context, params *rds.CreateDBProxyInput, optFns ...func(*rds.Options)) (*rds.CreateDBProxyOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateDBProxy")
	}

	var r0 *rds.CreateDBProxyOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *rds.CreateDBProxyInput, ...func(*rds.Options)) (*rds.CreateDBProxyOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *rds.CreateDBProxyInput, ...func(*rds.Options)) *rds.CreateDBProxyOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*rds.CreateDBProxyOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *rds.CreateDBProxyInput, ...func(*rds.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateDBProxyEndpoint provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CreateDBProxyEndpoint(ctx context.Context, params *rds.CreateDBProxyEndpointInput, optFns ...func(*rds.Options)) (*rds.CreateDBProxyEndpointOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateDBProxyEndpoint")
	}

	var r0 *rds.CreateDBProxyEndpointOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *rds.CreateDBProxyEndpointInput, ...func(*rds.Options)) (*rds.CreateDBProxyEndpointOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *rds.CreateDBProxyEndpointInput, ...func(*rds.Options)) *rds.CreateDBProxyEndpointOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*rds.CreateDBProxyEndpointOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *rds.CreateDBProxyEndpointInput, ...func(*rds.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateDBSecurityGroup provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CreateDBSecurityGroup(ctx context.Context, params *rds.CreateDBSecurityGroupInput, optFns ...func(*rds.Options)) (*rds.CreateDBSecurityGroupOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateDBSecurityGroup")
	}

	var r0 *rds.CreateDBSecurityGroupOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *rds.CreateDBSecurityGroupInput, ...func(*rds.Options)) (*rds.CreateDBSecurityGroupOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *rds.CreateDBSecurityGroupInput, ...func(*rds.Options)) *rds.CreateDBSecurityGroupOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*rds.CreateDBSecurityGroupOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *rds.CreateDBSecurityGroupInput, ...func(*rds.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateDBShardGroup provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CreateDBShardGroup(ctx context.Context, params *rds.CreateDBShardGroupInput, optFns ...func(*rds.Options)) (*rds.CreateDBShardGroupOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateDBShardGroup")
	}

	var r0 *rds.CreateDBShardGroupOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *rds.CreateDBShardGroupInput, ...func(*rds.Options)) (*rds.CreateDBShardGroupOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *rds.CreateDBShardGroupInput, ...func(*rds.Options)) *rds.CreateDBShardGroupOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*rds.CreateDBShardGroupOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *rds.CreateDBShardGroupInput, ...func(*rds.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateDBSnapshot provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CreateDBSnapshot(ctx context.Context, params *rds.CreateDBSnapshotInput, optFns ...func(*rds.Options)) (*rds.CreateDBSnapshotOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateDBSnapshot")
	}

	var r0 *rds.CreateDBSnapshotOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *rds.CreateDBSnapshotInput, ...func(*rds.Options)) (*rds.CreateDBSnapshotOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *rds.CreateDBSnapshotInput, ...func(*rds.Options)) *rds.CreateDBSnapshotOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*rds.CreateDBSnapshotOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *rds.CreateDBSnapshotInput, ...func(*rds.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateDBSubnetGroup provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CreateDBSubnetGroup(ctx context.Context, params *rds.CreateDBSubnetGroupInput, optFns ...func(*rds.Options)) (*rds.CreateDBSubnetGroupOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateDBSubnetGroup")
	}

	var r0 *rds.CreateDBSubnetGroupOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *rds.CreateDBSubnetGroupInput, ...func(*rds.Options)) (*rds.CreateDBSubnetGroupOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *rds.CreateDBSubnetGroupInput, ...func(*rds.Options)) *rds.CreateDBSubnetGroupOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*rds.CreateDBSubnetGroupOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *rds.CreateDBSubnetGroupInput, ...func(*rds.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateEventSubscription provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CreateEventSubscription(ctx context.Context, params *rds.CreateEventSubscriptionInput, optFns ...func(*rds.Options)) (*rds.CreateEventSubscriptionOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateEventSubscription")
	}

	var r0 *rds.CreateEventSubscriptionOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *rds.CreateEventSubscriptionInput, ...func(*rds.Options)) (*rds.CreateEventSubscriptionOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *rds.CreateEventSubscriptionInput, ...func(*rds.Options)) *rds.CreateEventSubscriptionOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*rds.CreateEventSubscriptionOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *rds.CreateEventSubscriptionInput, ...func(*rds.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateGlobalCluster provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CreateGlobalCluster(ctx context.Context, params *rds.CreateGlobalClusterInput, optFns ...func(*rds.Options)) (*rds.CreateGlobalClusterOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateGlobalCluster")
	}

	var r0 *rds.CreateGlobalClusterOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *rds.CreateGlobalClusterInput, ...func(*rds.Options)) (*rds.CreateGlobalClusterOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *rds.CreateGlobalClusterInput, ...func(*rds.Options)) *rds.CreateGlobalClusterOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*rds.CreateGlobalClusterOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *rds.CreateGlobalClusterInput, ...func(*rds.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateIntegration provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CreateIntegration(ctx context.Context, params *rds.CreateIntegrationInput, optFns ...func(*rds.Options)) (*rds.CreateIntegrationOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateIntegration")
	}

	var r0 *rds.CreateIntegrationOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *rds.CreateIntegrationInput, ...func(*rds.Options)) (*rds.CreateIntegrationOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *rds.CreateIntegrationInput, ...func(*rds.Options)) *rds.CreateIntegrationOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*rds.CreateIntegrationOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *rds.CreateIntegrationInput, ...func(*rds.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateOptionGroup provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CreateOptionGroup(ctx context.Context, params *rds.CreateOptionGroupInput, optFns ...func(*rds.Options)) (*rds.CreateOptionGroupOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateOptionGroup")
	}

	var r0 *rds.CreateOptionGroupOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *rds.CreateOptionGroupInput, ...func(*rds.Options)) (*rds.CreateOptionGroupOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *rds.CreateOptionGroupInput, ...func(*rds.Options)) *rds.CreateOptionGroupOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*rds.CreateOptionGroupOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *rds.CreateOptionGroupInput, ...func(*rds.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateTenantDatabase provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CreateTenantDatabase(ctx context.Context, params *rds.CreateTenantDatabaseInput, optFns ...func(*rds.Options)) (*rds.CreateTenantDatabaseOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateTenantDatabase")
	}

	var r0 *rds.CreateTenantDatabaseOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *rds.CreateTenantDatabaseInput, ...func(*rds.Options)) (*rds.CreateTenantDatabaseOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *rds.CreateTenantDatabaseInput, ...func(*rds.Options)) *rds.CreateTenantDatabaseOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*rds.CreateTenantDatabaseOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *rds.CreateTenantDatabaseInput, ...func(*rds.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteBlueGreenDeployment provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteBlueGreenDeployment(ctx context.Context, params *rds.DeleteBlueGreenDeploymentInput, optFns ...func(*rds.Options)) (*rds.DeleteBlueGreenDeploymentOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteBlueGreenDeployment")
	}

	var r0 *rds.DeleteBlueGreenDeploymentOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *rds.DeleteBlueGreenDeploymentInput, ...func(*rds.Options)) (*rds.DeleteBlueGreenDeploymentOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *rds.DeleteBlueGreenDeploymentInput, ...func(*rds.Options)) *rds.DeleteBlueGreenDeploymentOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*rds.DeleteBlueGreenDeploymentOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *rds.DeleteBlueGreenDeploymentInput, ...func(*rds.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteCustomDBEngineVersion provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteCustomDBEngineVersion(ctx context.Context, params *rds.DeleteCustomDBEngineVersionInput, optFns ...func(*rds.Options)) (*rds.DeleteCustomDBEngineVersionOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteCustomDBEngineVersion")
	}

	var r0 *rds.DeleteCustomDBEngineVersionOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *rds.DeleteCustomDBEngineVersionInput, ...func(*rds.Options)) (*rds.DeleteCustomDBEngineVersionOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *rds.DeleteCustomDBEngineVersionInput, ...func(*rds.Options)) *rds.DeleteCustomDBEngineVersionOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*rds.DeleteCustomDBEngineVersionOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *rds.DeleteCustomDBEngineVersionInput, ...func(*rds.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteDBCluster provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteDBCluster(ctx context.Context, params *rds.DeleteDBClusterInput, optFns ...func(*rds.Options)) (*rds.DeleteDBClusterOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteDBCluster")
	}

	var r0 *rds.DeleteDBClusterOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *rds.DeleteDBClusterInput, ...func(*rds.Options)) (*rds.DeleteDBClusterOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *rds.DeleteDBClusterInput, ...func(*rds.Options)) *rds.DeleteDBClusterOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*rds.DeleteDBClusterOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *rds.DeleteDBClusterInput, ...func(*rds.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteDBClusterAutomatedBackup provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteDBClusterAutomatedBackup(ctx context.Context, params *rds.DeleteDBClusterAutomatedBackupInput, optFns ...func(*rds.Options)) (*rds.DeleteDBClusterAutomatedBackupOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteDBClusterAutomatedBackup")
	}

	var r0 *rds.DeleteDBClusterAutomatedBackupOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *rds.DeleteDBClusterAutomatedBackupInput, ...func(*rds.Options)) (*rds.DeleteDBClusterAutomatedBackupOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *rds.DeleteDBClusterAutomatedBackupInput, ...func(*rds.Options)) *rds.DeleteDBClusterAutomatedBackupOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*rds.DeleteDBClusterAutomatedBackupOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *rds.DeleteDBClusterAutomatedBackupInput, ...func(*rds.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteDBClusterEndpoint provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteDBClusterEndpoint(ctx context.Context, params *rds.DeleteDBClusterEndpointInput, optFns ...func(*rds.Options)) (*rds.DeleteDBClusterEndpointOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteDBClusterEndpoint")
	}

	var r0 *rds.DeleteDBClusterEndpointOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *rds.DeleteDBClusterEndpointInput, ...func(*rds.Options)) (*rds.DeleteDBClusterEndpointOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *rds.DeleteDBClusterEndpointInput, ...func(*rds.Options)) *rds.DeleteDBClusterEndpointOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*rds.DeleteDBClusterEndpointOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *rds.DeleteDBClusterEndpointInput, ...func(*rds.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteDBClusterParameterGroup provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteDBClusterParameterGroup(ctx context.Context, params *rds.DeleteDBClusterParameterGroupInput, optFns ...func(*rds.Options)) (*rds.DeleteDBClusterParameterGroupOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteDBClusterParameterGroup")
	}

	var r0 *rds.DeleteDBClusterParameterGroupOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *rds.DeleteDBClusterParameterGroupInput, ...func(*rds.Options)) (*rds.DeleteDBClusterParameterGroupOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *rds.DeleteDBClusterParameterGroupInput, ...func(*rds.Options)) *rds.DeleteDBClusterParameterGroupOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*rds.DeleteDBClusterParameterGroupOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *rds.DeleteDBClusterParameterGroupInput, ...func(*rds.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteDBClusterSnapshot provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteDBClusterSnapshot(ctx context.Context, params *rds.DeleteDBClusterSnapshotInput, optFns ...func(*rds.Options)) (*rds.DeleteDBClusterSnapshotOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteDBClusterSnapshot")
	}

	var r0 *rds.DeleteDBClusterSnapshotOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *rds.DeleteDBClusterSnapshotInput, ...func(*rds.Options)) (*rds.DeleteDBClusterSnapshotOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *rds.DeleteDBClusterSnapshotInput, ...func(*rds.Options)) *rds.DeleteDBClusterSnapshotOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*rds.DeleteDBClusterSnapshotOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *rds.DeleteDBClusterSnapshotInput, ...func(*rds.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteDBInstance provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteDBInstance(ctx context.Context, params *rds.DeleteDBInstanceInput, optFns ...func(*rds.Options)) (*rds.DeleteDBInstanceOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteDBInstance")
	}

	var r0 *rds.DeleteDBInstanceOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *rds.DeleteDBInstanceInput, ...func(*rds.Options)) (*rds.DeleteDBInstanceOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *rds.DeleteDBInstanceInput, ...func(*rds.Options)) *rds.DeleteDBInstanceOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*rds.DeleteDBInstanceOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *rds.DeleteDBInstanceInput, ...func(*rds.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteDBInstanceAutomatedBackup provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteDBInstanceAutomatedBackup(ctx context.Context, params *rds.DeleteDBInstanceAutomatedBackupInput, optFns ...func(*rds.Options)) (*rds.DeleteDBInstanceAutomatedBackupOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteDBInstanceAutomatedBackup")
	}

	var r0 *rds.DeleteDBInstanceAutomatedBackupOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *rds.DeleteDBInstanceAutomatedBackupInput, ...func(*rds.Options)) (*rds.DeleteDBInstanceAutomatedBackupOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *rds.DeleteDBInstanceAutomatedBackupInput, ...func(*rds.Options)) *rds.DeleteDBInstanceAutomatedBackupOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*rds.DeleteDBInstanceAutomatedBackupOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *rds.DeleteDBInstanceAutomatedBackupInput, ...func(*rds.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteDBParameterGroup provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteDBParameterGroup(ctx context.Context, params *rds.DeleteDBParameterGroupInput, optFns ...func(*rds.Options)) (*rds.DeleteDBParameterGroupOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteDBParameterGroup")
	}

	var r0 *rds.DeleteDBParameterGroupOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *rds.DeleteDBParameterGroupInput, ...func(*rds.Options)) (*rds.DeleteDBParameterGroupOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *rds.DeleteDBParameterGroupInput, ...func(*rds.Options)) *rds.DeleteDBParameterGroupOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*rds.DeleteDBParameterGroupOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *rds.DeleteDBParameterGroupInput, ...func(*rds.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteDBProxy provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteDBProxy(ctx context.Context, params *rds.DeleteDBProxyInput, optFns ...func(*rds.Options)) (*rds.DeleteDBProxyOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteDBProxy")
	}

	var r0 *rds.DeleteDBProxyOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *rds.DeleteDBProxyInput, ...func(*rds.Options)) (*rds.DeleteDBProxyOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *rds.DeleteDBProxyInput, ...func(*rds.Options)) *rds.DeleteDBProxyOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*rds.DeleteDBProxyOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *rds.DeleteDBProxyInput, ...func(*rds.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteDBProxyEndpoint provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteDBProxyEndpoint(ctx context.Context, params *rds.DeleteDBProxyEndpointInput, optFns ...func(*rds.Options)) (*rds.DeleteDBProxyEndpointOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteDBProxyEndpoint")
	}

	var r0 *rds.DeleteDBProxyEndpointOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *rds.DeleteDBProxyEndpointInput, ...func(*rds.Options)) (*rds.DeleteDBProxyEndpointOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *rds.DeleteDBProxyEndpointInput, ...func(*rds.Options)) *rds.DeleteDBProxyEndpointOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*rds.DeleteDBProxyEndpointOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *rds.DeleteDBProxyEndpointInput, ...func(*rds.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteDBSecurityGroup provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteDBSecurityGroup(ctx context.Context, params *rds.DeleteDBSecurityGroupInput, optFns ...func(*rds.Options)) (*rds.DeleteDBSecurityGroupOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteDBSecurityGroup")
	}

	var r0 *rds.DeleteDBSecurityGroupOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *rds.DeleteDBSecurityGroupInput, ...func(*rds.Options)) (*rds.DeleteDBSecurityGroupOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *rds.DeleteDBSecurityGroupInput, ...func(*rds.Options)) *rds.DeleteDBSecurityGroupOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*rds.DeleteDBSecurityGroupOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *rds.DeleteDBSecurityGroupInput, ...func(*rds.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteDBShardGroup provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteDBShardGroup(ctx context.Context, params *rds.DeleteDBShardGroupInput, optFns ...func(*rds.Options)) (*rds.DeleteDBShardGroupOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteDBShardGroup")
	}

	var r0 *rds.DeleteDBShardGroupOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *rds.DeleteDBShardGroupInput, ...func(*rds.Options)) (*rds.DeleteDBShardGroupOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *rds.DeleteDBShardGroupInput, ...func(*rds.Options)) *rds.DeleteDBShardGroupOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*rds.DeleteDBShardGroupOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *rds.DeleteDBShardGroupInput, ...func(*rds.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteDBSnapshot provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteDBSnapshot(ctx context.Context, params *rds.DeleteDBSnapshotInput, optFns ...func(*rds.Options)) (*rds.DeleteDBSnapshotOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteDBSnapshot")
	}

	var r0 *rds.DeleteDBSnapshotOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *rds.DeleteDBSnapshotInput, ...func(*rds.Options)) (*rds.DeleteDBSnapshotOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *rds.DeleteDBSnapshotInput, ...func(*rds.Options)) *rds.DeleteDBSnapshotOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*rds.DeleteDBSnapshotOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *rds.DeleteDBSnapshotInput, ...func(*rds.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteDBSubnetGroup provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteDBSubnetGroup(ctx context.Context, params *rds.DeleteDBSubnetGroupInput, optFns ...func(*rds.Options)) (*rds.DeleteDBSubnetGroupOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteDBSubnetGroup")
	}

	var r0 *rds.DeleteDBSubnetGroupOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *rds.DeleteDBSubnetGroupInput, ...func(*rds.Options)) (*rds.DeleteDBSubnetGroupOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *rds.DeleteDBSubnetGroupInput, ...func(*rds.Options)) *rds.DeleteDBSubnetGroupOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*rds.DeleteDBSubnetGroupOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *rds.DeleteDBSubnetGroupInput, ...func(*rds.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteEventSubscription provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteEventSubscription(ctx context.Context, params *rds.DeleteEventSubscriptionInput, optFns ...func(*rds.Options)) (*rds.DeleteEventSubscriptionOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteEventSubscription")
	}

	var r0 *rds.DeleteEventSubscriptionOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *rds.DeleteEventSubscriptionInput, ...func(*rds.Options)) (*rds.DeleteEventSubscriptionOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *rds.DeleteEventSubscriptionInput, ...func(*rds.Options)) *rds.DeleteEventSubscriptionOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*rds.DeleteEventSubscriptionOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *rds.DeleteEventSubscriptionInput, ...func(*rds.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteGlobalCluster provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteGlobalCluster(ctx context.Context, params *rds.DeleteGlobalClusterInput, optFns ...func(*rds.Options)) (*rds.DeleteGlobalClusterOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteGlobalCluster")
	}

	var r0 *rds.DeleteGlobalClusterOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *rds.DeleteGlobalClusterInput, ...func(*rds.Options)) (*rds.DeleteGlobalClusterOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *rds.DeleteGlobalClusterInput, ...func(*rds.Options)) *rds.DeleteGlobalClusterOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*rds.DeleteGlobalClusterOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *rds.DeleteGlobalClusterInput, ...func(*rds.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteIntegration provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteIntegration(ctx context.Context, params *rds.DeleteIntegrationInput, optFns ...func(*rds.Options)) (*rds.DeleteIntegrationOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteIntegration")
	}

	var r0 *rds.DeleteIntegrationOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *rds.DeleteIntegrationInput, ...func(*rds.Options)) (*rds.DeleteIntegrationOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *rds.DeleteIntegrationInput, ...func(*rds.Options)) *rds.DeleteIntegrationOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*rds.DeleteIntegrationOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *rds.DeleteIntegrationInput, ...func(*rds.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteOptionGroup provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteOptionGroup(ctx context.Context, params *rds.DeleteOptionGroupInput, optFns ...func(*rds.Options)) (*rds.DeleteOptionGroupOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteOptionGroup")
	}

	var r0 *rds.DeleteOptionGroupOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *rds.DeleteOptionGroupInput, ...func(*rds.Options)) (*rds.DeleteOptionGroupOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *rds.DeleteOptionGroupInput, ...func(*rds.Options)) *rds.DeleteOptionGroupOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*rds.DeleteOptionGroupOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *rds.DeleteOptionGroupInput, ...func(*rds.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteTenantDatabase provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteTenantDatabase(ctx context.Context, params *rds.DeleteTenantDatabaseInput, optFns ...func(*rds.Options)) (*rds.DeleteTenantDatabaseOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteTenantDatabase")
	}

	var r0 *rds.DeleteTenantDatabaseOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *rds.DeleteTenantDatabaseInput, ...func(*rds.Options)) (*rds.DeleteTenantDatabaseOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *rds.DeleteTenantDatabaseInput, ...func(*rds.Options)) *rds.DeleteTenantDatabaseOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*rds.DeleteTenantDatabaseOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *rds.DeleteTenantDatabaseInput, ...func(*rds.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeregisterDBProxyTargets provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeregisterDBProxyTargets(ctx context.Context, params *rds.DeregisterDBProxyTargetsInput, optFns ...func(*rds.Options)) (*rds.DeregisterDBProxyTargetsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeregisterDBProxyTargets")
	}

	var r0 *rds.DeregisterDBProxyTargetsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *rds.DeregisterDBProxyTargetsInput, ...func(*rds.Options)) (*rds.DeregisterDBProxyTargetsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *rds.DeregisterDBProxyTargetsInput, ...func(*rds.Options)) *rds.DeregisterDBProxyTargetsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*rds.DeregisterDBProxyTargetsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *rds.DeregisterDBProxyTargetsInput, ...func(*rds.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeAccountAttributes provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DescribeAccountAttributes(ctx context.Context, params *rds.DescribeAccountAttributesInput, optFns ...func(*rds.Options)) (*rds.DescribeAccountAttributesOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DescribeAccountAttributes")
	}

	var r0 *rds.DescribeAccountAttributesOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *rds.DescribeAccountAttributesInput, ...func(*rds.Options)) (*rds.DescribeAccountAttributesOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *rds.DescribeAccountAttributesInput, ...func(*rds.Options)) *rds.DescribeAccountAttributesOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*rds.DescribeAccountAttributesOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *rds.DescribeAccountAttributesInput, ...func(*rds.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeBlueGreenDeployments provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DescribeBlueGreenDeployments(ctx context.Context, params *rds.DescribeBlueGreenDeploymentsInput, optFns ...func(*rds.Options)) (*rds.DescribeBlueGreenDeploymentsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DescribeBlueGreenDeployments")
	}

	var r0 *rds.DescribeBlueGreenDeploymentsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *rds.DescribeBlueGreenDeploymentsInput, ...func(*rds.Options)) (*rds.DescribeBlueGreenDeploymentsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *rds.DescribeBlueGreenDeploymentsInput, ...func(*rds.Options)) *rds.DescribeBlueGreenDeploymentsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*rds.DescribeBlueGreenDeploymentsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *rds.DescribeBlueGreenDeploymentsInput, ...func(*rds.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeCertificates provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DescribeCertificates(ctx context.Context, params *rds.DescribeCertificatesInput, optFns ...func(*rds.Options)) (*rds.DescribeCertificatesOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DescribeCertificates")
	}

	var r0 *rds.DescribeCertificatesOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *rds.DescribeCertificatesInput, ...func(*rds.Options)) (*rds.DescribeCertificatesOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *rds.DescribeCertificatesInput, ...func(*rds.Options)) *rds.DescribeCertificatesOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*rds.DescribeCertificatesOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *rds.DescribeCertificatesInput, ...func(*rds.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeDBClusterAutomatedBackups provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DescribeDBClusterAutomatedBackups(ctx context.Context, params *rds.DescribeDBClusterAutomatedBackupsInput, optFns ...func(*rds.Options)) (*rds.DescribeDBClusterAutomatedBackupsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DescribeDBClusterAutomatedBackups")
	}

	var r0 *rds.DescribeDBClusterAutomatedBackupsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *rds.DescribeDBClusterAutomatedBackupsInput, ...func(*rds.Options)) (*rds.DescribeDBClusterAutomatedBackupsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *rds.DescribeDBClusterAutomatedBackupsInput, ...func(*rds.Options)) *rds.DescribeDBClusterAutomatedBackupsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*rds.DescribeDBClusterAutomatedBackupsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *rds.DescribeDBClusterAutomatedBackupsInput, ...func(*rds.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeDBClusterBacktracks provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DescribeDBClusterBacktracks(ctx context.Context, params *rds.DescribeDBClusterBacktracksInput, optFns ...func(*rds.Options)) (*rds.DescribeDBClusterBacktracksOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DescribeDBClusterBacktracks")
	}

	var r0 *rds.DescribeDBClusterBacktracksOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *rds.DescribeDBClusterBacktracksInput, ...func(*rds.Options)) (*rds.DescribeDBClusterBacktracksOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *rds.DescribeDBClusterBacktracksInput, ...func(*rds.Options)) *rds.DescribeDBClusterBacktracksOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*rds.DescribeDBClusterBacktracksOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *rds.DescribeDBClusterBacktracksInput, ...func(*rds.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeDBClusterEndpoints provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DescribeDBClusterEndpoints(ctx context.Context, params *rds.DescribeDBClusterEndpointsInput, optFns ...func(*rds.Options)) (*rds.DescribeDBClusterEndpointsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DescribeDBClusterEndpoints")
	}

	var r0 *rds.DescribeDBClusterEndpointsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *rds.DescribeDBClusterEndpointsInput, ...func(*rds.Options)) (*rds.DescribeDBClusterEndpointsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *rds.DescribeDBClusterEndpointsInput, ...func(*rds.Options)) *rds.DescribeDBClusterEndpointsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*rds.DescribeDBClusterEndpointsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *rds.DescribeDBClusterEndpointsInput, ...func(*rds.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeDBClusterParameterGroups provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DescribeDBClusterParameterGroups(ctx context.Context, params *rds.DescribeDBClusterParameterGroupsInput, optFns ...func(*rds.Options)) (*rds.DescribeDBClusterParameterGroupsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DescribeDBClusterParameterGroups")
	}

	var r0 *rds.DescribeDBClusterParameterGroupsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *rds.DescribeDBClusterParameterGroupsInput, ...func(*rds.Options)) (*rds.DescribeDBClusterParameterGroupsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *rds.DescribeDBClusterParameterGroupsInput, ...func(*rds.Options)) *rds.DescribeDBClusterParameterGroupsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*rds.DescribeDBClusterParameterGroupsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *rds.DescribeDBClusterParameterGroupsInput, ...func(*rds.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeDBClusterParameters provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DescribeDBClusterParameters(ctx context.Context, params *rds.DescribeDBClusterParametersInput, optFns ...func(*rds.Options)) (*rds.DescribeDBClusterParametersOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DescribeDBClusterParameters")
	}

	var r0 *rds.DescribeDBClusterParametersOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *rds.DescribeDBClusterParametersInput, ...func(*rds.Options)) (*rds.DescribeDBClusterParametersOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *rds.DescribeDBClusterParametersInput, ...func(*rds.Options)) *rds.DescribeDBClusterParametersOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*rds.DescribeDBClusterParametersOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *rds.DescribeDBClusterParametersInput, ...func(*rds.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeDBClusterSnapshotAttributes provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DescribeDBClusterSnapshotAttributes(ctx context.Context, params *rds.DescribeDBClusterSnapshotAttributesInput, optFns ...func(*rds.Options)) (*rds.DescribeDBClusterSnapshotAttributesOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DescribeDBClusterSnapshotAttributes")
	}

	var r0 *rds.DescribeDBClusterSnapshotAttributesOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *rds.DescribeDBClusterSnapshotAttributesInput, ...func(*rds.Options)) (*rds.DescribeDBClusterSnapshotAttributesOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *rds.DescribeDBClusterSnapshotAttributesInput, ...func(*rds.Options)) *rds.DescribeDBClusterSnapshotAttributesOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*rds.DescribeDBClusterSnapshotAttributesOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *rds.DescribeDBClusterSnapshotAttributesInput, ...func(*rds.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeDBClusterSnapshots provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DescribeDBClusterSnapshots(ctx context.Context, params *rds.DescribeDBClusterSnapshotsInput, optFns ...func(*rds.Options)) (*rds.DescribeDBClusterSnapshotsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DescribeDBClusterSnapshots")
	}

	var r0 *rds.DescribeDBClusterSnapshotsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *rds.DescribeDBClusterSnapshotsInput, ...func(*rds.Options)) (*rds.DescribeDBClusterSnapshotsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *rds.DescribeDBClusterSnapshotsInput, ...func(*rds.Options)) *rds.DescribeDBClusterSnapshotsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*rds.DescribeDBClusterSnapshotsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *rds.DescribeDBClusterSnapshotsInput, ...func(*rds.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeDBClusters provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DescribeDBClusters(ctx context.Context, params *rds.DescribeDBClustersInput, optFns ...func(*rds.Options)) (*rds.DescribeDBClustersOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DescribeDBClusters")
	}

	var r0 *rds.DescribeDBClustersOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *rds.DescribeDBClustersInput, ...func(*rds.Options)) (*rds.DescribeDBClustersOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *rds.DescribeDBClustersInput, ...func(*rds.Options)) *rds.DescribeDBClustersOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*rds.DescribeDBClustersOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *rds.DescribeDBClustersInput, ...func(*rds.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeDBEngineVersions provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DescribeDBEngineVersions(ctx context.Context, params *rds.DescribeDBEngineVersionsInput, optFns ...func(*rds.Options)) (*rds.DescribeDBEngineVersionsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DescribeDBEngineVersions")
	}

	var r0 *rds.DescribeDBEngineVersionsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *rds.DescribeDBEngineVersionsInput, ...func(*rds.Options)) (*rds.DescribeDBEngineVersionsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *rds.DescribeDBEngineVersionsInput, ...func(*rds.Options)) *rds.DescribeDBEngineVersionsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*rds.DescribeDBEngineVersionsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *rds.DescribeDBEngineVersionsInput, ...func(*rds.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeDBInstanceAutomatedBackups provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DescribeDBInstanceAutomatedBackups(ctx context.Context, params *rds.DescribeDBInstanceAutomatedBackupsInput, optFns ...func(*rds.Options)) (*rds.DescribeDBInstanceAutomatedBackupsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DescribeDBInstanceAutomatedBackups")
	}

	var r0 *rds.DescribeDBInstanceAutomatedBackupsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *rds.DescribeDBInstanceAutomatedBackupsInput, ...func(*rds.Options)) (*rds.DescribeDBInstanceAutomatedBackupsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *rds.DescribeDBInstanceAutomatedBackupsInput, ...func(*rds.Options)) *rds.DescribeDBInstanceAutomatedBackupsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*rds.DescribeDBInstanceAutomatedBackupsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *rds.DescribeDBInstanceAutomatedBackupsInput, ...func(*rds.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeDBInstances provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DescribeDBInstances(ctx context.Context, params *rds.DescribeDBInstancesInput, optFns ...func(*rds.Options)) (*rds.DescribeDBInstancesOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DescribeDBInstances")
	}

	var r0 *rds.DescribeDBInstancesOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *rds.DescribeDBInstancesInput, ...func(*rds.Options)) (*rds.DescribeDBInstancesOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *rds.DescribeDBInstancesInput, ...func(*rds.Options)) *rds.DescribeDBInstancesOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*rds.DescribeDBInstancesOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *rds.DescribeDBInstancesInput, ...func(*rds.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeDBLogFiles provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DescribeDBLogFiles(ctx context.Context, params *rds.DescribeDBLogFilesInput, optFns ...func(*rds.Options)) (*rds.DescribeDBLogFilesOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DescribeDBLogFiles")
	}

	var r0 *rds.DescribeDBLogFilesOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *rds.DescribeDBLogFilesInput, ...func(*rds.Options)) (*rds.DescribeDBLogFilesOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *rds.DescribeDBLogFilesInput, ...func(*rds.Options)) *rds.DescribeDBLogFilesOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*rds.DescribeDBLogFilesOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *rds.DescribeDBLogFilesInput, ...func(*rds.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeDBParameterGroups provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DescribeDBParameterGroups(ctx context.Context, params *rds.DescribeDBParameterGroupsInput, optFns ...func(*rds.Options)) (*rds.DescribeDBParameterGroupsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DescribeDBParameterGroups")
	}

	var r0 *rds.DescribeDBParameterGroupsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *rds.DescribeDBParameterGroupsInput, ...func(*rds.Options)) (*rds.DescribeDBParameterGroupsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *rds.DescribeDBParameterGroupsInput, ...func(*rds.Options)) *rds.DescribeDBParameterGroupsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*rds.DescribeDBParameterGroupsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *rds.DescribeDBParameterGroupsInput, ...func(*rds.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeDBParameters provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DescribeDBParameters(ctx context.Context, params *rds.DescribeDBParametersInput, optFns ...func(*rds.Options)) (*rds.DescribeDBParametersOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DescribeDBParameters")
	}

	var r0 *rds.DescribeDBParametersOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *rds.DescribeDBParametersInput, ...func(*rds.Options)) (*rds.DescribeDBParametersOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *rds.DescribeDBParametersInput, ...func(*rds.Options)) *rds.DescribeDBParametersOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*rds.DescribeDBParametersOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *rds.DescribeDBParametersInput, ...func(*rds.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeDBProxies provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DescribeDBProxies(ctx context.Context, params *rds.DescribeDBProxiesInput, optFns ...func(*rds.Options)) (*rds.DescribeDBProxiesOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DescribeDBProxies")
	}

	var r0 *rds.DescribeDBProxiesOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *rds.DescribeDBProxiesInput, ...func(*rds.Options)) (*rds.DescribeDBProxiesOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *rds.DescribeDBProxiesInput, ...func(*rds.Options)) *rds.DescribeDBProxiesOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*rds.DescribeDBProxiesOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *rds.DescribeDBProxiesInput, ...func(*rds.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeDBProxyEndpoints provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DescribeDBProxyEndpoints(ctx context.Context, params *rds.DescribeDBProxyEndpointsInput, optFns ...func(*rds.Options)) (*rds.DescribeDBProxyEndpointsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DescribeDBProxyEndpoints")
	}

	var r0 *rds.DescribeDBProxyEndpointsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *rds.DescribeDBProxyEndpointsInput, ...func(*rds.Options)) (*rds.DescribeDBProxyEndpointsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *rds.DescribeDBProxyEndpointsInput, ...func(*rds.Options)) *rds.DescribeDBProxyEndpointsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*rds.DescribeDBProxyEndpointsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *rds.DescribeDBProxyEndpointsInput, ...func(*rds.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeDBProxyTargetGroups provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DescribeDBProxyTargetGroups(ctx context.Context, params *rds.DescribeDBProxyTargetGroupsInput, optFns ...func(*rds.Options)) (*rds.DescribeDBProxyTargetGroupsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DescribeDBProxyTargetGroups")
	}

	var r0 *rds.DescribeDBProxyTargetGroupsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *rds.DescribeDBProxyTargetGroupsInput, ...func(*rds.Options)) (*rds.DescribeDBProxyTargetGroupsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *rds.DescribeDBProxyTargetGroupsInput, ...func(*rds.Options)) *rds.DescribeDBProxyTargetGroupsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*rds.DescribeDBProxyTargetGroupsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *rds.DescribeDBProxyTargetGroupsInput, ...func(*rds.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeDBProxyTargets provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DescribeDBProxyTargets(ctx context.Context, params *rds.DescribeDBProxyTargetsInput, optFns ...func(*rds.Options)) (*rds.DescribeDBProxyTargetsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DescribeDBProxyTargets")
	}

	var r0 *rds.DescribeDBProxyTargetsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *rds.DescribeDBProxyTargetsInput, ...func(*rds.Options)) (*rds.DescribeDBProxyTargetsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *rds.DescribeDBProxyTargetsInput, ...func(*rds.Options)) *rds.DescribeDBProxyTargetsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*rds.DescribeDBProxyTargetsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *rds.DescribeDBProxyTargetsInput, ...func(*rds.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeDBRecommendations provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DescribeDBRecommendations(ctx context.Context, params *rds.DescribeDBRecommendationsInput, optFns ...func(*rds.Options)) (*rds.DescribeDBRecommendationsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DescribeDBRecommendations")
	}

	var r0 *rds.DescribeDBRecommendationsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *rds.DescribeDBRecommendationsInput, ...func(*rds.Options)) (*rds.DescribeDBRecommendationsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *rds.DescribeDBRecommendationsInput, ...func(*rds.Options)) *rds.DescribeDBRecommendationsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*rds.DescribeDBRecommendationsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *rds.DescribeDBRecommendationsInput, ...func(*rds.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeDBSecurityGroups provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DescribeDBSecurityGroups(ctx context.Context, params *rds.DescribeDBSecurityGroupsInput, optFns ...func(*rds.Options)) (*rds.DescribeDBSecurityGroupsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DescribeDBSecurityGroups")
	}

	var r0 *rds.DescribeDBSecurityGroupsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *rds.DescribeDBSecurityGroupsInput, ...func(*rds.Options)) (*rds.DescribeDBSecurityGroupsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *rds.DescribeDBSecurityGroupsInput, ...func(*rds.Options)) *rds.DescribeDBSecurityGroupsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*rds.DescribeDBSecurityGroupsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *rds.DescribeDBSecurityGroupsInput, ...func(*rds.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeDBShardGroups provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DescribeDBShardGroups(ctx context.Context, params *rds.DescribeDBShardGroupsInput, optFns ...func(*rds.Options)) (*rds.DescribeDBShardGroupsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DescribeDBShardGroups")
	}

	var r0 *rds.DescribeDBShardGroupsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *rds.DescribeDBShardGroupsInput, ...func(*rds.Options)) (*rds.DescribeDBShardGroupsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *rds.DescribeDBShardGroupsInput, ...func(*rds.Options)) *rds.DescribeDBShardGroupsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*rds.DescribeDBShardGroupsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *rds.DescribeDBShardGroupsInput, ...func(*rds.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeDBSnapshotAttributes provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DescribeDBSnapshotAttributes(ctx context.Context, params *rds.DescribeDBSnapshotAttributesInput, optFns ...func(*rds.Options)) (*rds.DescribeDBSnapshotAttributesOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DescribeDBSnapshotAttributes")
	}

	var r0 *rds.DescribeDBSnapshotAttributesOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *rds.DescribeDBSnapshotAttributesInput, ...func(*rds.Options)) (*rds.DescribeDBSnapshotAttributesOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *rds.DescribeDBSnapshotAttributesInput, ...func(*rds.Options)) *rds.DescribeDBSnapshotAttributesOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*rds.DescribeDBSnapshotAttributesOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *rds.DescribeDBSnapshotAttributesInput, ...func(*rds.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeDBSnapshotTenantDatabases provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DescribeDBSnapshotTenantDatabases(ctx context.Context, params *rds.DescribeDBSnapshotTenantDatabasesInput, optFns ...func(*rds.Options)) (*rds.DescribeDBSnapshotTenantDatabasesOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DescribeDBSnapshotTenantDatabases")
	}

	var r0 *rds.DescribeDBSnapshotTenantDatabasesOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *rds.DescribeDBSnapshotTenantDatabasesInput, ...func(*rds.Options)) (*rds.DescribeDBSnapshotTenantDatabasesOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *rds.DescribeDBSnapshotTenantDatabasesInput, ...func(*rds.Options)) *rds.DescribeDBSnapshotTenantDatabasesOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*rds.DescribeDBSnapshotTenantDatabasesOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *rds.DescribeDBSnapshotTenantDatabasesInput, ...func(*rds.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeDBSnapshots provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DescribeDBSnapshots(ctx context.Context, params *rds.DescribeDBSnapshotsInput, optFns ...func(*rds.Options)) (*rds.DescribeDBSnapshotsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DescribeDBSnapshots")
	}

	var r0 *rds.DescribeDBSnapshotsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *rds.DescribeDBSnapshotsInput, ...func(*rds.Options)) (*rds.DescribeDBSnapshotsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *rds.DescribeDBSnapshotsInput, ...func(*rds.Options)) *rds.DescribeDBSnapshotsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*rds.DescribeDBSnapshotsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *rds.DescribeDBSnapshotsInput, ...func(*rds.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeDBSubnetGroups provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DescribeDBSubnetGroups(ctx context.Context, params *rds.DescribeDBSubnetGroupsInput, optFns ...func(*rds.Options)) (*rds.DescribeDBSubnetGroupsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DescribeDBSubnetGroups")
	}

	var r0 *rds.DescribeDBSubnetGroupsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *rds.DescribeDBSubnetGroupsInput, ...func(*rds.Options)) (*rds.DescribeDBSubnetGroupsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *rds.DescribeDBSubnetGroupsInput, ...func(*rds.Options)) *rds.DescribeDBSubnetGroupsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*rds.DescribeDBSubnetGroupsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *rds.DescribeDBSubnetGroupsInput, ...func(*rds.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeEngineDefaultClusterParameters provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DescribeEngineDefaultClusterParameters(ctx context.Context, params *rds.DescribeEngineDefaultClusterParametersInput, optFns ...func(*rds.Options)) (*rds.DescribeEngineDefaultClusterParametersOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DescribeEngineDefaultClusterParameters")
	}

	var r0 *rds.DescribeEngineDefaultClusterParametersOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *rds.DescribeEngineDefaultClusterParametersInput, ...func(*rds.Options)) (*rds.DescribeEngineDefaultClusterParametersOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *rds.DescribeEngineDefaultClusterParametersInput, ...func(*rds.Options)) *rds.DescribeEngineDefaultClusterParametersOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*rds.DescribeEngineDefaultClusterParametersOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *rds.DescribeEngineDefaultClusterParametersInput, ...func(*rds.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeEngineDefaultParameters provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DescribeEngineDefaultParameters(ctx context.Context, params *rds.DescribeEngineDefaultParametersInput, optFns ...func(*rds.Options)) (*rds.DescribeEngineDefaultParametersOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DescribeEngineDefaultParameters")
	}

	var r0 *rds.DescribeEngineDefaultParametersOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *rds.DescribeEngineDefaultParametersInput, ...func(*rds.Options)) (*rds.DescribeEngineDefaultParametersOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *rds.DescribeEngineDefaultParametersInput, ...func(*rds.Options)) *rds.DescribeEngineDefaultParametersOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*rds.DescribeEngineDefaultParametersOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *rds.DescribeEngineDefaultParametersInput, ...func(*rds.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeEventCategories provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DescribeEventCategories(ctx context.Context, params *rds.DescribeEventCategoriesInput, optFns ...func(*rds.Options)) (*rds.DescribeEventCategoriesOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DescribeEventCategories")
	}

	var r0 *rds.DescribeEventCategoriesOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *rds.DescribeEventCategoriesInput, ...func(*rds.Options)) (*rds.DescribeEventCategoriesOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *rds.DescribeEventCategoriesInput, ...func(*rds.Options)) *rds.DescribeEventCategoriesOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*rds.DescribeEventCategoriesOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *rds.DescribeEventCategoriesInput, ...func(*rds.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeEventSubscriptions provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DescribeEventSubscriptions(ctx context.Context, params *rds.DescribeEventSubscriptionsInput, optFns ...func(*rds.Options)) (*rds.DescribeEventSubscriptionsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DescribeEventSubscriptions")
	}

	var r0 *rds.DescribeEventSubscriptionsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *rds.DescribeEventSubscriptionsInput, ...func(*rds.Options)) (*rds.DescribeEventSubscriptionsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *rds.DescribeEventSubscriptionsInput, ...func(*rds.Options)) *rds.DescribeEventSubscriptionsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*rds.DescribeEventSubscriptionsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *rds.DescribeEventSubscriptionsInput, ...func(*rds.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeEvents provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DescribeEvents(ctx context.Context, params *rds.DescribeEventsInput, optFns ...func(*rds.Options)) (*rds.DescribeEventsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DescribeEvents")
	}

	var r0 *rds.DescribeEventsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *rds.DescribeEventsInput, ...func(*rds.Options)) (*rds.DescribeEventsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *rds.DescribeEventsInput, ...func(*rds.Options)) *rds.DescribeEventsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*rds.DescribeEventsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *rds.DescribeEventsInput, ...func(*rds.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeExportTasks provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DescribeExportTasks(ctx context.Context, params *rds.DescribeExportTasksInput, optFns ...func(*rds.Options)) (*rds.DescribeExportTasksOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DescribeExportTasks")
	}

	var r0 *rds.DescribeExportTasksOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *rds.DescribeExportTasksInput, ...func(*rds.Options)) (*rds.DescribeExportTasksOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *rds.DescribeExportTasksInput, ...func(*rds.Options)) *rds.DescribeExportTasksOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*rds.DescribeExportTasksOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *rds.DescribeExportTasksInput, ...func(*rds.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeGlobalClusters provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DescribeGlobalClusters(ctx context.Context, params *rds.DescribeGlobalClustersInput, optFns ...func(*rds.Options)) (*rds.DescribeGlobalClustersOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DescribeGlobalClusters")
	}

	var r0 *rds.DescribeGlobalClustersOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *rds.DescribeGlobalClustersInput, ...func(*rds.Options)) (*rds.DescribeGlobalClustersOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *rds.DescribeGlobalClustersInput, ...func(*rds.Options)) *rds.DescribeGlobalClustersOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*rds.DescribeGlobalClustersOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *rds.DescribeGlobalClustersInput, ...func(*rds.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeIntegrations provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DescribeIntegrations(ctx context.Context, params *rds.DescribeIntegrationsInput, optFns ...func(*rds.Options)) (*rds.DescribeIntegrationsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DescribeIntegrations")
	}

	var r0 *rds.DescribeIntegrationsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *rds.DescribeIntegrationsInput, ...func(*rds.Options)) (*rds.DescribeIntegrationsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *rds.DescribeIntegrationsInput, ...func(*rds.Options)) *rds.DescribeIntegrationsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*rds.DescribeIntegrationsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *rds.DescribeIntegrationsInput, ...func(*rds.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeOptionGroupOptions provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DescribeOptionGroupOptions(ctx context.Context, params *rds.DescribeOptionGroupOptionsInput, optFns ...func(*rds.Options)) (*rds.DescribeOptionGroupOptionsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DescribeOptionGroupOptions")
	}

	var r0 *rds.DescribeOptionGroupOptionsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *rds.DescribeOptionGroupOptionsInput, ...func(*rds.Options)) (*rds.DescribeOptionGroupOptionsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *rds.DescribeOptionGroupOptionsInput, ...func(*rds.Options)) *rds.DescribeOptionGroupOptionsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*rds.DescribeOptionGroupOptionsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *rds.DescribeOptionGroupOptionsInput, ...func(*rds.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeOptionGroups provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DescribeOptionGroups(ctx context.Context, params *rds.DescribeOptionGroupsInput, optFns ...func(*rds.Options)) (*rds.DescribeOptionGroupsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DescribeOptionGroups")
	}

	var r0 *rds.DescribeOptionGroupsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *rds.DescribeOptionGroupsInput, ...func(*rds.Options)) (*rds.DescribeOptionGroupsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *rds.DescribeOptionGroupsInput, ...func(*rds.Options)) *rds.DescribeOptionGroupsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*rds.DescribeOptionGroupsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *rds.DescribeOptionGroupsInput, ...func(*rds.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeOrderableDBInstanceOptions provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DescribeOrderableDBInstanceOptions(ctx context.Context, params *rds.DescribeOrderableDBInstanceOptionsInput, optFns ...func(*rds.Options)) (*rds.DescribeOrderableDBInstanceOptionsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DescribeOrderableDBInstanceOptions")
	}

	var r0 *rds.DescribeOrderableDBInstanceOptionsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *rds.DescribeOrderableDBInstanceOptionsInput, ...func(*rds.Options)) (*rds.DescribeOrderableDBInstanceOptionsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *rds.DescribeOrderableDBInstanceOptionsInput, ...func(*rds.Options)) *rds.DescribeOrderableDBInstanceOptionsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*rds.DescribeOrderableDBInstanceOptionsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *rds.DescribeOrderableDBInstanceOptionsInput, ...func(*rds.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribePendingMaintenanceActions provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DescribePendingMaintenanceActions(ctx context.Context, params *rds.DescribePendingMaintenanceActionsInput, optFns ...func(*rds.Options)) (*rds.DescribePendingMaintenanceActionsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DescribePendingMaintenanceActions")
	}

	var r0 *rds.DescribePendingMaintenanceActionsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *rds.DescribePendingMaintenanceActionsInput, ...func(*rds.Options)) (*rds.DescribePendingMaintenanceActionsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *rds.DescribePendingMaintenanceActionsInput, ...func(*rds.Options)) *rds.DescribePendingMaintenanceActionsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*rds.DescribePendingMaintenanceActionsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *rds.DescribePendingMaintenanceActionsInput, ...func(*rds.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeReservedDBInstances provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DescribeReservedDBInstances(ctx context.Context, params *rds.DescribeReservedDBInstancesInput, optFns ...func(*rds.Options)) (*rds.DescribeReservedDBInstancesOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DescribeReservedDBInstances")
	}

	var r0 *rds.DescribeReservedDBInstancesOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *rds.DescribeReservedDBInstancesInput, ...func(*rds.Options)) (*rds.DescribeReservedDBInstancesOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *rds.DescribeReservedDBInstancesInput, ...func(*rds.Options)) *rds.DescribeReservedDBInstancesOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*rds.DescribeReservedDBInstancesOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *rds.DescribeReservedDBInstancesInput, ...func(*rds.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeReservedDBInstancesOfferings provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DescribeReservedDBInstancesOfferings(ctx context.Context, params *rds.DescribeReservedDBInstancesOfferingsInput, optFns ...func(*rds.Options)) (*rds.DescribeReservedDBInstancesOfferingsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DescribeReservedDBInstancesOfferings")
	}

	var r0 *rds.DescribeReservedDBInstancesOfferingsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *rds.DescribeReservedDBInstancesOfferingsInput, ...func(*rds.Options)) (*rds.DescribeReservedDBInstancesOfferingsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *rds.DescribeReservedDBInstancesOfferingsInput, ...func(*rds.Options)) *rds.DescribeReservedDBInstancesOfferingsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*rds.DescribeReservedDBInstancesOfferingsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *rds.DescribeReservedDBInstancesOfferingsInput, ...func(*rds.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeSourceRegions provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DescribeSourceRegions(ctx context.Context, params *rds.DescribeSourceRegionsInput, optFns ...func(*rds.Options)) (*rds.DescribeSourceRegionsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DescribeSourceRegions")
	}

	var r0 *rds.DescribeSourceRegionsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *rds.DescribeSourceRegionsInput, ...func(*rds.Options)) (*rds.DescribeSourceRegionsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *rds.DescribeSourceRegionsInput, ...func(*rds.Options)) *rds.DescribeSourceRegionsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*rds.DescribeSourceRegionsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *rds.DescribeSourceRegionsInput, ...func(*rds.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeTenantDatabases provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DescribeTenantDatabases(ctx context.Context, params *rds.DescribeTenantDatabasesInput, optFns ...func(*rds.Options)) (*rds.DescribeTenantDatabasesOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DescribeTenantDatabases")
	}

	var r0 *rds.DescribeTenantDatabasesOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *rds.DescribeTenantDatabasesInput, ...func(*rds.Options)) (*rds.DescribeTenantDatabasesOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *rds.DescribeTenantDatabasesInput, ...func(*rds.Options)) *rds.DescribeTenantDatabasesOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*rds.DescribeTenantDatabasesOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *rds.DescribeTenantDatabasesInput, ...func(*rds.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeValidDBInstanceModifications provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DescribeValidDBInstanceModifications(ctx context.Context, params *rds.DescribeValidDBInstanceModificationsInput, optFns ...func(*rds.Options)) (*rds.DescribeValidDBInstanceModificationsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DescribeValidDBInstanceModifications")
	}

	var r0 *rds.DescribeValidDBInstanceModificationsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *rds.DescribeValidDBInstanceModificationsInput, ...func(*rds.Options)) (*rds.DescribeValidDBInstanceModificationsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *rds.DescribeValidDBInstanceModificationsInput, ...func(*rds.Options)) *rds.DescribeValidDBInstanceModificationsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*rds.DescribeValidDBInstanceModificationsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *rds.DescribeValidDBInstanceModificationsInput, ...func(*rds.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DisableHttpEndpoint provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DisableHttpEndpoint(ctx context.Context, params *rds.DisableHttpEndpointInput, optFns ...func(*rds.Options)) (*rds.DisableHttpEndpointOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DisableHttpEndpoint")
	}

	var r0 *rds.DisableHttpEndpointOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *rds.DisableHttpEndpointInput, ...func(*rds.Options)) (*rds.DisableHttpEndpointOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *rds.DisableHttpEndpointInput, ...func(*rds.Options)) *rds.DisableHttpEndpointOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*rds.DisableHttpEndpointOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *rds.DisableHttpEndpointInput, ...func(*rds.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DownloadDBLogFilePortion provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DownloadDBLogFilePortion(ctx context.Context, params *rds.DownloadDBLogFilePortionInput, optFns ...func(*rds.Options)) (*rds.DownloadDBLogFilePortionOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DownloadDBLogFilePortion")
	}

	var r0 *rds.DownloadDBLogFilePortionOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *rds.DownloadDBLogFilePortionInput, ...func(*rds.Options)) (*rds.DownloadDBLogFilePortionOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *rds.DownloadDBLogFilePortionInput, ...func(*rds.Options)) *rds.DownloadDBLogFilePortionOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*rds.DownloadDBLogFilePortionOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *rds.DownloadDBLogFilePortionInput, ...func(*rds.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// EnableHttpEndpoint provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) EnableHttpEndpoint(ctx context.Context, params *rds.EnableHttpEndpointInput, optFns ...func(*rds.Options)) (*rds.EnableHttpEndpointOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for EnableHttpEndpoint")
	}

	var r0 *rds.EnableHttpEndpointOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *rds.EnableHttpEndpointInput, ...func(*rds.Options)) (*rds.EnableHttpEndpointOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *rds.EnableHttpEndpointInput, ...func(*rds.Options)) *rds.EnableHttpEndpointOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*rds.EnableHttpEndpointOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *rds.EnableHttpEndpointInput, ...func(*rds.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FailoverDBCluster provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) FailoverDBCluster(ctx context.Context, params *rds.FailoverDBClusterInput, optFns ...func(*rds.Options)) (*rds.FailoverDBClusterOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for FailoverDBCluster")
	}

	var r0 *rds.FailoverDBClusterOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *rds.FailoverDBClusterInput, ...func(*rds.Options)) (*rds.FailoverDBClusterOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *rds.FailoverDBClusterInput, ...func(*rds.Options)) *rds.FailoverDBClusterOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*rds.FailoverDBClusterOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *rds.FailoverDBClusterInput, ...func(*rds.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FailoverGlobalCluster provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) FailoverGlobalCluster(ctx context.Context, params *rds.FailoverGlobalClusterInput, optFns ...func(*rds.Options)) (*rds.FailoverGlobalClusterOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for FailoverGlobalCluster")
	}

	var r0 *rds.FailoverGlobalClusterOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *rds.FailoverGlobalClusterInput, ...func(*rds.Options)) (*rds.FailoverGlobalClusterOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *rds.FailoverGlobalClusterInput, ...func(*rds.Options)) *rds.FailoverGlobalClusterOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*rds.FailoverGlobalClusterOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *rds.FailoverGlobalClusterInput, ...func(*rds.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListTagsForResource provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListTagsForResource(ctx context.Context, params *rds.ListTagsForResourceInput, optFns ...func(*rds.Options)) (*rds.ListTagsForResourceOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListTagsForResource")
	}

	var r0 *rds.ListTagsForResourceOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *rds.ListTagsForResourceInput, ...func(*rds.Options)) (*rds.ListTagsForResourceOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *rds.ListTagsForResourceInput, ...func(*rds.Options)) *rds.ListTagsForResourceOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*rds.ListTagsForResourceOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *rds.ListTagsForResourceInput, ...func(*rds.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ModifyActivityStream provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ModifyActivityStream(ctx context.Context, params *rds.ModifyActivityStreamInput, optFns ...func(*rds.Options)) (*rds.ModifyActivityStreamOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ModifyActivityStream")
	}

	var r0 *rds.ModifyActivityStreamOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *rds.ModifyActivityStreamInput, ...func(*rds.Options)) (*rds.ModifyActivityStreamOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *rds.ModifyActivityStreamInput, ...func(*rds.Options)) *rds.ModifyActivityStreamOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*rds.ModifyActivityStreamOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *rds.ModifyActivityStreamInput, ...func(*rds.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ModifyCertificates provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ModifyCertificates(ctx context.Context, params *rds.ModifyCertificatesInput, optFns ...func(*rds.Options)) (*rds.ModifyCertificatesOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ModifyCertificates")
	}

	var r0 *rds.ModifyCertificatesOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *rds.ModifyCertificatesInput, ...func(*rds.Options)) (*rds.ModifyCertificatesOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *rds.ModifyCertificatesInput, ...func(*rds.Options)) *rds.ModifyCertificatesOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*rds.ModifyCertificatesOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *rds.ModifyCertificatesInput, ...func(*rds.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ModifyCurrentDBClusterCapacity provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ModifyCurrentDBClusterCapacity(ctx context.Context, params *rds.ModifyCurrentDBClusterCapacityInput, optFns ...func(*rds.Options)) (*rds.ModifyCurrentDBClusterCapacityOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ModifyCurrentDBClusterCapacity")
	}

	var r0 *rds.ModifyCurrentDBClusterCapacityOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *rds.ModifyCurrentDBClusterCapacityInput, ...func(*rds.Options)) (*rds.ModifyCurrentDBClusterCapacityOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *rds.ModifyCurrentDBClusterCapacityInput, ...func(*rds.Options)) *rds.ModifyCurrentDBClusterCapacityOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*rds.ModifyCurrentDBClusterCapacityOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *rds.ModifyCurrentDBClusterCapacityInput, ...func(*rds.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ModifyCustomDBEngineVersion provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ModifyCustomDBEngineVersion(ctx context.Context, params *rds.ModifyCustomDBEngineVersionInput, optFns ...func(*rds.Options)) (*rds.ModifyCustomDBEngineVersionOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ModifyCustomDBEngineVersion")
	}

	var r0 *rds.ModifyCustomDBEngineVersionOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *rds.ModifyCustomDBEngineVersionInput, ...func(*rds.Options)) (*rds.ModifyCustomDBEngineVersionOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *rds.ModifyCustomDBEngineVersionInput, ...func(*rds.Options)) *rds.ModifyCustomDBEngineVersionOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*rds.ModifyCustomDBEngineVersionOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *rds.ModifyCustomDBEngineVersionInput, ...func(*rds.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ModifyDBCluster provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ModifyDBCluster(ctx context.Context, params *rds.ModifyDBClusterInput, optFns ...func(*rds.Options)) (*rds.ModifyDBClusterOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ModifyDBCluster")
	}

	var r0 *rds.ModifyDBClusterOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *rds.ModifyDBClusterInput, ...func(*rds.Options)) (*rds.ModifyDBClusterOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *rds.ModifyDBClusterInput, ...func(*rds.Options)) *rds.ModifyDBClusterOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*rds.ModifyDBClusterOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *rds.ModifyDBClusterInput, ...func(*rds.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ModifyDBClusterEndpoint provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ModifyDBClusterEndpoint(ctx context.Context, params *rds.ModifyDBClusterEndpointInput, optFns ...func(*rds.Options)) (*rds.ModifyDBClusterEndpointOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ModifyDBClusterEndpoint")
	}

	var r0 *rds.ModifyDBClusterEndpointOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *rds.ModifyDBClusterEndpointInput, ...func(*rds.Options)) (*rds.ModifyDBClusterEndpointOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *rds.ModifyDBClusterEndpointInput, ...func(*rds.Options)) *rds.ModifyDBClusterEndpointOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*rds.ModifyDBClusterEndpointOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *rds.ModifyDBClusterEndpointInput, ...func(*rds.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ModifyDBClusterParameterGroup provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ModifyDBClusterParameterGroup(ctx context.Context, params *rds.ModifyDBClusterParameterGroupInput, optFns ...func(*rds.Options)) (*rds.ModifyDBClusterParameterGroupOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ModifyDBClusterParameterGroup")
	}

	var r0 *rds.ModifyDBClusterParameterGroupOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *rds.ModifyDBClusterParameterGroupInput, ...func(*rds.Options)) (*rds.ModifyDBClusterParameterGroupOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *rds.ModifyDBClusterParameterGroupInput, ...func(*rds.Options)) *rds.ModifyDBClusterParameterGroupOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*rds.ModifyDBClusterParameterGroupOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *rds.ModifyDBClusterParameterGroupInput, ...func(*rds.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ModifyDBClusterSnapshotAttribute provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ModifyDBClusterSnapshotAttribute(ctx context.Context, params *rds.ModifyDBClusterSnapshotAttributeInput, optFns ...func(*rds.Options)) (*rds.ModifyDBClusterSnapshotAttributeOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ModifyDBClusterSnapshotAttribute")
	}

	var r0 *rds.ModifyDBClusterSnapshotAttributeOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *rds.ModifyDBClusterSnapshotAttributeInput, ...func(*rds.Options)) (*rds.ModifyDBClusterSnapshotAttributeOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *rds.ModifyDBClusterSnapshotAttributeInput, ...func(*rds.Options)) *rds.ModifyDBClusterSnapshotAttributeOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*rds.ModifyDBClusterSnapshotAttributeOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *rds.ModifyDBClusterSnapshotAttributeInput, ...func(*rds.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ModifyDBInstance provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ModifyDBInstance(ctx context.Context, params *rds.ModifyDBInstanceInput, optFns ...func(*rds.Options)) (*rds.ModifyDBInstanceOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ModifyDBInstance")
	}

	var r0 *rds.ModifyDBInstanceOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *rds.ModifyDBInstanceInput, ...func(*rds.Options)) (*rds.ModifyDBInstanceOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *rds.ModifyDBInstanceInput, ...func(*rds.Options)) *rds.ModifyDBInstanceOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*rds.ModifyDBInstanceOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *rds.ModifyDBInstanceInput, ...func(*rds.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ModifyDBParameterGroup provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ModifyDBParameterGroup(ctx context.Context, params *rds.ModifyDBParameterGroupInput, optFns ...func(*rds.Options)) (*rds.ModifyDBParameterGroupOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ModifyDBParameterGroup")
	}

	var r0 *rds.ModifyDBParameterGroupOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *rds.ModifyDBParameterGroupInput, ...func(*rds.Options)) (*rds.ModifyDBParameterGroupOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *rds.ModifyDBParameterGroupInput, ...func(*rds.Options)) *rds.ModifyDBParameterGroupOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*rds.ModifyDBParameterGroupOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *rds.ModifyDBParameterGroupInput, ...func(*rds.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ModifyDBProxy provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ModifyDBProxy(ctx context.Context, params *rds.ModifyDBProxyInput, optFns ...func(*rds.Options)) (*rds.ModifyDBProxyOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ModifyDBProxy")
	}

	var r0 *rds.ModifyDBProxyOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *rds.ModifyDBProxyInput, ...func(*rds.Options)) (*rds.ModifyDBProxyOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *rds.ModifyDBProxyInput, ...func(*rds.Options)) *rds.ModifyDBProxyOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*rds.ModifyDBProxyOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *rds.ModifyDBProxyInput, ...func(*rds.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ModifyDBProxyEndpoint provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ModifyDBProxyEndpoint(ctx context.Context, params *rds.ModifyDBProxyEndpointInput, optFns ...func(*rds.Options)) (*rds.ModifyDBProxyEndpointOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ModifyDBProxyEndpoint")
	}

	var r0 *rds.ModifyDBProxyEndpointOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *rds.ModifyDBProxyEndpointInput, ...func(*rds.Options)) (*rds.ModifyDBProxyEndpointOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *rds.ModifyDBProxyEndpointInput, ...func(*rds.Options)) *rds.ModifyDBProxyEndpointOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*rds.ModifyDBProxyEndpointOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *rds.ModifyDBProxyEndpointInput, ...func(*rds.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ModifyDBProxyTargetGroup provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ModifyDBProxyTargetGroup(ctx context.Context, params *rds.ModifyDBProxyTargetGroupInput, optFns ...func(*rds.Options)) (*rds.ModifyDBProxyTargetGroupOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ModifyDBProxyTargetGroup")
	}

	var r0 *rds.ModifyDBProxyTargetGroupOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *rds.ModifyDBProxyTargetGroupInput, ...func(*rds.Options)) (*rds.ModifyDBProxyTargetGroupOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *rds.ModifyDBProxyTargetGroupInput, ...func(*rds.Options)) *rds.ModifyDBProxyTargetGroupOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*rds.ModifyDBProxyTargetGroupOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *rds.ModifyDBProxyTargetGroupInput, ...func(*rds.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ModifyDBRecommendation provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ModifyDBRecommendation(ctx context.Context, params *rds.ModifyDBRecommendationInput, optFns ...func(*rds.Options)) (*rds.ModifyDBRecommendationOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ModifyDBRecommendation")
	}

	var r0 *rds.ModifyDBRecommendationOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *rds.ModifyDBRecommendationInput, ...func(*rds.Options)) (*rds.ModifyDBRecommendationOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *rds.ModifyDBRecommendationInput, ...func(*rds.Options)) *rds.ModifyDBRecommendationOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*rds.ModifyDBRecommendationOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *rds.ModifyDBRecommendationInput, ...func(*rds.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ModifyDBShardGroup provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ModifyDBShardGroup(ctx context.Context, params *rds.ModifyDBShardGroupInput, optFns ...func(*rds.Options)) (*rds.ModifyDBShardGroupOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ModifyDBShardGroup")
	}

	var r0 *rds.ModifyDBShardGroupOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *rds.ModifyDBShardGroupInput, ...func(*rds.Options)) (*rds.ModifyDBShardGroupOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *rds.ModifyDBShardGroupInput, ...func(*rds.Options)) *rds.ModifyDBShardGroupOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*rds.ModifyDBShardGroupOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *rds.ModifyDBShardGroupInput, ...func(*rds.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ModifyDBSnapshot provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ModifyDBSnapshot(ctx context.Context, params *rds.ModifyDBSnapshotInput, optFns ...func(*rds.Options)) (*rds.ModifyDBSnapshotOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ModifyDBSnapshot")
	}

	var r0 *rds.ModifyDBSnapshotOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *rds.ModifyDBSnapshotInput, ...func(*rds.Options)) (*rds.ModifyDBSnapshotOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *rds.ModifyDBSnapshotInput, ...func(*rds.Options)) *rds.ModifyDBSnapshotOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*rds.ModifyDBSnapshotOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *rds.ModifyDBSnapshotInput, ...func(*rds.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ModifyDBSnapshotAttribute provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ModifyDBSnapshotAttribute(ctx context.Context, params *rds.ModifyDBSnapshotAttributeInput, optFns ...func(*rds.Options)) (*rds.ModifyDBSnapshotAttributeOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ModifyDBSnapshotAttribute")
	}

	var r0 *rds.ModifyDBSnapshotAttributeOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *rds.ModifyDBSnapshotAttributeInput, ...func(*rds.Options)) (*rds.ModifyDBSnapshotAttributeOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *rds.ModifyDBSnapshotAttributeInput, ...func(*rds.Options)) *rds.ModifyDBSnapshotAttributeOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*rds.ModifyDBSnapshotAttributeOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *rds.ModifyDBSnapshotAttributeInput, ...func(*rds.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ModifyDBSubnetGroup provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ModifyDBSubnetGroup(ctx context.Context, params *rds.ModifyDBSubnetGroupInput, optFns ...func(*rds.Options)) (*rds.ModifyDBSubnetGroupOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ModifyDBSubnetGroup")
	}

	var r0 *rds.ModifyDBSubnetGroupOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *rds.ModifyDBSubnetGroupInput, ...func(*rds.Options)) (*rds.ModifyDBSubnetGroupOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *rds.ModifyDBSubnetGroupInput, ...func(*rds.Options)) *rds.ModifyDBSubnetGroupOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*rds.ModifyDBSubnetGroupOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *rds.ModifyDBSubnetGroupInput, ...func(*rds.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ModifyEventSubscription provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ModifyEventSubscription(ctx context.Context, params *rds.ModifyEventSubscriptionInput, optFns ...func(*rds.Options)) (*rds.ModifyEventSubscriptionOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ModifyEventSubscription")
	}

	var r0 *rds.ModifyEventSubscriptionOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *rds.ModifyEventSubscriptionInput, ...func(*rds.Options)) (*rds.ModifyEventSubscriptionOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *rds.ModifyEventSubscriptionInput, ...func(*rds.Options)) *rds.ModifyEventSubscriptionOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*rds.ModifyEventSubscriptionOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *rds.ModifyEventSubscriptionInput, ...func(*rds.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ModifyGlobalCluster provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ModifyGlobalCluster(ctx context.Context, params *rds.ModifyGlobalClusterInput, optFns ...func(*rds.Options)) (*rds.ModifyGlobalClusterOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ModifyGlobalCluster")
	}

	var r0 *rds.ModifyGlobalClusterOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *rds.ModifyGlobalClusterInput, ...func(*rds.Options)) (*rds.ModifyGlobalClusterOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *rds.ModifyGlobalClusterInput, ...func(*rds.Options)) *rds.ModifyGlobalClusterOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*rds.ModifyGlobalClusterOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *rds.ModifyGlobalClusterInput, ...func(*rds.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ModifyIntegration provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ModifyIntegration(ctx context.Context, params *rds.ModifyIntegrationInput, optFns ...func(*rds.Options)) (*rds.ModifyIntegrationOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ModifyIntegration")
	}

	var r0 *rds.ModifyIntegrationOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *rds.ModifyIntegrationInput, ...func(*rds.Options)) (*rds.ModifyIntegrationOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *rds.ModifyIntegrationInput, ...func(*rds.Options)) *rds.ModifyIntegrationOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*rds.ModifyIntegrationOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *rds.ModifyIntegrationInput, ...func(*rds.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ModifyOptionGroup provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ModifyOptionGroup(ctx context.Context, params *rds.ModifyOptionGroupInput, optFns ...func(*rds.Options)) (*rds.ModifyOptionGroupOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ModifyOptionGroup")
	}

	var r0 *rds.ModifyOptionGroupOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *rds.ModifyOptionGroupInput, ...func(*rds.Options)) (*rds.ModifyOptionGroupOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *rds.ModifyOptionGroupInput, ...func(*rds.Options)) *rds.ModifyOptionGroupOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*rds.ModifyOptionGroupOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *rds.ModifyOptionGroupInput, ...func(*rds.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ModifyTenantDatabase provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ModifyTenantDatabase(ctx context.Context, params *rds.ModifyTenantDatabaseInput, optFns ...func(*rds.Options)) (*rds.ModifyTenantDatabaseOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ModifyTenantDatabase")
	}

	var r0 *rds.ModifyTenantDatabaseOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *rds.ModifyTenantDatabaseInput, ...func(*rds.Options)) (*rds.ModifyTenantDatabaseOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *rds.ModifyTenantDatabaseInput, ...func(*rds.Options)) *rds.ModifyTenantDatabaseOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*rds.ModifyTenantDatabaseOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *rds.ModifyTenantDatabaseInput, ...func(*rds.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Options provides a mock function with given fields:
func (_m *IClient) Options() rds.Options {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Options")
	}

	var r0 rds.Options
	if rf, ok := ret.Get(0).(func() rds.Options); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(rds.Options)
	}

	return r0
}

// PromoteReadReplica provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) PromoteReadReplica(ctx context.Context, params *rds.PromoteReadReplicaInput, optFns ...func(*rds.Options)) (*rds.PromoteReadReplicaOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for PromoteReadReplica")
	}

	var r0 *rds.PromoteReadReplicaOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *rds.PromoteReadReplicaInput, ...func(*rds.Options)) (*rds.PromoteReadReplicaOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *rds.PromoteReadReplicaInput, ...func(*rds.Options)) *rds.PromoteReadReplicaOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*rds.PromoteReadReplicaOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *rds.PromoteReadReplicaInput, ...func(*rds.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PromoteReadReplicaDBCluster provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) PromoteReadReplicaDBCluster(ctx context.Context, params *rds.PromoteReadReplicaDBClusterInput, optFns ...func(*rds.Options)) (*rds.PromoteReadReplicaDBClusterOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for PromoteReadReplicaDBCluster")
	}

	var r0 *rds.PromoteReadReplicaDBClusterOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *rds.PromoteReadReplicaDBClusterInput, ...func(*rds.Options)) (*rds.PromoteReadReplicaDBClusterOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *rds.PromoteReadReplicaDBClusterInput, ...func(*rds.Options)) *rds.PromoteReadReplicaDBClusterOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*rds.PromoteReadReplicaDBClusterOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *rds.PromoteReadReplicaDBClusterInput, ...func(*rds.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PurchaseReservedDBInstancesOffering provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) PurchaseReservedDBInstancesOffering(ctx context.Context, params *rds.PurchaseReservedDBInstancesOfferingInput, optFns ...func(*rds.Options)) (*rds.PurchaseReservedDBInstancesOfferingOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for PurchaseReservedDBInstancesOffering")
	}

	var r0 *rds.PurchaseReservedDBInstancesOfferingOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *rds.PurchaseReservedDBInstancesOfferingInput, ...func(*rds.Options)) (*rds.PurchaseReservedDBInstancesOfferingOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *rds.PurchaseReservedDBInstancesOfferingInput, ...func(*rds.Options)) *rds.PurchaseReservedDBInstancesOfferingOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*rds.PurchaseReservedDBInstancesOfferingOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *rds.PurchaseReservedDBInstancesOfferingInput, ...func(*rds.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RebootDBCluster provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) RebootDBCluster(ctx context.Context, params *rds.RebootDBClusterInput, optFns ...func(*rds.Options)) (*rds.RebootDBClusterOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for RebootDBCluster")
	}

	var r0 *rds.RebootDBClusterOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *rds.RebootDBClusterInput, ...func(*rds.Options)) (*rds.RebootDBClusterOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *rds.RebootDBClusterInput, ...func(*rds.Options)) *rds.RebootDBClusterOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*rds.RebootDBClusterOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *rds.RebootDBClusterInput, ...func(*rds.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RebootDBInstance provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) RebootDBInstance(ctx context.Context, params *rds.RebootDBInstanceInput, optFns ...func(*rds.Options)) (*rds.RebootDBInstanceOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for RebootDBInstance")
	}

	var r0 *rds.RebootDBInstanceOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *rds.RebootDBInstanceInput, ...func(*rds.Options)) (*rds.RebootDBInstanceOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *rds.RebootDBInstanceInput, ...func(*rds.Options)) *rds.RebootDBInstanceOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*rds.RebootDBInstanceOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *rds.RebootDBInstanceInput, ...func(*rds.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RebootDBShardGroup provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) RebootDBShardGroup(ctx context.Context, params *rds.RebootDBShardGroupInput, optFns ...func(*rds.Options)) (*rds.RebootDBShardGroupOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for RebootDBShardGroup")
	}

	var r0 *rds.RebootDBShardGroupOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *rds.RebootDBShardGroupInput, ...func(*rds.Options)) (*rds.RebootDBShardGroupOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *rds.RebootDBShardGroupInput, ...func(*rds.Options)) *rds.RebootDBShardGroupOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*rds.RebootDBShardGroupOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *rds.RebootDBShardGroupInput, ...func(*rds.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RegisterDBProxyTargets provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) RegisterDBProxyTargets(ctx context.Context, params *rds.RegisterDBProxyTargetsInput, optFns ...func(*rds.Options)) (*rds.RegisterDBProxyTargetsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for RegisterDBProxyTargets")
	}

	var r0 *rds.RegisterDBProxyTargetsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *rds.RegisterDBProxyTargetsInput, ...func(*rds.Options)) (*rds.RegisterDBProxyTargetsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *rds.RegisterDBProxyTargetsInput, ...func(*rds.Options)) *rds.RegisterDBProxyTargetsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*rds.RegisterDBProxyTargetsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *rds.RegisterDBProxyTargetsInput, ...func(*rds.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RemoveFromGlobalCluster provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) RemoveFromGlobalCluster(ctx context.Context, params *rds.RemoveFromGlobalClusterInput, optFns ...func(*rds.Options)) (*rds.RemoveFromGlobalClusterOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for RemoveFromGlobalCluster")
	}

	var r0 *rds.RemoveFromGlobalClusterOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *rds.RemoveFromGlobalClusterInput, ...func(*rds.Options)) (*rds.RemoveFromGlobalClusterOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *rds.RemoveFromGlobalClusterInput, ...func(*rds.Options)) *rds.RemoveFromGlobalClusterOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*rds.RemoveFromGlobalClusterOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *rds.RemoveFromGlobalClusterInput, ...func(*rds.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RemoveRoleFromDBCluster provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) RemoveRoleFromDBCluster(ctx context.Context, params *rds.RemoveRoleFromDBClusterInput, optFns ...func(*rds.Options)) (*rds.RemoveRoleFromDBClusterOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for RemoveRoleFromDBCluster")
	}

	var r0 *rds.RemoveRoleFromDBClusterOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *rds.RemoveRoleFromDBClusterInput, ...func(*rds.Options)) (*rds.RemoveRoleFromDBClusterOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *rds.RemoveRoleFromDBClusterInput, ...func(*rds.Options)) *rds.RemoveRoleFromDBClusterOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*rds.RemoveRoleFromDBClusterOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *rds.RemoveRoleFromDBClusterInput, ...func(*rds.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RemoveRoleFromDBInstance provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) RemoveRoleFromDBInstance(ctx context.Context, params *rds.RemoveRoleFromDBInstanceInput, optFns ...func(*rds.Options)) (*rds.RemoveRoleFromDBInstanceOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for RemoveRoleFromDBInstance")
	}

	var r0 *rds.RemoveRoleFromDBInstanceOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *rds.RemoveRoleFromDBInstanceInput, ...func(*rds.Options)) (*rds.RemoveRoleFromDBInstanceOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *rds.RemoveRoleFromDBInstanceInput, ...func(*rds.Options)) *rds.RemoveRoleFromDBInstanceOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*rds.RemoveRoleFromDBInstanceOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *rds.RemoveRoleFromDBInstanceInput, ...func(*rds.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RemoveSourceIdentifierFromSubscription provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) RemoveSourceIdentifierFromSubscription(ctx context.Context, params *rds.RemoveSourceIdentifierFromSubscriptionInput, optFns ...func(*rds.Options)) (*rds.RemoveSourceIdentifierFromSubscriptionOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for RemoveSourceIdentifierFromSubscription")
	}

	var r0 *rds.RemoveSourceIdentifierFromSubscriptionOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *rds.RemoveSourceIdentifierFromSubscriptionInput, ...func(*rds.Options)) (*rds.RemoveSourceIdentifierFromSubscriptionOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *rds.RemoveSourceIdentifierFromSubscriptionInput, ...func(*rds.Options)) *rds.RemoveSourceIdentifierFromSubscriptionOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*rds.RemoveSourceIdentifierFromSubscriptionOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *rds.RemoveSourceIdentifierFromSubscriptionInput, ...func(*rds.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RemoveTagsFromResource provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) RemoveTagsFromResource(ctx context.Context, params *rds.RemoveTagsFromResourceInput, optFns ...func(*rds.Options)) (*rds.RemoveTagsFromResourceOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for RemoveTagsFromResource")
	}

	var r0 *rds.RemoveTagsFromResourceOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *rds.RemoveTagsFromResourceInput, ...func(*rds.Options)) (*rds.RemoveTagsFromResourceOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *rds.RemoveTagsFromResourceInput, ...func(*rds.Options)) *rds.RemoveTagsFromResourceOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*rds.RemoveTagsFromResourceOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *rds.RemoveTagsFromResourceInput, ...func(*rds.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ResetDBClusterParameterGroup provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ResetDBClusterParameterGroup(ctx context.Context, params *rds.ResetDBClusterParameterGroupInput, optFns ...func(*rds.Options)) (*rds.ResetDBClusterParameterGroupOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ResetDBClusterParameterGroup")
	}

	var r0 *rds.ResetDBClusterParameterGroupOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *rds.ResetDBClusterParameterGroupInput, ...func(*rds.Options)) (*rds.ResetDBClusterParameterGroupOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *rds.ResetDBClusterParameterGroupInput, ...func(*rds.Options)) *rds.ResetDBClusterParameterGroupOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*rds.ResetDBClusterParameterGroupOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *rds.ResetDBClusterParameterGroupInput, ...func(*rds.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ResetDBParameterGroup provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ResetDBParameterGroup(ctx context.Context, params *rds.ResetDBParameterGroupInput, optFns ...func(*rds.Options)) (*rds.ResetDBParameterGroupOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ResetDBParameterGroup")
	}

	var r0 *rds.ResetDBParameterGroupOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *rds.ResetDBParameterGroupInput, ...func(*rds.Options)) (*rds.ResetDBParameterGroupOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *rds.ResetDBParameterGroupInput, ...func(*rds.Options)) *rds.ResetDBParameterGroupOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*rds.ResetDBParameterGroupOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *rds.ResetDBParameterGroupInput, ...func(*rds.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RestoreDBClusterFromS3 provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) RestoreDBClusterFromS3(ctx context.Context, params *rds.RestoreDBClusterFromS3Input, optFns ...func(*rds.Options)) (*rds.RestoreDBClusterFromS3Output, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for RestoreDBClusterFromS3")
	}

	var r0 *rds.RestoreDBClusterFromS3Output
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *rds.RestoreDBClusterFromS3Input, ...func(*rds.Options)) (*rds.RestoreDBClusterFromS3Output, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *rds.RestoreDBClusterFromS3Input, ...func(*rds.Options)) *rds.RestoreDBClusterFromS3Output); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*rds.RestoreDBClusterFromS3Output)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *rds.RestoreDBClusterFromS3Input, ...func(*rds.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RestoreDBClusterFromSnapshot provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) RestoreDBClusterFromSnapshot(ctx context.Context, params *rds.RestoreDBClusterFromSnapshotInput, optFns ...func(*rds.Options)) (*rds.RestoreDBClusterFromSnapshotOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for RestoreDBClusterFromSnapshot")
	}

	var r0 *rds.RestoreDBClusterFromSnapshotOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *rds.RestoreDBClusterFromSnapshotInput, ...func(*rds.Options)) (*rds.RestoreDBClusterFromSnapshotOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *rds.RestoreDBClusterFromSnapshotInput, ...func(*rds.Options)) *rds.RestoreDBClusterFromSnapshotOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*rds.RestoreDBClusterFromSnapshotOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *rds.RestoreDBClusterFromSnapshotInput, ...func(*rds.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RestoreDBClusterToPointInTime provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) RestoreDBClusterToPointInTime(ctx context.Context, params *rds.RestoreDBClusterToPointInTimeInput, optFns ...func(*rds.Options)) (*rds.RestoreDBClusterToPointInTimeOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for RestoreDBClusterToPointInTime")
	}

	var r0 *rds.RestoreDBClusterToPointInTimeOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *rds.RestoreDBClusterToPointInTimeInput, ...func(*rds.Options)) (*rds.RestoreDBClusterToPointInTimeOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *rds.RestoreDBClusterToPointInTimeInput, ...func(*rds.Options)) *rds.RestoreDBClusterToPointInTimeOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*rds.RestoreDBClusterToPointInTimeOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *rds.RestoreDBClusterToPointInTimeInput, ...func(*rds.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RestoreDBInstanceFromDBSnapshot provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) RestoreDBInstanceFromDBSnapshot(ctx context.Context, params *rds.RestoreDBInstanceFromDBSnapshotInput, optFns ...func(*rds.Options)) (*rds.RestoreDBInstanceFromDBSnapshotOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for RestoreDBInstanceFromDBSnapshot")
	}

	var r0 *rds.RestoreDBInstanceFromDBSnapshotOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *rds.RestoreDBInstanceFromDBSnapshotInput, ...func(*rds.Options)) (*rds.RestoreDBInstanceFromDBSnapshotOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *rds.RestoreDBInstanceFromDBSnapshotInput, ...func(*rds.Options)) *rds.RestoreDBInstanceFromDBSnapshotOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*rds.RestoreDBInstanceFromDBSnapshotOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *rds.RestoreDBInstanceFromDBSnapshotInput, ...func(*rds.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RestoreDBInstanceFromS3 provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) RestoreDBInstanceFromS3(ctx context.Context, params *rds.RestoreDBInstanceFromS3Input, optFns ...func(*rds.Options)) (*rds.RestoreDBInstanceFromS3Output, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for RestoreDBInstanceFromS3")
	}

	var r0 *rds.RestoreDBInstanceFromS3Output
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *rds.RestoreDBInstanceFromS3Input, ...func(*rds.Options)) (*rds.RestoreDBInstanceFromS3Output, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *rds.RestoreDBInstanceFromS3Input, ...func(*rds.Options)) *rds.RestoreDBInstanceFromS3Output); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*rds.RestoreDBInstanceFromS3Output)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *rds.RestoreDBInstanceFromS3Input, ...func(*rds.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RestoreDBInstanceToPointInTime provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) RestoreDBInstanceToPointInTime(ctx context.Context, params *rds.RestoreDBInstanceToPointInTimeInput, optFns ...func(*rds.Options)) (*rds.RestoreDBInstanceToPointInTimeOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for RestoreDBInstanceToPointInTime")
	}

	var r0 *rds.RestoreDBInstanceToPointInTimeOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *rds.RestoreDBInstanceToPointInTimeInput, ...func(*rds.Options)) (*rds.RestoreDBInstanceToPointInTimeOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *rds.RestoreDBInstanceToPointInTimeInput, ...func(*rds.Options)) *rds.RestoreDBInstanceToPointInTimeOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*rds.RestoreDBInstanceToPointInTimeOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *rds.RestoreDBInstanceToPointInTimeInput, ...func(*rds.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RevokeDBSecurityGroupIngress provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) RevokeDBSecurityGroupIngress(ctx context.Context, params *rds.RevokeDBSecurityGroupIngressInput, optFns ...func(*rds.Options)) (*rds.RevokeDBSecurityGroupIngressOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for RevokeDBSecurityGroupIngress")
	}

	var r0 *rds.RevokeDBSecurityGroupIngressOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *rds.RevokeDBSecurityGroupIngressInput, ...func(*rds.Options)) (*rds.RevokeDBSecurityGroupIngressOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *rds.RevokeDBSecurityGroupIngressInput, ...func(*rds.Options)) *rds.RevokeDBSecurityGroupIngressOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*rds.RevokeDBSecurityGroupIngressOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *rds.RevokeDBSecurityGroupIngressInput, ...func(*rds.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// StartActivityStream provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) StartActivityStream(ctx context.Context, params *rds.StartActivityStreamInput, optFns ...func(*rds.Options)) (*rds.StartActivityStreamOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for StartActivityStream")
	}

	var r0 *rds.StartActivityStreamOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *rds.StartActivityStreamInput, ...func(*rds.Options)) (*rds.StartActivityStreamOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *rds.StartActivityStreamInput, ...func(*rds.Options)) *rds.StartActivityStreamOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*rds.StartActivityStreamOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *rds.StartActivityStreamInput, ...func(*rds.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// StartDBCluster provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) StartDBCluster(ctx context.Context, params *rds.StartDBClusterInput, optFns ...func(*rds.Options)) (*rds.StartDBClusterOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for StartDBCluster")
	}

	var r0 *rds.StartDBClusterOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *rds.StartDBClusterInput, ...func(*rds.Options)) (*rds.StartDBClusterOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *rds.StartDBClusterInput, ...func(*rds.Options)) *rds.StartDBClusterOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*rds.StartDBClusterOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *rds.StartDBClusterInput, ...func(*rds.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// StartDBInstance provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) StartDBInstance(ctx context.Context, params *rds.StartDBInstanceInput, optFns ...func(*rds.Options)) (*rds.StartDBInstanceOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for StartDBInstance")
	}

	var r0 *rds.StartDBInstanceOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *rds.StartDBInstanceInput, ...func(*rds.Options)) (*rds.StartDBInstanceOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *rds.StartDBInstanceInput, ...func(*rds.Options)) *rds.StartDBInstanceOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*rds.StartDBInstanceOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *rds.StartDBInstanceInput, ...func(*rds.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// StartDBInstanceAutomatedBackupsReplication provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) StartDBInstanceAutomatedBackupsReplication(ctx context.Context, params *rds.StartDBInstanceAutomatedBackupsReplicationInput, optFns ...func(*rds.Options)) (*rds.StartDBInstanceAutomatedBackupsReplicationOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for StartDBInstanceAutomatedBackupsReplication")
	}

	var r0 *rds.StartDBInstanceAutomatedBackupsReplicationOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *rds.StartDBInstanceAutomatedBackupsReplicationInput, ...func(*rds.Options)) (*rds.StartDBInstanceAutomatedBackupsReplicationOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *rds.StartDBInstanceAutomatedBackupsReplicationInput, ...func(*rds.Options)) *rds.StartDBInstanceAutomatedBackupsReplicationOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*rds.StartDBInstanceAutomatedBackupsReplicationOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *rds.StartDBInstanceAutomatedBackupsReplicationInput, ...func(*rds.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// StartExportTask provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) StartExportTask(ctx context.Context, params *rds.StartExportTaskInput, optFns ...func(*rds.Options)) (*rds.StartExportTaskOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for StartExportTask")
	}

	var r0 *rds.StartExportTaskOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *rds.StartExportTaskInput, ...func(*rds.Options)) (*rds.StartExportTaskOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *rds.StartExportTaskInput, ...func(*rds.Options)) *rds.StartExportTaskOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*rds.StartExportTaskOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *rds.StartExportTaskInput, ...func(*rds.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// StopActivityStream provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) StopActivityStream(ctx context.Context, params *rds.StopActivityStreamInput, optFns ...func(*rds.Options)) (*rds.StopActivityStreamOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for StopActivityStream")
	}

	var r0 *rds.StopActivityStreamOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *rds.StopActivityStreamInput, ...func(*rds.Options)) (*rds.StopActivityStreamOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *rds.StopActivityStreamInput, ...func(*rds.Options)) *rds.StopActivityStreamOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*rds.StopActivityStreamOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *rds.StopActivityStreamInput, ...func(*rds.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// StopDBCluster provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) StopDBCluster(ctx context.Context, params *rds.StopDBClusterInput, optFns ...func(*rds.Options)) (*rds.StopDBClusterOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for StopDBCluster")
	}

	var r0 *rds.StopDBClusterOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *rds.StopDBClusterInput, ...func(*rds.Options)) (*rds.StopDBClusterOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *rds.StopDBClusterInput, ...func(*rds.Options)) *rds.StopDBClusterOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*rds.StopDBClusterOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *rds.StopDBClusterInput, ...func(*rds.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// StopDBInstance provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) StopDBInstance(ctx context.Context, params *rds.StopDBInstanceInput, optFns ...func(*rds.Options)) (*rds.StopDBInstanceOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for StopDBInstance")
	}

	var r0 *rds.StopDBInstanceOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *rds.StopDBInstanceInput, ...func(*rds.Options)) (*rds.StopDBInstanceOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *rds.StopDBInstanceInput, ...func(*rds.Options)) *rds.StopDBInstanceOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*rds.StopDBInstanceOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *rds.StopDBInstanceInput, ...func(*rds.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// StopDBInstanceAutomatedBackupsReplication provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) StopDBInstanceAutomatedBackupsReplication(ctx context.Context, params *rds.StopDBInstanceAutomatedBackupsReplicationInput, optFns ...func(*rds.Options)) (*rds.StopDBInstanceAutomatedBackupsReplicationOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for StopDBInstanceAutomatedBackupsReplication")
	}

	var r0 *rds.StopDBInstanceAutomatedBackupsReplicationOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *rds.StopDBInstanceAutomatedBackupsReplicationInput, ...func(*rds.Options)) (*rds.StopDBInstanceAutomatedBackupsReplicationOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *rds.StopDBInstanceAutomatedBackupsReplicationInput, ...func(*rds.Options)) *rds.StopDBInstanceAutomatedBackupsReplicationOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*rds.StopDBInstanceAutomatedBackupsReplicationOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *rds.StopDBInstanceAutomatedBackupsReplicationInput, ...func(*rds.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SwitchoverBlueGreenDeployment provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) SwitchoverBlueGreenDeployment(ctx context.Context, params *rds.SwitchoverBlueGreenDeploymentInput, optFns ...func(*rds.Options)) (*rds.SwitchoverBlueGreenDeploymentOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for SwitchoverBlueGreenDeployment")
	}

	var r0 *rds.SwitchoverBlueGreenDeploymentOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *rds.SwitchoverBlueGreenDeploymentInput, ...func(*rds.Options)) (*rds.SwitchoverBlueGreenDeploymentOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *rds.SwitchoverBlueGreenDeploymentInput, ...func(*rds.Options)) *rds.SwitchoverBlueGreenDeploymentOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*rds.SwitchoverBlueGreenDeploymentOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *rds.SwitchoverBlueGreenDeploymentInput, ...func(*rds.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SwitchoverGlobalCluster provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) SwitchoverGlobalCluster(ctx context.Context, params *rds.SwitchoverGlobalClusterInput, optFns ...func(*rds.Options)) (*rds.SwitchoverGlobalClusterOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for SwitchoverGlobalCluster")
	}

	var r0 *rds.SwitchoverGlobalClusterOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *rds.SwitchoverGlobalClusterInput, ...func(*rds.Options)) (*rds.SwitchoverGlobalClusterOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *rds.SwitchoverGlobalClusterInput, ...func(*rds.Options)) *rds.SwitchoverGlobalClusterOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*rds.SwitchoverGlobalClusterOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *rds.SwitchoverGlobalClusterInput, ...func(*rds.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SwitchoverReadReplica provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) SwitchoverReadReplica(ctx context.Context, params *rds.SwitchoverReadReplicaInput, optFns ...func(*rds.Options)) (*rds.SwitchoverReadReplicaOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for SwitchoverReadReplica")
	}

	var r0 *rds.SwitchoverReadReplicaOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *rds.SwitchoverReadReplicaInput, ...func(*rds.Options)) (*rds.SwitchoverReadReplicaOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *rds.SwitchoverReadReplicaInput, ...func(*rds.Options)) *rds.SwitchoverReadReplicaOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*rds.SwitchoverReadReplicaOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *rds.SwitchoverReadReplicaInput, ...func(*rds.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewIClient creates a new instance of IClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewIClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *IClient {
	mock := &IClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
