// Code generated by mockery v2.43.2. DO NOT EDIT.

package mocks

import (
	chime "github.com/aws/aws-sdk-go-v2/service/chime"

	context "context"

	mock "github.com/stretchr/testify/mock"
)

// IClient is an autogenerated mock type for the IClient type
type IClient struct {
	mock.Mock
}

// AssociatePhoneNumberWithUser provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) AssociatePhoneNumberWithUser(ctx context.Context, params *chime.AssociatePhoneNumberWithUserInput, optFns ...func(*chime.Options)) (*chime.AssociatePhoneNumberWithUserOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for AssociatePhoneNumberWithUser")
	}

	var r0 *chime.AssociatePhoneNumberWithUserOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *chime.AssociatePhoneNumberWithUserInput, ...func(*chime.Options)) (*chime.AssociatePhoneNumberWithUserOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *chime.AssociatePhoneNumberWithUserInput, ...func(*chime.Options)) *chime.AssociatePhoneNumberWithUserOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*chime.AssociatePhoneNumberWithUserOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *chime.AssociatePhoneNumberWithUserInput, ...func(*chime.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AssociatePhoneNumbersWithVoiceConnector provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) AssociatePhoneNumbersWithVoiceConnector(ctx context.Context, params *chime.AssociatePhoneNumbersWithVoiceConnectorInput, optFns ...func(*chime.Options)) (*chime.AssociatePhoneNumbersWithVoiceConnectorOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for AssociatePhoneNumbersWithVoiceConnector")
	}

	var r0 *chime.AssociatePhoneNumbersWithVoiceConnectorOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *chime.AssociatePhoneNumbersWithVoiceConnectorInput, ...func(*chime.Options)) (*chime.AssociatePhoneNumbersWithVoiceConnectorOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *chime.AssociatePhoneNumbersWithVoiceConnectorInput, ...func(*chime.Options)) *chime.AssociatePhoneNumbersWithVoiceConnectorOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*chime.AssociatePhoneNumbersWithVoiceConnectorOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *chime.AssociatePhoneNumbersWithVoiceConnectorInput, ...func(*chime.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AssociatePhoneNumbersWithVoiceConnectorGroup provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) AssociatePhoneNumbersWithVoiceConnectorGroup(ctx context.Context, params *chime.AssociatePhoneNumbersWithVoiceConnectorGroupInput, optFns ...func(*chime.Options)) (*chime.AssociatePhoneNumbersWithVoiceConnectorGroupOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for AssociatePhoneNumbersWithVoiceConnectorGroup")
	}

	var r0 *chime.AssociatePhoneNumbersWithVoiceConnectorGroupOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *chime.AssociatePhoneNumbersWithVoiceConnectorGroupInput, ...func(*chime.Options)) (*chime.AssociatePhoneNumbersWithVoiceConnectorGroupOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *chime.AssociatePhoneNumbersWithVoiceConnectorGroupInput, ...func(*chime.Options)) *chime.AssociatePhoneNumbersWithVoiceConnectorGroupOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*chime.AssociatePhoneNumbersWithVoiceConnectorGroupOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *chime.AssociatePhoneNumbersWithVoiceConnectorGroupInput, ...func(*chime.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AssociateSigninDelegateGroupsWithAccount provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) AssociateSigninDelegateGroupsWithAccount(ctx context.Context, params *chime.AssociateSigninDelegateGroupsWithAccountInput, optFns ...func(*chime.Options)) (*chime.AssociateSigninDelegateGroupsWithAccountOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for AssociateSigninDelegateGroupsWithAccount")
	}

	var r0 *chime.AssociateSigninDelegateGroupsWithAccountOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *chime.AssociateSigninDelegateGroupsWithAccountInput, ...func(*chime.Options)) (*chime.AssociateSigninDelegateGroupsWithAccountOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *chime.AssociateSigninDelegateGroupsWithAccountInput, ...func(*chime.Options)) *chime.AssociateSigninDelegateGroupsWithAccountOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*chime.AssociateSigninDelegateGroupsWithAccountOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *chime.AssociateSigninDelegateGroupsWithAccountInput, ...func(*chime.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// BatchCreateAttendee provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) BatchCreateAttendee(ctx context.Context, params *chime.BatchCreateAttendeeInput, optFns ...func(*chime.Options)) (*chime.BatchCreateAttendeeOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for BatchCreateAttendee")
	}

	var r0 *chime.BatchCreateAttendeeOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *chime.BatchCreateAttendeeInput, ...func(*chime.Options)) (*chime.BatchCreateAttendeeOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *chime.BatchCreateAttendeeInput, ...func(*chime.Options)) *chime.BatchCreateAttendeeOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*chime.BatchCreateAttendeeOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *chime.BatchCreateAttendeeInput, ...func(*chime.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// BatchCreateChannelMembership provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) BatchCreateChannelMembership(ctx context.Context, params *chime.BatchCreateChannelMembershipInput, optFns ...func(*chime.Options)) (*chime.BatchCreateChannelMembershipOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for BatchCreateChannelMembership")
	}

	var r0 *chime.BatchCreateChannelMembershipOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *chime.BatchCreateChannelMembershipInput, ...func(*chime.Options)) (*chime.BatchCreateChannelMembershipOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *chime.BatchCreateChannelMembershipInput, ...func(*chime.Options)) *chime.BatchCreateChannelMembershipOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*chime.BatchCreateChannelMembershipOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *chime.BatchCreateChannelMembershipInput, ...func(*chime.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// BatchCreateRoomMembership provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) BatchCreateRoomMembership(ctx context.Context, params *chime.BatchCreateRoomMembershipInput, optFns ...func(*chime.Options)) (*chime.BatchCreateRoomMembershipOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for BatchCreateRoomMembership")
	}

	var r0 *chime.BatchCreateRoomMembershipOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *chime.BatchCreateRoomMembershipInput, ...func(*chime.Options)) (*chime.BatchCreateRoomMembershipOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *chime.BatchCreateRoomMembershipInput, ...func(*chime.Options)) *chime.BatchCreateRoomMembershipOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*chime.BatchCreateRoomMembershipOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *chime.BatchCreateRoomMembershipInput, ...func(*chime.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// BatchDeletePhoneNumber provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) BatchDeletePhoneNumber(ctx context.Context, params *chime.BatchDeletePhoneNumberInput, optFns ...func(*chime.Options)) (*chime.BatchDeletePhoneNumberOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for BatchDeletePhoneNumber")
	}

	var r0 *chime.BatchDeletePhoneNumberOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *chime.BatchDeletePhoneNumberInput, ...func(*chime.Options)) (*chime.BatchDeletePhoneNumberOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *chime.BatchDeletePhoneNumberInput, ...func(*chime.Options)) *chime.BatchDeletePhoneNumberOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*chime.BatchDeletePhoneNumberOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *chime.BatchDeletePhoneNumberInput, ...func(*chime.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// BatchSuspendUser provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) BatchSuspendUser(ctx context.Context, params *chime.BatchSuspendUserInput, optFns ...func(*chime.Options)) (*chime.BatchSuspendUserOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for BatchSuspendUser")
	}

	var r0 *chime.BatchSuspendUserOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *chime.BatchSuspendUserInput, ...func(*chime.Options)) (*chime.BatchSuspendUserOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *chime.BatchSuspendUserInput, ...func(*chime.Options)) *chime.BatchSuspendUserOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*chime.BatchSuspendUserOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *chime.BatchSuspendUserInput, ...func(*chime.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// BatchUnsuspendUser provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) BatchUnsuspendUser(ctx context.Context, params *chime.BatchUnsuspendUserInput, optFns ...func(*chime.Options)) (*chime.BatchUnsuspendUserOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for BatchUnsuspendUser")
	}

	var r0 *chime.BatchUnsuspendUserOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *chime.BatchUnsuspendUserInput, ...func(*chime.Options)) (*chime.BatchUnsuspendUserOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *chime.BatchUnsuspendUserInput, ...func(*chime.Options)) *chime.BatchUnsuspendUserOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*chime.BatchUnsuspendUserOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *chime.BatchUnsuspendUserInput, ...func(*chime.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// BatchUpdatePhoneNumber provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) BatchUpdatePhoneNumber(ctx context.Context, params *chime.BatchUpdatePhoneNumberInput, optFns ...func(*chime.Options)) (*chime.BatchUpdatePhoneNumberOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for BatchUpdatePhoneNumber")
	}

	var r0 *chime.BatchUpdatePhoneNumberOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *chime.BatchUpdatePhoneNumberInput, ...func(*chime.Options)) (*chime.BatchUpdatePhoneNumberOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *chime.BatchUpdatePhoneNumberInput, ...func(*chime.Options)) *chime.BatchUpdatePhoneNumberOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*chime.BatchUpdatePhoneNumberOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *chime.BatchUpdatePhoneNumberInput, ...func(*chime.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// BatchUpdateUser provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) BatchUpdateUser(ctx context.Context, params *chime.BatchUpdateUserInput, optFns ...func(*chime.Options)) (*chime.BatchUpdateUserOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for BatchUpdateUser")
	}

	var r0 *chime.BatchUpdateUserOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *chime.BatchUpdateUserInput, ...func(*chime.Options)) (*chime.BatchUpdateUserOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *chime.BatchUpdateUserInput, ...func(*chime.Options)) *chime.BatchUpdateUserOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*chime.BatchUpdateUserOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *chime.BatchUpdateUserInput, ...func(*chime.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateAccount provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CreateAccount(ctx context.Context, params *chime.CreateAccountInput, optFns ...func(*chime.Options)) (*chime.CreateAccountOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateAccount")
	}

	var r0 *chime.CreateAccountOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *chime.CreateAccountInput, ...func(*chime.Options)) (*chime.CreateAccountOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *chime.CreateAccountInput, ...func(*chime.Options)) *chime.CreateAccountOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*chime.CreateAccountOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *chime.CreateAccountInput, ...func(*chime.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateAppInstance provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CreateAppInstance(ctx context.Context, params *chime.CreateAppInstanceInput, optFns ...func(*chime.Options)) (*chime.CreateAppInstanceOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateAppInstance")
	}

	var r0 *chime.CreateAppInstanceOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *chime.CreateAppInstanceInput, ...func(*chime.Options)) (*chime.CreateAppInstanceOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *chime.CreateAppInstanceInput, ...func(*chime.Options)) *chime.CreateAppInstanceOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*chime.CreateAppInstanceOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *chime.CreateAppInstanceInput, ...func(*chime.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateAppInstanceAdmin provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CreateAppInstanceAdmin(ctx context.Context, params *chime.CreateAppInstanceAdminInput, optFns ...func(*chime.Options)) (*chime.CreateAppInstanceAdminOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateAppInstanceAdmin")
	}

	var r0 *chime.CreateAppInstanceAdminOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *chime.CreateAppInstanceAdminInput, ...func(*chime.Options)) (*chime.CreateAppInstanceAdminOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *chime.CreateAppInstanceAdminInput, ...func(*chime.Options)) *chime.CreateAppInstanceAdminOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*chime.CreateAppInstanceAdminOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *chime.CreateAppInstanceAdminInput, ...func(*chime.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateAppInstanceUser provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CreateAppInstanceUser(ctx context.Context, params *chime.CreateAppInstanceUserInput, optFns ...func(*chime.Options)) (*chime.CreateAppInstanceUserOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateAppInstanceUser")
	}

	var r0 *chime.CreateAppInstanceUserOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *chime.CreateAppInstanceUserInput, ...func(*chime.Options)) (*chime.CreateAppInstanceUserOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *chime.CreateAppInstanceUserInput, ...func(*chime.Options)) *chime.CreateAppInstanceUserOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*chime.CreateAppInstanceUserOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *chime.CreateAppInstanceUserInput, ...func(*chime.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateAttendee provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CreateAttendee(ctx context.Context, params *chime.CreateAttendeeInput, optFns ...func(*chime.Options)) (*chime.CreateAttendeeOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateAttendee")
	}

	var r0 *chime.CreateAttendeeOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *chime.CreateAttendeeInput, ...func(*chime.Options)) (*chime.CreateAttendeeOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *chime.CreateAttendeeInput, ...func(*chime.Options)) *chime.CreateAttendeeOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*chime.CreateAttendeeOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *chime.CreateAttendeeInput, ...func(*chime.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateBot provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CreateBot(ctx context.Context, params *chime.CreateBotInput, optFns ...func(*chime.Options)) (*chime.CreateBotOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateBot")
	}

	var r0 *chime.CreateBotOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *chime.CreateBotInput, ...func(*chime.Options)) (*chime.CreateBotOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *chime.CreateBotInput, ...func(*chime.Options)) *chime.CreateBotOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*chime.CreateBotOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *chime.CreateBotInput, ...func(*chime.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateChannel provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CreateChannel(ctx context.Context, params *chime.CreateChannelInput, optFns ...func(*chime.Options)) (*chime.CreateChannelOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateChannel")
	}

	var r0 *chime.CreateChannelOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *chime.CreateChannelInput, ...func(*chime.Options)) (*chime.CreateChannelOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *chime.CreateChannelInput, ...func(*chime.Options)) *chime.CreateChannelOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*chime.CreateChannelOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *chime.CreateChannelInput, ...func(*chime.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateChannelBan provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CreateChannelBan(ctx context.Context, params *chime.CreateChannelBanInput, optFns ...func(*chime.Options)) (*chime.CreateChannelBanOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateChannelBan")
	}

	var r0 *chime.CreateChannelBanOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *chime.CreateChannelBanInput, ...func(*chime.Options)) (*chime.CreateChannelBanOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *chime.CreateChannelBanInput, ...func(*chime.Options)) *chime.CreateChannelBanOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*chime.CreateChannelBanOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *chime.CreateChannelBanInput, ...func(*chime.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateChannelMembership provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CreateChannelMembership(ctx context.Context, params *chime.CreateChannelMembershipInput, optFns ...func(*chime.Options)) (*chime.CreateChannelMembershipOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateChannelMembership")
	}

	var r0 *chime.CreateChannelMembershipOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *chime.CreateChannelMembershipInput, ...func(*chime.Options)) (*chime.CreateChannelMembershipOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *chime.CreateChannelMembershipInput, ...func(*chime.Options)) *chime.CreateChannelMembershipOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*chime.CreateChannelMembershipOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *chime.CreateChannelMembershipInput, ...func(*chime.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateChannelModerator provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CreateChannelModerator(ctx context.Context, params *chime.CreateChannelModeratorInput, optFns ...func(*chime.Options)) (*chime.CreateChannelModeratorOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateChannelModerator")
	}

	var r0 *chime.CreateChannelModeratorOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *chime.CreateChannelModeratorInput, ...func(*chime.Options)) (*chime.CreateChannelModeratorOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *chime.CreateChannelModeratorInput, ...func(*chime.Options)) *chime.CreateChannelModeratorOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*chime.CreateChannelModeratorOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *chime.CreateChannelModeratorInput, ...func(*chime.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateMediaCapturePipeline provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CreateMediaCapturePipeline(ctx context.Context, params *chime.CreateMediaCapturePipelineInput, optFns ...func(*chime.Options)) (*chime.CreateMediaCapturePipelineOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateMediaCapturePipeline")
	}

	var r0 *chime.CreateMediaCapturePipelineOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *chime.CreateMediaCapturePipelineInput, ...func(*chime.Options)) (*chime.CreateMediaCapturePipelineOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *chime.CreateMediaCapturePipelineInput, ...func(*chime.Options)) *chime.CreateMediaCapturePipelineOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*chime.CreateMediaCapturePipelineOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *chime.CreateMediaCapturePipelineInput, ...func(*chime.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateMeeting provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CreateMeeting(ctx context.Context, params *chime.CreateMeetingInput, optFns ...func(*chime.Options)) (*chime.CreateMeetingOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateMeeting")
	}

	var r0 *chime.CreateMeetingOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *chime.CreateMeetingInput, ...func(*chime.Options)) (*chime.CreateMeetingOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *chime.CreateMeetingInput, ...func(*chime.Options)) *chime.CreateMeetingOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*chime.CreateMeetingOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *chime.CreateMeetingInput, ...func(*chime.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateMeetingDialOut provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CreateMeetingDialOut(ctx context.Context, params *chime.CreateMeetingDialOutInput, optFns ...func(*chime.Options)) (*chime.CreateMeetingDialOutOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateMeetingDialOut")
	}

	var r0 *chime.CreateMeetingDialOutOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *chime.CreateMeetingDialOutInput, ...func(*chime.Options)) (*chime.CreateMeetingDialOutOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *chime.CreateMeetingDialOutInput, ...func(*chime.Options)) *chime.CreateMeetingDialOutOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*chime.CreateMeetingDialOutOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *chime.CreateMeetingDialOutInput, ...func(*chime.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateMeetingWithAttendees provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CreateMeetingWithAttendees(ctx context.Context, params *chime.CreateMeetingWithAttendeesInput, optFns ...func(*chime.Options)) (*chime.CreateMeetingWithAttendeesOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateMeetingWithAttendees")
	}

	var r0 *chime.CreateMeetingWithAttendeesOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *chime.CreateMeetingWithAttendeesInput, ...func(*chime.Options)) (*chime.CreateMeetingWithAttendeesOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *chime.CreateMeetingWithAttendeesInput, ...func(*chime.Options)) *chime.CreateMeetingWithAttendeesOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*chime.CreateMeetingWithAttendeesOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *chime.CreateMeetingWithAttendeesInput, ...func(*chime.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreatePhoneNumberOrder provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CreatePhoneNumberOrder(ctx context.Context, params *chime.CreatePhoneNumberOrderInput, optFns ...func(*chime.Options)) (*chime.CreatePhoneNumberOrderOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreatePhoneNumberOrder")
	}

	var r0 *chime.CreatePhoneNumberOrderOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *chime.CreatePhoneNumberOrderInput, ...func(*chime.Options)) (*chime.CreatePhoneNumberOrderOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *chime.CreatePhoneNumberOrderInput, ...func(*chime.Options)) *chime.CreatePhoneNumberOrderOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*chime.CreatePhoneNumberOrderOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *chime.CreatePhoneNumberOrderInput, ...func(*chime.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateProxySession provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CreateProxySession(ctx context.Context, params *chime.CreateProxySessionInput, optFns ...func(*chime.Options)) (*chime.CreateProxySessionOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateProxySession")
	}

	var r0 *chime.CreateProxySessionOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *chime.CreateProxySessionInput, ...func(*chime.Options)) (*chime.CreateProxySessionOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *chime.CreateProxySessionInput, ...func(*chime.Options)) *chime.CreateProxySessionOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*chime.CreateProxySessionOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *chime.CreateProxySessionInput, ...func(*chime.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateRoom provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CreateRoom(ctx context.Context, params *chime.CreateRoomInput, optFns ...func(*chime.Options)) (*chime.CreateRoomOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateRoom")
	}

	var r0 *chime.CreateRoomOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *chime.CreateRoomInput, ...func(*chime.Options)) (*chime.CreateRoomOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *chime.CreateRoomInput, ...func(*chime.Options)) *chime.CreateRoomOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*chime.CreateRoomOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *chime.CreateRoomInput, ...func(*chime.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateRoomMembership provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CreateRoomMembership(ctx context.Context, params *chime.CreateRoomMembershipInput, optFns ...func(*chime.Options)) (*chime.CreateRoomMembershipOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateRoomMembership")
	}

	var r0 *chime.CreateRoomMembershipOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *chime.CreateRoomMembershipInput, ...func(*chime.Options)) (*chime.CreateRoomMembershipOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *chime.CreateRoomMembershipInput, ...func(*chime.Options)) *chime.CreateRoomMembershipOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*chime.CreateRoomMembershipOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *chime.CreateRoomMembershipInput, ...func(*chime.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateSipMediaApplication provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CreateSipMediaApplication(ctx context.Context, params *chime.CreateSipMediaApplicationInput, optFns ...func(*chime.Options)) (*chime.CreateSipMediaApplicationOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateSipMediaApplication")
	}

	var r0 *chime.CreateSipMediaApplicationOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *chime.CreateSipMediaApplicationInput, ...func(*chime.Options)) (*chime.CreateSipMediaApplicationOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *chime.CreateSipMediaApplicationInput, ...func(*chime.Options)) *chime.CreateSipMediaApplicationOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*chime.CreateSipMediaApplicationOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *chime.CreateSipMediaApplicationInput, ...func(*chime.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateSipMediaApplicationCall provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CreateSipMediaApplicationCall(ctx context.Context, params *chime.CreateSipMediaApplicationCallInput, optFns ...func(*chime.Options)) (*chime.CreateSipMediaApplicationCallOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateSipMediaApplicationCall")
	}

	var r0 *chime.CreateSipMediaApplicationCallOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *chime.CreateSipMediaApplicationCallInput, ...func(*chime.Options)) (*chime.CreateSipMediaApplicationCallOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *chime.CreateSipMediaApplicationCallInput, ...func(*chime.Options)) *chime.CreateSipMediaApplicationCallOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*chime.CreateSipMediaApplicationCallOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *chime.CreateSipMediaApplicationCallInput, ...func(*chime.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateSipRule provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CreateSipRule(ctx context.Context, params *chime.CreateSipRuleInput, optFns ...func(*chime.Options)) (*chime.CreateSipRuleOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateSipRule")
	}

	var r0 *chime.CreateSipRuleOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *chime.CreateSipRuleInput, ...func(*chime.Options)) (*chime.CreateSipRuleOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *chime.CreateSipRuleInput, ...func(*chime.Options)) *chime.CreateSipRuleOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*chime.CreateSipRuleOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *chime.CreateSipRuleInput, ...func(*chime.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateUser provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CreateUser(ctx context.Context, params *chime.CreateUserInput, optFns ...func(*chime.Options)) (*chime.CreateUserOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateUser")
	}

	var r0 *chime.CreateUserOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *chime.CreateUserInput, ...func(*chime.Options)) (*chime.CreateUserOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *chime.CreateUserInput, ...func(*chime.Options)) *chime.CreateUserOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*chime.CreateUserOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *chime.CreateUserInput, ...func(*chime.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateVoiceConnector provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CreateVoiceConnector(ctx context.Context, params *chime.CreateVoiceConnectorInput, optFns ...func(*chime.Options)) (*chime.CreateVoiceConnectorOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateVoiceConnector")
	}

	var r0 *chime.CreateVoiceConnectorOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *chime.CreateVoiceConnectorInput, ...func(*chime.Options)) (*chime.CreateVoiceConnectorOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *chime.CreateVoiceConnectorInput, ...func(*chime.Options)) *chime.CreateVoiceConnectorOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*chime.CreateVoiceConnectorOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *chime.CreateVoiceConnectorInput, ...func(*chime.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateVoiceConnectorGroup provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CreateVoiceConnectorGroup(ctx context.Context, params *chime.CreateVoiceConnectorGroupInput, optFns ...func(*chime.Options)) (*chime.CreateVoiceConnectorGroupOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateVoiceConnectorGroup")
	}

	var r0 *chime.CreateVoiceConnectorGroupOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *chime.CreateVoiceConnectorGroupInput, ...func(*chime.Options)) (*chime.CreateVoiceConnectorGroupOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *chime.CreateVoiceConnectorGroupInput, ...func(*chime.Options)) *chime.CreateVoiceConnectorGroupOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*chime.CreateVoiceConnectorGroupOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *chime.CreateVoiceConnectorGroupInput, ...func(*chime.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteAccount provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteAccount(ctx context.Context, params *chime.DeleteAccountInput, optFns ...func(*chime.Options)) (*chime.DeleteAccountOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteAccount")
	}

	var r0 *chime.DeleteAccountOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *chime.DeleteAccountInput, ...func(*chime.Options)) (*chime.DeleteAccountOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *chime.DeleteAccountInput, ...func(*chime.Options)) *chime.DeleteAccountOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*chime.DeleteAccountOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *chime.DeleteAccountInput, ...func(*chime.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteAppInstance provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteAppInstance(ctx context.Context, params *chime.DeleteAppInstanceInput, optFns ...func(*chime.Options)) (*chime.DeleteAppInstanceOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteAppInstance")
	}

	var r0 *chime.DeleteAppInstanceOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *chime.DeleteAppInstanceInput, ...func(*chime.Options)) (*chime.DeleteAppInstanceOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *chime.DeleteAppInstanceInput, ...func(*chime.Options)) *chime.DeleteAppInstanceOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*chime.DeleteAppInstanceOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *chime.DeleteAppInstanceInput, ...func(*chime.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteAppInstanceAdmin provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteAppInstanceAdmin(ctx context.Context, params *chime.DeleteAppInstanceAdminInput, optFns ...func(*chime.Options)) (*chime.DeleteAppInstanceAdminOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteAppInstanceAdmin")
	}

	var r0 *chime.DeleteAppInstanceAdminOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *chime.DeleteAppInstanceAdminInput, ...func(*chime.Options)) (*chime.DeleteAppInstanceAdminOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *chime.DeleteAppInstanceAdminInput, ...func(*chime.Options)) *chime.DeleteAppInstanceAdminOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*chime.DeleteAppInstanceAdminOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *chime.DeleteAppInstanceAdminInput, ...func(*chime.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteAppInstanceStreamingConfigurations provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteAppInstanceStreamingConfigurations(ctx context.Context, params *chime.DeleteAppInstanceStreamingConfigurationsInput, optFns ...func(*chime.Options)) (*chime.DeleteAppInstanceStreamingConfigurationsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteAppInstanceStreamingConfigurations")
	}

	var r0 *chime.DeleteAppInstanceStreamingConfigurationsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *chime.DeleteAppInstanceStreamingConfigurationsInput, ...func(*chime.Options)) (*chime.DeleteAppInstanceStreamingConfigurationsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *chime.DeleteAppInstanceStreamingConfigurationsInput, ...func(*chime.Options)) *chime.DeleteAppInstanceStreamingConfigurationsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*chime.DeleteAppInstanceStreamingConfigurationsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *chime.DeleteAppInstanceStreamingConfigurationsInput, ...func(*chime.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteAppInstanceUser provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteAppInstanceUser(ctx context.Context, params *chime.DeleteAppInstanceUserInput, optFns ...func(*chime.Options)) (*chime.DeleteAppInstanceUserOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteAppInstanceUser")
	}

	var r0 *chime.DeleteAppInstanceUserOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *chime.DeleteAppInstanceUserInput, ...func(*chime.Options)) (*chime.DeleteAppInstanceUserOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *chime.DeleteAppInstanceUserInput, ...func(*chime.Options)) *chime.DeleteAppInstanceUserOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*chime.DeleteAppInstanceUserOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *chime.DeleteAppInstanceUserInput, ...func(*chime.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteAttendee provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteAttendee(ctx context.Context, params *chime.DeleteAttendeeInput, optFns ...func(*chime.Options)) (*chime.DeleteAttendeeOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteAttendee")
	}

	var r0 *chime.DeleteAttendeeOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *chime.DeleteAttendeeInput, ...func(*chime.Options)) (*chime.DeleteAttendeeOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *chime.DeleteAttendeeInput, ...func(*chime.Options)) *chime.DeleteAttendeeOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*chime.DeleteAttendeeOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *chime.DeleteAttendeeInput, ...func(*chime.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteChannel provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteChannel(ctx context.Context, params *chime.DeleteChannelInput, optFns ...func(*chime.Options)) (*chime.DeleteChannelOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteChannel")
	}

	var r0 *chime.DeleteChannelOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *chime.DeleteChannelInput, ...func(*chime.Options)) (*chime.DeleteChannelOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *chime.DeleteChannelInput, ...func(*chime.Options)) *chime.DeleteChannelOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*chime.DeleteChannelOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *chime.DeleteChannelInput, ...func(*chime.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteChannelBan provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteChannelBan(ctx context.Context, params *chime.DeleteChannelBanInput, optFns ...func(*chime.Options)) (*chime.DeleteChannelBanOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteChannelBan")
	}

	var r0 *chime.DeleteChannelBanOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *chime.DeleteChannelBanInput, ...func(*chime.Options)) (*chime.DeleteChannelBanOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *chime.DeleteChannelBanInput, ...func(*chime.Options)) *chime.DeleteChannelBanOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*chime.DeleteChannelBanOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *chime.DeleteChannelBanInput, ...func(*chime.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteChannelMembership provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteChannelMembership(ctx context.Context, params *chime.DeleteChannelMembershipInput, optFns ...func(*chime.Options)) (*chime.DeleteChannelMembershipOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteChannelMembership")
	}

	var r0 *chime.DeleteChannelMembershipOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *chime.DeleteChannelMembershipInput, ...func(*chime.Options)) (*chime.DeleteChannelMembershipOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *chime.DeleteChannelMembershipInput, ...func(*chime.Options)) *chime.DeleteChannelMembershipOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*chime.DeleteChannelMembershipOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *chime.DeleteChannelMembershipInput, ...func(*chime.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteChannelMessage provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteChannelMessage(ctx context.Context, params *chime.DeleteChannelMessageInput, optFns ...func(*chime.Options)) (*chime.DeleteChannelMessageOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteChannelMessage")
	}

	var r0 *chime.DeleteChannelMessageOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *chime.DeleteChannelMessageInput, ...func(*chime.Options)) (*chime.DeleteChannelMessageOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *chime.DeleteChannelMessageInput, ...func(*chime.Options)) *chime.DeleteChannelMessageOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*chime.DeleteChannelMessageOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *chime.DeleteChannelMessageInput, ...func(*chime.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteChannelModerator provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteChannelModerator(ctx context.Context, params *chime.DeleteChannelModeratorInput, optFns ...func(*chime.Options)) (*chime.DeleteChannelModeratorOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteChannelModerator")
	}

	var r0 *chime.DeleteChannelModeratorOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *chime.DeleteChannelModeratorInput, ...func(*chime.Options)) (*chime.DeleteChannelModeratorOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *chime.DeleteChannelModeratorInput, ...func(*chime.Options)) *chime.DeleteChannelModeratorOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*chime.DeleteChannelModeratorOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *chime.DeleteChannelModeratorInput, ...func(*chime.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteEventsConfiguration provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteEventsConfiguration(ctx context.Context, params *chime.DeleteEventsConfigurationInput, optFns ...func(*chime.Options)) (*chime.DeleteEventsConfigurationOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteEventsConfiguration")
	}

	var r0 *chime.DeleteEventsConfigurationOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *chime.DeleteEventsConfigurationInput, ...func(*chime.Options)) (*chime.DeleteEventsConfigurationOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *chime.DeleteEventsConfigurationInput, ...func(*chime.Options)) *chime.DeleteEventsConfigurationOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*chime.DeleteEventsConfigurationOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *chime.DeleteEventsConfigurationInput, ...func(*chime.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteMediaCapturePipeline provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteMediaCapturePipeline(ctx context.Context, params *chime.DeleteMediaCapturePipelineInput, optFns ...func(*chime.Options)) (*chime.DeleteMediaCapturePipelineOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteMediaCapturePipeline")
	}

	var r0 *chime.DeleteMediaCapturePipelineOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *chime.DeleteMediaCapturePipelineInput, ...func(*chime.Options)) (*chime.DeleteMediaCapturePipelineOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *chime.DeleteMediaCapturePipelineInput, ...func(*chime.Options)) *chime.DeleteMediaCapturePipelineOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*chime.DeleteMediaCapturePipelineOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *chime.DeleteMediaCapturePipelineInput, ...func(*chime.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteMeeting provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteMeeting(ctx context.Context, params *chime.DeleteMeetingInput, optFns ...func(*chime.Options)) (*chime.DeleteMeetingOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteMeeting")
	}

	var r0 *chime.DeleteMeetingOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *chime.DeleteMeetingInput, ...func(*chime.Options)) (*chime.DeleteMeetingOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *chime.DeleteMeetingInput, ...func(*chime.Options)) *chime.DeleteMeetingOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*chime.DeleteMeetingOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *chime.DeleteMeetingInput, ...func(*chime.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeletePhoneNumber provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeletePhoneNumber(ctx context.Context, params *chime.DeletePhoneNumberInput, optFns ...func(*chime.Options)) (*chime.DeletePhoneNumberOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeletePhoneNumber")
	}

	var r0 *chime.DeletePhoneNumberOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *chime.DeletePhoneNumberInput, ...func(*chime.Options)) (*chime.DeletePhoneNumberOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *chime.DeletePhoneNumberInput, ...func(*chime.Options)) *chime.DeletePhoneNumberOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*chime.DeletePhoneNumberOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *chime.DeletePhoneNumberInput, ...func(*chime.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteProxySession provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteProxySession(ctx context.Context, params *chime.DeleteProxySessionInput, optFns ...func(*chime.Options)) (*chime.DeleteProxySessionOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteProxySession")
	}

	var r0 *chime.DeleteProxySessionOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *chime.DeleteProxySessionInput, ...func(*chime.Options)) (*chime.DeleteProxySessionOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *chime.DeleteProxySessionInput, ...func(*chime.Options)) *chime.DeleteProxySessionOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*chime.DeleteProxySessionOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *chime.DeleteProxySessionInput, ...func(*chime.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteRoom provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteRoom(ctx context.Context, params *chime.DeleteRoomInput, optFns ...func(*chime.Options)) (*chime.DeleteRoomOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteRoom")
	}

	var r0 *chime.DeleteRoomOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *chime.DeleteRoomInput, ...func(*chime.Options)) (*chime.DeleteRoomOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *chime.DeleteRoomInput, ...func(*chime.Options)) *chime.DeleteRoomOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*chime.DeleteRoomOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *chime.DeleteRoomInput, ...func(*chime.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteRoomMembership provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteRoomMembership(ctx context.Context, params *chime.DeleteRoomMembershipInput, optFns ...func(*chime.Options)) (*chime.DeleteRoomMembershipOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteRoomMembership")
	}

	var r0 *chime.DeleteRoomMembershipOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *chime.DeleteRoomMembershipInput, ...func(*chime.Options)) (*chime.DeleteRoomMembershipOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *chime.DeleteRoomMembershipInput, ...func(*chime.Options)) *chime.DeleteRoomMembershipOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*chime.DeleteRoomMembershipOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *chime.DeleteRoomMembershipInput, ...func(*chime.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteSipMediaApplication provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteSipMediaApplication(ctx context.Context, params *chime.DeleteSipMediaApplicationInput, optFns ...func(*chime.Options)) (*chime.DeleteSipMediaApplicationOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteSipMediaApplication")
	}

	var r0 *chime.DeleteSipMediaApplicationOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *chime.DeleteSipMediaApplicationInput, ...func(*chime.Options)) (*chime.DeleteSipMediaApplicationOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *chime.DeleteSipMediaApplicationInput, ...func(*chime.Options)) *chime.DeleteSipMediaApplicationOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*chime.DeleteSipMediaApplicationOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *chime.DeleteSipMediaApplicationInput, ...func(*chime.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteSipRule provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteSipRule(ctx context.Context, params *chime.DeleteSipRuleInput, optFns ...func(*chime.Options)) (*chime.DeleteSipRuleOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteSipRule")
	}

	var r0 *chime.DeleteSipRuleOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *chime.DeleteSipRuleInput, ...func(*chime.Options)) (*chime.DeleteSipRuleOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *chime.DeleteSipRuleInput, ...func(*chime.Options)) *chime.DeleteSipRuleOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*chime.DeleteSipRuleOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *chime.DeleteSipRuleInput, ...func(*chime.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteVoiceConnector provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteVoiceConnector(ctx context.Context, params *chime.DeleteVoiceConnectorInput, optFns ...func(*chime.Options)) (*chime.DeleteVoiceConnectorOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteVoiceConnector")
	}

	var r0 *chime.DeleteVoiceConnectorOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *chime.DeleteVoiceConnectorInput, ...func(*chime.Options)) (*chime.DeleteVoiceConnectorOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *chime.DeleteVoiceConnectorInput, ...func(*chime.Options)) *chime.DeleteVoiceConnectorOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*chime.DeleteVoiceConnectorOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *chime.DeleteVoiceConnectorInput, ...func(*chime.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteVoiceConnectorEmergencyCallingConfiguration provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteVoiceConnectorEmergencyCallingConfiguration(ctx context.Context, params *chime.DeleteVoiceConnectorEmergencyCallingConfigurationInput, optFns ...func(*chime.Options)) (*chime.DeleteVoiceConnectorEmergencyCallingConfigurationOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteVoiceConnectorEmergencyCallingConfiguration")
	}

	var r0 *chime.DeleteVoiceConnectorEmergencyCallingConfigurationOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *chime.DeleteVoiceConnectorEmergencyCallingConfigurationInput, ...func(*chime.Options)) (*chime.DeleteVoiceConnectorEmergencyCallingConfigurationOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *chime.DeleteVoiceConnectorEmergencyCallingConfigurationInput, ...func(*chime.Options)) *chime.DeleteVoiceConnectorEmergencyCallingConfigurationOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*chime.DeleteVoiceConnectorEmergencyCallingConfigurationOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *chime.DeleteVoiceConnectorEmergencyCallingConfigurationInput, ...func(*chime.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteVoiceConnectorGroup provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteVoiceConnectorGroup(ctx context.Context, params *chime.DeleteVoiceConnectorGroupInput, optFns ...func(*chime.Options)) (*chime.DeleteVoiceConnectorGroupOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteVoiceConnectorGroup")
	}

	var r0 *chime.DeleteVoiceConnectorGroupOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *chime.DeleteVoiceConnectorGroupInput, ...func(*chime.Options)) (*chime.DeleteVoiceConnectorGroupOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *chime.DeleteVoiceConnectorGroupInput, ...func(*chime.Options)) *chime.DeleteVoiceConnectorGroupOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*chime.DeleteVoiceConnectorGroupOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *chime.DeleteVoiceConnectorGroupInput, ...func(*chime.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteVoiceConnectorOrigination provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteVoiceConnectorOrigination(ctx context.Context, params *chime.DeleteVoiceConnectorOriginationInput, optFns ...func(*chime.Options)) (*chime.DeleteVoiceConnectorOriginationOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteVoiceConnectorOrigination")
	}

	var r0 *chime.DeleteVoiceConnectorOriginationOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *chime.DeleteVoiceConnectorOriginationInput, ...func(*chime.Options)) (*chime.DeleteVoiceConnectorOriginationOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *chime.DeleteVoiceConnectorOriginationInput, ...func(*chime.Options)) *chime.DeleteVoiceConnectorOriginationOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*chime.DeleteVoiceConnectorOriginationOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *chime.DeleteVoiceConnectorOriginationInput, ...func(*chime.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteVoiceConnectorProxy provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteVoiceConnectorProxy(ctx context.Context, params *chime.DeleteVoiceConnectorProxyInput, optFns ...func(*chime.Options)) (*chime.DeleteVoiceConnectorProxyOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteVoiceConnectorProxy")
	}

	var r0 *chime.DeleteVoiceConnectorProxyOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *chime.DeleteVoiceConnectorProxyInput, ...func(*chime.Options)) (*chime.DeleteVoiceConnectorProxyOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *chime.DeleteVoiceConnectorProxyInput, ...func(*chime.Options)) *chime.DeleteVoiceConnectorProxyOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*chime.DeleteVoiceConnectorProxyOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *chime.DeleteVoiceConnectorProxyInput, ...func(*chime.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteVoiceConnectorStreamingConfiguration provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteVoiceConnectorStreamingConfiguration(ctx context.Context, params *chime.DeleteVoiceConnectorStreamingConfigurationInput, optFns ...func(*chime.Options)) (*chime.DeleteVoiceConnectorStreamingConfigurationOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteVoiceConnectorStreamingConfiguration")
	}

	var r0 *chime.DeleteVoiceConnectorStreamingConfigurationOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *chime.DeleteVoiceConnectorStreamingConfigurationInput, ...func(*chime.Options)) (*chime.DeleteVoiceConnectorStreamingConfigurationOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *chime.DeleteVoiceConnectorStreamingConfigurationInput, ...func(*chime.Options)) *chime.DeleteVoiceConnectorStreamingConfigurationOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*chime.DeleteVoiceConnectorStreamingConfigurationOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *chime.DeleteVoiceConnectorStreamingConfigurationInput, ...func(*chime.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteVoiceConnectorTermination provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteVoiceConnectorTermination(ctx context.Context, params *chime.DeleteVoiceConnectorTerminationInput, optFns ...func(*chime.Options)) (*chime.DeleteVoiceConnectorTerminationOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteVoiceConnectorTermination")
	}

	var r0 *chime.DeleteVoiceConnectorTerminationOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *chime.DeleteVoiceConnectorTerminationInput, ...func(*chime.Options)) (*chime.DeleteVoiceConnectorTerminationOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *chime.DeleteVoiceConnectorTerminationInput, ...func(*chime.Options)) *chime.DeleteVoiceConnectorTerminationOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*chime.DeleteVoiceConnectorTerminationOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *chime.DeleteVoiceConnectorTerminationInput, ...func(*chime.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteVoiceConnectorTerminationCredentials provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteVoiceConnectorTerminationCredentials(ctx context.Context, params *chime.DeleteVoiceConnectorTerminationCredentialsInput, optFns ...func(*chime.Options)) (*chime.DeleteVoiceConnectorTerminationCredentialsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteVoiceConnectorTerminationCredentials")
	}

	var r0 *chime.DeleteVoiceConnectorTerminationCredentialsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *chime.DeleteVoiceConnectorTerminationCredentialsInput, ...func(*chime.Options)) (*chime.DeleteVoiceConnectorTerminationCredentialsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *chime.DeleteVoiceConnectorTerminationCredentialsInput, ...func(*chime.Options)) *chime.DeleteVoiceConnectorTerminationCredentialsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*chime.DeleteVoiceConnectorTerminationCredentialsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *chime.DeleteVoiceConnectorTerminationCredentialsInput, ...func(*chime.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeAppInstance provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DescribeAppInstance(ctx context.Context, params *chime.DescribeAppInstanceInput, optFns ...func(*chime.Options)) (*chime.DescribeAppInstanceOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DescribeAppInstance")
	}

	var r0 *chime.DescribeAppInstanceOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *chime.DescribeAppInstanceInput, ...func(*chime.Options)) (*chime.DescribeAppInstanceOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *chime.DescribeAppInstanceInput, ...func(*chime.Options)) *chime.DescribeAppInstanceOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*chime.DescribeAppInstanceOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *chime.DescribeAppInstanceInput, ...func(*chime.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeAppInstanceAdmin provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DescribeAppInstanceAdmin(ctx context.Context, params *chime.DescribeAppInstanceAdminInput, optFns ...func(*chime.Options)) (*chime.DescribeAppInstanceAdminOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DescribeAppInstanceAdmin")
	}

	var r0 *chime.DescribeAppInstanceAdminOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *chime.DescribeAppInstanceAdminInput, ...func(*chime.Options)) (*chime.DescribeAppInstanceAdminOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *chime.DescribeAppInstanceAdminInput, ...func(*chime.Options)) *chime.DescribeAppInstanceAdminOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*chime.DescribeAppInstanceAdminOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *chime.DescribeAppInstanceAdminInput, ...func(*chime.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeAppInstanceUser provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DescribeAppInstanceUser(ctx context.Context, params *chime.DescribeAppInstanceUserInput, optFns ...func(*chime.Options)) (*chime.DescribeAppInstanceUserOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DescribeAppInstanceUser")
	}

	var r0 *chime.DescribeAppInstanceUserOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *chime.DescribeAppInstanceUserInput, ...func(*chime.Options)) (*chime.DescribeAppInstanceUserOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *chime.DescribeAppInstanceUserInput, ...func(*chime.Options)) *chime.DescribeAppInstanceUserOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*chime.DescribeAppInstanceUserOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *chime.DescribeAppInstanceUserInput, ...func(*chime.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeChannel provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DescribeChannel(ctx context.Context, params *chime.DescribeChannelInput, optFns ...func(*chime.Options)) (*chime.DescribeChannelOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DescribeChannel")
	}

	var r0 *chime.DescribeChannelOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *chime.DescribeChannelInput, ...func(*chime.Options)) (*chime.DescribeChannelOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *chime.DescribeChannelInput, ...func(*chime.Options)) *chime.DescribeChannelOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*chime.DescribeChannelOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *chime.DescribeChannelInput, ...func(*chime.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeChannelBan provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DescribeChannelBan(ctx context.Context, params *chime.DescribeChannelBanInput, optFns ...func(*chime.Options)) (*chime.DescribeChannelBanOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DescribeChannelBan")
	}

	var r0 *chime.DescribeChannelBanOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *chime.DescribeChannelBanInput, ...func(*chime.Options)) (*chime.DescribeChannelBanOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *chime.DescribeChannelBanInput, ...func(*chime.Options)) *chime.DescribeChannelBanOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*chime.DescribeChannelBanOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *chime.DescribeChannelBanInput, ...func(*chime.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeChannelMembership provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DescribeChannelMembership(ctx context.Context, params *chime.DescribeChannelMembershipInput, optFns ...func(*chime.Options)) (*chime.DescribeChannelMembershipOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DescribeChannelMembership")
	}

	var r0 *chime.DescribeChannelMembershipOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *chime.DescribeChannelMembershipInput, ...func(*chime.Options)) (*chime.DescribeChannelMembershipOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *chime.DescribeChannelMembershipInput, ...func(*chime.Options)) *chime.DescribeChannelMembershipOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*chime.DescribeChannelMembershipOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *chime.DescribeChannelMembershipInput, ...func(*chime.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeChannelMembershipForAppInstanceUser provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DescribeChannelMembershipForAppInstanceUser(ctx context.Context, params *chime.DescribeChannelMembershipForAppInstanceUserInput, optFns ...func(*chime.Options)) (*chime.DescribeChannelMembershipForAppInstanceUserOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DescribeChannelMembershipForAppInstanceUser")
	}

	var r0 *chime.DescribeChannelMembershipForAppInstanceUserOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *chime.DescribeChannelMembershipForAppInstanceUserInput, ...func(*chime.Options)) (*chime.DescribeChannelMembershipForAppInstanceUserOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *chime.DescribeChannelMembershipForAppInstanceUserInput, ...func(*chime.Options)) *chime.DescribeChannelMembershipForAppInstanceUserOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*chime.DescribeChannelMembershipForAppInstanceUserOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *chime.DescribeChannelMembershipForAppInstanceUserInput, ...func(*chime.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeChannelModeratedByAppInstanceUser provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DescribeChannelModeratedByAppInstanceUser(ctx context.Context, params *chime.DescribeChannelModeratedByAppInstanceUserInput, optFns ...func(*chime.Options)) (*chime.DescribeChannelModeratedByAppInstanceUserOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DescribeChannelModeratedByAppInstanceUser")
	}

	var r0 *chime.DescribeChannelModeratedByAppInstanceUserOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *chime.DescribeChannelModeratedByAppInstanceUserInput, ...func(*chime.Options)) (*chime.DescribeChannelModeratedByAppInstanceUserOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *chime.DescribeChannelModeratedByAppInstanceUserInput, ...func(*chime.Options)) *chime.DescribeChannelModeratedByAppInstanceUserOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*chime.DescribeChannelModeratedByAppInstanceUserOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *chime.DescribeChannelModeratedByAppInstanceUserInput, ...func(*chime.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeChannelModerator provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DescribeChannelModerator(ctx context.Context, params *chime.DescribeChannelModeratorInput, optFns ...func(*chime.Options)) (*chime.DescribeChannelModeratorOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DescribeChannelModerator")
	}

	var r0 *chime.DescribeChannelModeratorOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *chime.DescribeChannelModeratorInput, ...func(*chime.Options)) (*chime.DescribeChannelModeratorOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *chime.DescribeChannelModeratorInput, ...func(*chime.Options)) *chime.DescribeChannelModeratorOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*chime.DescribeChannelModeratorOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *chime.DescribeChannelModeratorInput, ...func(*chime.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DisassociatePhoneNumberFromUser provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DisassociatePhoneNumberFromUser(ctx context.Context, params *chime.DisassociatePhoneNumberFromUserInput, optFns ...func(*chime.Options)) (*chime.DisassociatePhoneNumberFromUserOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DisassociatePhoneNumberFromUser")
	}

	var r0 *chime.DisassociatePhoneNumberFromUserOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *chime.DisassociatePhoneNumberFromUserInput, ...func(*chime.Options)) (*chime.DisassociatePhoneNumberFromUserOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *chime.DisassociatePhoneNumberFromUserInput, ...func(*chime.Options)) *chime.DisassociatePhoneNumberFromUserOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*chime.DisassociatePhoneNumberFromUserOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *chime.DisassociatePhoneNumberFromUserInput, ...func(*chime.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DisassociatePhoneNumbersFromVoiceConnector provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DisassociatePhoneNumbersFromVoiceConnector(ctx context.Context, params *chime.DisassociatePhoneNumbersFromVoiceConnectorInput, optFns ...func(*chime.Options)) (*chime.DisassociatePhoneNumbersFromVoiceConnectorOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DisassociatePhoneNumbersFromVoiceConnector")
	}

	var r0 *chime.DisassociatePhoneNumbersFromVoiceConnectorOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *chime.DisassociatePhoneNumbersFromVoiceConnectorInput, ...func(*chime.Options)) (*chime.DisassociatePhoneNumbersFromVoiceConnectorOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *chime.DisassociatePhoneNumbersFromVoiceConnectorInput, ...func(*chime.Options)) *chime.DisassociatePhoneNumbersFromVoiceConnectorOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*chime.DisassociatePhoneNumbersFromVoiceConnectorOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *chime.DisassociatePhoneNumbersFromVoiceConnectorInput, ...func(*chime.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DisassociatePhoneNumbersFromVoiceConnectorGroup provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DisassociatePhoneNumbersFromVoiceConnectorGroup(ctx context.Context, params *chime.DisassociatePhoneNumbersFromVoiceConnectorGroupInput, optFns ...func(*chime.Options)) (*chime.DisassociatePhoneNumbersFromVoiceConnectorGroupOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DisassociatePhoneNumbersFromVoiceConnectorGroup")
	}

	var r0 *chime.DisassociatePhoneNumbersFromVoiceConnectorGroupOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *chime.DisassociatePhoneNumbersFromVoiceConnectorGroupInput, ...func(*chime.Options)) (*chime.DisassociatePhoneNumbersFromVoiceConnectorGroupOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *chime.DisassociatePhoneNumbersFromVoiceConnectorGroupInput, ...func(*chime.Options)) *chime.DisassociatePhoneNumbersFromVoiceConnectorGroupOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*chime.DisassociatePhoneNumbersFromVoiceConnectorGroupOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *chime.DisassociatePhoneNumbersFromVoiceConnectorGroupInput, ...func(*chime.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DisassociateSigninDelegateGroupsFromAccount provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DisassociateSigninDelegateGroupsFromAccount(ctx context.Context, params *chime.DisassociateSigninDelegateGroupsFromAccountInput, optFns ...func(*chime.Options)) (*chime.DisassociateSigninDelegateGroupsFromAccountOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DisassociateSigninDelegateGroupsFromAccount")
	}

	var r0 *chime.DisassociateSigninDelegateGroupsFromAccountOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *chime.DisassociateSigninDelegateGroupsFromAccountInput, ...func(*chime.Options)) (*chime.DisassociateSigninDelegateGroupsFromAccountOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *chime.DisassociateSigninDelegateGroupsFromAccountInput, ...func(*chime.Options)) *chime.DisassociateSigninDelegateGroupsFromAccountOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*chime.DisassociateSigninDelegateGroupsFromAccountOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *chime.DisassociateSigninDelegateGroupsFromAccountInput, ...func(*chime.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAccount provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetAccount(ctx context.Context, params *chime.GetAccountInput, optFns ...func(*chime.Options)) (*chime.GetAccountOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetAccount")
	}

	var r0 *chime.GetAccountOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *chime.GetAccountInput, ...func(*chime.Options)) (*chime.GetAccountOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *chime.GetAccountInput, ...func(*chime.Options)) *chime.GetAccountOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*chime.GetAccountOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *chime.GetAccountInput, ...func(*chime.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAccountSettings provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetAccountSettings(ctx context.Context, params *chime.GetAccountSettingsInput, optFns ...func(*chime.Options)) (*chime.GetAccountSettingsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetAccountSettings")
	}

	var r0 *chime.GetAccountSettingsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *chime.GetAccountSettingsInput, ...func(*chime.Options)) (*chime.GetAccountSettingsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *chime.GetAccountSettingsInput, ...func(*chime.Options)) *chime.GetAccountSettingsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*chime.GetAccountSettingsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *chime.GetAccountSettingsInput, ...func(*chime.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAppInstanceRetentionSettings provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetAppInstanceRetentionSettings(ctx context.Context, params *chime.GetAppInstanceRetentionSettingsInput, optFns ...func(*chime.Options)) (*chime.GetAppInstanceRetentionSettingsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetAppInstanceRetentionSettings")
	}

	var r0 *chime.GetAppInstanceRetentionSettingsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *chime.GetAppInstanceRetentionSettingsInput, ...func(*chime.Options)) (*chime.GetAppInstanceRetentionSettingsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *chime.GetAppInstanceRetentionSettingsInput, ...func(*chime.Options)) *chime.GetAppInstanceRetentionSettingsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*chime.GetAppInstanceRetentionSettingsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *chime.GetAppInstanceRetentionSettingsInput, ...func(*chime.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAppInstanceStreamingConfigurations provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetAppInstanceStreamingConfigurations(ctx context.Context, params *chime.GetAppInstanceStreamingConfigurationsInput, optFns ...func(*chime.Options)) (*chime.GetAppInstanceStreamingConfigurationsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetAppInstanceStreamingConfigurations")
	}

	var r0 *chime.GetAppInstanceStreamingConfigurationsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *chime.GetAppInstanceStreamingConfigurationsInput, ...func(*chime.Options)) (*chime.GetAppInstanceStreamingConfigurationsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *chime.GetAppInstanceStreamingConfigurationsInput, ...func(*chime.Options)) *chime.GetAppInstanceStreamingConfigurationsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*chime.GetAppInstanceStreamingConfigurationsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *chime.GetAppInstanceStreamingConfigurationsInput, ...func(*chime.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAttendee provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetAttendee(ctx context.Context, params *chime.GetAttendeeInput, optFns ...func(*chime.Options)) (*chime.GetAttendeeOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetAttendee")
	}

	var r0 *chime.GetAttendeeOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *chime.GetAttendeeInput, ...func(*chime.Options)) (*chime.GetAttendeeOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *chime.GetAttendeeInput, ...func(*chime.Options)) *chime.GetAttendeeOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*chime.GetAttendeeOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *chime.GetAttendeeInput, ...func(*chime.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetBot provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetBot(ctx context.Context, params *chime.GetBotInput, optFns ...func(*chime.Options)) (*chime.GetBotOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetBot")
	}

	var r0 *chime.GetBotOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *chime.GetBotInput, ...func(*chime.Options)) (*chime.GetBotOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *chime.GetBotInput, ...func(*chime.Options)) *chime.GetBotOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*chime.GetBotOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *chime.GetBotInput, ...func(*chime.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetChannelMessage provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetChannelMessage(ctx context.Context, params *chime.GetChannelMessageInput, optFns ...func(*chime.Options)) (*chime.GetChannelMessageOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetChannelMessage")
	}

	var r0 *chime.GetChannelMessageOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *chime.GetChannelMessageInput, ...func(*chime.Options)) (*chime.GetChannelMessageOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *chime.GetChannelMessageInput, ...func(*chime.Options)) *chime.GetChannelMessageOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*chime.GetChannelMessageOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *chime.GetChannelMessageInput, ...func(*chime.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetEventsConfiguration provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetEventsConfiguration(ctx context.Context, params *chime.GetEventsConfigurationInput, optFns ...func(*chime.Options)) (*chime.GetEventsConfigurationOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetEventsConfiguration")
	}

	var r0 *chime.GetEventsConfigurationOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *chime.GetEventsConfigurationInput, ...func(*chime.Options)) (*chime.GetEventsConfigurationOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *chime.GetEventsConfigurationInput, ...func(*chime.Options)) *chime.GetEventsConfigurationOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*chime.GetEventsConfigurationOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *chime.GetEventsConfigurationInput, ...func(*chime.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetGlobalSettings provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetGlobalSettings(ctx context.Context, params *chime.GetGlobalSettingsInput, optFns ...func(*chime.Options)) (*chime.GetGlobalSettingsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetGlobalSettings")
	}

	var r0 *chime.GetGlobalSettingsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *chime.GetGlobalSettingsInput, ...func(*chime.Options)) (*chime.GetGlobalSettingsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *chime.GetGlobalSettingsInput, ...func(*chime.Options)) *chime.GetGlobalSettingsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*chime.GetGlobalSettingsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *chime.GetGlobalSettingsInput, ...func(*chime.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetMediaCapturePipeline provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetMediaCapturePipeline(ctx context.Context, params *chime.GetMediaCapturePipelineInput, optFns ...func(*chime.Options)) (*chime.GetMediaCapturePipelineOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetMediaCapturePipeline")
	}

	var r0 *chime.GetMediaCapturePipelineOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *chime.GetMediaCapturePipelineInput, ...func(*chime.Options)) (*chime.GetMediaCapturePipelineOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *chime.GetMediaCapturePipelineInput, ...func(*chime.Options)) *chime.GetMediaCapturePipelineOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*chime.GetMediaCapturePipelineOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *chime.GetMediaCapturePipelineInput, ...func(*chime.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetMeeting provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetMeeting(ctx context.Context, params *chime.GetMeetingInput, optFns ...func(*chime.Options)) (*chime.GetMeetingOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetMeeting")
	}

	var r0 *chime.GetMeetingOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *chime.GetMeetingInput, ...func(*chime.Options)) (*chime.GetMeetingOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *chime.GetMeetingInput, ...func(*chime.Options)) *chime.GetMeetingOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*chime.GetMeetingOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *chime.GetMeetingInput, ...func(*chime.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetMessagingSessionEndpoint provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetMessagingSessionEndpoint(ctx context.Context, params *chime.GetMessagingSessionEndpointInput, optFns ...func(*chime.Options)) (*chime.GetMessagingSessionEndpointOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetMessagingSessionEndpoint")
	}

	var r0 *chime.GetMessagingSessionEndpointOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *chime.GetMessagingSessionEndpointInput, ...func(*chime.Options)) (*chime.GetMessagingSessionEndpointOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *chime.GetMessagingSessionEndpointInput, ...func(*chime.Options)) *chime.GetMessagingSessionEndpointOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*chime.GetMessagingSessionEndpointOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *chime.GetMessagingSessionEndpointInput, ...func(*chime.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetPhoneNumber provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetPhoneNumber(ctx context.Context, params *chime.GetPhoneNumberInput, optFns ...func(*chime.Options)) (*chime.GetPhoneNumberOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetPhoneNumber")
	}

	var r0 *chime.GetPhoneNumberOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *chime.GetPhoneNumberInput, ...func(*chime.Options)) (*chime.GetPhoneNumberOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *chime.GetPhoneNumberInput, ...func(*chime.Options)) *chime.GetPhoneNumberOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*chime.GetPhoneNumberOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *chime.GetPhoneNumberInput, ...func(*chime.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetPhoneNumberOrder provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetPhoneNumberOrder(ctx context.Context, params *chime.GetPhoneNumberOrderInput, optFns ...func(*chime.Options)) (*chime.GetPhoneNumberOrderOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetPhoneNumberOrder")
	}

	var r0 *chime.GetPhoneNumberOrderOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *chime.GetPhoneNumberOrderInput, ...func(*chime.Options)) (*chime.GetPhoneNumberOrderOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *chime.GetPhoneNumberOrderInput, ...func(*chime.Options)) *chime.GetPhoneNumberOrderOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*chime.GetPhoneNumberOrderOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *chime.GetPhoneNumberOrderInput, ...func(*chime.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetPhoneNumberSettings provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetPhoneNumberSettings(ctx context.Context, params *chime.GetPhoneNumberSettingsInput, optFns ...func(*chime.Options)) (*chime.GetPhoneNumberSettingsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetPhoneNumberSettings")
	}

	var r0 *chime.GetPhoneNumberSettingsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *chime.GetPhoneNumberSettingsInput, ...func(*chime.Options)) (*chime.GetPhoneNumberSettingsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *chime.GetPhoneNumberSettingsInput, ...func(*chime.Options)) *chime.GetPhoneNumberSettingsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*chime.GetPhoneNumberSettingsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *chime.GetPhoneNumberSettingsInput, ...func(*chime.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetProxySession provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetProxySession(ctx context.Context, params *chime.GetProxySessionInput, optFns ...func(*chime.Options)) (*chime.GetProxySessionOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetProxySession")
	}

	var r0 *chime.GetProxySessionOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *chime.GetProxySessionInput, ...func(*chime.Options)) (*chime.GetProxySessionOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *chime.GetProxySessionInput, ...func(*chime.Options)) *chime.GetProxySessionOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*chime.GetProxySessionOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *chime.GetProxySessionInput, ...func(*chime.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetRetentionSettings provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetRetentionSettings(ctx context.Context, params *chime.GetRetentionSettingsInput, optFns ...func(*chime.Options)) (*chime.GetRetentionSettingsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetRetentionSettings")
	}

	var r0 *chime.GetRetentionSettingsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *chime.GetRetentionSettingsInput, ...func(*chime.Options)) (*chime.GetRetentionSettingsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *chime.GetRetentionSettingsInput, ...func(*chime.Options)) *chime.GetRetentionSettingsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*chime.GetRetentionSettingsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *chime.GetRetentionSettingsInput, ...func(*chime.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetRoom provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetRoom(ctx context.Context, params *chime.GetRoomInput, optFns ...func(*chime.Options)) (*chime.GetRoomOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetRoom")
	}

	var r0 *chime.GetRoomOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *chime.GetRoomInput, ...func(*chime.Options)) (*chime.GetRoomOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *chime.GetRoomInput, ...func(*chime.Options)) *chime.GetRoomOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*chime.GetRoomOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *chime.GetRoomInput, ...func(*chime.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetSipMediaApplication provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetSipMediaApplication(ctx context.Context, params *chime.GetSipMediaApplicationInput, optFns ...func(*chime.Options)) (*chime.GetSipMediaApplicationOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetSipMediaApplication")
	}

	var r0 *chime.GetSipMediaApplicationOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *chime.GetSipMediaApplicationInput, ...func(*chime.Options)) (*chime.GetSipMediaApplicationOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *chime.GetSipMediaApplicationInput, ...func(*chime.Options)) *chime.GetSipMediaApplicationOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*chime.GetSipMediaApplicationOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *chime.GetSipMediaApplicationInput, ...func(*chime.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetSipMediaApplicationLoggingConfiguration provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetSipMediaApplicationLoggingConfiguration(ctx context.Context, params *chime.GetSipMediaApplicationLoggingConfigurationInput, optFns ...func(*chime.Options)) (*chime.GetSipMediaApplicationLoggingConfigurationOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetSipMediaApplicationLoggingConfiguration")
	}

	var r0 *chime.GetSipMediaApplicationLoggingConfigurationOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *chime.GetSipMediaApplicationLoggingConfigurationInput, ...func(*chime.Options)) (*chime.GetSipMediaApplicationLoggingConfigurationOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *chime.GetSipMediaApplicationLoggingConfigurationInput, ...func(*chime.Options)) *chime.GetSipMediaApplicationLoggingConfigurationOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*chime.GetSipMediaApplicationLoggingConfigurationOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *chime.GetSipMediaApplicationLoggingConfigurationInput, ...func(*chime.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetSipRule provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetSipRule(ctx context.Context, params *chime.GetSipRuleInput, optFns ...func(*chime.Options)) (*chime.GetSipRuleOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetSipRule")
	}

	var r0 *chime.GetSipRuleOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *chime.GetSipRuleInput, ...func(*chime.Options)) (*chime.GetSipRuleOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *chime.GetSipRuleInput, ...func(*chime.Options)) *chime.GetSipRuleOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*chime.GetSipRuleOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *chime.GetSipRuleInput, ...func(*chime.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetUser provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetUser(ctx context.Context, params *chime.GetUserInput, optFns ...func(*chime.Options)) (*chime.GetUserOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetUser")
	}

	var r0 *chime.GetUserOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *chime.GetUserInput, ...func(*chime.Options)) (*chime.GetUserOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *chime.GetUserInput, ...func(*chime.Options)) *chime.GetUserOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*chime.GetUserOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *chime.GetUserInput, ...func(*chime.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetUserSettings provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetUserSettings(ctx context.Context, params *chime.GetUserSettingsInput, optFns ...func(*chime.Options)) (*chime.GetUserSettingsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetUserSettings")
	}

	var r0 *chime.GetUserSettingsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *chime.GetUserSettingsInput, ...func(*chime.Options)) (*chime.GetUserSettingsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *chime.GetUserSettingsInput, ...func(*chime.Options)) *chime.GetUserSettingsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*chime.GetUserSettingsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *chime.GetUserSettingsInput, ...func(*chime.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetVoiceConnector provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetVoiceConnector(ctx context.Context, params *chime.GetVoiceConnectorInput, optFns ...func(*chime.Options)) (*chime.GetVoiceConnectorOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetVoiceConnector")
	}

	var r0 *chime.GetVoiceConnectorOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *chime.GetVoiceConnectorInput, ...func(*chime.Options)) (*chime.GetVoiceConnectorOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *chime.GetVoiceConnectorInput, ...func(*chime.Options)) *chime.GetVoiceConnectorOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*chime.GetVoiceConnectorOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *chime.GetVoiceConnectorInput, ...func(*chime.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetVoiceConnectorEmergencyCallingConfiguration provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetVoiceConnectorEmergencyCallingConfiguration(ctx context.Context, params *chime.GetVoiceConnectorEmergencyCallingConfigurationInput, optFns ...func(*chime.Options)) (*chime.GetVoiceConnectorEmergencyCallingConfigurationOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetVoiceConnectorEmergencyCallingConfiguration")
	}

	var r0 *chime.GetVoiceConnectorEmergencyCallingConfigurationOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *chime.GetVoiceConnectorEmergencyCallingConfigurationInput, ...func(*chime.Options)) (*chime.GetVoiceConnectorEmergencyCallingConfigurationOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *chime.GetVoiceConnectorEmergencyCallingConfigurationInput, ...func(*chime.Options)) *chime.GetVoiceConnectorEmergencyCallingConfigurationOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*chime.GetVoiceConnectorEmergencyCallingConfigurationOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *chime.GetVoiceConnectorEmergencyCallingConfigurationInput, ...func(*chime.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetVoiceConnectorGroup provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetVoiceConnectorGroup(ctx context.Context, params *chime.GetVoiceConnectorGroupInput, optFns ...func(*chime.Options)) (*chime.GetVoiceConnectorGroupOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetVoiceConnectorGroup")
	}

	var r0 *chime.GetVoiceConnectorGroupOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *chime.GetVoiceConnectorGroupInput, ...func(*chime.Options)) (*chime.GetVoiceConnectorGroupOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *chime.GetVoiceConnectorGroupInput, ...func(*chime.Options)) *chime.GetVoiceConnectorGroupOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*chime.GetVoiceConnectorGroupOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *chime.GetVoiceConnectorGroupInput, ...func(*chime.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetVoiceConnectorLoggingConfiguration provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetVoiceConnectorLoggingConfiguration(ctx context.Context, params *chime.GetVoiceConnectorLoggingConfigurationInput, optFns ...func(*chime.Options)) (*chime.GetVoiceConnectorLoggingConfigurationOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetVoiceConnectorLoggingConfiguration")
	}

	var r0 *chime.GetVoiceConnectorLoggingConfigurationOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *chime.GetVoiceConnectorLoggingConfigurationInput, ...func(*chime.Options)) (*chime.GetVoiceConnectorLoggingConfigurationOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *chime.GetVoiceConnectorLoggingConfigurationInput, ...func(*chime.Options)) *chime.GetVoiceConnectorLoggingConfigurationOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*chime.GetVoiceConnectorLoggingConfigurationOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *chime.GetVoiceConnectorLoggingConfigurationInput, ...func(*chime.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetVoiceConnectorOrigination provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetVoiceConnectorOrigination(ctx context.Context, params *chime.GetVoiceConnectorOriginationInput, optFns ...func(*chime.Options)) (*chime.GetVoiceConnectorOriginationOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetVoiceConnectorOrigination")
	}

	var r0 *chime.GetVoiceConnectorOriginationOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *chime.GetVoiceConnectorOriginationInput, ...func(*chime.Options)) (*chime.GetVoiceConnectorOriginationOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *chime.GetVoiceConnectorOriginationInput, ...func(*chime.Options)) *chime.GetVoiceConnectorOriginationOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*chime.GetVoiceConnectorOriginationOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *chime.GetVoiceConnectorOriginationInput, ...func(*chime.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetVoiceConnectorProxy provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetVoiceConnectorProxy(ctx context.Context, params *chime.GetVoiceConnectorProxyInput, optFns ...func(*chime.Options)) (*chime.GetVoiceConnectorProxyOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetVoiceConnectorProxy")
	}

	var r0 *chime.GetVoiceConnectorProxyOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *chime.GetVoiceConnectorProxyInput, ...func(*chime.Options)) (*chime.GetVoiceConnectorProxyOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *chime.GetVoiceConnectorProxyInput, ...func(*chime.Options)) *chime.GetVoiceConnectorProxyOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*chime.GetVoiceConnectorProxyOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *chime.GetVoiceConnectorProxyInput, ...func(*chime.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetVoiceConnectorStreamingConfiguration provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetVoiceConnectorStreamingConfiguration(ctx context.Context, params *chime.GetVoiceConnectorStreamingConfigurationInput, optFns ...func(*chime.Options)) (*chime.GetVoiceConnectorStreamingConfigurationOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetVoiceConnectorStreamingConfiguration")
	}

	var r0 *chime.GetVoiceConnectorStreamingConfigurationOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *chime.GetVoiceConnectorStreamingConfigurationInput, ...func(*chime.Options)) (*chime.GetVoiceConnectorStreamingConfigurationOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *chime.GetVoiceConnectorStreamingConfigurationInput, ...func(*chime.Options)) *chime.GetVoiceConnectorStreamingConfigurationOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*chime.GetVoiceConnectorStreamingConfigurationOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *chime.GetVoiceConnectorStreamingConfigurationInput, ...func(*chime.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetVoiceConnectorTermination provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetVoiceConnectorTermination(ctx context.Context, params *chime.GetVoiceConnectorTerminationInput, optFns ...func(*chime.Options)) (*chime.GetVoiceConnectorTerminationOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetVoiceConnectorTermination")
	}

	var r0 *chime.GetVoiceConnectorTerminationOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *chime.GetVoiceConnectorTerminationInput, ...func(*chime.Options)) (*chime.GetVoiceConnectorTerminationOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *chime.GetVoiceConnectorTerminationInput, ...func(*chime.Options)) *chime.GetVoiceConnectorTerminationOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*chime.GetVoiceConnectorTerminationOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *chime.GetVoiceConnectorTerminationInput, ...func(*chime.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetVoiceConnectorTerminationHealth provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetVoiceConnectorTerminationHealth(ctx context.Context, params *chime.GetVoiceConnectorTerminationHealthInput, optFns ...func(*chime.Options)) (*chime.GetVoiceConnectorTerminationHealthOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetVoiceConnectorTerminationHealth")
	}

	var r0 *chime.GetVoiceConnectorTerminationHealthOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *chime.GetVoiceConnectorTerminationHealthInput, ...func(*chime.Options)) (*chime.GetVoiceConnectorTerminationHealthOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *chime.GetVoiceConnectorTerminationHealthInput, ...func(*chime.Options)) *chime.GetVoiceConnectorTerminationHealthOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*chime.GetVoiceConnectorTerminationHealthOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *chime.GetVoiceConnectorTerminationHealthInput, ...func(*chime.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// InviteUsers provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) InviteUsers(ctx context.Context, params *chime.InviteUsersInput, optFns ...func(*chime.Options)) (*chime.InviteUsersOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for InviteUsers")
	}

	var r0 *chime.InviteUsersOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *chime.InviteUsersInput, ...func(*chime.Options)) (*chime.InviteUsersOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *chime.InviteUsersInput, ...func(*chime.Options)) *chime.InviteUsersOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*chime.InviteUsersOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *chime.InviteUsersInput, ...func(*chime.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListAccounts provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListAccounts(ctx context.Context, params *chime.ListAccountsInput, optFns ...func(*chime.Options)) (*chime.ListAccountsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListAccounts")
	}

	var r0 *chime.ListAccountsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *chime.ListAccountsInput, ...func(*chime.Options)) (*chime.ListAccountsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *chime.ListAccountsInput, ...func(*chime.Options)) *chime.ListAccountsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*chime.ListAccountsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *chime.ListAccountsInput, ...func(*chime.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListAppInstanceAdmins provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListAppInstanceAdmins(ctx context.Context, params *chime.ListAppInstanceAdminsInput, optFns ...func(*chime.Options)) (*chime.ListAppInstanceAdminsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListAppInstanceAdmins")
	}

	var r0 *chime.ListAppInstanceAdminsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *chime.ListAppInstanceAdminsInput, ...func(*chime.Options)) (*chime.ListAppInstanceAdminsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *chime.ListAppInstanceAdminsInput, ...func(*chime.Options)) *chime.ListAppInstanceAdminsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*chime.ListAppInstanceAdminsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *chime.ListAppInstanceAdminsInput, ...func(*chime.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListAppInstanceUsers provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListAppInstanceUsers(ctx context.Context, params *chime.ListAppInstanceUsersInput, optFns ...func(*chime.Options)) (*chime.ListAppInstanceUsersOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListAppInstanceUsers")
	}

	var r0 *chime.ListAppInstanceUsersOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *chime.ListAppInstanceUsersInput, ...func(*chime.Options)) (*chime.ListAppInstanceUsersOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *chime.ListAppInstanceUsersInput, ...func(*chime.Options)) *chime.ListAppInstanceUsersOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*chime.ListAppInstanceUsersOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *chime.ListAppInstanceUsersInput, ...func(*chime.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListAppInstances provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListAppInstances(ctx context.Context, params *chime.ListAppInstancesInput, optFns ...func(*chime.Options)) (*chime.ListAppInstancesOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListAppInstances")
	}

	var r0 *chime.ListAppInstancesOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *chime.ListAppInstancesInput, ...func(*chime.Options)) (*chime.ListAppInstancesOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *chime.ListAppInstancesInput, ...func(*chime.Options)) *chime.ListAppInstancesOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*chime.ListAppInstancesOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *chime.ListAppInstancesInput, ...func(*chime.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListAttendeeTags provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListAttendeeTags(ctx context.Context, params *chime.ListAttendeeTagsInput, optFns ...func(*chime.Options)) (*chime.ListAttendeeTagsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListAttendeeTags")
	}

	var r0 *chime.ListAttendeeTagsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *chime.ListAttendeeTagsInput, ...func(*chime.Options)) (*chime.ListAttendeeTagsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *chime.ListAttendeeTagsInput, ...func(*chime.Options)) *chime.ListAttendeeTagsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*chime.ListAttendeeTagsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *chime.ListAttendeeTagsInput, ...func(*chime.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListAttendees provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListAttendees(ctx context.Context, params *chime.ListAttendeesInput, optFns ...func(*chime.Options)) (*chime.ListAttendeesOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListAttendees")
	}

	var r0 *chime.ListAttendeesOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *chime.ListAttendeesInput, ...func(*chime.Options)) (*chime.ListAttendeesOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *chime.ListAttendeesInput, ...func(*chime.Options)) *chime.ListAttendeesOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*chime.ListAttendeesOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *chime.ListAttendeesInput, ...func(*chime.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListBots provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListBots(ctx context.Context, params *chime.ListBotsInput, optFns ...func(*chime.Options)) (*chime.ListBotsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListBots")
	}

	var r0 *chime.ListBotsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *chime.ListBotsInput, ...func(*chime.Options)) (*chime.ListBotsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *chime.ListBotsInput, ...func(*chime.Options)) *chime.ListBotsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*chime.ListBotsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *chime.ListBotsInput, ...func(*chime.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListChannelBans provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListChannelBans(ctx context.Context, params *chime.ListChannelBansInput, optFns ...func(*chime.Options)) (*chime.ListChannelBansOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListChannelBans")
	}

	var r0 *chime.ListChannelBansOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *chime.ListChannelBansInput, ...func(*chime.Options)) (*chime.ListChannelBansOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *chime.ListChannelBansInput, ...func(*chime.Options)) *chime.ListChannelBansOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*chime.ListChannelBansOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *chime.ListChannelBansInput, ...func(*chime.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListChannelMemberships provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListChannelMemberships(ctx context.Context, params *chime.ListChannelMembershipsInput, optFns ...func(*chime.Options)) (*chime.ListChannelMembershipsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListChannelMemberships")
	}

	var r0 *chime.ListChannelMembershipsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *chime.ListChannelMembershipsInput, ...func(*chime.Options)) (*chime.ListChannelMembershipsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *chime.ListChannelMembershipsInput, ...func(*chime.Options)) *chime.ListChannelMembershipsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*chime.ListChannelMembershipsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *chime.ListChannelMembershipsInput, ...func(*chime.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListChannelMembershipsForAppInstanceUser provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListChannelMembershipsForAppInstanceUser(ctx context.Context, params *chime.ListChannelMembershipsForAppInstanceUserInput, optFns ...func(*chime.Options)) (*chime.ListChannelMembershipsForAppInstanceUserOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListChannelMembershipsForAppInstanceUser")
	}

	var r0 *chime.ListChannelMembershipsForAppInstanceUserOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *chime.ListChannelMembershipsForAppInstanceUserInput, ...func(*chime.Options)) (*chime.ListChannelMembershipsForAppInstanceUserOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *chime.ListChannelMembershipsForAppInstanceUserInput, ...func(*chime.Options)) *chime.ListChannelMembershipsForAppInstanceUserOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*chime.ListChannelMembershipsForAppInstanceUserOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *chime.ListChannelMembershipsForAppInstanceUserInput, ...func(*chime.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListChannelMessages provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListChannelMessages(ctx context.Context, params *chime.ListChannelMessagesInput, optFns ...func(*chime.Options)) (*chime.ListChannelMessagesOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListChannelMessages")
	}

	var r0 *chime.ListChannelMessagesOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *chime.ListChannelMessagesInput, ...func(*chime.Options)) (*chime.ListChannelMessagesOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *chime.ListChannelMessagesInput, ...func(*chime.Options)) *chime.ListChannelMessagesOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*chime.ListChannelMessagesOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *chime.ListChannelMessagesInput, ...func(*chime.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListChannelModerators provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListChannelModerators(ctx context.Context, params *chime.ListChannelModeratorsInput, optFns ...func(*chime.Options)) (*chime.ListChannelModeratorsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListChannelModerators")
	}

	var r0 *chime.ListChannelModeratorsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *chime.ListChannelModeratorsInput, ...func(*chime.Options)) (*chime.ListChannelModeratorsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *chime.ListChannelModeratorsInput, ...func(*chime.Options)) *chime.ListChannelModeratorsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*chime.ListChannelModeratorsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *chime.ListChannelModeratorsInput, ...func(*chime.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListChannels provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListChannels(ctx context.Context, params *chime.ListChannelsInput, optFns ...func(*chime.Options)) (*chime.ListChannelsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListChannels")
	}

	var r0 *chime.ListChannelsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *chime.ListChannelsInput, ...func(*chime.Options)) (*chime.ListChannelsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *chime.ListChannelsInput, ...func(*chime.Options)) *chime.ListChannelsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*chime.ListChannelsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *chime.ListChannelsInput, ...func(*chime.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListChannelsModeratedByAppInstanceUser provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListChannelsModeratedByAppInstanceUser(ctx context.Context, params *chime.ListChannelsModeratedByAppInstanceUserInput, optFns ...func(*chime.Options)) (*chime.ListChannelsModeratedByAppInstanceUserOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListChannelsModeratedByAppInstanceUser")
	}

	var r0 *chime.ListChannelsModeratedByAppInstanceUserOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *chime.ListChannelsModeratedByAppInstanceUserInput, ...func(*chime.Options)) (*chime.ListChannelsModeratedByAppInstanceUserOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *chime.ListChannelsModeratedByAppInstanceUserInput, ...func(*chime.Options)) *chime.ListChannelsModeratedByAppInstanceUserOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*chime.ListChannelsModeratedByAppInstanceUserOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *chime.ListChannelsModeratedByAppInstanceUserInput, ...func(*chime.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListMediaCapturePipelines provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListMediaCapturePipelines(ctx context.Context, params *chime.ListMediaCapturePipelinesInput, optFns ...func(*chime.Options)) (*chime.ListMediaCapturePipelinesOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListMediaCapturePipelines")
	}

	var r0 *chime.ListMediaCapturePipelinesOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *chime.ListMediaCapturePipelinesInput, ...func(*chime.Options)) (*chime.ListMediaCapturePipelinesOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *chime.ListMediaCapturePipelinesInput, ...func(*chime.Options)) *chime.ListMediaCapturePipelinesOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*chime.ListMediaCapturePipelinesOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *chime.ListMediaCapturePipelinesInput, ...func(*chime.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListMeetingTags provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListMeetingTags(ctx context.Context, params *chime.ListMeetingTagsInput, optFns ...func(*chime.Options)) (*chime.ListMeetingTagsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListMeetingTags")
	}

	var r0 *chime.ListMeetingTagsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *chime.ListMeetingTagsInput, ...func(*chime.Options)) (*chime.ListMeetingTagsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *chime.ListMeetingTagsInput, ...func(*chime.Options)) *chime.ListMeetingTagsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*chime.ListMeetingTagsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *chime.ListMeetingTagsInput, ...func(*chime.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListMeetings provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListMeetings(ctx context.Context, params *chime.ListMeetingsInput, optFns ...func(*chime.Options)) (*chime.ListMeetingsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListMeetings")
	}

	var r0 *chime.ListMeetingsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *chime.ListMeetingsInput, ...func(*chime.Options)) (*chime.ListMeetingsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *chime.ListMeetingsInput, ...func(*chime.Options)) *chime.ListMeetingsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*chime.ListMeetingsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *chime.ListMeetingsInput, ...func(*chime.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListPhoneNumberOrders provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListPhoneNumberOrders(ctx context.Context, params *chime.ListPhoneNumberOrdersInput, optFns ...func(*chime.Options)) (*chime.ListPhoneNumberOrdersOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListPhoneNumberOrders")
	}

	var r0 *chime.ListPhoneNumberOrdersOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *chime.ListPhoneNumberOrdersInput, ...func(*chime.Options)) (*chime.ListPhoneNumberOrdersOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *chime.ListPhoneNumberOrdersInput, ...func(*chime.Options)) *chime.ListPhoneNumberOrdersOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*chime.ListPhoneNumberOrdersOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *chime.ListPhoneNumberOrdersInput, ...func(*chime.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListPhoneNumbers provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListPhoneNumbers(ctx context.Context, params *chime.ListPhoneNumbersInput, optFns ...func(*chime.Options)) (*chime.ListPhoneNumbersOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListPhoneNumbers")
	}

	var r0 *chime.ListPhoneNumbersOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *chime.ListPhoneNumbersInput, ...func(*chime.Options)) (*chime.ListPhoneNumbersOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *chime.ListPhoneNumbersInput, ...func(*chime.Options)) *chime.ListPhoneNumbersOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*chime.ListPhoneNumbersOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *chime.ListPhoneNumbersInput, ...func(*chime.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListProxySessions provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListProxySessions(ctx context.Context, params *chime.ListProxySessionsInput, optFns ...func(*chime.Options)) (*chime.ListProxySessionsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListProxySessions")
	}

	var r0 *chime.ListProxySessionsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *chime.ListProxySessionsInput, ...func(*chime.Options)) (*chime.ListProxySessionsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *chime.ListProxySessionsInput, ...func(*chime.Options)) *chime.ListProxySessionsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*chime.ListProxySessionsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *chime.ListProxySessionsInput, ...func(*chime.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListRoomMemberships provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListRoomMemberships(ctx context.Context, params *chime.ListRoomMembershipsInput, optFns ...func(*chime.Options)) (*chime.ListRoomMembershipsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListRoomMemberships")
	}

	var r0 *chime.ListRoomMembershipsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *chime.ListRoomMembershipsInput, ...func(*chime.Options)) (*chime.ListRoomMembershipsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *chime.ListRoomMembershipsInput, ...func(*chime.Options)) *chime.ListRoomMembershipsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*chime.ListRoomMembershipsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *chime.ListRoomMembershipsInput, ...func(*chime.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListRooms provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListRooms(ctx context.Context, params *chime.ListRoomsInput, optFns ...func(*chime.Options)) (*chime.ListRoomsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListRooms")
	}

	var r0 *chime.ListRoomsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *chime.ListRoomsInput, ...func(*chime.Options)) (*chime.ListRoomsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *chime.ListRoomsInput, ...func(*chime.Options)) *chime.ListRoomsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*chime.ListRoomsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *chime.ListRoomsInput, ...func(*chime.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListSipMediaApplications provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListSipMediaApplications(ctx context.Context, params *chime.ListSipMediaApplicationsInput, optFns ...func(*chime.Options)) (*chime.ListSipMediaApplicationsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListSipMediaApplications")
	}

	var r0 *chime.ListSipMediaApplicationsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *chime.ListSipMediaApplicationsInput, ...func(*chime.Options)) (*chime.ListSipMediaApplicationsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *chime.ListSipMediaApplicationsInput, ...func(*chime.Options)) *chime.ListSipMediaApplicationsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*chime.ListSipMediaApplicationsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *chime.ListSipMediaApplicationsInput, ...func(*chime.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListSipRules provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListSipRules(ctx context.Context, params *chime.ListSipRulesInput, optFns ...func(*chime.Options)) (*chime.ListSipRulesOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListSipRules")
	}

	var r0 *chime.ListSipRulesOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *chime.ListSipRulesInput, ...func(*chime.Options)) (*chime.ListSipRulesOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *chime.ListSipRulesInput, ...func(*chime.Options)) *chime.ListSipRulesOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*chime.ListSipRulesOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *chime.ListSipRulesInput, ...func(*chime.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListSupportedPhoneNumberCountries provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListSupportedPhoneNumberCountries(ctx context.Context, params *chime.ListSupportedPhoneNumberCountriesInput, optFns ...func(*chime.Options)) (*chime.ListSupportedPhoneNumberCountriesOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListSupportedPhoneNumberCountries")
	}

	var r0 *chime.ListSupportedPhoneNumberCountriesOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *chime.ListSupportedPhoneNumberCountriesInput, ...func(*chime.Options)) (*chime.ListSupportedPhoneNumberCountriesOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *chime.ListSupportedPhoneNumberCountriesInput, ...func(*chime.Options)) *chime.ListSupportedPhoneNumberCountriesOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*chime.ListSupportedPhoneNumberCountriesOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *chime.ListSupportedPhoneNumberCountriesInput, ...func(*chime.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListTagsForResource provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListTagsForResource(ctx context.Context, params *chime.ListTagsForResourceInput, optFns ...func(*chime.Options)) (*chime.ListTagsForResourceOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListTagsForResource")
	}

	var r0 *chime.ListTagsForResourceOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *chime.ListTagsForResourceInput, ...func(*chime.Options)) (*chime.ListTagsForResourceOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *chime.ListTagsForResourceInput, ...func(*chime.Options)) *chime.ListTagsForResourceOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*chime.ListTagsForResourceOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *chime.ListTagsForResourceInput, ...func(*chime.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListUsers provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListUsers(ctx context.Context, params *chime.ListUsersInput, optFns ...func(*chime.Options)) (*chime.ListUsersOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListUsers")
	}

	var r0 *chime.ListUsersOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *chime.ListUsersInput, ...func(*chime.Options)) (*chime.ListUsersOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *chime.ListUsersInput, ...func(*chime.Options)) *chime.ListUsersOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*chime.ListUsersOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *chime.ListUsersInput, ...func(*chime.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListVoiceConnectorGroups provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListVoiceConnectorGroups(ctx context.Context, params *chime.ListVoiceConnectorGroupsInput, optFns ...func(*chime.Options)) (*chime.ListVoiceConnectorGroupsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListVoiceConnectorGroups")
	}

	var r0 *chime.ListVoiceConnectorGroupsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *chime.ListVoiceConnectorGroupsInput, ...func(*chime.Options)) (*chime.ListVoiceConnectorGroupsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *chime.ListVoiceConnectorGroupsInput, ...func(*chime.Options)) *chime.ListVoiceConnectorGroupsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*chime.ListVoiceConnectorGroupsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *chime.ListVoiceConnectorGroupsInput, ...func(*chime.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListVoiceConnectorTerminationCredentials provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListVoiceConnectorTerminationCredentials(ctx context.Context, params *chime.ListVoiceConnectorTerminationCredentialsInput, optFns ...func(*chime.Options)) (*chime.ListVoiceConnectorTerminationCredentialsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListVoiceConnectorTerminationCredentials")
	}

	var r0 *chime.ListVoiceConnectorTerminationCredentialsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *chime.ListVoiceConnectorTerminationCredentialsInput, ...func(*chime.Options)) (*chime.ListVoiceConnectorTerminationCredentialsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *chime.ListVoiceConnectorTerminationCredentialsInput, ...func(*chime.Options)) *chime.ListVoiceConnectorTerminationCredentialsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*chime.ListVoiceConnectorTerminationCredentialsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *chime.ListVoiceConnectorTerminationCredentialsInput, ...func(*chime.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListVoiceConnectors provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListVoiceConnectors(ctx context.Context, params *chime.ListVoiceConnectorsInput, optFns ...func(*chime.Options)) (*chime.ListVoiceConnectorsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListVoiceConnectors")
	}

	var r0 *chime.ListVoiceConnectorsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *chime.ListVoiceConnectorsInput, ...func(*chime.Options)) (*chime.ListVoiceConnectorsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *chime.ListVoiceConnectorsInput, ...func(*chime.Options)) *chime.ListVoiceConnectorsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*chime.ListVoiceConnectorsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *chime.ListVoiceConnectorsInput, ...func(*chime.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// LogoutUser provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) LogoutUser(ctx context.Context, params *chime.LogoutUserInput, optFns ...func(*chime.Options)) (*chime.LogoutUserOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for LogoutUser")
	}

	var r0 *chime.LogoutUserOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *chime.LogoutUserInput, ...func(*chime.Options)) (*chime.LogoutUserOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *chime.LogoutUserInput, ...func(*chime.Options)) *chime.LogoutUserOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*chime.LogoutUserOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *chime.LogoutUserInput, ...func(*chime.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Options provides a mock function with given fields:
func (_m *IClient) Options() chime.Options {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Options")
	}

	var r0 chime.Options
	if rf, ok := ret.Get(0).(func() chime.Options); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(chime.Options)
	}

	return r0
}

// PutAppInstanceRetentionSettings provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) PutAppInstanceRetentionSettings(ctx context.Context, params *chime.PutAppInstanceRetentionSettingsInput, optFns ...func(*chime.Options)) (*chime.PutAppInstanceRetentionSettingsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for PutAppInstanceRetentionSettings")
	}

	var r0 *chime.PutAppInstanceRetentionSettingsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *chime.PutAppInstanceRetentionSettingsInput, ...func(*chime.Options)) (*chime.PutAppInstanceRetentionSettingsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *chime.PutAppInstanceRetentionSettingsInput, ...func(*chime.Options)) *chime.PutAppInstanceRetentionSettingsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*chime.PutAppInstanceRetentionSettingsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *chime.PutAppInstanceRetentionSettingsInput, ...func(*chime.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PutAppInstanceStreamingConfigurations provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) PutAppInstanceStreamingConfigurations(ctx context.Context, params *chime.PutAppInstanceStreamingConfigurationsInput, optFns ...func(*chime.Options)) (*chime.PutAppInstanceStreamingConfigurationsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for PutAppInstanceStreamingConfigurations")
	}

	var r0 *chime.PutAppInstanceStreamingConfigurationsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *chime.PutAppInstanceStreamingConfigurationsInput, ...func(*chime.Options)) (*chime.PutAppInstanceStreamingConfigurationsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *chime.PutAppInstanceStreamingConfigurationsInput, ...func(*chime.Options)) *chime.PutAppInstanceStreamingConfigurationsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*chime.PutAppInstanceStreamingConfigurationsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *chime.PutAppInstanceStreamingConfigurationsInput, ...func(*chime.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PutEventsConfiguration provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) PutEventsConfiguration(ctx context.Context, params *chime.PutEventsConfigurationInput, optFns ...func(*chime.Options)) (*chime.PutEventsConfigurationOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for PutEventsConfiguration")
	}

	var r0 *chime.PutEventsConfigurationOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *chime.PutEventsConfigurationInput, ...func(*chime.Options)) (*chime.PutEventsConfigurationOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *chime.PutEventsConfigurationInput, ...func(*chime.Options)) *chime.PutEventsConfigurationOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*chime.PutEventsConfigurationOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *chime.PutEventsConfigurationInput, ...func(*chime.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PutRetentionSettings provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) PutRetentionSettings(ctx context.Context, params *chime.PutRetentionSettingsInput, optFns ...func(*chime.Options)) (*chime.PutRetentionSettingsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for PutRetentionSettings")
	}

	var r0 *chime.PutRetentionSettingsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *chime.PutRetentionSettingsInput, ...func(*chime.Options)) (*chime.PutRetentionSettingsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *chime.PutRetentionSettingsInput, ...func(*chime.Options)) *chime.PutRetentionSettingsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*chime.PutRetentionSettingsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *chime.PutRetentionSettingsInput, ...func(*chime.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PutSipMediaApplicationLoggingConfiguration provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) PutSipMediaApplicationLoggingConfiguration(ctx context.Context, params *chime.PutSipMediaApplicationLoggingConfigurationInput, optFns ...func(*chime.Options)) (*chime.PutSipMediaApplicationLoggingConfigurationOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for PutSipMediaApplicationLoggingConfiguration")
	}

	var r0 *chime.PutSipMediaApplicationLoggingConfigurationOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *chime.PutSipMediaApplicationLoggingConfigurationInput, ...func(*chime.Options)) (*chime.PutSipMediaApplicationLoggingConfigurationOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *chime.PutSipMediaApplicationLoggingConfigurationInput, ...func(*chime.Options)) *chime.PutSipMediaApplicationLoggingConfigurationOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*chime.PutSipMediaApplicationLoggingConfigurationOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *chime.PutSipMediaApplicationLoggingConfigurationInput, ...func(*chime.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PutVoiceConnectorEmergencyCallingConfiguration provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) PutVoiceConnectorEmergencyCallingConfiguration(ctx context.Context, params *chime.PutVoiceConnectorEmergencyCallingConfigurationInput, optFns ...func(*chime.Options)) (*chime.PutVoiceConnectorEmergencyCallingConfigurationOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for PutVoiceConnectorEmergencyCallingConfiguration")
	}

	var r0 *chime.PutVoiceConnectorEmergencyCallingConfigurationOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *chime.PutVoiceConnectorEmergencyCallingConfigurationInput, ...func(*chime.Options)) (*chime.PutVoiceConnectorEmergencyCallingConfigurationOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *chime.PutVoiceConnectorEmergencyCallingConfigurationInput, ...func(*chime.Options)) *chime.PutVoiceConnectorEmergencyCallingConfigurationOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*chime.PutVoiceConnectorEmergencyCallingConfigurationOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *chime.PutVoiceConnectorEmergencyCallingConfigurationInput, ...func(*chime.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PutVoiceConnectorLoggingConfiguration provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) PutVoiceConnectorLoggingConfiguration(ctx context.Context, params *chime.PutVoiceConnectorLoggingConfigurationInput, optFns ...func(*chime.Options)) (*chime.PutVoiceConnectorLoggingConfigurationOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for PutVoiceConnectorLoggingConfiguration")
	}

	var r0 *chime.PutVoiceConnectorLoggingConfigurationOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *chime.PutVoiceConnectorLoggingConfigurationInput, ...func(*chime.Options)) (*chime.PutVoiceConnectorLoggingConfigurationOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *chime.PutVoiceConnectorLoggingConfigurationInput, ...func(*chime.Options)) *chime.PutVoiceConnectorLoggingConfigurationOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*chime.PutVoiceConnectorLoggingConfigurationOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *chime.PutVoiceConnectorLoggingConfigurationInput, ...func(*chime.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PutVoiceConnectorOrigination provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) PutVoiceConnectorOrigination(ctx context.Context, params *chime.PutVoiceConnectorOriginationInput, optFns ...func(*chime.Options)) (*chime.PutVoiceConnectorOriginationOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for PutVoiceConnectorOrigination")
	}

	var r0 *chime.PutVoiceConnectorOriginationOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *chime.PutVoiceConnectorOriginationInput, ...func(*chime.Options)) (*chime.PutVoiceConnectorOriginationOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *chime.PutVoiceConnectorOriginationInput, ...func(*chime.Options)) *chime.PutVoiceConnectorOriginationOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*chime.PutVoiceConnectorOriginationOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *chime.PutVoiceConnectorOriginationInput, ...func(*chime.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PutVoiceConnectorProxy provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) PutVoiceConnectorProxy(ctx context.Context, params *chime.PutVoiceConnectorProxyInput, optFns ...func(*chime.Options)) (*chime.PutVoiceConnectorProxyOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for PutVoiceConnectorProxy")
	}

	var r0 *chime.PutVoiceConnectorProxyOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *chime.PutVoiceConnectorProxyInput, ...func(*chime.Options)) (*chime.PutVoiceConnectorProxyOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *chime.PutVoiceConnectorProxyInput, ...func(*chime.Options)) *chime.PutVoiceConnectorProxyOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*chime.PutVoiceConnectorProxyOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *chime.PutVoiceConnectorProxyInput, ...func(*chime.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PutVoiceConnectorStreamingConfiguration provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) PutVoiceConnectorStreamingConfiguration(ctx context.Context, params *chime.PutVoiceConnectorStreamingConfigurationInput, optFns ...func(*chime.Options)) (*chime.PutVoiceConnectorStreamingConfigurationOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for PutVoiceConnectorStreamingConfiguration")
	}

	var r0 *chime.PutVoiceConnectorStreamingConfigurationOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *chime.PutVoiceConnectorStreamingConfigurationInput, ...func(*chime.Options)) (*chime.PutVoiceConnectorStreamingConfigurationOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *chime.PutVoiceConnectorStreamingConfigurationInput, ...func(*chime.Options)) *chime.PutVoiceConnectorStreamingConfigurationOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*chime.PutVoiceConnectorStreamingConfigurationOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *chime.PutVoiceConnectorStreamingConfigurationInput, ...func(*chime.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PutVoiceConnectorTermination provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) PutVoiceConnectorTermination(ctx context.Context, params *chime.PutVoiceConnectorTerminationInput, optFns ...func(*chime.Options)) (*chime.PutVoiceConnectorTerminationOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for PutVoiceConnectorTermination")
	}

	var r0 *chime.PutVoiceConnectorTerminationOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *chime.PutVoiceConnectorTerminationInput, ...func(*chime.Options)) (*chime.PutVoiceConnectorTerminationOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *chime.PutVoiceConnectorTerminationInput, ...func(*chime.Options)) *chime.PutVoiceConnectorTerminationOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*chime.PutVoiceConnectorTerminationOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *chime.PutVoiceConnectorTerminationInput, ...func(*chime.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PutVoiceConnectorTerminationCredentials provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) PutVoiceConnectorTerminationCredentials(ctx context.Context, params *chime.PutVoiceConnectorTerminationCredentialsInput, optFns ...func(*chime.Options)) (*chime.PutVoiceConnectorTerminationCredentialsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for PutVoiceConnectorTerminationCredentials")
	}

	var r0 *chime.PutVoiceConnectorTerminationCredentialsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *chime.PutVoiceConnectorTerminationCredentialsInput, ...func(*chime.Options)) (*chime.PutVoiceConnectorTerminationCredentialsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *chime.PutVoiceConnectorTerminationCredentialsInput, ...func(*chime.Options)) *chime.PutVoiceConnectorTerminationCredentialsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*chime.PutVoiceConnectorTerminationCredentialsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *chime.PutVoiceConnectorTerminationCredentialsInput, ...func(*chime.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RedactChannelMessage provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) RedactChannelMessage(ctx context.Context, params *chime.RedactChannelMessageInput, optFns ...func(*chime.Options)) (*chime.RedactChannelMessageOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for RedactChannelMessage")
	}

	var r0 *chime.RedactChannelMessageOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *chime.RedactChannelMessageInput, ...func(*chime.Options)) (*chime.RedactChannelMessageOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *chime.RedactChannelMessageInput, ...func(*chime.Options)) *chime.RedactChannelMessageOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*chime.RedactChannelMessageOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *chime.RedactChannelMessageInput, ...func(*chime.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RedactConversationMessage provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) RedactConversationMessage(ctx context.Context, params *chime.RedactConversationMessageInput, optFns ...func(*chime.Options)) (*chime.RedactConversationMessageOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for RedactConversationMessage")
	}

	var r0 *chime.RedactConversationMessageOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *chime.RedactConversationMessageInput, ...func(*chime.Options)) (*chime.RedactConversationMessageOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *chime.RedactConversationMessageInput, ...func(*chime.Options)) *chime.RedactConversationMessageOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*chime.RedactConversationMessageOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *chime.RedactConversationMessageInput, ...func(*chime.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RedactRoomMessage provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) RedactRoomMessage(ctx context.Context, params *chime.RedactRoomMessageInput, optFns ...func(*chime.Options)) (*chime.RedactRoomMessageOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for RedactRoomMessage")
	}

	var r0 *chime.RedactRoomMessageOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *chime.RedactRoomMessageInput, ...func(*chime.Options)) (*chime.RedactRoomMessageOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *chime.RedactRoomMessageInput, ...func(*chime.Options)) *chime.RedactRoomMessageOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*chime.RedactRoomMessageOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *chime.RedactRoomMessageInput, ...func(*chime.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RegenerateSecurityToken provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) RegenerateSecurityToken(ctx context.Context, params *chime.RegenerateSecurityTokenInput, optFns ...func(*chime.Options)) (*chime.RegenerateSecurityTokenOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for RegenerateSecurityToken")
	}

	var r0 *chime.RegenerateSecurityTokenOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *chime.RegenerateSecurityTokenInput, ...func(*chime.Options)) (*chime.RegenerateSecurityTokenOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *chime.RegenerateSecurityTokenInput, ...func(*chime.Options)) *chime.RegenerateSecurityTokenOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*chime.RegenerateSecurityTokenOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *chime.RegenerateSecurityTokenInput, ...func(*chime.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ResetPersonalPIN provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ResetPersonalPIN(ctx context.Context, params *chime.ResetPersonalPINInput, optFns ...func(*chime.Options)) (*chime.ResetPersonalPINOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ResetPersonalPIN")
	}

	var r0 *chime.ResetPersonalPINOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *chime.ResetPersonalPINInput, ...func(*chime.Options)) (*chime.ResetPersonalPINOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *chime.ResetPersonalPINInput, ...func(*chime.Options)) *chime.ResetPersonalPINOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*chime.ResetPersonalPINOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *chime.ResetPersonalPINInput, ...func(*chime.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RestorePhoneNumber provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) RestorePhoneNumber(ctx context.Context, params *chime.RestorePhoneNumberInput, optFns ...func(*chime.Options)) (*chime.RestorePhoneNumberOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for RestorePhoneNumber")
	}

	var r0 *chime.RestorePhoneNumberOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *chime.RestorePhoneNumberInput, ...func(*chime.Options)) (*chime.RestorePhoneNumberOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *chime.RestorePhoneNumberInput, ...func(*chime.Options)) *chime.RestorePhoneNumberOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*chime.RestorePhoneNumberOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *chime.RestorePhoneNumberInput, ...func(*chime.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SearchAvailablePhoneNumbers provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) SearchAvailablePhoneNumbers(ctx context.Context, params *chime.SearchAvailablePhoneNumbersInput, optFns ...func(*chime.Options)) (*chime.SearchAvailablePhoneNumbersOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for SearchAvailablePhoneNumbers")
	}

	var r0 *chime.SearchAvailablePhoneNumbersOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *chime.SearchAvailablePhoneNumbersInput, ...func(*chime.Options)) (*chime.SearchAvailablePhoneNumbersOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *chime.SearchAvailablePhoneNumbersInput, ...func(*chime.Options)) *chime.SearchAvailablePhoneNumbersOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*chime.SearchAvailablePhoneNumbersOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *chime.SearchAvailablePhoneNumbersInput, ...func(*chime.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SendChannelMessage provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) SendChannelMessage(ctx context.Context, params *chime.SendChannelMessageInput, optFns ...func(*chime.Options)) (*chime.SendChannelMessageOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for SendChannelMessage")
	}

	var r0 *chime.SendChannelMessageOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *chime.SendChannelMessageInput, ...func(*chime.Options)) (*chime.SendChannelMessageOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *chime.SendChannelMessageInput, ...func(*chime.Options)) *chime.SendChannelMessageOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*chime.SendChannelMessageOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *chime.SendChannelMessageInput, ...func(*chime.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// StartMeetingTranscription provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) StartMeetingTranscription(ctx context.Context, params *chime.StartMeetingTranscriptionInput, optFns ...func(*chime.Options)) (*chime.StartMeetingTranscriptionOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for StartMeetingTranscription")
	}

	var r0 *chime.StartMeetingTranscriptionOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *chime.StartMeetingTranscriptionInput, ...func(*chime.Options)) (*chime.StartMeetingTranscriptionOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *chime.StartMeetingTranscriptionInput, ...func(*chime.Options)) *chime.StartMeetingTranscriptionOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*chime.StartMeetingTranscriptionOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *chime.StartMeetingTranscriptionInput, ...func(*chime.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// StopMeetingTranscription provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) StopMeetingTranscription(ctx context.Context, params *chime.StopMeetingTranscriptionInput, optFns ...func(*chime.Options)) (*chime.StopMeetingTranscriptionOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for StopMeetingTranscription")
	}

	var r0 *chime.StopMeetingTranscriptionOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *chime.StopMeetingTranscriptionInput, ...func(*chime.Options)) (*chime.StopMeetingTranscriptionOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *chime.StopMeetingTranscriptionInput, ...func(*chime.Options)) *chime.StopMeetingTranscriptionOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*chime.StopMeetingTranscriptionOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *chime.StopMeetingTranscriptionInput, ...func(*chime.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// TagAttendee provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) TagAttendee(ctx context.Context, params *chime.TagAttendeeInput, optFns ...func(*chime.Options)) (*chime.TagAttendeeOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for TagAttendee")
	}

	var r0 *chime.TagAttendeeOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *chime.TagAttendeeInput, ...func(*chime.Options)) (*chime.TagAttendeeOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *chime.TagAttendeeInput, ...func(*chime.Options)) *chime.TagAttendeeOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*chime.TagAttendeeOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *chime.TagAttendeeInput, ...func(*chime.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// TagMeeting provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) TagMeeting(ctx context.Context, params *chime.TagMeetingInput, optFns ...func(*chime.Options)) (*chime.TagMeetingOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for TagMeeting")
	}

	var r0 *chime.TagMeetingOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *chime.TagMeetingInput, ...func(*chime.Options)) (*chime.TagMeetingOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *chime.TagMeetingInput, ...func(*chime.Options)) *chime.TagMeetingOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*chime.TagMeetingOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *chime.TagMeetingInput, ...func(*chime.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// TagResource provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) TagResource(ctx context.Context, params *chime.TagResourceInput, optFns ...func(*chime.Options)) (*chime.TagResourceOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for TagResource")
	}

	var r0 *chime.TagResourceOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *chime.TagResourceInput, ...func(*chime.Options)) (*chime.TagResourceOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *chime.TagResourceInput, ...func(*chime.Options)) *chime.TagResourceOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*chime.TagResourceOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *chime.TagResourceInput, ...func(*chime.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UntagAttendee provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UntagAttendee(ctx context.Context, params *chime.UntagAttendeeInput, optFns ...func(*chime.Options)) (*chime.UntagAttendeeOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UntagAttendee")
	}

	var r0 *chime.UntagAttendeeOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *chime.UntagAttendeeInput, ...func(*chime.Options)) (*chime.UntagAttendeeOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *chime.UntagAttendeeInput, ...func(*chime.Options)) *chime.UntagAttendeeOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*chime.UntagAttendeeOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *chime.UntagAttendeeInput, ...func(*chime.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UntagMeeting provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UntagMeeting(ctx context.Context, params *chime.UntagMeetingInput, optFns ...func(*chime.Options)) (*chime.UntagMeetingOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UntagMeeting")
	}

	var r0 *chime.UntagMeetingOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *chime.UntagMeetingInput, ...func(*chime.Options)) (*chime.UntagMeetingOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *chime.UntagMeetingInput, ...func(*chime.Options)) *chime.UntagMeetingOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*chime.UntagMeetingOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *chime.UntagMeetingInput, ...func(*chime.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UntagResource provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UntagResource(ctx context.Context, params *chime.UntagResourceInput, optFns ...func(*chime.Options)) (*chime.UntagResourceOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UntagResource")
	}

	var r0 *chime.UntagResourceOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *chime.UntagResourceInput, ...func(*chime.Options)) (*chime.UntagResourceOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *chime.UntagResourceInput, ...func(*chime.Options)) *chime.UntagResourceOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*chime.UntagResourceOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *chime.UntagResourceInput, ...func(*chime.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateAccount provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UpdateAccount(ctx context.Context, params *chime.UpdateAccountInput, optFns ...func(*chime.Options)) (*chime.UpdateAccountOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateAccount")
	}

	var r0 *chime.UpdateAccountOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *chime.UpdateAccountInput, ...func(*chime.Options)) (*chime.UpdateAccountOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *chime.UpdateAccountInput, ...func(*chime.Options)) *chime.UpdateAccountOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*chime.UpdateAccountOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *chime.UpdateAccountInput, ...func(*chime.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateAccountSettings provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UpdateAccountSettings(ctx context.Context, params *chime.UpdateAccountSettingsInput, optFns ...func(*chime.Options)) (*chime.UpdateAccountSettingsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateAccountSettings")
	}

	var r0 *chime.UpdateAccountSettingsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *chime.UpdateAccountSettingsInput, ...func(*chime.Options)) (*chime.UpdateAccountSettingsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *chime.UpdateAccountSettingsInput, ...func(*chime.Options)) *chime.UpdateAccountSettingsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*chime.UpdateAccountSettingsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *chime.UpdateAccountSettingsInput, ...func(*chime.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateAppInstance provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UpdateAppInstance(ctx context.Context, params *chime.UpdateAppInstanceInput, optFns ...func(*chime.Options)) (*chime.UpdateAppInstanceOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateAppInstance")
	}

	var r0 *chime.UpdateAppInstanceOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *chime.UpdateAppInstanceInput, ...func(*chime.Options)) (*chime.UpdateAppInstanceOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *chime.UpdateAppInstanceInput, ...func(*chime.Options)) *chime.UpdateAppInstanceOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*chime.UpdateAppInstanceOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *chime.UpdateAppInstanceInput, ...func(*chime.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateAppInstanceUser provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UpdateAppInstanceUser(ctx context.Context, params *chime.UpdateAppInstanceUserInput, optFns ...func(*chime.Options)) (*chime.UpdateAppInstanceUserOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateAppInstanceUser")
	}

	var r0 *chime.UpdateAppInstanceUserOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *chime.UpdateAppInstanceUserInput, ...func(*chime.Options)) (*chime.UpdateAppInstanceUserOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *chime.UpdateAppInstanceUserInput, ...func(*chime.Options)) *chime.UpdateAppInstanceUserOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*chime.UpdateAppInstanceUserOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *chime.UpdateAppInstanceUserInput, ...func(*chime.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateBot provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UpdateBot(ctx context.Context, params *chime.UpdateBotInput, optFns ...func(*chime.Options)) (*chime.UpdateBotOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateBot")
	}

	var r0 *chime.UpdateBotOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *chime.UpdateBotInput, ...func(*chime.Options)) (*chime.UpdateBotOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *chime.UpdateBotInput, ...func(*chime.Options)) *chime.UpdateBotOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*chime.UpdateBotOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *chime.UpdateBotInput, ...func(*chime.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateChannel provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UpdateChannel(ctx context.Context, params *chime.UpdateChannelInput, optFns ...func(*chime.Options)) (*chime.UpdateChannelOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateChannel")
	}

	var r0 *chime.UpdateChannelOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *chime.UpdateChannelInput, ...func(*chime.Options)) (*chime.UpdateChannelOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *chime.UpdateChannelInput, ...func(*chime.Options)) *chime.UpdateChannelOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*chime.UpdateChannelOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *chime.UpdateChannelInput, ...func(*chime.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateChannelMessage provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UpdateChannelMessage(ctx context.Context, params *chime.UpdateChannelMessageInput, optFns ...func(*chime.Options)) (*chime.UpdateChannelMessageOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateChannelMessage")
	}

	var r0 *chime.UpdateChannelMessageOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *chime.UpdateChannelMessageInput, ...func(*chime.Options)) (*chime.UpdateChannelMessageOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *chime.UpdateChannelMessageInput, ...func(*chime.Options)) *chime.UpdateChannelMessageOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*chime.UpdateChannelMessageOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *chime.UpdateChannelMessageInput, ...func(*chime.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateChannelReadMarker provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UpdateChannelReadMarker(ctx context.Context, params *chime.UpdateChannelReadMarkerInput, optFns ...func(*chime.Options)) (*chime.UpdateChannelReadMarkerOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateChannelReadMarker")
	}

	var r0 *chime.UpdateChannelReadMarkerOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *chime.UpdateChannelReadMarkerInput, ...func(*chime.Options)) (*chime.UpdateChannelReadMarkerOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *chime.UpdateChannelReadMarkerInput, ...func(*chime.Options)) *chime.UpdateChannelReadMarkerOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*chime.UpdateChannelReadMarkerOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *chime.UpdateChannelReadMarkerInput, ...func(*chime.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateGlobalSettings provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UpdateGlobalSettings(ctx context.Context, params *chime.UpdateGlobalSettingsInput, optFns ...func(*chime.Options)) (*chime.UpdateGlobalSettingsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateGlobalSettings")
	}

	var r0 *chime.UpdateGlobalSettingsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *chime.UpdateGlobalSettingsInput, ...func(*chime.Options)) (*chime.UpdateGlobalSettingsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *chime.UpdateGlobalSettingsInput, ...func(*chime.Options)) *chime.UpdateGlobalSettingsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*chime.UpdateGlobalSettingsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *chime.UpdateGlobalSettingsInput, ...func(*chime.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdatePhoneNumber provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UpdatePhoneNumber(ctx context.Context, params *chime.UpdatePhoneNumberInput, optFns ...func(*chime.Options)) (*chime.UpdatePhoneNumberOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdatePhoneNumber")
	}

	var r0 *chime.UpdatePhoneNumberOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *chime.UpdatePhoneNumberInput, ...func(*chime.Options)) (*chime.UpdatePhoneNumberOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *chime.UpdatePhoneNumberInput, ...func(*chime.Options)) *chime.UpdatePhoneNumberOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*chime.UpdatePhoneNumberOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *chime.UpdatePhoneNumberInput, ...func(*chime.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdatePhoneNumberSettings provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UpdatePhoneNumberSettings(ctx context.Context, params *chime.UpdatePhoneNumberSettingsInput, optFns ...func(*chime.Options)) (*chime.UpdatePhoneNumberSettingsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdatePhoneNumberSettings")
	}

	var r0 *chime.UpdatePhoneNumberSettingsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *chime.UpdatePhoneNumberSettingsInput, ...func(*chime.Options)) (*chime.UpdatePhoneNumberSettingsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *chime.UpdatePhoneNumberSettingsInput, ...func(*chime.Options)) *chime.UpdatePhoneNumberSettingsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*chime.UpdatePhoneNumberSettingsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *chime.UpdatePhoneNumberSettingsInput, ...func(*chime.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateProxySession provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UpdateProxySession(ctx context.Context, params *chime.UpdateProxySessionInput, optFns ...func(*chime.Options)) (*chime.UpdateProxySessionOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateProxySession")
	}

	var r0 *chime.UpdateProxySessionOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *chime.UpdateProxySessionInput, ...func(*chime.Options)) (*chime.UpdateProxySessionOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *chime.UpdateProxySessionInput, ...func(*chime.Options)) *chime.UpdateProxySessionOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*chime.UpdateProxySessionOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *chime.UpdateProxySessionInput, ...func(*chime.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateRoom provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UpdateRoom(ctx context.Context, params *chime.UpdateRoomInput, optFns ...func(*chime.Options)) (*chime.UpdateRoomOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateRoom")
	}

	var r0 *chime.UpdateRoomOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *chime.UpdateRoomInput, ...func(*chime.Options)) (*chime.UpdateRoomOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *chime.UpdateRoomInput, ...func(*chime.Options)) *chime.UpdateRoomOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*chime.UpdateRoomOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *chime.UpdateRoomInput, ...func(*chime.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateRoomMembership provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UpdateRoomMembership(ctx context.Context, params *chime.UpdateRoomMembershipInput, optFns ...func(*chime.Options)) (*chime.UpdateRoomMembershipOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateRoomMembership")
	}

	var r0 *chime.UpdateRoomMembershipOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *chime.UpdateRoomMembershipInput, ...func(*chime.Options)) (*chime.UpdateRoomMembershipOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *chime.UpdateRoomMembershipInput, ...func(*chime.Options)) *chime.UpdateRoomMembershipOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*chime.UpdateRoomMembershipOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *chime.UpdateRoomMembershipInput, ...func(*chime.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateSipMediaApplication provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UpdateSipMediaApplication(ctx context.Context, params *chime.UpdateSipMediaApplicationInput, optFns ...func(*chime.Options)) (*chime.UpdateSipMediaApplicationOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateSipMediaApplication")
	}

	var r0 *chime.UpdateSipMediaApplicationOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *chime.UpdateSipMediaApplicationInput, ...func(*chime.Options)) (*chime.UpdateSipMediaApplicationOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *chime.UpdateSipMediaApplicationInput, ...func(*chime.Options)) *chime.UpdateSipMediaApplicationOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*chime.UpdateSipMediaApplicationOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *chime.UpdateSipMediaApplicationInput, ...func(*chime.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateSipMediaApplicationCall provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UpdateSipMediaApplicationCall(ctx context.Context, params *chime.UpdateSipMediaApplicationCallInput, optFns ...func(*chime.Options)) (*chime.UpdateSipMediaApplicationCallOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateSipMediaApplicationCall")
	}

	var r0 *chime.UpdateSipMediaApplicationCallOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *chime.UpdateSipMediaApplicationCallInput, ...func(*chime.Options)) (*chime.UpdateSipMediaApplicationCallOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *chime.UpdateSipMediaApplicationCallInput, ...func(*chime.Options)) *chime.UpdateSipMediaApplicationCallOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*chime.UpdateSipMediaApplicationCallOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *chime.UpdateSipMediaApplicationCallInput, ...func(*chime.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateSipRule provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UpdateSipRule(ctx context.Context, params *chime.UpdateSipRuleInput, optFns ...func(*chime.Options)) (*chime.UpdateSipRuleOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateSipRule")
	}

	var r0 *chime.UpdateSipRuleOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *chime.UpdateSipRuleInput, ...func(*chime.Options)) (*chime.UpdateSipRuleOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *chime.UpdateSipRuleInput, ...func(*chime.Options)) *chime.UpdateSipRuleOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*chime.UpdateSipRuleOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *chime.UpdateSipRuleInput, ...func(*chime.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateUser provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UpdateUser(ctx context.Context, params *chime.UpdateUserInput, optFns ...func(*chime.Options)) (*chime.UpdateUserOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateUser")
	}

	var r0 *chime.UpdateUserOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *chime.UpdateUserInput, ...func(*chime.Options)) (*chime.UpdateUserOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *chime.UpdateUserInput, ...func(*chime.Options)) *chime.UpdateUserOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*chime.UpdateUserOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *chime.UpdateUserInput, ...func(*chime.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateUserSettings provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UpdateUserSettings(ctx context.Context, params *chime.UpdateUserSettingsInput, optFns ...func(*chime.Options)) (*chime.UpdateUserSettingsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateUserSettings")
	}

	var r0 *chime.UpdateUserSettingsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *chime.UpdateUserSettingsInput, ...func(*chime.Options)) (*chime.UpdateUserSettingsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *chime.UpdateUserSettingsInput, ...func(*chime.Options)) *chime.UpdateUserSettingsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*chime.UpdateUserSettingsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *chime.UpdateUserSettingsInput, ...func(*chime.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateVoiceConnector provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UpdateVoiceConnector(ctx context.Context, params *chime.UpdateVoiceConnectorInput, optFns ...func(*chime.Options)) (*chime.UpdateVoiceConnectorOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateVoiceConnector")
	}

	var r0 *chime.UpdateVoiceConnectorOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *chime.UpdateVoiceConnectorInput, ...func(*chime.Options)) (*chime.UpdateVoiceConnectorOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *chime.UpdateVoiceConnectorInput, ...func(*chime.Options)) *chime.UpdateVoiceConnectorOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*chime.UpdateVoiceConnectorOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *chime.UpdateVoiceConnectorInput, ...func(*chime.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateVoiceConnectorGroup provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UpdateVoiceConnectorGroup(ctx context.Context, params *chime.UpdateVoiceConnectorGroupInput, optFns ...func(*chime.Options)) (*chime.UpdateVoiceConnectorGroupOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateVoiceConnectorGroup")
	}

	var r0 *chime.UpdateVoiceConnectorGroupOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *chime.UpdateVoiceConnectorGroupInput, ...func(*chime.Options)) (*chime.UpdateVoiceConnectorGroupOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *chime.UpdateVoiceConnectorGroupInput, ...func(*chime.Options)) *chime.UpdateVoiceConnectorGroupOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*chime.UpdateVoiceConnectorGroupOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *chime.UpdateVoiceConnectorGroupInput, ...func(*chime.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ValidateE911Address provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ValidateE911Address(ctx context.Context, params *chime.ValidateE911AddressInput, optFns ...func(*chime.Options)) (*chime.ValidateE911AddressOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ValidateE911Address")
	}

	var r0 *chime.ValidateE911AddressOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *chime.ValidateE911AddressInput, ...func(*chime.Options)) (*chime.ValidateE911AddressOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *chime.ValidateE911AddressInput, ...func(*chime.Options)) *chime.ValidateE911AddressOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*chime.ValidateE911AddressOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *chime.ValidateE911AddressInput, ...func(*chime.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewIClient creates a new instance of IClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewIClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *IClient {
	mock := &IClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
