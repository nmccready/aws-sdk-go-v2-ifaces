// Code generated by mockery v2.53.4. DO NOT EDIT.

package mocks

import (
	chime "github.com/aws/aws-sdk-go-v2/service/chime"

	context "context"

	mock "github.com/stretchr/testify/mock"
)

// IClient is an autogenerated mock type for the IClient type
type IClient struct {
	mock.Mock
}

// AssociatePhoneNumberWithUser provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) AssociatePhoneNumberWithUser(ctx context.Context, params *chime.AssociatePhoneNumberWithUserInput, optFns ...func(*chime.Options)) (*chime.AssociatePhoneNumberWithUserOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for AssociatePhoneNumberWithUser")
	}

	var r0 *chime.AssociatePhoneNumberWithUserOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *chime.AssociatePhoneNumberWithUserInput, ...func(*chime.Options)) (*chime.AssociatePhoneNumberWithUserOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *chime.AssociatePhoneNumberWithUserInput, ...func(*chime.Options)) *chime.AssociatePhoneNumberWithUserOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*chime.AssociatePhoneNumberWithUserOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *chime.AssociatePhoneNumberWithUserInput, ...func(*chime.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AssociateSigninDelegateGroupsWithAccount provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) AssociateSigninDelegateGroupsWithAccount(ctx context.Context, params *chime.AssociateSigninDelegateGroupsWithAccountInput, optFns ...func(*chime.Options)) (*chime.AssociateSigninDelegateGroupsWithAccountOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for AssociateSigninDelegateGroupsWithAccount")
	}

	var r0 *chime.AssociateSigninDelegateGroupsWithAccountOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *chime.AssociateSigninDelegateGroupsWithAccountInput, ...func(*chime.Options)) (*chime.AssociateSigninDelegateGroupsWithAccountOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *chime.AssociateSigninDelegateGroupsWithAccountInput, ...func(*chime.Options)) *chime.AssociateSigninDelegateGroupsWithAccountOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*chime.AssociateSigninDelegateGroupsWithAccountOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *chime.AssociateSigninDelegateGroupsWithAccountInput, ...func(*chime.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// BatchCreateRoomMembership provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) BatchCreateRoomMembership(ctx context.Context, params *chime.BatchCreateRoomMembershipInput, optFns ...func(*chime.Options)) (*chime.BatchCreateRoomMembershipOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for BatchCreateRoomMembership")
	}

	var r0 *chime.BatchCreateRoomMembershipOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *chime.BatchCreateRoomMembershipInput, ...func(*chime.Options)) (*chime.BatchCreateRoomMembershipOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *chime.BatchCreateRoomMembershipInput, ...func(*chime.Options)) *chime.BatchCreateRoomMembershipOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*chime.BatchCreateRoomMembershipOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *chime.BatchCreateRoomMembershipInput, ...func(*chime.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// BatchDeletePhoneNumber provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) BatchDeletePhoneNumber(ctx context.Context, params *chime.BatchDeletePhoneNumberInput, optFns ...func(*chime.Options)) (*chime.BatchDeletePhoneNumberOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for BatchDeletePhoneNumber")
	}

	var r0 *chime.BatchDeletePhoneNumberOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *chime.BatchDeletePhoneNumberInput, ...func(*chime.Options)) (*chime.BatchDeletePhoneNumberOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *chime.BatchDeletePhoneNumberInput, ...func(*chime.Options)) *chime.BatchDeletePhoneNumberOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*chime.BatchDeletePhoneNumberOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *chime.BatchDeletePhoneNumberInput, ...func(*chime.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// BatchSuspendUser provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) BatchSuspendUser(ctx context.Context, params *chime.BatchSuspendUserInput, optFns ...func(*chime.Options)) (*chime.BatchSuspendUserOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for BatchSuspendUser")
	}

	var r0 *chime.BatchSuspendUserOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *chime.BatchSuspendUserInput, ...func(*chime.Options)) (*chime.BatchSuspendUserOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *chime.BatchSuspendUserInput, ...func(*chime.Options)) *chime.BatchSuspendUserOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*chime.BatchSuspendUserOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *chime.BatchSuspendUserInput, ...func(*chime.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// BatchUnsuspendUser provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) BatchUnsuspendUser(ctx context.Context, params *chime.BatchUnsuspendUserInput, optFns ...func(*chime.Options)) (*chime.BatchUnsuspendUserOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for BatchUnsuspendUser")
	}

	var r0 *chime.BatchUnsuspendUserOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *chime.BatchUnsuspendUserInput, ...func(*chime.Options)) (*chime.BatchUnsuspendUserOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *chime.BatchUnsuspendUserInput, ...func(*chime.Options)) *chime.BatchUnsuspendUserOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*chime.BatchUnsuspendUserOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *chime.BatchUnsuspendUserInput, ...func(*chime.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// BatchUpdatePhoneNumber provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) BatchUpdatePhoneNumber(ctx context.Context, params *chime.BatchUpdatePhoneNumberInput, optFns ...func(*chime.Options)) (*chime.BatchUpdatePhoneNumberOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for BatchUpdatePhoneNumber")
	}

	var r0 *chime.BatchUpdatePhoneNumberOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *chime.BatchUpdatePhoneNumberInput, ...func(*chime.Options)) (*chime.BatchUpdatePhoneNumberOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *chime.BatchUpdatePhoneNumberInput, ...func(*chime.Options)) *chime.BatchUpdatePhoneNumberOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*chime.BatchUpdatePhoneNumberOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *chime.BatchUpdatePhoneNumberInput, ...func(*chime.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// BatchUpdateUser provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) BatchUpdateUser(ctx context.Context, params *chime.BatchUpdateUserInput, optFns ...func(*chime.Options)) (*chime.BatchUpdateUserOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for BatchUpdateUser")
	}

	var r0 *chime.BatchUpdateUserOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *chime.BatchUpdateUserInput, ...func(*chime.Options)) (*chime.BatchUpdateUserOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *chime.BatchUpdateUserInput, ...func(*chime.Options)) *chime.BatchUpdateUserOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*chime.BatchUpdateUserOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *chime.BatchUpdateUserInput, ...func(*chime.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateAccount provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CreateAccount(ctx context.Context, params *chime.CreateAccountInput, optFns ...func(*chime.Options)) (*chime.CreateAccountOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateAccount")
	}

	var r0 *chime.CreateAccountOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *chime.CreateAccountInput, ...func(*chime.Options)) (*chime.CreateAccountOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *chime.CreateAccountInput, ...func(*chime.Options)) *chime.CreateAccountOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*chime.CreateAccountOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *chime.CreateAccountInput, ...func(*chime.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateBot provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CreateBot(ctx context.Context, params *chime.CreateBotInput, optFns ...func(*chime.Options)) (*chime.CreateBotOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateBot")
	}

	var r0 *chime.CreateBotOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *chime.CreateBotInput, ...func(*chime.Options)) (*chime.CreateBotOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *chime.CreateBotInput, ...func(*chime.Options)) *chime.CreateBotOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*chime.CreateBotOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *chime.CreateBotInput, ...func(*chime.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateMeetingDialOut provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CreateMeetingDialOut(ctx context.Context, params *chime.CreateMeetingDialOutInput, optFns ...func(*chime.Options)) (*chime.CreateMeetingDialOutOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateMeetingDialOut")
	}

	var r0 *chime.CreateMeetingDialOutOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *chime.CreateMeetingDialOutInput, ...func(*chime.Options)) (*chime.CreateMeetingDialOutOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *chime.CreateMeetingDialOutInput, ...func(*chime.Options)) *chime.CreateMeetingDialOutOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*chime.CreateMeetingDialOutOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *chime.CreateMeetingDialOutInput, ...func(*chime.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreatePhoneNumberOrder provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CreatePhoneNumberOrder(ctx context.Context, params *chime.CreatePhoneNumberOrderInput, optFns ...func(*chime.Options)) (*chime.CreatePhoneNumberOrderOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreatePhoneNumberOrder")
	}

	var r0 *chime.CreatePhoneNumberOrderOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *chime.CreatePhoneNumberOrderInput, ...func(*chime.Options)) (*chime.CreatePhoneNumberOrderOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *chime.CreatePhoneNumberOrderInput, ...func(*chime.Options)) *chime.CreatePhoneNumberOrderOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*chime.CreatePhoneNumberOrderOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *chime.CreatePhoneNumberOrderInput, ...func(*chime.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateRoom provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CreateRoom(ctx context.Context, params *chime.CreateRoomInput, optFns ...func(*chime.Options)) (*chime.CreateRoomOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateRoom")
	}

	var r0 *chime.CreateRoomOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *chime.CreateRoomInput, ...func(*chime.Options)) (*chime.CreateRoomOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *chime.CreateRoomInput, ...func(*chime.Options)) *chime.CreateRoomOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*chime.CreateRoomOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *chime.CreateRoomInput, ...func(*chime.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateRoomMembership provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CreateRoomMembership(ctx context.Context, params *chime.CreateRoomMembershipInput, optFns ...func(*chime.Options)) (*chime.CreateRoomMembershipOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateRoomMembership")
	}

	var r0 *chime.CreateRoomMembershipOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *chime.CreateRoomMembershipInput, ...func(*chime.Options)) (*chime.CreateRoomMembershipOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *chime.CreateRoomMembershipInput, ...func(*chime.Options)) *chime.CreateRoomMembershipOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*chime.CreateRoomMembershipOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *chime.CreateRoomMembershipInput, ...func(*chime.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateUser provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CreateUser(ctx context.Context, params *chime.CreateUserInput, optFns ...func(*chime.Options)) (*chime.CreateUserOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateUser")
	}

	var r0 *chime.CreateUserOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *chime.CreateUserInput, ...func(*chime.Options)) (*chime.CreateUserOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *chime.CreateUserInput, ...func(*chime.Options)) *chime.CreateUserOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*chime.CreateUserOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *chime.CreateUserInput, ...func(*chime.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteAccount provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteAccount(ctx context.Context, params *chime.DeleteAccountInput, optFns ...func(*chime.Options)) (*chime.DeleteAccountOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteAccount")
	}

	var r0 *chime.DeleteAccountOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *chime.DeleteAccountInput, ...func(*chime.Options)) (*chime.DeleteAccountOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *chime.DeleteAccountInput, ...func(*chime.Options)) *chime.DeleteAccountOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*chime.DeleteAccountOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *chime.DeleteAccountInput, ...func(*chime.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteEventsConfiguration provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteEventsConfiguration(ctx context.Context, params *chime.DeleteEventsConfigurationInput, optFns ...func(*chime.Options)) (*chime.DeleteEventsConfigurationOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteEventsConfiguration")
	}

	var r0 *chime.DeleteEventsConfigurationOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *chime.DeleteEventsConfigurationInput, ...func(*chime.Options)) (*chime.DeleteEventsConfigurationOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *chime.DeleteEventsConfigurationInput, ...func(*chime.Options)) *chime.DeleteEventsConfigurationOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*chime.DeleteEventsConfigurationOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *chime.DeleteEventsConfigurationInput, ...func(*chime.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeletePhoneNumber provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeletePhoneNumber(ctx context.Context, params *chime.DeletePhoneNumberInput, optFns ...func(*chime.Options)) (*chime.DeletePhoneNumberOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeletePhoneNumber")
	}

	var r0 *chime.DeletePhoneNumberOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *chime.DeletePhoneNumberInput, ...func(*chime.Options)) (*chime.DeletePhoneNumberOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *chime.DeletePhoneNumberInput, ...func(*chime.Options)) *chime.DeletePhoneNumberOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*chime.DeletePhoneNumberOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *chime.DeletePhoneNumberInput, ...func(*chime.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteRoom provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteRoom(ctx context.Context, params *chime.DeleteRoomInput, optFns ...func(*chime.Options)) (*chime.DeleteRoomOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteRoom")
	}

	var r0 *chime.DeleteRoomOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *chime.DeleteRoomInput, ...func(*chime.Options)) (*chime.DeleteRoomOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *chime.DeleteRoomInput, ...func(*chime.Options)) *chime.DeleteRoomOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*chime.DeleteRoomOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *chime.DeleteRoomInput, ...func(*chime.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteRoomMembership provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteRoomMembership(ctx context.Context, params *chime.DeleteRoomMembershipInput, optFns ...func(*chime.Options)) (*chime.DeleteRoomMembershipOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteRoomMembership")
	}

	var r0 *chime.DeleteRoomMembershipOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *chime.DeleteRoomMembershipInput, ...func(*chime.Options)) (*chime.DeleteRoomMembershipOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *chime.DeleteRoomMembershipInput, ...func(*chime.Options)) *chime.DeleteRoomMembershipOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*chime.DeleteRoomMembershipOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *chime.DeleteRoomMembershipInput, ...func(*chime.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DisassociatePhoneNumberFromUser provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DisassociatePhoneNumberFromUser(ctx context.Context, params *chime.DisassociatePhoneNumberFromUserInput, optFns ...func(*chime.Options)) (*chime.DisassociatePhoneNumberFromUserOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DisassociatePhoneNumberFromUser")
	}

	var r0 *chime.DisassociatePhoneNumberFromUserOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *chime.DisassociatePhoneNumberFromUserInput, ...func(*chime.Options)) (*chime.DisassociatePhoneNumberFromUserOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *chime.DisassociatePhoneNumberFromUserInput, ...func(*chime.Options)) *chime.DisassociatePhoneNumberFromUserOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*chime.DisassociatePhoneNumberFromUserOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *chime.DisassociatePhoneNumberFromUserInput, ...func(*chime.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DisassociateSigninDelegateGroupsFromAccount provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DisassociateSigninDelegateGroupsFromAccount(ctx context.Context, params *chime.DisassociateSigninDelegateGroupsFromAccountInput, optFns ...func(*chime.Options)) (*chime.DisassociateSigninDelegateGroupsFromAccountOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DisassociateSigninDelegateGroupsFromAccount")
	}

	var r0 *chime.DisassociateSigninDelegateGroupsFromAccountOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *chime.DisassociateSigninDelegateGroupsFromAccountInput, ...func(*chime.Options)) (*chime.DisassociateSigninDelegateGroupsFromAccountOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *chime.DisassociateSigninDelegateGroupsFromAccountInput, ...func(*chime.Options)) *chime.DisassociateSigninDelegateGroupsFromAccountOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*chime.DisassociateSigninDelegateGroupsFromAccountOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *chime.DisassociateSigninDelegateGroupsFromAccountInput, ...func(*chime.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAccount provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetAccount(ctx context.Context, params *chime.GetAccountInput, optFns ...func(*chime.Options)) (*chime.GetAccountOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetAccount")
	}

	var r0 *chime.GetAccountOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *chime.GetAccountInput, ...func(*chime.Options)) (*chime.GetAccountOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *chime.GetAccountInput, ...func(*chime.Options)) *chime.GetAccountOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*chime.GetAccountOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *chime.GetAccountInput, ...func(*chime.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAccountSettings provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetAccountSettings(ctx context.Context, params *chime.GetAccountSettingsInput, optFns ...func(*chime.Options)) (*chime.GetAccountSettingsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetAccountSettings")
	}

	var r0 *chime.GetAccountSettingsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *chime.GetAccountSettingsInput, ...func(*chime.Options)) (*chime.GetAccountSettingsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *chime.GetAccountSettingsInput, ...func(*chime.Options)) *chime.GetAccountSettingsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*chime.GetAccountSettingsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *chime.GetAccountSettingsInput, ...func(*chime.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetBot provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetBot(ctx context.Context, params *chime.GetBotInput, optFns ...func(*chime.Options)) (*chime.GetBotOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetBot")
	}

	var r0 *chime.GetBotOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *chime.GetBotInput, ...func(*chime.Options)) (*chime.GetBotOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *chime.GetBotInput, ...func(*chime.Options)) *chime.GetBotOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*chime.GetBotOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *chime.GetBotInput, ...func(*chime.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetEventsConfiguration provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetEventsConfiguration(ctx context.Context, params *chime.GetEventsConfigurationInput, optFns ...func(*chime.Options)) (*chime.GetEventsConfigurationOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetEventsConfiguration")
	}

	var r0 *chime.GetEventsConfigurationOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *chime.GetEventsConfigurationInput, ...func(*chime.Options)) (*chime.GetEventsConfigurationOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *chime.GetEventsConfigurationInput, ...func(*chime.Options)) *chime.GetEventsConfigurationOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*chime.GetEventsConfigurationOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *chime.GetEventsConfigurationInput, ...func(*chime.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetGlobalSettings provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetGlobalSettings(ctx context.Context, params *chime.GetGlobalSettingsInput, optFns ...func(*chime.Options)) (*chime.GetGlobalSettingsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetGlobalSettings")
	}

	var r0 *chime.GetGlobalSettingsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *chime.GetGlobalSettingsInput, ...func(*chime.Options)) (*chime.GetGlobalSettingsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *chime.GetGlobalSettingsInput, ...func(*chime.Options)) *chime.GetGlobalSettingsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*chime.GetGlobalSettingsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *chime.GetGlobalSettingsInput, ...func(*chime.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetPhoneNumber provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetPhoneNumber(ctx context.Context, params *chime.GetPhoneNumberInput, optFns ...func(*chime.Options)) (*chime.GetPhoneNumberOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetPhoneNumber")
	}

	var r0 *chime.GetPhoneNumberOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *chime.GetPhoneNumberInput, ...func(*chime.Options)) (*chime.GetPhoneNumberOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *chime.GetPhoneNumberInput, ...func(*chime.Options)) *chime.GetPhoneNumberOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*chime.GetPhoneNumberOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *chime.GetPhoneNumberInput, ...func(*chime.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetPhoneNumberOrder provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetPhoneNumberOrder(ctx context.Context, params *chime.GetPhoneNumberOrderInput, optFns ...func(*chime.Options)) (*chime.GetPhoneNumberOrderOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetPhoneNumberOrder")
	}

	var r0 *chime.GetPhoneNumberOrderOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *chime.GetPhoneNumberOrderInput, ...func(*chime.Options)) (*chime.GetPhoneNumberOrderOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *chime.GetPhoneNumberOrderInput, ...func(*chime.Options)) *chime.GetPhoneNumberOrderOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*chime.GetPhoneNumberOrderOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *chime.GetPhoneNumberOrderInput, ...func(*chime.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetPhoneNumberSettings provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetPhoneNumberSettings(ctx context.Context, params *chime.GetPhoneNumberSettingsInput, optFns ...func(*chime.Options)) (*chime.GetPhoneNumberSettingsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetPhoneNumberSettings")
	}

	var r0 *chime.GetPhoneNumberSettingsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *chime.GetPhoneNumberSettingsInput, ...func(*chime.Options)) (*chime.GetPhoneNumberSettingsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *chime.GetPhoneNumberSettingsInput, ...func(*chime.Options)) *chime.GetPhoneNumberSettingsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*chime.GetPhoneNumberSettingsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *chime.GetPhoneNumberSettingsInput, ...func(*chime.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetRetentionSettings provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetRetentionSettings(ctx context.Context, params *chime.GetRetentionSettingsInput, optFns ...func(*chime.Options)) (*chime.GetRetentionSettingsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetRetentionSettings")
	}

	var r0 *chime.GetRetentionSettingsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *chime.GetRetentionSettingsInput, ...func(*chime.Options)) (*chime.GetRetentionSettingsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *chime.GetRetentionSettingsInput, ...func(*chime.Options)) *chime.GetRetentionSettingsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*chime.GetRetentionSettingsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *chime.GetRetentionSettingsInput, ...func(*chime.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetRoom provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetRoom(ctx context.Context, params *chime.GetRoomInput, optFns ...func(*chime.Options)) (*chime.GetRoomOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetRoom")
	}

	var r0 *chime.GetRoomOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *chime.GetRoomInput, ...func(*chime.Options)) (*chime.GetRoomOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *chime.GetRoomInput, ...func(*chime.Options)) *chime.GetRoomOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*chime.GetRoomOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *chime.GetRoomInput, ...func(*chime.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetUser provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetUser(ctx context.Context, params *chime.GetUserInput, optFns ...func(*chime.Options)) (*chime.GetUserOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetUser")
	}

	var r0 *chime.GetUserOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *chime.GetUserInput, ...func(*chime.Options)) (*chime.GetUserOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *chime.GetUserInput, ...func(*chime.Options)) *chime.GetUserOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*chime.GetUserOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *chime.GetUserInput, ...func(*chime.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetUserSettings provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetUserSettings(ctx context.Context, params *chime.GetUserSettingsInput, optFns ...func(*chime.Options)) (*chime.GetUserSettingsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetUserSettings")
	}

	var r0 *chime.GetUserSettingsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *chime.GetUserSettingsInput, ...func(*chime.Options)) (*chime.GetUserSettingsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *chime.GetUserSettingsInput, ...func(*chime.Options)) *chime.GetUserSettingsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*chime.GetUserSettingsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *chime.GetUserSettingsInput, ...func(*chime.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// InviteUsers provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) InviteUsers(ctx context.Context, params *chime.InviteUsersInput, optFns ...func(*chime.Options)) (*chime.InviteUsersOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for InviteUsers")
	}

	var r0 *chime.InviteUsersOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *chime.InviteUsersInput, ...func(*chime.Options)) (*chime.InviteUsersOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *chime.InviteUsersInput, ...func(*chime.Options)) *chime.InviteUsersOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*chime.InviteUsersOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *chime.InviteUsersInput, ...func(*chime.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListAccounts provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListAccounts(ctx context.Context, params *chime.ListAccountsInput, optFns ...func(*chime.Options)) (*chime.ListAccountsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListAccounts")
	}

	var r0 *chime.ListAccountsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *chime.ListAccountsInput, ...func(*chime.Options)) (*chime.ListAccountsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *chime.ListAccountsInput, ...func(*chime.Options)) *chime.ListAccountsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*chime.ListAccountsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *chime.ListAccountsInput, ...func(*chime.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListBots provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListBots(ctx context.Context, params *chime.ListBotsInput, optFns ...func(*chime.Options)) (*chime.ListBotsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListBots")
	}

	var r0 *chime.ListBotsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *chime.ListBotsInput, ...func(*chime.Options)) (*chime.ListBotsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *chime.ListBotsInput, ...func(*chime.Options)) *chime.ListBotsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*chime.ListBotsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *chime.ListBotsInput, ...func(*chime.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListPhoneNumberOrders provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListPhoneNumberOrders(ctx context.Context, params *chime.ListPhoneNumberOrdersInput, optFns ...func(*chime.Options)) (*chime.ListPhoneNumberOrdersOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListPhoneNumberOrders")
	}

	var r0 *chime.ListPhoneNumberOrdersOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *chime.ListPhoneNumberOrdersInput, ...func(*chime.Options)) (*chime.ListPhoneNumberOrdersOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *chime.ListPhoneNumberOrdersInput, ...func(*chime.Options)) *chime.ListPhoneNumberOrdersOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*chime.ListPhoneNumberOrdersOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *chime.ListPhoneNumberOrdersInput, ...func(*chime.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListPhoneNumbers provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListPhoneNumbers(ctx context.Context, params *chime.ListPhoneNumbersInput, optFns ...func(*chime.Options)) (*chime.ListPhoneNumbersOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListPhoneNumbers")
	}

	var r0 *chime.ListPhoneNumbersOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *chime.ListPhoneNumbersInput, ...func(*chime.Options)) (*chime.ListPhoneNumbersOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *chime.ListPhoneNumbersInput, ...func(*chime.Options)) *chime.ListPhoneNumbersOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*chime.ListPhoneNumbersOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *chime.ListPhoneNumbersInput, ...func(*chime.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListRoomMemberships provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListRoomMemberships(ctx context.Context, params *chime.ListRoomMembershipsInput, optFns ...func(*chime.Options)) (*chime.ListRoomMembershipsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListRoomMemberships")
	}

	var r0 *chime.ListRoomMembershipsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *chime.ListRoomMembershipsInput, ...func(*chime.Options)) (*chime.ListRoomMembershipsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *chime.ListRoomMembershipsInput, ...func(*chime.Options)) *chime.ListRoomMembershipsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*chime.ListRoomMembershipsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *chime.ListRoomMembershipsInput, ...func(*chime.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListRooms provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListRooms(ctx context.Context, params *chime.ListRoomsInput, optFns ...func(*chime.Options)) (*chime.ListRoomsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListRooms")
	}

	var r0 *chime.ListRoomsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *chime.ListRoomsInput, ...func(*chime.Options)) (*chime.ListRoomsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *chime.ListRoomsInput, ...func(*chime.Options)) *chime.ListRoomsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*chime.ListRoomsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *chime.ListRoomsInput, ...func(*chime.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListSupportedPhoneNumberCountries provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListSupportedPhoneNumberCountries(ctx context.Context, params *chime.ListSupportedPhoneNumberCountriesInput, optFns ...func(*chime.Options)) (*chime.ListSupportedPhoneNumberCountriesOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListSupportedPhoneNumberCountries")
	}

	var r0 *chime.ListSupportedPhoneNumberCountriesOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *chime.ListSupportedPhoneNumberCountriesInput, ...func(*chime.Options)) (*chime.ListSupportedPhoneNumberCountriesOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *chime.ListSupportedPhoneNumberCountriesInput, ...func(*chime.Options)) *chime.ListSupportedPhoneNumberCountriesOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*chime.ListSupportedPhoneNumberCountriesOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *chime.ListSupportedPhoneNumberCountriesInput, ...func(*chime.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListUsers provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListUsers(ctx context.Context, params *chime.ListUsersInput, optFns ...func(*chime.Options)) (*chime.ListUsersOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListUsers")
	}

	var r0 *chime.ListUsersOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *chime.ListUsersInput, ...func(*chime.Options)) (*chime.ListUsersOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *chime.ListUsersInput, ...func(*chime.Options)) *chime.ListUsersOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*chime.ListUsersOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *chime.ListUsersInput, ...func(*chime.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// LogoutUser provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) LogoutUser(ctx context.Context, params *chime.LogoutUserInput, optFns ...func(*chime.Options)) (*chime.LogoutUserOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for LogoutUser")
	}

	var r0 *chime.LogoutUserOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *chime.LogoutUserInput, ...func(*chime.Options)) (*chime.LogoutUserOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *chime.LogoutUserInput, ...func(*chime.Options)) *chime.LogoutUserOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*chime.LogoutUserOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *chime.LogoutUserInput, ...func(*chime.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Options provides a mock function with no fields
func (_m *IClient) Options() chime.Options {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Options")
	}

	var r0 chime.Options
	if rf, ok := ret.Get(0).(func() chime.Options); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(chime.Options)
	}

	return r0
}

// PutEventsConfiguration provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) PutEventsConfiguration(ctx context.Context, params *chime.PutEventsConfigurationInput, optFns ...func(*chime.Options)) (*chime.PutEventsConfigurationOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for PutEventsConfiguration")
	}

	var r0 *chime.PutEventsConfigurationOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *chime.PutEventsConfigurationInput, ...func(*chime.Options)) (*chime.PutEventsConfigurationOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *chime.PutEventsConfigurationInput, ...func(*chime.Options)) *chime.PutEventsConfigurationOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*chime.PutEventsConfigurationOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *chime.PutEventsConfigurationInput, ...func(*chime.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PutRetentionSettings provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) PutRetentionSettings(ctx context.Context, params *chime.PutRetentionSettingsInput, optFns ...func(*chime.Options)) (*chime.PutRetentionSettingsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for PutRetentionSettings")
	}

	var r0 *chime.PutRetentionSettingsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *chime.PutRetentionSettingsInput, ...func(*chime.Options)) (*chime.PutRetentionSettingsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *chime.PutRetentionSettingsInput, ...func(*chime.Options)) *chime.PutRetentionSettingsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*chime.PutRetentionSettingsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *chime.PutRetentionSettingsInput, ...func(*chime.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RedactConversationMessage provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) RedactConversationMessage(ctx context.Context, params *chime.RedactConversationMessageInput, optFns ...func(*chime.Options)) (*chime.RedactConversationMessageOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for RedactConversationMessage")
	}

	var r0 *chime.RedactConversationMessageOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *chime.RedactConversationMessageInput, ...func(*chime.Options)) (*chime.RedactConversationMessageOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *chime.RedactConversationMessageInput, ...func(*chime.Options)) *chime.RedactConversationMessageOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*chime.RedactConversationMessageOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *chime.RedactConversationMessageInput, ...func(*chime.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RedactRoomMessage provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) RedactRoomMessage(ctx context.Context, params *chime.RedactRoomMessageInput, optFns ...func(*chime.Options)) (*chime.RedactRoomMessageOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for RedactRoomMessage")
	}

	var r0 *chime.RedactRoomMessageOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *chime.RedactRoomMessageInput, ...func(*chime.Options)) (*chime.RedactRoomMessageOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *chime.RedactRoomMessageInput, ...func(*chime.Options)) *chime.RedactRoomMessageOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*chime.RedactRoomMessageOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *chime.RedactRoomMessageInput, ...func(*chime.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RegenerateSecurityToken provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) RegenerateSecurityToken(ctx context.Context, params *chime.RegenerateSecurityTokenInput, optFns ...func(*chime.Options)) (*chime.RegenerateSecurityTokenOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for RegenerateSecurityToken")
	}

	var r0 *chime.RegenerateSecurityTokenOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *chime.RegenerateSecurityTokenInput, ...func(*chime.Options)) (*chime.RegenerateSecurityTokenOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *chime.RegenerateSecurityTokenInput, ...func(*chime.Options)) *chime.RegenerateSecurityTokenOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*chime.RegenerateSecurityTokenOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *chime.RegenerateSecurityTokenInput, ...func(*chime.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ResetPersonalPIN provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ResetPersonalPIN(ctx context.Context, params *chime.ResetPersonalPINInput, optFns ...func(*chime.Options)) (*chime.ResetPersonalPINOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ResetPersonalPIN")
	}

	var r0 *chime.ResetPersonalPINOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *chime.ResetPersonalPINInput, ...func(*chime.Options)) (*chime.ResetPersonalPINOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *chime.ResetPersonalPINInput, ...func(*chime.Options)) *chime.ResetPersonalPINOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*chime.ResetPersonalPINOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *chime.ResetPersonalPINInput, ...func(*chime.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RestorePhoneNumber provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) RestorePhoneNumber(ctx context.Context, params *chime.RestorePhoneNumberInput, optFns ...func(*chime.Options)) (*chime.RestorePhoneNumberOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for RestorePhoneNumber")
	}

	var r0 *chime.RestorePhoneNumberOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *chime.RestorePhoneNumberInput, ...func(*chime.Options)) (*chime.RestorePhoneNumberOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *chime.RestorePhoneNumberInput, ...func(*chime.Options)) *chime.RestorePhoneNumberOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*chime.RestorePhoneNumberOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *chime.RestorePhoneNumberInput, ...func(*chime.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SearchAvailablePhoneNumbers provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) SearchAvailablePhoneNumbers(ctx context.Context, params *chime.SearchAvailablePhoneNumbersInput, optFns ...func(*chime.Options)) (*chime.SearchAvailablePhoneNumbersOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for SearchAvailablePhoneNumbers")
	}

	var r0 *chime.SearchAvailablePhoneNumbersOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *chime.SearchAvailablePhoneNumbersInput, ...func(*chime.Options)) (*chime.SearchAvailablePhoneNumbersOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *chime.SearchAvailablePhoneNumbersInput, ...func(*chime.Options)) *chime.SearchAvailablePhoneNumbersOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*chime.SearchAvailablePhoneNumbersOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *chime.SearchAvailablePhoneNumbersInput, ...func(*chime.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateAccount provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UpdateAccount(ctx context.Context, params *chime.UpdateAccountInput, optFns ...func(*chime.Options)) (*chime.UpdateAccountOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateAccount")
	}

	var r0 *chime.UpdateAccountOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *chime.UpdateAccountInput, ...func(*chime.Options)) (*chime.UpdateAccountOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *chime.UpdateAccountInput, ...func(*chime.Options)) *chime.UpdateAccountOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*chime.UpdateAccountOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *chime.UpdateAccountInput, ...func(*chime.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateAccountSettings provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UpdateAccountSettings(ctx context.Context, params *chime.UpdateAccountSettingsInput, optFns ...func(*chime.Options)) (*chime.UpdateAccountSettingsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateAccountSettings")
	}

	var r0 *chime.UpdateAccountSettingsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *chime.UpdateAccountSettingsInput, ...func(*chime.Options)) (*chime.UpdateAccountSettingsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *chime.UpdateAccountSettingsInput, ...func(*chime.Options)) *chime.UpdateAccountSettingsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*chime.UpdateAccountSettingsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *chime.UpdateAccountSettingsInput, ...func(*chime.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateBot provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UpdateBot(ctx context.Context, params *chime.UpdateBotInput, optFns ...func(*chime.Options)) (*chime.UpdateBotOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateBot")
	}

	var r0 *chime.UpdateBotOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *chime.UpdateBotInput, ...func(*chime.Options)) (*chime.UpdateBotOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *chime.UpdateBotInput, ...func(*chime.Options)) *chime.UpdateBotOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*chime.UpdateBotOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *chime.UpdateBotInput, ...func(*chime.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateGlobalSettings provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UpdateGlobalSettings(ctx context.Context, params *chime.UpdateGlobalSettingsInput, optFns ...func(*chime.Options)) (*chime.UpdateGlobalSettingsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateGlobalSettings")
	}

	var r0 *chime.UpdateGlobalSettingsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *chime.UpdateGlobalSettingsInput, ...func(*chime.Options)) (*chime.UpdateGlobalSettingsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *chime.UpdateGlobalSettingsInput, ...func(*chime.Options)) *chime.UpdateGlobalSettingsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*chime.UpdateGlobalSettingsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *chime.UpdateGlobalSettingsInput, ...func(*chime.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdatePhoneNumber provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UpdatePhoneNumber(ctx context.Context, params *chime.UpdatePhoneNumberInput, optFns ...func(*chime.Options)) (*chime.UpdatePhoneNumberOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdatePhoneNumber")
	}

	var r0 *chime.UpdatePhoneNumberOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *chime.UpdatePhoneNumberInput, ...func(*chime.Options)) (*chime.UpdatePhoneNumberOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *chime.UpdatePhoneNumberInput, ...func(*chime.Options)) *chime.UpdatePhoneNumberOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*chime.UpdatePhoneNumberOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *chime.UpdatePhoneNumberInput, ...func(*chime.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdatePhoneNumberSettings provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UpdatePhoneNumberSettings(ctx context.Context, params *chime.UpdatePhoneNumberSettingsInput, optFns ...func(*chime.Options)) (*chime.UpdatePhoneNumberSettingsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdatePhoneNumberSettings")
	}

	var r0 *chime.UpdatePhoneNumberSettingsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *chime.UpdatePhoneNumberSettingsInput, ...func(*chime.Options)) (*chime.UpdatePhoneNumberSettingsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *chime.UpdatePhoneNumberSettingsInput, ...func(*chime.Options)) *chime.UpdatePhoneNumberSettingsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*chime.UpdatePhoneNumberSettingsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *chime.UpdatePhoneNumberSettingsInput, ...func(*chime.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateRoom provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UpdateRoom(ctx context.Context, params *chime.UpdateRoomInput, optFns ...func(*chime.Options)) (*chime.UpdateRoomOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateRoom")
	}

	var r0 *chime.UpdateRoomOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *chime.UpdateRoomInput, ...func(*chime.Options)) (*chime.UpdateRoomOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *chime.UpdateRoomInput, ...func(*chime.Options)) *chime.UpdateRoomOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*chime.UpdateRoomOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *chime.UpdateRoomInput, ...func(*chime.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateRoomMembership provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UpdateRoomMembership(ctx context.Context, params *chime.UpdateRoomMembershipInput, optFns ...func(*chime.Options)) (*chime.UpdateRoomMembershipOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateRoomMembership")
	}

	var r0 *chime.UpdateRoomMembershipOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *chime.UpdateRoomMembershipInput, ...func(*chime.Options)) (*chime.UpdateRoomMembershipOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *chime.UpdateRoomMembershipInput, ...func(*chime.Options)) *chime.UpdateRoomMembershipOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*chime.UpdateRoomMembershipOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *chime.UpdateRoomMembershipInput, ...func(*chime.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateUser provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UpdateUser(ctx context.Context, params *chime.UpdateUserInput, optFns ...func(*chime.Options)) (*chime.UpdateUserOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateUser")
	}

	var r0 *chime.UpdateUserOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *chime.UpdateUserInput, ...func(*chime.Options)) (*chime.UpdateUserOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *chime.UpdateUserInput, ...func(*chime.Options)) *chime.UpdateUserOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*chime.UpdateUserOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *chime.UpdateUserInput, ...func(*chime.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateUserSettings provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UpdateUserSettings(ctx context.Context, params *chime.UpdateUserSettingsInput, optFns ...func(*chime.Options)) (*chime.UpdateUserSettingsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateUserSettings")
	}

	var r0 *chime.UpdateUserSettingsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *chime.UpdateUserSettingsInput, ...func(*chime.Options)) (*chime.UpdateUserSettingsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *chime.UpdateUserSettingsInput, ...func(*chime.Options)) *chime.UpdateUserSettingsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*chime.UpdateUserSettingsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *chime.UpdateUserSettingsInput, ...func(*chime.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewIClient creates a new instance of IClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewIClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *IClient {
	mock := &IClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
