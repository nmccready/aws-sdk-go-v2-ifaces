// Code generated by mockery v2.53.4. DO NOT EDIT.

package mocks

import (
	context "context"

	securityir "github.com/aws/aws-sdk-go-v2/service/securityir"
	mock "github.com/stretchr/testify/mock"
)

// IClient is an autogenerated mock type for the IClient type
type IClient struct {
	mock.Mock
}

// BatchGetMemberAccountDetails provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) BatchGetMemberAccountDetails(ctx context.Context, params *securityir.BatchGetMemberAccountDetailsInput, optFns ...func(*securityir.Options)) (*securityir.BatchGetMemberAccountDetailsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for BatchGetMemberAccountDetails")
	}

	var r0 *securityir.BatchGetMemberAccountDetailsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *securityir.BatchGetMemberAccountDetailsInput, ...func(*securityir.Options)) (*securityir.BatchGetMemberAccountDetailsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *securityir.BatchGetMemberAccountDetailsInput, ...func(*securityir.Options)) *securityir.BatchGetMemberAccountDetailsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*securityir.BatchGetMemberAccountDetailsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *securityir.BatchGetMemberAccountDetailsInput, ...func(*securityir.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CancelMembership provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CancelMembership(ctx context.Context, params *securityir.CancelMembershipInput, optFns ...func(*securityir.Options)) (*securityir.CancelMembershipOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CancelMembership")
	}

	var r0 *securityir.CancelMembershipOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *securityir.CancelMembershipInput, ...func(*securityir.Options)) (*securityir.CancelMembershipOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *securityir.CancelMembershipInput, ...func(*securityir.Options)) *securityir.CancelMembershipOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*securityir.CancelMembershipOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *securityir.CancelMembershipInput, ...func(*securityir.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CloseCase provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CloseCase(ctx context.Context, params *securityir.CloseCaseInput, optFns ...func(*securityir.Options)) (*securityir.CloseCaseOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CloseCase")
	}

	var r0 *securityir.CloseCaseOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *securityir.CloseCaseInput, ...func(*securityir.Options)) (*securityir.CloseCaseOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *securityir.CloseCaseInput, ...func(*securityir.Options)) *securityir.CloseCaseOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*securityir.CloseCaseOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *securityir.CloseCaseInput, ...func(*securityir.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateCase provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CreateCase(ctx context.Context, params *securityir.CreateCaseInput, optFns ...func(*securityir.Options)) (*securityir.CreateCaseOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateCase")
	}

	var r0 *securityir.CreateCaseOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *securityir.CreateCaseInput, ...func(*securityir.Options)) (*securityir.CreateCaseOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *securityir.CreateCaseInput, ...func(*securityir.Options)) *securityir.CreateCaseOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*securityir.CreateCaseOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *securityir.CreateCaseInput, ...func(*securityir.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateCaseComment provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CreateCaseComment(ctx context.Context, params *securityir.CreateCaseCommentInput, optFns ...func(*securityir.Options)) (*securityir.CreateCaseCommentOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateCaseComment")
	}

	var r0 *securityir.CreateCaseCommentOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *securityir.CreateCaseCommentInput, ...func(*securityir.Options)) (*securityir.CreateCaseCommentOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *securityir.CreateCaseCommentInput, ...func(*securityir.Options)) *securityir.CreateCaseCommentOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*securityir.CreateCaseCommentOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *securityir.CreateCaseCommentInput, ...func(*securityir.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateMembership provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CreateMembership(ctx context.Context, params *securityir.CreateMembershipInput, optFns ...func(*securityir.Options)) (*securityir.CreateMembershipOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateMembership")
	}

	var r0 *securityir.CreateMembershipOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *securityir.CreateMembershipInput, ...func(*securityir.Options)) (*securityir.CreateMembershipOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *securityir.CreateMembershipInput, ...func(*securityir.Options)) *securityir.CreateMembershipOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*securityir.CreateMembershipOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *securityir.CreateMembershipInput, ...func(*securityir.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetCase provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetCase(ctx context.Context, params *securityir.GetCaseInput, optFns ...func(*securityir.Options)) (*securityir.GetCaseOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetCase")
	}

	var r0 *securityir.GetCaseOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *securityir.GetCaseInput, ...func(*securityir.Options)) (*securityir.GetCaseOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *securityir.GetCaseInput, ...func(*securityir.Options)) *securityir.GetCaseOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*securityir.GetCaseOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *securityir.GetCaseInput, ...func(*securityir.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetCaseAttachmentDownloadUrl provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetCaseAttachmentDownloadUrl(ctx context.Context, params *securityir.GetCaseAttachmentDownloadUrlInput, optFns ...func(*securityir.Options)) (*securityir.GetCaseAttachmentDownloadUrlOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetCaseAttachmentDownloadUrl")
	}

	var r0 *securityir.GetCaseAttachmentDownloadUrlOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *securityir.GetCaseAttachmentDownloadUrlInput, ...func(*securityir.Options)) (*securityir.GetCaseAttachmentDownloadUrlOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *securityir.GetCaseAttachmentDownloadUrlInput, ...func(*securityir.Options)) *securityir.GetCaseAttachmentDownloadUrlOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*securityir.GetCaseAttachmentDownloadUrlOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *securityir.GetCaseAttachmentDownloadUrlInput, ...func(*securityir.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetCaseAttachmentUploadUrl provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetCaseAttachmentUploadUrl(ctx context.Context, params *securityir.GetCaseAttachmentUploadUrlInput, optFns ...func(*securityir.Options)) (*securityir.GetCaseAttachmentUploadUrlOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetCaseAttachmentUploadUrl")
	}

	var r0 *securityir.GetCaseAttachmentUploadUrlOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *securityir.GetCaseAttachmentUploadUrlInput, ...func(*securityir.Options)) (*securityir.GetCaseAttachmentUploadUrlOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *securityir.GetCaseAttachmentUploadUrlInput, ...func(*securityir.Options)) *securityir.GetCaseAttachmentUploadUrlOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*securityir.GetCaseAttachmentUploadUrlOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *securityir.GetCaseAttachmentUploadUrlInput, ...func(*securityir.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetMembership provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetMembership(ctx context.Context, params *securityir.GetMembershipInput, optFns ...func(*securityir.Options)) (*securityir.GetMembershipOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetMembership")
	}

	var r0 *securityir.GetMembershipOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *securityir.GetMembershipInput, ...func(*securityir.Options)) (*securityir.GetMembershipOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *securityir.GetMembershipInput, ...func(*securityir.Options)) *securityir.GetMembershipOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*securityir.GetMembershipOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *securityir.GetMembershipInput, ...func(*securityir.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListCaseEdits provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListCaseEdits(ctx context.Context, params *securityir.ListCaseEditsInput, optFns ...func(*securityir.Options)) (*securityir.ListCaseEditsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListCaseEdits")
	}

	var r0 *securityir.ListCaseEditsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *securityir.ListCaseEditsInput, ...func(*securityir.Options)) (*securityir.ListCaseEditsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *securityir.ListCaseEditsInput, ...func(*securityir.Options)) *securityir.ListCaseEditsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*securityir.ListCaseEditsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *securityir.ListCaseEditsInput, ...func(*securityir.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListCases provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListCases(ctx context.Context, params *securityir.ListCasesInput, optFns ...func(*securityir.Options)) (*securityir.ListCasesOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListCases")
	}

	var r0 *securityir.ListCasesOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *securityir.ListCasesInput, ...func(*securityir.Options)) (*securityir.ListCasesOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *securityir.ListCasesInput, ...func(*securityir.Options)) *securityir.ListCasesOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*securityir.ListCasesOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *securityir.ListCasesInput, ...func(*securityir.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListComments provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListComments(ctx context.Context, params *securityir.ListCommentsInput, optFns ...func(*securityir.Options)) (*securityir.ListCommentsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListComments")
	}

	var r0 *securityir.ListCommentsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *securityir.ListCommentsInput, ...func(*securityir.Options)) (*securityir.ListCommentsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *securityir.ListCommentsInput, ...func(*securityir.Options)) *securityir.ListCommentsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*securityir.ListCommentsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *securityir.ListCommentsInput, ...func(*securityir.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListMemberships provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListMemberships(ctx context.Context, params *securityir.ListMembershipsInput, optFns ...func(*securityir.Options)) (*securityir.ListMembershipsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListMemberships")
	}

	var r0 *securityir.ListMembershipsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *securityir.ListMembershipsInput, ...func(*securityir.Options)) (*securityir.ListMembershipsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *securityir.ListMembershipsInput, ...func(*securityir.Options)) *securityir.ListMembershipsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*securityir.ListMembershipsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *securityir.ListMembershipsInput, ...func(*securityir.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListTagsForResource provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListTagsForResource(ctx context.Context, params *securityir.ListTagsForResourceInput, optFns ...func(*securityir.Options)) (*securityir.ListTagsForResourceOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListTagsForResource")
	}

	var r0 *securityir.ListTagsForResourceOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *securityir.ListTagsForResourceInput, ...func(*securityir.Options)) (*securityir.ListTagsForResourceOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *securityir.ListTagsForResourceInput, ...func(*securityir.Options)) *securityir.ListTagsForResourceOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*securityir.ListTagsForResourceOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *securityir.ListTagsForResourceInput, ...func(*securityir.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Options provides a mock function with no fields
func (_m *IClient) Options() securityir.Options {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Options")
	}

	var r0 securityir.Options
	if rf, ok := ret.Get(0).(func() securityir.Options); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(securityir.Options)
	}

	return r0
}

// TagResource provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) TagResource(ctx context.Context, params *securityir.TagResourceInput, optFns ...func(*securityir.Options)) (*securityir.TagResourceOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for TagResource")
	}

	var r0 *securityir.TagResourceOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *securityir.TagResourceInput, ...func(*securityir.Options)) (*securityir.TagResourceOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *securityir.TagResourceInput, ...func(*securityir.Options)) *securityir.TagResourceOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*securityir.TagResourceOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *securityir.TagResourceInput, ...func(*securityir.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UntagResource provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UntagResource(ctx context.Context, params *securityir.UntagResourceInput, optFns ...func(*securityir.Options)) (*securityir.UntagResourceOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UntagResource")
	}

	var r0 *securityir.UntagResourceOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *securityir.UntagResourceInput, ...func(*securityir.Options)) (*securityir.UntagResourceOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *securityir.UntagResourceInput, ...func(*securityir.Options)) *securityir.UntagResourceOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*securityir.UntagResourceOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *securityir.UntagResourceInput, ...func(*securityir.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateCase provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UpdateCase(ctx context.Context, params *securityir.UpdateCaseInput, optFns ...func(*securityir.Options)) (*securityir.UpdateCaseOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateCase")
	}

	var r0 *securityir.UpdateCaseOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *securityir.UpdateCaseInput, ...func(*securityir.Options)) (*securityir.UpdateCaseOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *securityir.UpdateCaseInput, ...func(*securityir.Options)) *securityir.UpdateCaseOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*securityir.UpdateCaseOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *securityir.UpdateCaseInput, ...func(*securityir.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateCaseComment provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UpdateCaseComment(ctx context.Context, params *securityir.UpdateCaseCommentInput, optFns ...func(*securityir.Options)) (*securityir.UpdateCaseCommentOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateCaseComment")
	}

	var r0 *securityir.UpdateCaseCommentOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *securityir.UpdateCaseCommentInput, ...func(*securityir.Options)) (*securityir.UpdateCaseCommentOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *securityir.UpdateCaseCommentInput, ...func(*securityir.Options)) *securityir.UpdateCaseCommentOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*securityir.UpdateCaseCommentOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *securityir.UpdateCaseCommentInput, ...func(*securityir.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateCaseStatus provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UpdateCaseStatus(ctx context.Context, params *securityir.UpdateCaseStatusInput, optFns ...func(*securityir.Options)) (*securityir.UpdateCaseStatusOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateCaseStatus")
	}

	var r0 *securityir.UpdateCaseStatusOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *securityir.UpdateCaseStatusInput, ...func(*securityir.Options)) (*securityir.UpdateCaseStatusOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *securityir.UpdateCaseStatusInput, ...func(*securityir.Options)) *securityir.UpdateCaseStatusOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*securityir.UpdateCaseStatusOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *securityir.UpdateCaseStatusInput, ...func(*securityir.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateMembership provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UpdateMembership(ctx context.Context, params *securityir.UpdateMembershipInput, optFns ...func(*securityir.Options)) (*securityir.UpdateMembershipOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateMembership")
	}

	var r0 *securityir.UpdateMembershipOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *securityir.UpdateMembershipInput, ...func(*securityir.Options)) (*securityir.UpdateMembershipOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *securityir.UpdateMembershipInput, ...func(*securityir.Options)) *securityir.UpdateMembershipOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*securityir.UpdateMembershipOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *securityir.UpdateMembershipInput, ...func(*securityir.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateResolverType provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UpdateResolverType(ctx context.Context, params *securityir.UpdateResolverTypeInput, optFns ...func(*securityir.Options)) (*securityir.UpdateResolverTypeOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateResolverType")
	}

	var r0 *securityir.UpdateResolverTypeOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *securityir.UpdateResolverTypeInput, ...func(*securityir.Options)) (*securityir.UpdateResolverTypeOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *securityir.UpdateResolverTypeInput, ...func(*securityir.Options)) *securityir.UpdateResolverTypeOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*securityir.UpdateResolverTypeOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *securityir.UpdateResolverTypeInput, ...func(*securityir.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewIClient creates a new instance of IClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewIClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *IClient {
	mock := &IClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
