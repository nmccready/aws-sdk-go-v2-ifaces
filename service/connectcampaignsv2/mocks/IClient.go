// Code generated by mockery v2.53.4. DO NOT EDIT.

package mocks

import (
	connectcampaignsv2 "github.com/aws/aws-sdk-go-v2/service/connectcampaignsv2"

	context "context"

	mock "github.com/stretchr/testify/mock"
)

// IClient is an autogenerated mock type for the IClient type
type IClient struct {
	mock.Mock
}

// CreateCampaign provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CreateCampaign(ctx context.Context, params *connectcampaignsv2.CreateCampaignInput, optFns ...func(*connectcampaignsv2.Options)) (*connectcampaignsv2.CreateCampaignOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateCampaign")
	}

	var r0 *connectcampaignsv2.CreateCampaignOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *connectcampaignsv2.CreateCampaignInput, ...func(*connectcampaignsv2.Options)) (*connectcampaignsv2.CreateCampaignOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *connectcampaignsv2.CreateCampaignInput, ...func(*connectcampaignsv2.Options)) *connectcampaignsv2.CreateCampaignOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*connectcampaignsv2.CreateCampaignOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *connectcampaignsv2.CreateCampaignInput, ...func(*connectcampaignsv2.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteCampaign provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteCampaign(ctx context.Context, params *connectcampaignsv2.DeleteCampaignInput, optFns ...func(*connectcampaignsv2.Options)) (*connectcampaignsv2.DeleteCampaignOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteCampaign")
	}

	var r0 *connectcampaignsv2.DeleteCampaignOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *connectcampaignsv2.DeleteCampaignInput, ...func(*connectcampaignsv2.Options)) (*connectcampaignsv2.DeleteCampaignOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *connectcampaignsv2.DeleteCampaignInput, ...func(*connectcampaignsv2.Options)) *connectcampaignsv2.DeleteCampaignOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*connectcampaignsv2.DeleteCampaignOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *connectcampaignsv2.DeleteCampaignInput, ...func(*connectcampaignsv2.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteCampaignChannelSubtypeConfig provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteCampaignChannelSubtypeConfig(ctx context.Context, params *connectcampaignsv2.DeleteCampaignChannelSubtypeConfigInput, optFns ...func(*connectcampaignsv2.Options)) (*connectcampaignsv2.DeleteCampaignChannelSubtypeConfigOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteCampaignChannelSubtypeConfig")
	}

	var r0 *connectcampaignsv2.DeleteCampaignChannelSubtypeConfigOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *connectcampaignsv2.DeleteCampaignChannelSubtypeConfigInput, ...func(*connectcampaignsv2.Options)) (*connectcampaignsv2.DeleteCampaignChannelSubtypeConfigOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *connectcampaignsv2.DeleteCampaignChannelSubtypeConfigInput, ...func(*connectcampaignsv2.Options)) *connectcampaignsv2.DeleteCampaignChannelSubtypeConfigOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*connectcampaignsv2.DeleteCampaignChannelSubtypeConfigOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *connectcampaignsv2.DeleteCampaignChannelSubtypeConfigInput, ...func(*connectcampaignsv2.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteCampaignCommunicationLimits provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteCampaignCommunicationLimits(ctx context.Context, params *connectcampaignsv2.DeleteCampaignCommunicationLimitsInput, optFns ...func(*connectcampaignsv2.Options)) (*connectcampaignsv2.DeleteCampaignCommunicationLimitsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteCampaignCommunicationLimits")
	}

	var r0 *connectcampaignsv2.DeleteCampaignCommunicationLimitsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *connectcampaignsv2.DeleteCampaignCommunicationLimitsInput, ...func(*connectcampaignsv2.Options)) (*connectcampaignsv2.DeleteCampaignCommunicationLimitsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *connectcampaignsv2.DeleteCampaignCommunicationLimitsInput, ...func(*connectcampaignsv2.Options)) *connectcampaignsv2.DeleteCampaignCommunicationLimitsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*connectcampaignsv2.DeleteCampaignCommunicationLimitsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *connectcampaignsv2.DeleteCampaignCommunicationLimitsInput, ...func(*connectcampaignsv2.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteCampaignCommunicationTime provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteCampaignCommunicationTime(ctx context.Context, params *connectcampaignsv2.DeleteCampaignCommunicationTimeInput, optFns ...func(*connectcampaignsv2.Options)) (*connectcampaignsv2.DeleteCampaignCommunicationTimeOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteCampaignCommunicationTime")
	}

	var r0 *connectcampaignsv2.DeleteCampaignCommunicationTimeOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *connectcampaignsv2.DeleteCampaignCommunicationTimeInput, ...func(*connectcampaignsv2.Options)) (*connectcampaignsv2.DeleteCampaignCommunicationTimeOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *connectcampaignsv2.DeleteCampaignCommunicationTimeInput, ...func(*connectcampaignsv2.Options)) *connectcampaignsv2.DeleteCampaignCommunicationTimeOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*connectcampaignsv2.DeleteCampaignCommunicationTimeOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *connectcampaignsv2.DeleteCampaignCommunicationTimeInput, ...func(*connectcampaignsv2.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteConnectInstanceConfig provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteConnectInstanceConfig(ctx context.Context, params *connectcampaignsv2.DeleteConnectInstanceConfigInput, optFns ...func(*connectcampaignsv2.Options)) (*connectcampaignsv2.DeleteConnectInstanceConfigOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteConnectInstanceConfig")
	}

	var r0 *connectcampaignsv2.DeleteConnectInstanceConfigOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *connectcampaignsv2.DeleteConnectInstanceConfigInput, ...func(*connectcampaignsv2.Options)) (*connectcampaignsv2.DeleteConnectInstanceConfigOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *connectcampaignsv2.DeleteConnectInstanceConfigInput, ...func(*connectcampaignsv2.Options)) *connectcampaignsv2.DeleteConnectInstanceConfigOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*connectcampaignsv2.DeleteConnectInstanceConfigOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *connectcampaignsv2.DeleteConnectInstanceConfigInput, ...func(*connectcampaignsv2.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteConnectInstanceIntegration provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteConnectInstanceIntegration(ctx context.Context, params *connectcampaignsv2.DeleteConnectInstanceIntegrationInput, optFns ...func(*connectcampaignsv2.Options)) (*connectcampaignsv2.DeleteConnectInstanceIntegrationOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteConnectInstanceIntegration")
	}

	var r0 *connectcampaignsv2.DeleteConnectInstanceIntegrationOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *connectcampaignsv2.DeleteConnectInstanceIntegrationInput, ...func(*connectcampaignsv2.Options)) (*connectcampaignsv2.DeleteConnectInstanceIntegrationOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *connectcampaignsv2.DeleteConnectInstanceIntegrationInput, ...func(*connectcampaignsv2.Options)) *connectcampaignsv2.DeleteConnectInstanceIntegrationOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*connectcampaignsv2.DeleteConnectInstanceIntegrationOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *connectcampaignsv2.DeleteConnectInstanceIntegrationInput, ...func(*connectcampaignsv2.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteInstanceOnboardingJob provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteInstanceOnboardingJob(ctx context.Context, params *connectcampaignsv2.DeleteInstanceOnboardingJobInput, optFns ...func(*connectcampaignsv2.Options)) (*connectcampaignsv2.DeleteInstanceOnboardingJobOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteInstanceOnboardingJob")
	}

	var r0 *connectcampaignsv2.DeleteInstanceOnboardingJobOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *connectcampaignsv2.DeleteInstanceOnboardingJobInput, ...func(*connectcampaignsv2.Options)) (*connectcampaignsv2.DeleteInstanceOnboardingJobOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *connectcampaignsv2.DeleteInstanceOnboardingJobInput, ...func(*connectcampaignsv2.Options)) *connectcampaignsv2.DeleteInstanceOnboardingJobOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*connectcampaignsv2.DeleteInstanceOnboardingJobOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *connectcampaignsv2.DeleteInstanceOnboardingJobInput, ...func(*connectcampaignsv2.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeCampaign provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DescribeCampaign(ctx context.Context, params *connectcampaignsv2.DescribeCampaignInput, optFns ...func(*connectcampaignsv2.Options)) (*connectcampaignsv2.DescribeCampaignOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DescribeCampaign")
	}

	var r0 *connectcampaignsv2.DescribeCampaignOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *connectcampaignsv2.DescribeCampaignInput, ...func(*connectcampaignsv2.Options)) (*connectcampaignsv2.DescribeCampaignOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *connectcampaignsv2.DescribeCampaignInput, ...func(*connectcampaignsv2.Options)) *connectcampaignsv2.DescribeCampaignOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*connectcampaignsv2.DescribeCampaignOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *connectcampaignsv2.DescribeCampaignInput, ...func(*connectcampaignsv2.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetCampaignState provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetCampaignState(ctx context.Context, params *connectcampaignsv2.GetCampaignStateInput, optFns ...func(*connectcampaignsv2.Options)) (*connectcampaignsv2.GetCampaignStateOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetCampaignState")
	}

	var r0 *connectcampaignsv2.GetCampaignStateOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *connectcampaignsv2.GetCampaignStateInput, ...func(*connectcampaignsv2.Options)) (*connectcampaignsv2.GetCampaignStateOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *connectcampaignsv2.GetCampaignStateInput, ...func(*connectcampaignsv2.Options)) *connectcampaignsv2.GetCampaignStateOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*connectcampaignsv2.GetCampaignStateOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *connectcampaignsv2.GetCampaignStateInput, ...func(*connectcampaignsv2.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetCampaignStateBatch provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetCampaignStateBatch(ctx context.Context, params *connectcampaignsv2.GetCampaignStateBatchInput, optFns ...func(*connectcampaignsv2.Options)) (*connectcampaignsv2.GetCampaignStateBatchOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetCampaignStateBatch")
	}

	var r0 *connectcampaignsv2.GetCampaignStateBatchOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *connectcampaignsv2.GetCampaignStateBatchInput, ...func(*connectcampaignsv2.Options)) (*connectcampaignsv2.GetCampaignStateBatchOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *connectcampaignsv2.GetCampaignStateBatchInput, ...func(*connectcampaignsv2.Options)) *connectcampaignsv2.GetCampaignStateBatchOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*connectcampaignsv2.GetCampaignStateBatchOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *connectcampaignsv2.GetCampaignStateBatchInput, ...func(*connectcampaignsv2.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetConnectInstanceConfig provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetConnectInstanceConfig(ctx context.Context, params *connectcampaignsv2.GetConnectInstanceConfigInput, optFns ...func(*connectcampaignsv2.Options)) (*connectcampaignsv2.GetConnectInstanceConfigOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetConnectInstanceConfig")
	}

	var r0 *connectcampaignsv2.GetConnectInstanceConfigOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *connectcampaignsv2.GetConnectInstanceConfigInput, ...func(*connectcampaignsv2.Options)) (*connectcampaignsv2.GetConnectInstanceConfigOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *connectcampaignsv2.GetConnectInstanceConfigInput, ...func(*connectcampaignsv2.Options)) *connectcampaignsv2.GetConnectInstanceConfigOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*connectcampaignsv2.GetConnectInstanceConfigOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *connectcampaignsv2.GetConnectInstanceConfigInput, ...func(*connectcampaignsv2.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetInstanceOnboardingJobStatus provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetInstanceOnboardingJobStatus(ctx context.Context, params *connectcampaignsv2.GetInstanceOnboardingJobStatusInput, optFns ...func(*connectcampaignsv2.Options)) (*connectcampaignsv2.GetInstanceOnboardingJobStatusOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetInstanceOnboardingJobStatus")
	}

	var r0 *connectcampaignsv2.GetInstanceOnboardingJobStatusOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *connectcampaignsv2.GetInstanceOnboardingJobStatusInput, ...func(*connectcampaignsv2.Options)) (*connectcampaignsv2.GetInstanceOnboardingJobStatusOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *connectcampaignsv2.GetInstanceOnboardingJobStatusInput, ...func(*connectcampaignsv2.Options)) *connectcampaignsv2.GetInstanceOnboardingJobStatusOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*connectcampaignsv2.GetInstanceOnboardingJobStatusOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *connectcampaignsv2.GetInstanceOnboardingJobStatusInput, ...func(*connectcampaignsv2.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListCampaigns provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListCampaigns(ctx context.Context, params *connectcampaignsv2.ListCampaignsInput, optFns ...func(*connectcampaignsv2.Options)) (*connectcampaignsv2.ListCampaignsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListCampaigns")
	}

	var r0 *connectcampaignsv2.ListCampaignsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *connectcampaignsv2.ListCampaignsInput, ...func(*connectcampaignsv2.Options)) (*connectcampaignsv2.ListCampaignsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *connectcampaignsv2.ListCampaignsInput, ...func(*connectcampaignsv2.Options)) *connectcampaignsv2.ListCampaignsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*connectcampaignsv2.ListCampaignsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *connectcampaignsv2.ListCampaignsInput, ...func(*connectcampaignsv2.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListConnectInstanceIntegrations provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListConnectInstanceIntegrations(ctx context.Context, params *connectcampaignsv2.ListConnectInstanceIntegrationsInput, optFns ...func(*connectcampaignsv2.Options)) (*connectcampaignsv2.ListConnectInstanceIntegrationsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListConnectInstanceIntegrations")
	}

	var r0 *connectcampaignsv2.ListConnectInstanceIntegrationsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *connectcampaignsv2.ListConnectInstanceIntegrationsInput, ...func(*connectcampaignsv2.Options)) (*connectcampaignsv2.ListConnectInstanceIntegrationsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *connectcampaignsv2.ListConnectInstanceIntegrationsInput, ...func(*connectcampaignsv2.Options)) *connectcampaignsv2.ListConnectInstanceIntegrationsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*connectcampaignsv2.ListConnectInstanceIntegrationsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *connectcampaignsv2.ListConnectInstanceIntegrationsInput, ...func(*connectcampaignsv2.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListTagsForResource provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListTagsForResource(ctx context.Context, params *connectcampaignsv2.ListTagsForResourceInput, optFns ...func(*connectcampaignsv2.Options)) (*connectcampaignsv2.ListTagsForResourceOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListTagsForResource")
	}

	var r0 *connectcampaignsv2.ListTagsForResourceOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *connectcampaignsv2.ListTagsForResourceInput, ...func(*connectcampaignsv2.Options)) (*connectcampaignsv2.ListTagsForResourceOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *connectcampaignsv2.ListTagsForResourceInput, ...func(*connectcampaignsv2.Options)) *connectcampaignsv2.ListTagsForResourceOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*connectcampaignsv2.ListTagsForResourceOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *connectcampaignsv2.ListTagsForResourceInput, ...func(*connectcampaignsv2.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Options provides a mock function with no fields
func (_m *IClient) Options() connectcampaignsv2.Options {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Options")
	}

	var r0 connectcampaignsv2.Options
	if rf, ok := ret.Get(0).(func() connectcampaignsv2.Options); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(connectcampaignsv2.Options)
	}

	return r0
}

// PauseCampaign provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) PauseCampaign(ctx context.Context, params *connectcampaignsv2.PauseCampaignInput, optFns ...func(*connectcampaignsv2.Options)) (*connectcampaignsv2.PauseCampaignOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for PauseCampaign")
	}

	var r0 *connectcampaignsv2.PauseCampaignOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *connectcampaignsv2.PauseCampaignInput, ...func(*connectcampaignsv2.Options)) (*connectcampaignsv2.PauseCampaignOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *connectcampaignsv2.PauseCampaignInput, ...func(*connectcampaignsv2.Options)) *connectcampaignsv2.PauseCampaignOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*connectcampaignsv2.PauseCampaignOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *connectcampaignsv2.PauseCampaignInput, ...func(*connectcampaignsv2.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PutConnectInstanceIntegration provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) PutConnectInstanceIntegration(ctx context.Context, params *connectcampaignsv2.PutConnectInstanceIntegrationInput, optFns ...func(*connectcampaignsv2.Options)) (*connectcampaignsv2.PutConnectInstanceIntegrationOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for PutConnectInstanceIntegration")
	}

	var r0 *connectcampaignsv2.PutConnectInstanceIntegrationOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *connectcampaignsv2.PutConnectInstanceIntegrationInput, ...func(*connectcampaignsv2.Options)) (*connectcampaignsv2.PutConnectInstanceIntegrationOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *connectcampaignsv2.PutConnectInstanceIntegrationInput, ...func(*connectcampaignsv2.Options)) *connectcampaignsv2.PutConnectInstanceIntegrationOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*connectcampaignsv2.PutConnectInstanceIntegrationOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *connectcampaignsv2.PutConnectInstanceIntegrationInput, ...func(*connectcampaignsv2.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PutOutboundRequestBatch provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) PutOutboundRequestBatch(ctx context.Context, params *connectcampaignsv2.PutOutboundRequestBatchInput, optFns ...func(*connectcampaignsv2.Options)) (*connectcampaignsv2.PutOutboundRequestBatchOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for PutOutboundRequestBatch")
	}

	var r0 *connectcampaignsv2.PutOutboundRequestBatchOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *connectcampaignsv2.PutOutboundRequestBatchInput, ...func(*connectcampaignsv2.Options)) (*connectcampaignsv2.PutOutboundRequestBatchOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *connectcampaignsv2.PutOutboundRequestBatchInput, ...func(*connectcampaignsv2.Options)) *connectcampaignsv2.PutOutboundRequestBatchOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*connectcampaignsv2.PutOutboundRequestBatchOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *connectcampaignsv2.PutOutboundRequestBatchInput, ...func(*connectcampaignsv2.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PutProfileOutboundRequestBatch provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) PutProfileOutboundRequestBatch(ctx context.Context, params *connectcampaignsv2.PutProfileOutboundRequestBatchInput, optFns ...func(*connectcampaignsv2.Options)) (*connectcampaignsv2.PutProfileOutboundRequestBatchOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for PutProfileOutboundRequestBatch")
	}

	var r0 *connectcampaignsv2.PutProfileOutboundRequestBatchOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *connectcampaignsv2.PutProfileOutboundRequestBatchInput, ...func(*connectcampaignsv2.Options)) (*connectcampaignsv2.PutProfileOutboundRequestBatchOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *connectcampaignsv2.PutProfileOutboundRequestBatchInput, ...func(*connectcampaignsv2.Options)) *connectcampaignsv2.PutProfileOutboundRequestBatchOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*connectcampaignsv2.PutProfileOutboundRequestBatchOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *connectcampaignsv2.PutProfileOutboundRequestBatchInput, ...func(*connectcampaignsv2.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ResumeCampaign provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ResumeCampaign(ctx context.Context, params *connectcampaignsv2.ResumeCampaignInput, optFns ...func(*connectcampaignsv2.Options)) (*connectcampaignsv2.ResumeCampaignOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ResumeCampaign")
	}

	var r0 *connectcampaignsv2.ResumeCampaignOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *connectcampaignsv2.ResumeCampaignInput, ...func(*connectcampaignsv2.Options)) (*connectcampaignsv2.ResumeCampaignOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *connectcampaignsv2.ResumeCampaignInput, ...func(*connectcampaignsv2.Options)) *connectcampaignsv2.ResumeCampaignOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*connectcampaignsv2.ResumeCampaignOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *connectcampaignsv2.ResumeCampaignInput, ...func(*connectcampaignsv2.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// StartCampaign provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) StartCampaign(ctx context.Context, params *connectcampaignsv2.StartCampaignInput, optFns ...func(*connectcampaignsv2.Options)) (*connectcampaignsv2.StartCampaignOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for StartCampaign")
	}

	var r0 *connectcampaignsv2.StartCampaignOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *connectcampaignsv2.StartCampaignInput, ...func(*connectcampaignsv2.Options)) (*connectcampaignsv2.StartCampaignOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *connectcampaignsv2.StartCampaignInput, ...func(*connectcampaignsv2.Options)) *connectcampaignsv2.StartCampaignOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*connectcampaignsv2.StartCampaignOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *connectcampaignsv2.StartCampaignInput, ...func(*connectcampaignsv2.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// StartInstanceOnboardingJob provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) StartInstanceOnboardingJob(ctx context.Context, params *connectcampaignsv2.StartInstanceOnboardingJobInput, optFns ...func(*connectcampaignsv2.Options)) (*connectcampaignsv2.StartInstanceOnboardingJobOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for StartInstanceOnboardingJob")
	}

	var r0 *connectcampaignsv2.StartInstanceOnboardingJobOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *connectcampaignsv2.StartInstanceOnboardingJobInput, ...func(*connectcampaignsv2.Options)) (*connectcampaignsv2.StartInstanceOnboardingJobOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *connectcampaignsv2.StartInstanceOnboardingJobInput, ...func(*connectcampaignsv2.Options)) *connectcampaignsv2.StartInstanceOnboardingJobOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*connectcampaignsv2.StartInstanceOnboardingJobOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *connectcampaignsv2.StartInstanceOnboardingJobInput, ...func(*connectcampaignsv2.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// StopCampaign provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) StopCampaign(ctx context.Context, params *connectcampaignsv2.StopCampaignInput, optFns ...func(*connectcampaignsv2.Options)) (*connectcampaignsv2.StopCampaignOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for StopCampaign")
	}

	var r0 *connectcampaignsv2.StopCampaignOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *connectcampaignsv2.StopCampaignInput, ...func(*connectcampaignsv2.Options)) (*connectcampaignsv2.StopCampaignOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *connectcampaignsv2.StopCampaignInput, ...func(*connectcampaignsv2.Options)) *connectcampaignsv2.StopCampaignOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*connectcampaignsv2.StopCampaignOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *connectcampaignsv2.StopCampaignInput, ...func(*connectcampaignsv2.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// TagResource provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) TagResource(ctx context.Context, params *connectcampaignsv2.TagResourceInput, optFns ...func(*connectcampaignsv2.Options)) (*connectcampaignsv2.TagResourceOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for TagResource")
	}

	var r0 *connectcampaignsv2.TagResourceOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *connectcampaignsv2.TagResourceInput, ...func(*connectcampaignsv2.Options)) (*connectcampaignsv2.TagResourceOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *connectcampaignsv2.TagResourceInput, ...func(*connectcampaignsv2.Options)) *connectcampaignsv2.TagResourceOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*connectcampaignsv2.TagResourceOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *connectcampaignsv2.TagResourceInput, ...func(*connectcampaignsv2.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UntagResource provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UntagResource(ctx context.Context, params *connectcampaignsv2.UntagResourceInput, optFns ...func(*connectcampaignsv2.Options)) (*connectcampaignsv2.UntagResourceOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UntagResource")
	}

	var r0 *connectcampaignsv2.UntagResourceOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *connectcampaignsv2.UntagResourceInput, ...func(*connectcampaignsv2.Options)) (*connectcampaignsv2.UntagResourceOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *connectcampaignsv2.UntagResourceInput, ...func(*connectcampaignsv2.Options)) *connectcampaignsv2.UntagResourceOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*connectcampaignsv2.UntagResourceOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *connectcampaignsv2.UntagResourceInput, ...func(*connectcampaignsv2.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateCampaignChannelSubtypeConfig provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UpdateCampaignChannelSubtypeConfig(ctx context.Context, params *connectcampaignsv2.UpdateCampaignChannelSubtypeConfigInput, optFns ...func(*connectcampaignsv2.Options)) (*connectcampaignsv2.UpdateCampaignChannelSubtypeConfigOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateCampaignChannelSubtypeConfig")
	}

	var r0 *connectcampaignsv2.UpdateCampaignChannelSubtypeConfigOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *connectcampaignsv2.UpdateCampaignChannelSubtypeConfigInput, ...func(*connectcampaignsv2.Options)) (*connectcampaignsv2.UpdateCampaignChannelSubtypeConfigOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *connectcampaignsv2.UpdateCampaignChannelSubtypeConfigInput, ...func(*connectcampaignsv2.Options)) *connectcampaignsv2.UpdateCampaignChannelSubtypeConfigOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*connectcampaignsv2.UpdateCampaignChannelSubtypeConfigOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *connectcampaignsv2.UpdateCampaignChannelSubtypeConfigInput, ...func(*connectcampaignsv2.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateCampaignCommunicationLimits provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UpdateCampaignCommunicationLimits(ctx context.Context, params *connectcampaignsv2.UpdateCampaignCommunicationLimitsInput, optFns ...func(*connectcampaignsv2.Options)) (*connectcampaignsv2.UpdateCampaignCommunicationLimitsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateCampaignCommunicationLimits")
	}

	var r0 *connectcampaignsv2.UpdateCampaignCommunicationLimitsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *connectcampaignsv2.UpdateCampaignCommunicationLimitsInput, ...func(*connectcampaignsv2.Options)) (*connectcampaignsv2.UpdateCampaignCommunicationLimitsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *connectcampaignsv2.UpdateCampaignCommunicationLimitsInput, ...func(*connectcampaignsv2.Options)) *connectcampaignsv2.UpdateCampaignCommunicationLimitsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*connectcampaignsv2.UpdateCampaignCommunicationLimitsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *connectcampaignsv2.UpdateCampaignCommunicationLimitsInput, ...func(*connectcampaignsv2.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateCampaignCommunicationTime provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UpdateCampaignCommunicationTime(ctx context.Context, params *connectcampaignsv2.UpdateCampaignCommunicationTimeInput, optFns ...func(*connectcampaignsv2.Options)) (*connectcampaignsv2.UpdateCampaignCommunicationTimeOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateCampaignCommunicationTime")
	}

	var r0 *connectcampaignsv2.UpdateCampaignCommunicationTimeOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *connectcampaignsv2.UpdateCampaignCommunicationTimeInput, ...func(*connectcampaignsv2.Options)) (*connectcampaignsv2.UpdateCampaignCommunicationTimeOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *connectcampaignsv2.UpdateCampaignCommunicationTimeInput, ...func(*connectcampaignsv2.Options)) *connectcampaignsv2.UpdateCampaignCommunicationTimeOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*connectcampaignsv2.UpdateCampaignCommunicationTimeOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *connectcampaignsv2.UpdateCampaignCommunicationTimeInput, ...func(*connectcampaignsv2.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateCampaignFlowAssociation provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UpdateCampaignFlowAssociation(ctx context.Context, params *connectcampaignsv2.UpdateCampaignFlowAssociationInput, optFns ...func(*connectcampaignsv2.Options)) (*connectcampaignsv2.UpdateCampaignFlowAssociationOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateCampaignFlowAssociation")
	}

	var r0 *connectcampaignsv2.UpdateCampaignFlowAssociationOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *connectcampaignsv2.UpdateCampaignFlowAssociationInput, ...func(*connectcampaignsv2.Options)) (*connectcampaignsv2.UpdateCampaignFlowAssociationOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *connectcampaignsv2.UpdateCampaignFlowAssociationInput, ...func(*connectcampaignsv2.Options)) *connectcampaignsv2.UpdateCampaignFlowAssociationOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*connectcampaignsv2.UpdateCampaignFlowAssociationOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *connectcampaignsv2.UpdateCampaignFlowAssociationInput, ...func(*connectcampaignsv2.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateCampaignName provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UpdateCampaignName(ctx context.Context, params *connectcampaignsv2.UpdateCampaignNameInput, optFns ...func(*connectcampaignsv2.Options)) (*connectcampaignsv2.UpdateCampaignNameOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateCampaignName")
	}

	var r0 *connectcampaignsv2.UpdateCampaignNameOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *connectcampaignsv2.UpdateCampaignNameInput, ...func(*connectcampaignsv2.Options)) (*connectcampaignsv2.UpdateCampaignNameOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *connectcampaignsv2.UpdateCampaignNameInput, ...func(*connectcampaignsv2.Options)) *connectcampaignsv2.UpdateCampaignNameOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*connectcampaignsv2.UpdateCampaignNameOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *connectcampaignsv2.UpdateCampaignNameInput, ...func(*connectcampaignsv2.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateCampaignSchedule provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UpdateCampaignSchedule(ctx context.Context, params *connectcampaignsv2.UpdateCampaignScheduleInput, optFns ...func(*connectcampaignsv2.Options)) (*connectcampaignsv2.UpdateCampaignScheduleOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateCampaignSchedule")
	}

	var r0 *connectcampaignsv2.UpdateCampaignScheduleOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *connectcampaignsv2.UpdateCampaignScheduleInput, ...func(*connectcampaignsv2.Options)) (*connectcampaignsv2.UpdateCampaignScheduleOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *connectcampaignsv2.UpdateCampaignScheduleInput, ...func(*connectcampaignsv2.Options)) *connectcampaignsv2.UpdateCampaignScheduleOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*connectcampaignsv2.UpdateCampaignScheduleOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *connectcampaignsv2.UpdateCampaignScheduleInput, ...func(*connectcampaignsv2.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateCampaignSource provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UpdateCampaignSource(ctx context.Context, params *connectcampaignsv2.UpdateCampaignSourceInput, optFns ...func(*connectcampaignsv2.Options)) (*connectcampaignsv2.UpdateCampaignSourceOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateCampaignSource")
	}

	var r0 *connectcampaignsv2.UpdateCampaignSourceOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *connectcampaignsv2.UpdateCampaignSourceInput, ...func(*connectcampaignsv2.Options)) (*connectcampaignsv2.UpdateCampaignSourceOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *connectcampaignsv2.UpdateCampaignSourceInput, ...func(*connectcampaignsv2.Options)) *connectcampaignsv2.UpdateCampaignSourceOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*connectcampaignsv2.UpdateCampaignSourceOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *connectcampaignsv2.UpdateCampaignSourceInput, ...func(*connectcampaignsv2.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewIClient creates a new instance of IClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewIClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *IClient {
	mock := &IClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
