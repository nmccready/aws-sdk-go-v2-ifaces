// Code generated by mockery v2.39.2. DO NOT EDIT.

package mocks

import (
	context "context"

	appconfig "github.com/aws/aws-sdk-go-v2/service/appconfig"

	mock "github.com/stretchr/testify/mock"
)

// IClient is an autogenerated mock type for the IClient type
type IClient struct {
	mock.Mock
}

// CreateApplication provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CreateApplication(ctx context.Context, params *appconfig.CreateApplicationInput, optFns ...func(*appconfig.Options)) (*appconfig.CreateApplicationOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateApplication")
	}

	var r0 *appconfig.CreateApplicationOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *appconfig.CreateApplicationInput, ...func(*appconfig.Options)) (*appconfig.CreateApplicationOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *appconfig.CreateApplicationInput, ...func(*appconfig.Options)) *appconfig.CreateApplicationOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*appconfig.CreateApplicationOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *appconfig.CreateApplicationInput, ...func(*appconfig.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateConfigurationProfile provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CreateConfigurationProfile(ctx context.Context, params *appconfig.CreateConfigurationProfileInput, optFns ...func(*appconfig.Options)) (*appconfig.CreateConfigurationProfileOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateConfigurationProfile")
	}

	var r0 *appconfig.CreateConfigurationProfileOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *appconfig.CreateConfigurationProfileInput, ...func(*appconfig.Options)) (*appconfig.CreateConfigurationProfileOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *appconfig.CreateConfigurationProfileInput, ...func(*appconfig.Options)) *appconfig.CreateConfigurationProfileOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*appconfig.CreateConfigurationProfileOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *appconfig.CreateConfigurationProfileInput, ...func(*appconfig.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateDeploymentStrategy provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CreateDeploymentStrategy(ctx context.Context, params *appconfig.CreateDeploymentStrategyInput, optFns ...func(*appconfig.Options)) (*appconfig.CreateDeploymentStrategyOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateDeploymentStrategy")
	}

	var r0 *appconfig.CreateDeploymentStrategyOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *appconfig.CreateDeploymentStrategyInput, ...func(*appconfig.Options)) (*appconfig.CreateDeploymentStrategyOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *appconfig.CreateDeploymentStrategyInput, ...func(*appconfig.Options)) *appconfig.CreateDeploymentStrategyOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*appconfig.CreateDeploymentStrategyOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *appconfig.CreateDeploymentStrategyInput, ...func(*appconfig.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateEnvironment provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CreateEnvironment(ctx context.Context, params *appconfig.CreateEnvironmentInput, optFns ...func(*appconfig.Options)) (*appconfig.CreateEnvironmentOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateEnvironment")
	}

	var r0 *appconfig.CreateEnvironmentOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *appconfig.CreateEnvironmentInput, ...func(*appconfig.Options)) (*appconfig.CreateEnvironmentOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *appconfig.CreateEnvironmentInput, ...func(*appconfig.Options)) *appconfig.CreateEnvironmentOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*appconfig.CreateEnvironmentOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *appconfig.CreateEnvironmentInput, ...func(*appconfig.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateExtension provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CreateExtension(ctx context.Context, params *appconfig.CreateExtensionInput, optFns ...func(*appconfig.Options)) (*appconfig.CreateExtensionOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateExtension")
	}

	var r0 *appconfig.CreateExtensionOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *appconfig.CreateExtensionInput, ...func(*appconfig.Options)) (*appconfig.CreateExtensionOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *appconfig.CreateExtensionInput, ...func(*appconfig.Options)) *appconfig.CreateExtensionOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*appconfig.CreateExtensionOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *appconfig.CreateExtensionInput, ...func(*appconfig.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateExtensionAssociation provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CreateExtensionAssociation(ctx context.Context, params *appconfig.CreateExtensionAssociationInput, optFns ...func(*appconfig.Options)) (*appconfig.CreateExtensionAssociationOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateExtensionAssociation")
	}

	var r0 *appconfig.CreateExtensionAssociationOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *appconfig.CreateExtensionAssociationInput, ...func(*appconfig.Options)) (*appconfig.CreateExtensionAssociationOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *appconfig.CreateExtensionAssociationInput, ...func(*appconfig.Options)) *appconfig.CreateExtensionAssociationOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*appconfig.CreateExtensionAssociationOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *appconfig.CreateExtensionAssociationInput, ...func(*appconfig.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateHostedConfigurationVersion provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CreateHostedConfigurationVersion(ctx context.Context, params *appconfig.CreateHostedConfigurationVersionInput, optFns ...func(*appconfig.Options)) (*appconfig.CreateHostedConfigurationVersionOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateHostedConfigurationVersion")
	}

	var r0 *appconfig.CreateHostedConfigurationVersionOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *appconfig.CreateHostedConfigurationVersionInput, ...func(*appconfig.Options)) (*appconfig.CreateHostedConfigurationVersionOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *appconfig.CreateHostedConfigurationVersionInput, ...func(*appconfig.Options)) *appconfig.CreateHostedConfigurationVersionOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*appconfig.CreateHostedConfigurationVersionOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *appconfig.CreateHostedConfigurationVersionInput, ...func(*appconfig.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteApplication provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteApplication(ctx context.Context, params *appconfig.DeleteApplicationInput, optFns ...func(*appconfig.Options)) (*appconfig.DeleteApplicationOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteApplication")
	}

	var r0 *appconfig.DeleteApplicationOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *appconfig.DeleteApplicationInput, ...func(*appconfig.Options)) (*appconfig.DeleteApplicationOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *appconfig.DeleteApplicationInput, ...func(*appconfig.Options)) *appconfig.DeleteApplicationOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*appconfig.DeleteApplicationOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *appconfig.DeleteApplicationInput, ...func(*appconfig.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteConfigurationProfile provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteConfigurationProfile(ctx context.Context, params *appconfig.DeleteConfigurationProfileInput, optFns ...func(*appconfig.Options)) (*appconfig.DeleteConfigurationProfileOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteConfigurationProfile")
	}

	var r0 *appconfig.DeleteConfigurationProfileOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *appconfig.DeleteConfigurationProfileInput, ...func(*appconfig.Options)) (*appconfig.DeleteConfigurationProfileOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *appconfig.DeleteConfigurationProfileInput, ...func(*appconfig.Options)) *appconfig.DeleteConfigurationProfileOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*appconfig.DeleteConfigurationProfileOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *appconfig.DeleteConfigurationProfileInput, ...func(*appconfig.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteDeploymentStrategy provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteDeploymentStrategy(ctx context.Context, params *appconfig.DeleteDeploymentStrategyInput, optFns ...func(*appconfig.Options)) (*appconfig.DeleteDeploymentStrategyOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteDeploymentStrategy")
	}

	var r0 *appconfig.DeleteDeploymentStrategyOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *appconfig.DeleteDeploymentStrategyInput, ...func(*appconfig.Options)) (*appconfig.DeleteDeploymentStrategyOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *appconfig.DeleteDeploymentStrategyInput, ...func(*appconfig.Options)) *appconfig.DeleteDeploymentStrategyOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*appconfig.DeleteDeploymentStrategyOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *appconfig.DeleteDeploymentStrategyInput, ...func(*appconfig.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteEnvironment provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteEnvironment(ctx context.Context, params *appconfig.DeleteEnvironmentInput, optFns ...func(*appconfig.Options)) (*appconfig.DeleteEnvironmentOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteEnvironment")
	}

	var r0 *appconfig.DeleteEnvironmentOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *appconfig.DeleteEnvironmentInput, ...func(*appconfig.Options)) (*appconfig.DeleteEnvironmentOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *appconfig.DeleteEnvironmentInput, ...func(*appconfig.Options)) *appconfig.DeleteEnvironmentOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*appconfig.DeleteEnvironmentOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *appconfig.DeleteEnvironmentInput, ...func(*appconfig.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteExtension provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteExtension(ctx context.Context, params *appconfig.DeleteExtensionInput, optFns ...func(*appconfig.Options)) (*appconfig.DeleteExtensionOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteExtension")
	}

	var r0 *appconfig.DeleteExtensionOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *appconfig.DeleteExtensionInput, ...func(*appconfig.Options)) (*appconfig.DeleteExtensionOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *appconfig.DeleteExtensionInput, ...func(*appconfig.Options)) *appconfig.DeleteExtensionOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*appconfig.DeleteExtensionOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *appconfig.DeleteExtensionInput, ...func(*appconfig.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteExtensionAssociation provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteExtensionAssociation(ctx context.Context, params *appconfig.DeleteExtensionAssociationInput, optFns ...func(*appconfig.Options)) (*appconfig.DeleteExtensionAssociationOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteExtensionAssociation")
	}

	var r0 *appconfig.DeleteExtensionAssociationOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *appconfig.DeleteExtensionAssociationInput, ...func(*appconfig.Options)) (*appconfig.DeleteExtensionAssociationOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *appconfig.DeleteExtensionAssociationInput, ...func(*appconfig.Options)) *appconfig.DeleteExtensionAssociationOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*appconfig.DeleteExtensionAssociationOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *appconfig.DeleteExtensionAssociationInput, ...func(*appconfig.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteHostedConfigurationVersion provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteHostedConfigurationVersion(ctx context.Context, params *appconfig.DeleteHostedConfigurationVersionInput, optFns ...func(*appconfig.Options)) (*appconfig.DeleteHostedConfigurationVersionOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteHostedConfigurationVersion")
	}

	var r0 *appconfig.DeleteHostedConfigurationVersionOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *appconfig.DeleteHostedConfigurationVersionInput, ...func(*appconfig.Options)) (*appconfig.DeleteHostedConfigurationVersionOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *appconfig.DeleteHostedConfigurationVersionInput, ...func(*appconfig.Options)) *appconfig.DeleteHostedConfigurationVersionOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*appconfig.DeleteHostedConfigurationVersionOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *appconfig.DeleteHostedConfigurationVersionInput, ...func(*appconfig.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetApplication provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetApplication(ctx context.Context, params *appconfig.GetApplicationInput, optFns ...func(*appconfig.Options)) (*appconfig.GetApplicationOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetApplication")
	}

	var r0 *appconfig.GetApplicationOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *appconfig.GetApplicationInput, ...func(*appconfig.Options)) (*appconfig.GetApplicationOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *appconfig.GetApplicationInput, ...func(*appconfig.Options)) *appconfig.GetApplicationOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*appconfig.GetApplicationOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *appconfig.GetApplicationInput, ...func(*appconfig.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetConfiguration provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetConfiguration(ctx context.Context, params *appconfig.GetConfigurationInput, optFns ...func(*appconfig.Options)) (*appconfig.GetConfigurationOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetConfiguration")
	}

	var r0 *appconfig.GetConfigurationOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *appconfig.GetConfigurationInput, ...func(*appconfig.Options)) (*appconfig.GetConfigurationOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *appconfig.GetConfigurationInput, ...func(*appconfig.Options)) *appconfig.GetConfigurationOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*appconfig.GetConfigurationOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *appconfig.GetConfigurationInput, ...func(*appconfig.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetConfigurationProfile provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetConfigurationProfile(ctx context.Context, params *appconfig.GetConfigurationProfileInput, optFns ...func(*appconfig.Options)) (*appconfig.GetConfigurationProfileOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetConfigurationProfile")
	}

	var r0 *appconfig.GetConfigurationProfileOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *appconfig.GetConfigurationProfileInput, ...func(*appconfig.Options)) (*appconfig.GetConfigurationProfileOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *appconfig.GetConfigurationProfileInput, ...func(*appconfig.Options)) *appconfig.GetConfigurationProfileOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*appconfig.GetConfigurationProfileOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *appconfig.GetConfigurationProfileInput, ...func(*appconfig.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetDeployment provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetDeployment(ctx context.Context, params *appconfig.GetDeploymentInput, optFns ...func(*appconfig.Options)) (*appconfig.GetDeploymentOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetDeployment")
	}

	var r0 *appconfig.GetDeploymentOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *appconfig.GetDeploymentInput, ...func(*appconfig.Options)) (*appconfig.GetDeploymentOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *appconfig.GetDeploymentInput, ...func(*appconfig.Options)) *appconfig.GetDeploymentOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*appconfig.GetDeploymentOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *appconfig.GetDeploymentInput, ...func(*appconfig.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetDeploymentStrategy provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetDeploymentStrategy(ctx context.Context, params *appconfig.GetDeploymentStrategyInput, optFns ...func(*appconfig.Options)) (*appconfig.GetDeploymentStrategyOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetDeploymentStrategy")
	}

	var r0 *appconfig.GetDeploymentStrategyOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *appconfig.GetDeploymentStrategyInput, ...func(*appconfig.Options)) (*appconfig.GetDeploymentStrategyOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *appconfig.GetDeploymentStrategyInput, ...func(*appconfig.Options)) *appconfig.GetDeploymentStrategyOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*appconfig.GetDeploymentStrategyOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *appconfig.GetDeploymentStrategyInput, ...func(*appconfig.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetEnvironment provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetEnvironment(ctx context.Context, params *appconfig.GetEnvironmentInput, optFns ...func(*appconfig.Options)) (*appconfig.GetEnvironmentOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetEnvironment")
	}

	var r0 *appconfig.GetEnvironmentOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *appconfig.GetEnvironmentInput, ...func(*appconfig.Options)) (*appconfig.GetEnvironmentOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *appconfig.GetEnvironmentInput, ...func(*appconfig.Options)) *appconfig.GetEnvironmentOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*appconfig.GetEnvironmentOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *appconfig.GetEnvironmentInput, ...func(*appconfig.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetExtension provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetExtension(ctx context.Context, params *appconfig.GetExtensionInput, optFns ...func(*appconfig.Options)) (*appconfig.GetExtensionOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetExtension")
	}

	var r0 *appconfig.GetExtensionOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *appconfig.GetExtensionInput, ...func(*appconfig.Options)) (*appconfig.GetExtensionOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *appconfig.GetExtensionInput, ...func(*appconfig.Options)) *appconfig.GetExtensionOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*appconfig.GetExtensionOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *appconfig.GetExtensionInput, ...func(*appconfig.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetExtensionAssociation provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetExtensionAssociation(ctx context.Context, params *appconfig.GetExtensionAssociationInput, optFns ...func(*appconfig.Options)) (*appconfig.GetExtensionAssociationOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetExtensionAssociation")
	}

	var r0 *appconfig.GetExtensionAssociationOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *appconfig.GetExtensionAssociationInput, ...func(*appconfig.Options)) (*appconfig.GetExtensionAssociationOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *appconfig.GetExtensionAssociationInput, ...func(*appconfig.Options)) *appconfig.GetExtensionAssociationOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*appconfig.GetExtensionAssociationOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *appconfig.GetExtensionAssociationInput, ...func(*appconfig.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetHostedConfigurationVersion provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetHostedConfigurationVersion(ctx context.Context, params *appconfig.GetHostedConfigurationVersionInput, optFns ...func(*appconfig.Options)) (*appconfig.GetHostedConfigurationVersionOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetHostedConfigurationVersion")
	}

	var r0 *appconfig.GetHostedConfigurationVersionOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *appconfig.GetHostedConfigurationVersionInput, ...func(*appconfig.Options)) (*appconfig.GetHostedConfigurationVersionOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *appconfig.GetHostedConfigurationVersionInput, ...func(*appconfig.Options)) *appconfig.GetHostedConfigurationVersionOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*appconfig.GetHostedConfigurationVersionOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *appconfig.GetHostedConfigurationVersionInput, ...func(*appconfig.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListApplications provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListApplications(ctx context.Context, params *appconfig.ListApplicationsInput, optFns ...func(*appconfig.Options)) (*appconfig.ListApplicationsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListApplications")
	}

	var r0 *appconfig.ListApplicationsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *appconfig.ListApplicationsInput, ...func(*appconfig.Options)) (*appconfig.ListApplicationsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *appconfig.ListApplicationsInput, ...func(*appconfig.Options)) *appconfig.ListApplicationsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*appconfig.ListApplicationsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *appconfig.ListApplicationsInput, ...func(*appconfig.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListConfigurationProfiles provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListConfigurationProfiles(ctx context.Context, params *appconfig.ListConfigurationProfilesInput, optFns ...func(*appconfig.Options)) (*appconfig.ListConfigurationProfilesOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListConfigurationProfiles")
	}

	var r0 *appconfig.ListConfigurationProfilesOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *appconfig.ListConfigurationProfilesInput, ...func(*appconfig.Options)) (*appconfig.ListConfigurationProfilesOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *appconfig.ListConfigurationProfilesInput, ...func(*appconfig.Options)) *appconfig.ListConfigurationProfilesOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*appconfig.ListConfigurationProfilesOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *appconfig.ListConfigurationProfilesInput, ...func(*appconfig.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListDeploymentStrategies provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListDeploymentStrategies(ctx context.Context, params *appconfig.ListDeploymentStrategiesInput, optFns ...func(*appconfig.Options)) (*appconfig.ListDeploymentStrategiesOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListDeploymentStrategies")
	}

	var r0 *appconfig.ListDeploymentStrategiesOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *appconfig.ListDeploymentStrategiesInput, ...func(*appconfig.Options)) (*appconfig.ListDeploymentStrategiesOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *appconfig.ListDeploymentStrategiesInput, ...func(*appconfig.Options)) *appconfig.ListDeploymentStrategiesOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*appconfig.ListDeploymentStrategiesOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *appconfig.ListDeploymentStrategiesInput, ...func(*appconfig.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListDeployments provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListDeployments(ctx context.Context, params *appconfig.ListDeploymentsInput, optFns ...func(*appconfig.Options)) (*appconfig.ListDeploymentsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListDeployments")
	}

	var r0 *appconfig.ListDeploymentsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *appconfig.ListDeploymentsInput, ...func(*appconfig.Options)) (*appconfig.ListDeploymentsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *appconfig.ListDeploymentsInput, ...func(*appconfig.Options)) *appconfig.ListDeploymentsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*appconfig.ListDeploymentsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *appconfig.ListDeploymentsInput, ...func(*appconfig.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListEnvironments provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListEnvironments(ctx context.Context, params *appconfig.ListEnvironmentsInput, optFns ...func(*appconfig.Options)) (*appconfig.ListEnvironmentsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListEnvironments")
	}

	var r0 *appconfig.ListEnvironmentsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *appconfig.ListEnvironmentsInput, ...func(*appconfig.Options)) (*appconfig.ListEnvironmentsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *appconfig.ListEnvironmentsInput, ...func(*appconfig.Options)) *appconfig.ListEnvironmentsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*appconfig.ListEnvironmentsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *appconfig.ListEnvironmentsInput, ...func(*appconfig.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListExtensionAssociations provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListExtensionAssociations(ctx context.Context, params *appconfig.ListExtensionAssociationsInput, optFns ...func(*appconfig.Options)) (*appconfig.ListExtensionAssociationsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListExtensionAssociations")
	}

	var r0 *appconfig.ListExtensionAssociationsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *appconfig.ListExtensionAssociationsInput, ...func(*appconfig.Options)) (*appconfig.ListExtensionAssociationsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *appconfig.ListExtensionAssociationsInput, ...func(*appconfig.Options)) *appconfig.ListExtensionAssociationsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*appconfig.ListExtensionAssociationsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *appconfig.ListExtensionAssociationsInput, ...func(*appconfig.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListExtensions provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListExtensions(ctx context.Context, params *appconfig.ListExtensionsInput, optFns ...func(*appconfig.Options)) (*appconfig.ListExtensionsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListExtensions")
	}

	var r0 *appconfig.ListExtensionsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *appconfig.ListExtensionsInput, ...func(*appconfig.Options)) (*appconfig.ListExtensionsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *appconfig.ListExtensionsInput, ...func(*appconfig.Options)) *appconfig.ListExtensionsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*appconfig.ListExtensionsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *appconfig.ListExtensionsInput, ...func(*appconfig.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListHostedConfigurationVersions provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListHostedConfigurationVersions(ctx context.Context, params *appconfig.ListHostedConfigurationVersionsInput, optFns ...func(*appconfig.Options)) (*appconfig.ListHostedConfigurationVersionsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListHostedConfigurationVersions")
	}

	var r0 *appconfig.ListHostedConfigurationVersionsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *appconfig.ListHostedConfigurationVersionsInput, ...func(*appconfig.Options)) (*appconfig.ListHostedConfigurationVersionsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *appconfig.ListHostedConfigurationVersionsInput, ...func(*appconfig.Options)) *appconfig.ListHostedConfigurationVersionsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*appconfig.ListHostedConfigurationVersionsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *appconfig.ListHostedConfigurationVersionsInput, ...func(*appconfig.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListTagsForResource provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListTagsForResource(ctx context.Context, params *appconfig.ListTagsForResourceInput, optFns ...func(*appconfig.Options)) (*appconfig.ListTagsForResourceOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListTagsForResource")
	}

	var r0 *appconfig.ListTagsForResourceOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *appconfig.ListTagsForResourceInput, ...func(*appconfig.Options)) (*appconfig.ListTagsForResourceOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *appconfig.ListTagsForResourceInput, ...func(*appconfig.Options)) *appconfig.ListTagsForResourceOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*appconfig.ListTagsForResourceOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *appconfig.ListTagsForResourceInput, ...func(*appconfig.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Options provides a mock function with given fields:
func (_m *IClient) Options() appconfig.Options {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Options")
	}

	var r0 appconfig.Options
	if rf, ok := ret.Get(0).(func() appconfig.Options); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(appconfig.Options)
	}

	return r0
}

// StartDeployment provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) StartDeployment(ctx context.Context, params *appconfig.StartDeploymentInput, optFns ...func(*appconfig.Options)) (*appconfig.StartDeploymentOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for StartDeployment")
	}

	var r0 *appconfig.StartDeploymentOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *appconfig.StartDeploymentInput, ...func(*appconfig.Options)) (*appconfig.StartDeploymentOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *appconfig.StartDeploymentInput, ...func(*appconfig.Options)) *appconfig.StartDeploymentOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*appconfig.StartDeploymentOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *appconfig.StartDeploymentInput, ...func(*appconfig.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// StopDeployment provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) StopDeployment(ctx context.Context, params *appconfig.StopDeploymentInput, optFns ...func(*appconfig.Options)) (*appconfig.StopDeploymentOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for StopDeployment")
	}

	var r0 *appconfig.StopDeploymentOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *appconfig.StopDeploymentInput, ...func(*appconfig.Options)) (*appconfig.StopDeploymentOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *appconfig.StopDeploymentInput, ...func(*appconfig.Options)) *appconfig.StopDeploymentOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*appconfig.StopDeploymentOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *appconfig.StopDeploymentInput, ...func(*appconfig.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// TagResource provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) TagResource(ctx context.Context, params *appconfig.TagResourceInput, optFns ...func(*appconfig.Options)) (*appconfig.TagResourceOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for TagResource")
	}

	var r0 *appconfig.TagResourceOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *appconfig.TagResourceInput, ...func(*appconfig.Options)) (*appconfig.TagResourceOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *appconfig.TagResourceInput, ...func(*appconfig.Options)) *appconfig.TagResourceOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*appconfig.TagResourceOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *appconfig.TagResourceInput, ...func(*appconfig.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UntagResource provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UntagResource(ctx context.Context, params *appconfig.UntagResourceInput, optFns ...func(*appconfig.Options)) (*appconfig.UntagResourceOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UntagResource")
	}

	var r0 *appconfig.UntagResourceOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *appconfig.UntagResourceInput, ...func(*appconfig.Options)) (*appconfig.UntagResourceOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *appconfig.UntagResourceInput, ...func(*appconfig.Options)) *appconfig.UntagResourceOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*appconfig.UntagResourceOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *appconfig.UntagResourceInput, ...func(*appconfig.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateApplication provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UpdateApplication(ctx context.Context, params *appconfig.UpdateApplicationInput, optFns ...func(*appconfig.Options)) (*appconfig.UpdateApplicationOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateApplication")
	}

	var r0 *appconfig.UpdateApplicationOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *appconfig.UpdateApplicationInput, ...func(*appconfig.Options)) (*appconfig.UpdateApplicationOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *appconfig.UpdateApplicationInput, ...func(*appconfig.Options)) *appconfig.UpdateApplicationOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*appconfig.UpdateApplicationOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *appconfig.UpdateApplicationInput, ...func(*appconfig.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateConfigurationProfile provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UpdateConfigurationProfile(ctx context.Context, params *appconfig.UpdateConfigurationProfileInput, optFns ...func(*appconfig.Options)) (*appconfig.UpdateConfigurationProfileOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateConfigurationProfile")
	}

	var r0 *appconfig.UpdateConfigurationProfileOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *appconfig.UpdateConfigurationProfileInput, ...func(*appconfig.Options)) (*appconfig.UpdateConfigurationProfileOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *appconfig.UpdateConfigurationProfileInput, ...func(*appconfig.Options)) *appconfig.UpdateConfigurationProfileOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*appconfig.UpdateConfigurationProfileOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *appconfig.UpdateConfigurationProfileInput, ...func(*appconfig.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateDeploymentStrategy provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UpdateDeploymentStrategy(ctx context.Context, params *appconfig.UpdateDeploymentStrategyInput, optFns ...func(*appconfig.Options)) (*appconfig.UpdateDeploymentStrategyOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateDeploymentStrategy")
	}

	var r0 *appconfig.UpdateDeploymentStrategyOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *appconfig.UpdateDeploymentStrategyInput, ...func(*appconfig.Options)) (*appconfig.UpdateDeploymentStrategyOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *appconfig.UpdateDeploymentStrategyInput, ...func(*appconfig.Options)) *appconfig.UpdateDeploymentStrategyOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*appconfig.UpdateDeploymentStrategyOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *appconfig.UpdateDeploymentStrategyInput, ...func(*appconfig.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateEnvironment provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UpdateEnvironment(ctx context.Context, params *appconfig.UpdateEnvironmentInput, optFns ...func(*appconfig.Options)) (*appconfig.UpdateEnvironmentOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateEnvironment")
	}

	var r0 *appconfig.UpdateEnvironmentOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *appconfig.UpdateEnvironmentInput, ...func(*appconfig.Options)) (*appconfig.UpdateEnvironmentOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *appconfig.UpdateEnvironmentInput, ...func(*appconfig.Options)) *appconfig.UpdateEnvironmentOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*appconfig.UpdateEnvironmentOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *appconfig.UpdateEnvironmentInput, ...func(*appconfig.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateExtension provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UpdateExtension(ctx context.Context, params *appconfig.UpdateExtensionInput, optFns ...func(*appconfig.Options)) (*appconfig.UpdateExtensionOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateExtension")
	}

	var r0 *appconfig.UpdateExtensionOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *appconfig.UpdateExtensionInput, ...func(*appconfig.Options)) (*appconfig.UpdateExtensionOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *appconfig.UpdateExtensionInput, ...func(*appconfig.Options)) *appconfig.UpdateExtensionOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*appconfig.UpdateExtensionOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *appconfig.UpdateExtensionInput, ...func(*appconfig.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateExtensionAssociation provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UpdateExtensionAssociation(ctx context.Context, params *appconfig.UpdateExtensionAssociationInput, optFns ...func(*appconfig.Options)) (*appconfig.UpdateExtensionAssociationOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateExtensionAssociation")
	}

	var r0 *appconfig.UpdateExtensionAssociationOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *appconfig.UpdateExtensionAssociationInput, ...func(*appconfig.Options)) (*appconfig.UpdateExtensionAssociationOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *appconfig.UpdateExtensionAssociationInput, ...func(*appconfig.Options)) *appconfig.UpdateExtensionAssociationOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*appconfig.UpdateExtensionAssociationOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *appconfig.UpdateExtensionAssociationInput, ...func(*appconfig.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ValidateConfiguration provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ValidateConfiguration(ctx context.Context, params *appconfig.ValidateConfigurationInput, optFns ...func(*appconfig.Options)) (*appconfig.ValidateConfigurationOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ValidateConfiguration")
	}

	var r0 *appconfig.ValidateConfigurationOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *appconfig.ValidateConfigurationInput, ...func(*appconfig.Options)) (*appconfig.ValidateConfigurationOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *appconfig.ValidateConfigurationInput, ...func(*appconfig.Options)) *appconfig.ValidateConfigurationOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*appconfig.ValidateConfigurationOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *appconfig.ValidateConfigurationInput, ...func(*appconfig.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewIClient creates a new instance of IClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewIClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *IClient {
	mock := &IClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
