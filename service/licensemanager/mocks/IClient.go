// Code generated by mockery v2.39.2. DO NOT EDIT.

package mocks

import (
	context "context"

	licensemanager "github.com/aws/aws-sdk-go-v2/service/licensemanager"

	mock "github.com/stretchr/testify/mock"
)

// IClient is an autogenerated mock type for the IClient type
type IClient struct {
	mock.Mock
}

// AcceptGrant provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) AcceptGrant(ctx context.Context, params *licensemanager.AcceptGrantInput, optFns ...func(*licensemanager.Options)) (*licensemanager.AcceptGrantOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for AcceptGrant")
	}

	var r0 *licensemanager.AcceptGrantOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *licensemanager.AcceptGrantInput, ...func(*licensemanager.Options)) (*licensemanager.AcceptGrantOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *licensemanager.AcceptGrantInput, ...func(*licensemanager.Options)) *licensemanager.AcceptGrantOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*licensemanager.AcceptGrantOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *licensemanager.AcceptGrantInput, ...func(*licensemanager.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CheckInLicense provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CheckInLicense(ctx context.Context, params *licensemanager.CheckInLicenseInput, optFns ...func(*licensemanager.Options)) (*licensemanager.CheckInLicenseOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CheckInLicense")
	}

	var r0 *licensemanager.CheckInLicenseOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *licensemanager.CheckInLicenseInput, ...func(*licensemanager.Options)) (*licensemanager.CheckInLicenseOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *licensemanager.CheckInLicenseInput, ...func(*licensemanager.Options)) *licensemanager.CheckInLicenseOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*licensemanager.CheckInLicenseOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *licensemanager.CheckInLicenseInput, ...func(*licensemanager.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CheckoutBorrowLicense provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CheckoutBorrowLicense(ctx context.Context, params *licensemanager.CheckoutBorrowLicenseInput, optFns ...func(*licensemanager.Options)) (*licensemanager.CheckoutBorrowLicenseOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CheckoutBorrowLicense")
	}

	var r0 *licensemanager.CheckoutBorrowLicenseOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *licensemanager.CheckoutBorrowLicenseInput, ...func(*licensemanager.Options)) (*licensemanager.CheckoutBorrowLicenseOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *licensemanager.CheckoutBorrowLicenseInput, ...func(*licensemanager.Options)) *licensemanager.CheckoutBorrowLicenseOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*licensemanager.CheckoutBorrowLicenseOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *licensemanager.CheckoutBorrowLicenseInput, ...func(*licensemanager.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CheckoutLicense provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CheckoutLicense(ctx context.Context, params *licensemanager.CheckoutLicenseInput, optFns ...func(*licensemanager.Options)) (*licensemanager.CheckoutLicenseOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CheckoutLicense")
	}

	var r0 *licensemanager.CheckoutLicenseOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *licensemanager.CheckoutLicenseInput, ...func(*licensemanager.Options)) (*licensemanager.CheckoutLicenseOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *licensemanager.CheckoutLicenseInput, ...func(*licensemanager.Options)) *licensemanager.CheckoutLicenseOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*licensemanager.CheckoutLicenseOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *licensemanager.CheckoutLicenseInput, ...func(*licensemanager.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateGrant provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CreateGrant(ctx context.Context, params *licensemanager.CreateGrantInput, optFns ...func(*licensemanager.Options)) (*licensemanager.CreateGrantOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateGrant")
	}

	var r0 *licensemanager.CreateGrantOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *licensemanager.CreateGrantInput, ...func(*licensemanager.Options)) (*licensemanager.CreateGrantOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *licensemanager.CreateGrantInput, ...func(*licensemanager.Options)) *licensemanager.CreateGrantOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*licensemanager.CreateGrantOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *licensemanager.CreateGrantInput, ...func(*licensemanager.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateGrantVersion provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CreateGrantVersion(ctx context.Context, params *licensemanager.CreateGrantVersionInput, optFns ...func(*licensemanager.Options)) (*licensemanager.CreateGrantVersionOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateGrantVersion")
	}

	var r0 *licensemanager.CreateGrantVersionOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *licensemanager.CreateGrantVersionInput, ...func(*licensemanager.Options)) (*licensemanager.CreateGrantVersionOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *licensemanager.CreateGrantVersionInput, ...func(*licensemanager.Options)) *licensemanager.CreateGrantVersionOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*licensemanager.CreateGrantVersionOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *licensemanager.CreateGrantVersionInput, ...func(*licensemanager.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateLicense provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CreateLicense(ctx context.Context, params *licensemanager.CreateLicenseInput, optFns ...func(*licensemanager.Options)) (*licensemanager.CreateLicenseOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateLicense")
	}

	var r0 *licensemanager.CreateLicenseOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *licensemanager.CreateLicenseInput, ...func(*licensemanager.Options)) (*licensemanager.CreateLicenseOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *licensemanager.CreateLicenseInput, ...func(*licensemanager.Options)) *licensemanager.CreateLicenseOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*licensemanager.CreateLicenseOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *licensemanager.CreateLicenseInput, ...func(*licensemanager.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateLicenseConfiguration provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CreateLicenseConfiguration(ctx context.Context, params *licensemanager.CreateLicenseConfigurationInput, optFns ...func(*licensemanager.Options)) (*licensemanager.CreateLicenseConfigurationOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateLicenseConfiguration")
	}

	var r0 *licensemanager.CreateLicenseConfigurationOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *licensemanager.CreateLicenseConfigurationInput, ...func(*licensemanager.Options)) (*licensemanager.CreateLicenseConfigurationOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *licensemanager.CreateLicenseConfigurationInput, ...func(*licensemanager.Options)) *licensemanager.CreateLicenseConfigurationOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*licensemanager.CreateLicenseConfigurationOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *licensemanager.CreateLicenseConfigurationInput, ...func(*licensemanager.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateLicenseConversionTaskForResource provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CreateLicenseConversionTaskForResource(ctx context.Context, params *licensemanager.CreateLicenseConversionTaskForResourceInput, optFns ...func(*licensemanager.Options)) (*licensemanager.CreateLicenseConversionTaskForResourceOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateLicenseConversionTaskForResource")
	}

	var r0 *licensemanager.CreateLicenseConversionTaskForResourceOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *licensemanager.CreateLicenseConversionTaskForResourceInput, ...func(*licensemanager.Options)) (*licensemanager.CreateLicenseConversionTaskForResourceOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *licensemanager.CreateLicenseConversionTaskForResourceInput, ...func(*licensemanager.Options)) *licensemanager.CreateLicenseConversionTaskForResourceOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*licensemanager.CreateLicenseConversionTaskForResourceOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *licensemanager.CreateLicenseConversionTaskForResourceInput, ...func(*licensemanager.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateLicenseManagerReportGenerator provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CreateLicenseManagerReportGenerator(ctx context.Context, params *licensemanager.CreateLicenseManagerReportGeneratorInput, optFns ...func(*licensemanager.Options)) (*licensemanager.CreateLicenseManagerReportGeneratorOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateLicenseManagerReportGenerator")
	}

	var r0 *licensemanager.CreateLicenseManagerReportGeneratorOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *licensemanager.CreateLicenseManagerReportGeneratorInput, ...func(*licensemanager.Options)) (*licensemanager.CreateLicenseManagerReportGeneratorOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *licensemanager.CreateLicenseManagerReportGeneratorInput, ...func(*licensemanager.Options)) *licensemanager.CreateLicenseManagerReportGeneratorOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*licensemanager.CreateLicenseManagerReportGeneratorOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *licensemanager.CreateLicenseManagerReportGeneratorInput, ...func(*licensemanager.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateLicenseVersion provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CreateLicenseVersion(ctx context.Context, params *licensemanager.CreateLicenseVersionInput, optFns ...func(*licensemanager.Options)) (*licensemanager.CreateLicenseVersionOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateLicenseVersion")
	}

	var r0 *licensemanager.CreateLicenseVersionOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *licensemanager.CreateLicenseVersionInput, ...func(*licensemanager.Options)) (*licensemanager.CreateLicenseVersionOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *licensemanager.CreateLicenseVersionInput, ...func(*licensemanager.Options)) *licensemanager.CreateLicenseVersionOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*licensemanager.CreateLicenseVersionOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *licensemanager.CreateLicenseVersionInput, ...func(*licensemanager.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateToken provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CreateToken(ctx context.Context, params *licensemanager.CreateTokenInput, optFns ...func(*licensemanager.Options)) (*licensemanager.CreateTokenOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateToken")
	}

	var r0 *licensemanager.CreateTokenOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *licensemanager.CreateTokenInput, ...func(*licensemanager.Options)) (*licensemanager.CreateTokenOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *licensemanager.CreateTokenInput, ...func(*licensemanager.Options)) *licensemanager.CreateTokenOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*licensemanager.CreateTokenOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *licensemanager.CreateTokenInput, ...func(*licensemanager.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteGrant provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteGrant(ctx context.Context, params *licensemanager.DeleteGrantInput, optFns ...func(*licensemanager.Options)) (*licensemanager.DeleteGrantOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteGrant")
	}

	var r0 *licensemanager.DeleteGrantOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *licensemanager.DeleteGrantInput, ...func(*licensemanager.Options)) (*licensemanager.DeleteGrantOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *licensemanager.DeleteGrantInput, ...func(*licensemanager.Options)) *licensemanager.DeleteGrantOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*licensemanager.DeleteGrantOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *licensemanager.DeleteGrantInput, ...func(*licensemanager.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteLicense provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteLicense(ctx context.Context, params *licensemanager.DeleteLicenseInput, optFns ...func(*licensemanager.Options)) (*licensemanager.DeleteLicenseOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteLicense")
	}

	var r0 *licensemanager.DeleteLicenseOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *licensemanager.DeleteLicenseInput, ...func(*licensemanager.Options)) (*licensemanager.DeleteLicenseOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *licensemanager.DeleteLicenseInput, ...func(*licensemanager.Options)) *licensemanager.DeleteLicenseOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*licensemanager.DeleteLicenseOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *licensemanager.DeleteLicenseInput, ...func(*licensemanager.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteLicenseConfiguration provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteLicenseConfiguration(ctx context.Context, params *licensemanager.DeleteLicenseConfigurationInput, optFns ...func(*licensemanager.Options)) (*licensemanager.DeleteLicenseConfigurationOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteLicenseConfiguration")
	}

	var r0 *licensemanager.DeleteLicenseConfigurationOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *licensemanager.DeleteLicenseConfigurationInput, ...func(*licensemanager.Options)) (*licensemanager.DeleteLicenseConfigurationOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *licensemanager.DeleteLicenseConfigurationInput, ...func(*licensemanager.Options)) *licensemanager.DeleteLicenseConfigurationOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*licensemanager.DeleteLicenseConfigurationOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *licensemanager.DeleteLicenseConfigurationInput, ...func(*licensemanager.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteLicenseManagerReportGenerator provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteLicenseManagerReportGenerator(ctx context.Context, params *licensemanager.DeleteLicenseManagerReportGeneratorInput, optFns ...func(*licensemanager.Options)) (*licensemanager.DeleteLicenseManagerReportGeneratorOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteLicenseManagerReportGenerator")
	}

	var r0 *licensemanager.DeleteLicenseManagerReportGeneratorOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *licensemanager.DeleteLicenseManagerReportGeneratorInput, ...func(*licensemanager.Options)) (*licensemanager.DeleteLicenseManagerReportGeneratorOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *licensemanager.DeleteLicenseManagerReportGeneratorInput, ...func(*licensemanager.Options)) *licensemanager.DeleteLicenseManagerReportGeneratorOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*licensemanager.DeleteLicenseManagerReportGeneratorOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *licensemanager.DeleteLicenseManagerReportGeneratorInput, ...func(*licensemanager.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteToken provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteToken(ctx context.Context, params *licensemanager.DeleteTokenInput, optFns ...func(*licensemanager.Options)) (*licensemanager.DeleteTokenOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteToken")
	}

	var r0 *licensemanager.DeleteTokenOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *licensemanager.DeleteTokenInput, ...func(*licensemanager.Options)) (*licensemanager.DeleteTokenOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *licensemanager.DeleteTokenInput, ...func(*licensemanager.Options)) *licensemanager.DeleteTokenOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*licensemanager.DeleteTokenOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *licensemanager.DeleteTokenInput, ...func(*licensemanager.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ExtendLicenseConsumption provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ExtendLicenseConsumption(ctx context.Context, params *licensemanager.ExtendLicenseConsumptionInput, optFns ...func(*licensemanager.Options)) (*licensemanager.ExtendLicenseConsumptionOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ExtendLicenseConsumption")
	}

	var r0 *licensemanager.ExtendLicenseConsumptionOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *licensemanager.ExtendLicenseConsumptionInput, ...func(*licensemanager.Options)) (*licensemanager.ExtendLicenseConsumptionOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *licensemanager.ExtendLicenseConsumptionInput, ...func(*licensemanager.Options)) *licensemanager.ExtendLicenseConsumptionOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*licensemanager.ExtendLicenseConsumptionOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *licensemanager.ExtendLicenseConsumptionInput, ...func(*licensemanager.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAccessToken provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetAccessToken(ctx context.Context, params *licensemanager.GetAccessTokenInput, optFns ...func(*licensemanager.Options)) (*licensemanager.GetAccessTokenOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetAccessToken")
	}

	var r0 *licensemanager.GetAccessTokenOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *licensemanager.GetAccessTokenInput, ...func(*licensemanager.Options)) (*licensemanager.GetAccessTokenOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *licensemanager.GetAccessTokenInput, ...func(*licensemanager.Options)) *licensemanager.GetAccessTokenOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*licensemanager.GetAccessTokenOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *licensemanager.GetAccessTokenInput, ...func(*licensemanager.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetGrant provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetGrant(ctx context.Context, params *licensemanager.GetGrantInput, optFns ...func(*licensemanager.Options)) (*licensemanager.GetGrantOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetGrant")
	}

	var r0 *licensemanager.GetGrantOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *licensemanager.GetGrantInput, ...func(*licensemanager.Options)) (*licensemanager.GetGrantOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *licensemanager.GetGrantInput, ...func(*licensemanager.Options)) *licensemanager.GetGrantOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*licensemanager.GetGrantOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *licensemanager.GetGrantInput, ...func(*licensemanager.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetLicense provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetLicense(ctx context.Context, params *licensemanager.GetLicenseInput, optFns ...func(*licensemanager.Options)) (*licensemanager.GetLicenseOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetLicense")
	}

	var r0 *licensemanager.GetLicenseOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *licensemanager.GetLicenseInput, ...func(*licensemanager.Options)) (*licensemanager.GetLicenseOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *licensemanager.GetLicenseInput, ...func(*licensemanager.Options)) *licensemanager.GetLicenseOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*licensemanager.GetLicenseOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *licensemanager.GetLicenseInput, ...func(*licensemanager.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetLicenseConfiguration provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetLicenseConfiguration(ctx context.Context, params *licensemanager.GetLicenseConfigurationInput, optFns ...func(*licensemanager.Options)) (*licensemanager.GetLicenseConfigurationOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetLicenseConfiguration")
	}

	var r0 *licensemanager.GetLicenseConfigurationOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *licensemanager.GetLicenseConfigurationInput, ...func(*licensemanager.Options)) (*licensemanager.GetLicenseConfigurationOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *licensemanager.GetLicenseConfigurationInput, ...func(*licensemanager.Options)) *licensemanager.GetLicenseConfigurationOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*licensemanager.GetLicenseConfigurationOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *licensemanager.GetLicenseConfigurationInput, ...func(*licensemanager.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetLicenseConversionTask provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetLicenseConversionTask(ctx context.Context, params *licensemanager.GetLicenseConversionTaskInput, optFns ...func(*licensemanager.Options)) (*licensemanager.GetLicenseConversionTaskOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetLicenseConversionTask")
	}

	var r0 *licensemanager.GetLicenseConversionTaskOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *licensemanager.GetLicenseConversionTaskInput, ...func(*licensemanager.Options)) (*licensemanager.GetLicenseConversionTaskOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *licensemanager.GetLicenseConversionTaskInput, ...func(*licensemanager.Options)) *licensemanager.GetLicenseConversionTaskOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*licensemanager.GetLicenseConversionTaskOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *licensemanager.GetLicenseConversionTaskInput, ...func(*licensemanager.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetLicenseManagerReportGenerator provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetLicenseManagerReportGenerator(ctx context.Context, params *licensemanager.GetLicenseManagerReportGeneratorInput, optFns ...func(*licensemanager.Options)) (*licensemanager.GetLicenseManagerReportGeneratorOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetLicenseManagerReportGenerator")
	}

	var r0 *licensemanager.GetLicenseManagerReportGeneratorOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *licensemanager.GetLicenseManagerReportGeneratorInput, ...func(*licensemanager.Options)) (*licensemanager.GetLicenseManagerReportGeneratorOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *licensemanager.GetLicenseManagerReportGeneratorInput, ...func(*licensemanager.Options)) *licensemanager.GetLicenseManagerReportGeneratorOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*licensemanager.GetLicenseManagerReportGeneratorOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *licensemanager.GetLicenseManagerReportGeneratorInput, ...func(*licensemanager.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetLicenseUsage provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetLicenseUsage(ctx context.Context, params *licensemanager.GetLicenseUsageInput, optFns ...func(*licensemanager.Options)) (*licensemanager.GetLicenseUsageOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetLicenseUsage")
	}

	var r0 *licensemanager.GetLicenseUsageOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *licensemanager.GetLicenseUsageInput, ...func(*licensemanager.Options)) (*licensemanager.GetLicenseUsageOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *licensemanager.GetLicenseUsageInput, ...func(*licensemanager.Options)) *licensemanager.GetLicenseUsageOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*licensemanager.GetLicenseUsageOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *licensemanager.GetLicenseUsageInput, ...func(*licensemanager.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetServiceSettings provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetServiceSettings(ctx context.Context, params *licensemanager.GetServiceSettingsInput, optFns ...func(*licensemanager.Options)) (*licensemanager.GetServiceSettingsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetServiceSettings")
	}

	var r0 *licensemanager.GetServiceSettingsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *licensemanager.GetServiceSettingsInput, ...func(*licensemanager.Options)) (*licensemanager.GetServiceSettingsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *licensemanager.GetServiceSettingsInput, ...func(*licensemanager.Options)) *licensemanager.GetServiceSettingsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*licensemanager.GetServiceSettingsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *licensemanager.GetServiceSettingsInput, ...func(*licensemanager.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListAssociationsForLicenseConfiguration provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListAssociationsForLicenseConfiguration(ctx context.Context, params *licensemanager.ListAssociationsForLicenseConfigurationInput, optFns ...func(*licensemanager.Options)) (*licensemanager.ListAssociationsForLicenseConfigurationOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListAssociationsForLicenseConfiguration")
	}

	var r0 *licensemanager.ListAssociationsForLicenseConfigurationOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *licensemanager.ListAssociationsForLicenseConfigurationInput, ...func(*licensemanager.Options)) (*licensemanager.ListAssociationsForLicenseConfigurationOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *licensemanager.ListAssociationsForLicenseConfigurationInput, ...func(*licensemanager.Options)) *licensemanager.ListAssociationsForLicenseConfigurationOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*licensemanager.ListAssociationsForLicenseConfigurationOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *licensemanager.ListAssociationsForLicenseConfigurationInput, ...func(*licensemanager.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListDistributedGrants provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListDistributedGrants(ctx context.Context, params *licensemanager.ListDistributedGrantsInput, optFns ...func(*licensemanager.Options)) (*licensemanager.ListDistributedGrantsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListDistributedGrants")
	}

	var r0 *licensemanager.ListDistributedGrantsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *licensemanager.ListDistributedGrantsInput, ...func(*licensemanager.Options)) (*licensemanager.ListDistributedGrantsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *licensemanager.ListDistributedGrantsInput, ...func(*licensemanager.Options)) *licensemanager.ListDistributedGrantsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*licensemanager.ListDistributedGrantsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *licensemanager.ListDistributedGrantsInput, ...func(*licensemanager.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListFailuresForLicenseConfigurationOperations provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListFailuresForLicenseConfigurationOperations(ctx context.Context, params *licensemanager.ListFailuresForLicenseConfigurationOperationsInput, optFns ...func(*licensemanager.Options)) (*licensemanager.ListFailuresForLicenseConfigurationOperationsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListFailuresForLicenseConfigurationOperations")
	}

	var r0 *licensemanager.ListFailuresForLicenseConfigurationOperationsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *licensemanager.ListFailuresForLicenseConfigurationOperationsInput, ...func(*licensemanager.Options)) (*licensemanager.ListFailuresForLicenseConfigurationOperationsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *licensemanager.ListFailuresForLicenseConfigurationOperationsInput, ...func(*licensemanager.Options)) *licensemanager.ListFailuresForLicenseConfigurationOperationsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*licensemanager.ListFailuresForLicenseConfigurationOperationsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *licensemanager.ListFailuresForLicenseConfigurationOperationsInput, ...func(*licensemanager.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListLicenseConfigurations provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListLicenseConfigurations(ctx context.Context, params *licensemanager.ListLicenseConfigurationsInput, optFns ...func(*licensemanager.Options)) (*licensemanager.ListLicenseConfigurationsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListLicenseConfigurations")
	}

	var r0 *licensemanager.ListLicenseConfigurationsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *licensemanager.ListLicenseConfigurationsInput, ...func(*licensemanager.Options)) (*licensemanager.ListLicenseConfigurationsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *licensemanager.ListLicenseConfigurationsInput, ...func(*licensemanager.Options)) *licensemanager.ListLicenseConfigurationsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*licensemanager.ListLicenseConfigurationsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *licensemanager.ListLicenseConfigurationsInput, ...func(*licensemanager.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListLicenseConversionTasks provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListLicenseConversionTasks(ctx context.Context, params *licensemanager.ListLicenseConversionTasksInput, optFns ...func(*licensemanager.Options)) (*licensemanager.ListLicenseConversionTasksOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListLicenseConversionTasks")
	}

	var r0 *licensemanager.ListLicenseConversionTasksOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *licensemanager.ListLicenseConversionTasksInput, ...func(*licensemanager.Options)) (*licensemanager.ListLicenseConversionTasksOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *licensemanager.ListLicenseConversionTasksInput, ...func(*licensemanager.Options)) *licensemanager.ListLicenseConversionTasksOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*licensemanager.ListLicenseConversionTasksOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *licensemanager.ListLicenseConversionTasksInput, ...func(*licensemanager.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListLicenseManagerReportGenerators provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListLicenseManagerReportGenerators(ctx context.Context, params *licensemanager.ListLicenseManagerReportGeneratorsInput, optFns ...func(*licensemanager.Options)) (*licensemanager.ListLicenseManagerReportGeneratorsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListLicenseManagerReportGenerators")
	}

	var r0 *licensemanager.ListLicenseManagerReportGeneratorsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *licensemanager.ListLicenseManagerReportGeneratorsInput, ...func(*licensemanager.Options)) (*licensemanager.ListLicenseManagerReportGeneratorsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *licensemanager.ListLicenseManagerReportGeneratorsInput, ...func(*licensemanager.Options)) *licensemanager.ListLicenseManagerReportGeneratorsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*licensemanager.ListLicenseManagerReportGeneratorsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *licensemanager.ListLicenseManagerReportGeneratorsInput, ...func(*licensemanager.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListLicenseSpecificationsForResource provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListLicenseSpecificationsForResource(ctx context.Context, params *licensemanager.ListLicenseSpecificationsForResourceInput, optFns ...func(*licensemanager.Options)) (*licensemanager.ListLicenseSpecificationsForResourceOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListLicenseSpecificationsForResource")
	}

	var r0 *licensemanager.ListLicenseSpecificationsForResourceOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *licensemanager.ListLicenseSpecificationsForResourceInput, ...func(*licensemanager.Options)) (*licensemanager.ListLicenseSpecificationsForResourceOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *licensemanager.ListLicenseSpecificationsForResourceInput, ...func(*licensemanager.Options)) *licensemanager.ListLicenseSpecificationsForResourceOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*licensemanager.ListLicenseSpecificationsForResourceOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *licensemanager.ListLicenseSpecificationsForResourceInput, ...func(*licensemanager.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListLicenseVersions provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListLicenseVersions(ctx context.Context, params *licensemanager.ListLicenseVersionsInput, optFns ...func(*licensemanager.Options)) (*licensemanager.ListLicenseVersionsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListLicenseVersions")
	}

	var r0 *licensemanager.ListLicenseVersionsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *licensemanager.ListLicenseVersionsInput, ...func(*licensemanager.Options)) (*licensemanager.ListLicenseVersionsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *licensemanager.ListLicenseVersionsInput, ...func(*licensemanager.Options)) *licensemanager.ListLicenseVersionsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*licensemanager.ListLicenseVersionsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *licensemanager.ListLicenseVersionsInput, ...func(*licensemanager.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListLicenses provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListLicenses(ctx context.Context, params *licensemanager.ListLicensesInput, optFns ...func(*licensemanager.Options)) (*licensemanager.ListLicensesOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListLicenses")
	}

	var r0 *licensemanager.ListLicensesOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *licensemanager.ListLicensesInput, ...func(*licensemanager.Options)) (*licensemanager.ListLicensesOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *licensemanager.ListLicensesInput, ...func(*licensemanager.Options)) *licensemanager.ListLicensesOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*licensemanager.ListLicensesOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *licensemanager.ListLicensesInput, ...func(*licensemanager.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListReceivedGrants provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListReceivedGrants(ctx context.Context, params *licensemanager.ListReceivedGrantsInput, optFns ...func(*licensemanager.Options)) (*licensemanager.ListReceivedGrantsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListReceivedGrants")
	}

	var r0 *licensemanager.ListReceivedGrantsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *licensemanager.ListReceivedGrantsInput, ...func(*licensemanager.Options)) (*licensemanager.ListReceivedGrantsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *licensemanager.ListReceivedGrantsInput, ...func(*licensemanager.Options)) *licensemanager.ListReceivedGrantsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*licensemanager.ListReceivedGrantsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *licensemanager.ListReceivedGrantsInput, ...func(*licensemanager.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListReceivedGrantsForOrganization provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListReceivedGrantsForOrganization(ctx context.Context, params *licensemanager.ListReceivedGrantsForOrganizationInput, optFns ...func(*licensemanager.Options)) (*licensemanager.ListReceivedGrantsForOrganizationOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListReceivedGrantsForOrganization")
	}

	var r0 *licensemanager.ListReceivedGrantsForOrganizationOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *licensemanager.ListReceivedGrantsForOrganizationInput, ...func(*licensemanager.Options)) (*licensemanager.ListReceivedGrantsForOrganizationOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *licensemanager.ListReceivedGrantsForOrganizationInput, ...func(*licensemanager.Options)) *licensemanager.ListReceivedGrantsForOrganizationOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*licensemanager.ListReceivedGrantsForOrganizationOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *licensemanager.ListReceivedGrantsForOrganizationInput, ...func(*licensemanager.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListReceivedLicenses provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListReceivedLicenses(ctx context.Context, params *licensemanager.ListReceivedLicensesInput, optFns ...func(*licensemanager.Options)) (*licensemanager.ListReceivedLicensesOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListReceivedLicenses")
	}

	var r0 *licensemanager.ListReceivedLicensesOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *licensemanager.ListReceivedLicensesInput, ...func(*licensemanager.Options)) (*licensemanager.ListReceivedLicensesOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *licensemanager.ListReceivedLicensesInput, ...func(*licensemanager.Options)) *licensemanager.ListReceivedLicensesOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*licensemanager.ListReceivedLicensesOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *licensemanager.ListReceivedLicensesInput, ...func(*licensemanager.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListReceivedLicensesForOrganization provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListReceivedLicensesForOrganization(ctx context.Context, params *licensemanager.ListReceivedLicensesForOrganizationInput, optFns ...func(*licensemanager.Options)) (*licensemanager.ListReceivedLicensesForOrganizationOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListReceivedLicensesForOrganization")
	}

	var r0 *licensemanager.ListReceivedLicensesForOrganizationOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *licensemanager.ListReceivedLicensesForOrganizationInput, ...func(*licensemanager.Options)) (*licensemanager.ListReceivedLicensesForOrganizationOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *licensemanager.ListReceivedLicensesForOrganizationInput, ...func(*licensemanager.Options)) *licensemanager.ListReceivedLicensesForOrganizationOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*licensemanager.ListReceivedLicensesForOrganizationOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *licensemanager.ListReceivedLicensesForOrganizationInput, ...func(*licensemanager.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListResourceInventory provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListResourceInventory(ctx context.Context, params *licensemanager.ListResourceInventoryInput, optFns ...func(*licensemanager.Options)) (*licensemanager.ListResourceInventoryOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListResourceInventory")
	}

	var r0 *licensemanager.ListResourceInventoryOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *licensemanager.ListResourceInventoryInput, ...func(*licensemanager.Options)) (*licensemanager.ListResourceInventoryOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *licensemanager.ListResourceInventoryInput, ...func(*licensemanager.Options)) *licensemanager.ListResourceInventoryOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*licensemanager.ListResourceInventoryOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *licensemanager.ListResourceInventoryInput, ...func(*licensemanager.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListTagsForResource provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListTagsForResource(ctx context.Context, params *licensemanager.ListTagsForResourceInput, optFns ...func(*licensemanager.Options)) (*licensemanager.ListTagsForResourceOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListTagsForResource")
	}

	var r0 *licensemanager.ListTagsForResourceOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *licensemanager.ListTagsForResourceInput, ...func(*licensemanager.Options)) (*licensemanager.ListTagsForResourceOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *licensemanager.ListTagsForResourceInput, ...func(*licensemanager.Options)) *licensemanager.ListTagsForResourceOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*licensemanager.ListTagsForResourceOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *licensemanager.ListTagsForResourceInput, ...func(*licensemanager.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListTokens provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListTokens(ctx context.Context, params *licensemanager.ListTokensInput, optFns ...func(*licensemanager.Options)) (*licensemanager.ListTokensOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListTokens")
	}

	var r0 *licensemanager.ListTokensOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *licensemanager.ListTokensInput, ...func(*licensemanager.Options)) (*licensemanager.ListTokensOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *licensemanager.ListTokensInput, ...func(*licensemanager.Options)) *licensemanager.ListTokensOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*licensemanager.ListTokensOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *licensemanager.ListTokensInput, ...func(*licensemanager.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListUsageForLicenseConfiguration provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListUsageForLicenseConfiguration(ctx context.Context, params *licensemanager.ListUsageForLicenseConfigurationInput, optFns ...func(*licensemanager.Options)) (*licensemanager.ListUsageForLicenseConfigurationOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListUsageForLicenseConfiguration")
	}

	var r0 *licensemanager.ListUsageForLicenseConfigurationOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *licensemanager.ListUsageForLicenseConfigurationInput, ...func(*licensemanager.Options)) (*licensemanager.ListUsageForLicenseConfigurationOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *licensemanager.ListUsageForLicenseConfigurationInput, ...func(*licensemanager.Options)) *licensemanager.ListUsageForLicenseConfigurationOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*licensemanager.ListUsageForLicenseConfigurationOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *licensemanager.ListUsageForLicenseConfigurationInput, ...func(*licensemanager.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Options provides a mock function with given fields:
func (_m *IClient) Options() licensemanager.Options {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Options")
	}

	var r0 licensemanager.Options
	if rf, ok := ret.Get(0).(func() licensemanager.Options); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(licensemanager.Options)
	}

	return r0
}

// RejectGrant provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) RejectGrant(ctx context.Context, params *licensemanager.RejectGrantInput, optFns ...func(*licensemanager.Options)) (*licensemanager.RejectGrantOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for RejectGrant")
	}

	var r0 *licensemanager.RejectGrantOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *licensemanager.RejectGrantInput, ...func(*licensemanager.Options)) (*licensemanager.RejectGrantOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *licensemanager.RejectGrantInput, ...func(*licensemanager.Options)) *licensemanager.RejectGrantOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*licensemanager.RejectGrantOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *licensemanager.RejectGrantInput, ...func(*licensemanager.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// TagResource provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) TagResource(ctx context.Context, params *licensemanager.TagResourceInput, optFns ...func(*licensemanager.Options)) (*licensemanager.TagResourceOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for TagResource")
	}

	var r0 *licensemanager.TagResourceOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *licensemanager.TagResourceInput, ...func(*licensemanager.Options)) (*licensemanager.TagResourceOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *licensemanager.TagResourceInput, ...func(*licensemanager.Options)) *licensemanager.TagResourceOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*licensemanager.TagResourceOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *licensemanager.TagResourceInput, ...func(*licensemanager.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UntagResource provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UntagResource(ctx context.Context, params *licensemanager.UntagResourceInput, optFns ...func(*licensemanager.Options)) (*licensemanager.UntagResourceOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UntagResource")
	}

	var r0 *licensemanager.UntagResourceOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *licensemanager.UntagResourceInput, ...func(*licensemanager.Options)) (*licensemanager.UntagResourceOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *licensemanager.UntagResourceInput, ...func(*licensemanager.Options)) *licensemanager.UntagResourceOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*licensemanager.UntagResourceOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *licensemanager.UntagResourceInput, ...func(*licensemanager.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateLicenseConfiguration provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UpdateLicenseConfiguration(ctx context.Context, params *licensemanager.UpdateLicenseConfigurationInput, optFns ...func(*licensemanager.Options)) (*licensemanager.UpdateLicenseConfigurationOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateLicenseConfiguration")
	}

	var r0 *licensemanager.UpdateLicenseConfigurationOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *licensemanager.UpdateLicenseConfigurationInput, ...func(*licensemanager.Options)) (*licensemanager.UpdateLicenseConfigurationOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *licensemanager.UpdateLicenseConfigurationInput, ...func(*licensemanager.Options)) *licensemanager.UpdateLicenseConfigurationOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*licensemanager.UpdateLicenseConfigurationOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *licensemanager.UpdateLicenseConfigurationInput, ...func(*licensemanager.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateLicenseManagerReportGenerator provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UpdateLicenseManagerReportGenerator(ctx context.Context, params *licensemanager.UpdateLicenseManagerReportGeneratorInput, optFns ...func(*licensemanager.Options)) (*licensemanager.UpdateLicenseManagerReportGeneratorOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateLicenseManagerReportGenerator")
	}

	var r0 *licensemanager.UpdateLicenseManagerReportGeneratorOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *licensemanager.UpdateLicenseManagerReportGeneratorInput, ...func(*licensemanager.Options)) (*licensemanager.UpdateLicenseManagerReportGeneratorOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *licensemanager.UpdateLicenseManagerReportGeneratorInput, ...func(*licensemanager.Options)) *licensemanager.UpdateLicenseManagerReportGeneratorOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*licensemanager.UpdateLicenseManagerReportGeneratorOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *licensemanager.UpdateLicenseManagerReportGeneratorInput, ...func(*licensemanager.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateLicenseSpecificationsForResource provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UpdateLicenseSpecificationsForResource(ctx context.Context, params *licensemanager.UpdateLicenseSpecificationsForResourceInput, optFns ...func(*licensemanager.Options)) (*licensemanager.UpdateLicenseSpecificationsForResourceOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateLicenseSpecificationsForResource")
	}

	var r0 *licensemanager.UpdateLicenseSpecificationsForResourceOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *licensemanager.UpdateLicenseSpecificationsForResourceInput, ...func(*licensemanager.Options)) (*licensemanager.UpdateLicenseSpecificationsForResourceOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *licensemanager.UpdateLicenseSpecificationsForResourceInput, ...func(*licensemanager.Options)) *licensemanager.UpdateLicenseSpecificationsForResourceOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*licensemanager.UpdateLicenseSpecificationsForResourceOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *licensemanager.UpdateLicenseSpecificationsForResourceInput, ...func(*licensemanager.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateServiceSettings provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UpdateServiceSettings(ctx context.Context, params *licensemanager.UpdateServiceSettingsInput, optFns ...func(*licensemanager.Options)) (*licensemanager.UpdateServiceSettingsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateServiceSettings")
	}

	var r0 *licensemanager.UpdateServiceSettingsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *licensemanager.UpdateServiceSettingsInput, ...func(*licensemanager.Options)) (*licensemanager.UpdateServiceSettingsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *licensemanager.UpdateServiceSettingsInput, ...func(*licensemanager.Options)) *licensemanager.UpdateServiceSettingsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*licensemanager.UpdateServiceSettingsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *licensemanager.UpdateServiceSettingsInput, ...func(*licensemanager.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewIClient creates a new instance of IClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewIClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *IClient {
	mock := &IClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
