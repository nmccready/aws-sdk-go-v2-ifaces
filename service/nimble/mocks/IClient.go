// Code generated by mockery v2.39.2. DO NOT EDIT.

package mocks

import (
	context "context"

	nimble "github.com/aws/aws-sdk-go-v2/service/nimble"
	mock "github.com/stretchr/testify/mock"
)

// IClient is an autogenerated mock type for the IClient type
type IClient struct {
	mock.Mock
}

// AcceptEulas provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) AcceptEulas(ctx context.Context, params *nimble.AcceptEulasInput, optFns ...func(*nimble.Options)) (*nimble.AcceptEulasOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for AcceptEulas")
	}

	var r0 *nimble.AcceptEulasOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *nimble.AcceptEulasInput, ...func(*nimble.Options)) (*nimble.AcceptEulasOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *nimble.AcceptEulasInput, ...func(*nimble.Options)) *nimble.AcceptEulasOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*nimble.AcceptEulasOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *nimble.AcceptEulasInput, ...func(*nimble.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateLaunchProfile provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CreateLaunchProfile(ctx context.Context, params *nimble.CreateLaunchProfileInput, optFns ...func(*nimble.Options)) (*nimble.CreateLaunchProfileOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateLaunchProfile")
	}

	var r0 *nimble.CreateLaunchProfileOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *nimble.CreateLaunchProfileInput, ...func(*nimble.Options)) (*nimble.CreateLaunchProfileOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *nimble.CreateLaunchProfileInput, ...func(*nimble.Options)) *nimble.CreateLaunchProfileOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*nimble.CreateLaunchProfileOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *nimble.CreateLaunchProfileInput, ...func(*nimble.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateStreamingImage provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CreateStreamingImage(ctx context.Context, params *nimble.CreateStreamingImageInput, optFns ...func(*nimble.Options)) (*nimble.CreateStreamingImageOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateStreamingImage")
	}

	var r0 *nimble.CreateStreamingImageOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *nimble.CreateStreamingImageInput, ...func(*nimble.Options)) (*nimble.CreateStreamingImageOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *nimble.CreateStreamingImageInput, ...func(*nimble.Options)) *nimble.CreateStreamingImageOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*nimble.CreateStreamingImageOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *nimble.CreateStreamingImageInput, ...func(*nimble.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateStreamingSession provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CreateStreamingSession(ctx context.Context, params *nimble.CreateStreamingSessionInput, optFns ...func(*nimble.Options)) (*nimble.CreateStreamingSessionOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateStreamingSession")
	}

	var r0 *nimble.CreateStreamingSessionOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *nimble.CreateStreamingSessionInput, ...func(*nimble.Options)) (*nimble.CreateStreamingSessionOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *nimble.CreateStreamingSessionInput, ...func(*nimble.Options)) *nimble.CreateStreamingSessionOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*nimble.CreateStreamingSessionOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *nimble.CreateStreamingSessionInput, ...func(*nimble.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateStreamingSessionStream provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CreateStreamingSessionStream(ctx context.Context, params *nimble.CreateStreamingSessionStreamInput, optFns ...func(*nimble.Options)) (*nimble.CreateStreamingSessionStreamOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateStreamingSessionStream")
	}

	var r0 *nimble.CreateStreamingSessionStreamOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *nimble.CreateStreamingSessionStreamInput, ...func(*nimble.Options)) (*nimble.CreateStreamingSessionStreamOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *nimble.CreateStreamingSessionStreamInput, ...func(*nimble.Options)) *nimble.CreateStreamingSessionStreamOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*nimble.CreateStreamingSessionStreamOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *nimble.CreateStreamingSessionStreamInput, ...func(*nimble.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateStudio provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CreateStudio(ctx context.Context, params *nimble.CreateStudioInput, optFns ...func(*nimble.Options)) (*nimble.CreateStudioOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateStudio")
	}

	var r0 *nimble.CreateStudioOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *nimble.CreateStudioInput, ...func(*nimble.Options)) (*nimble.CreateStudioOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *nimble.CreateStudioInput, ...func(*nimble.Options)) *nimble.CreateStudioOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*nimble.CreateStudioOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *nimble.CreateStudioInput, ...func(*nimble.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateStudioComponent provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CreateStudioComponent(ctx context.Context, params *nimble.CreateStudioComponentInput, optFns ...func(*nimble.Options)) (*nimble.CreateStudioComponentOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateStudioComponent")
	}

	var r0 *nimble.CreateStudioComponentOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *nimble.CreateStudioComponentInput, ...func(*nimble.Options)) (*nimble.CreateStudioComponentOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *nimble.CreateStudioComponentInput, ...func(*nimble.Options)) *nimble.CreateStudioComponentOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*nimble.CreateStudioComponentOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *nimble.CreateStudioComponentInput, ...func(*nimble.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteLaunchProfile provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteLaunchProfile(ctx context.Context, params *nimble.DeleteLaunchProfileInput, optFns ...func(*nimble.Options)) (*nimble.DeleteLaunchProfileOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteLaunchProfile")
	}

	var r0 *nimble.DeleteLaunchProfileOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *nimble.DeleteLaunchProfileInput, ...func(*nimble.Options)) (*nimble.DeleteLaunchProfileOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *nimble.DeleteLaunchProfileInput, ...func(*nimble.Options)) *nimble.DeleteLaunchProfileOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*nimble.DeleteLaunchProfileOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *nimble.DeleteLaunchProfileInput, ...func(*nimble.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteLaunchProfileMember provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteLaunchProfileMember(ctx context.Context, params *nimble.DeleteLaunchProfileMemberInput, optFns ...func(*nimble.Options)) (*nimble.DeleteLaunchProfileMemberOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteLaunchProfileMember")
	}

	var r0 *nimble.DeleteLaunchProfileMemberOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *nimble.DeleteLaunchProfileMemberInput, ...func(*nimble.Options)) (*nimble.DeleteLaunchProfileMemberOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *nimble.DeleteLaunchProfileMemberInput, ...func(*nimble.Options)) *nimble.DeleteLaunchProfileMemberOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*nimble.DeleteLaunchProfileMemberOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *nimble.DeleteLaunchProfileMemberInput, ...func(*nimble.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteStreamingImage provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteStreamingImage(ctx context.Context, params *nimble.DeleteStreamingImageInput, optFns ...func(*nimble.Options)) (*nimble.DeleteStreamingImageOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteStreamingImage")
	}

	var r0 *nimble.DeleteStreamingImageOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *nimble.DeleteStreamingImageInput, ...func(*nimble.Options)) (*nimble.DeleteStreamingImageOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *nimble.DeleteStreamingImageInput, ...func(*nimble.Options)) *nimble.DeleteStreamingImageOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*nimble.DeleteStreamingImageOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *nimble.DeleteStreamingImageInput, ...func(*nimble.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteStreamingSession provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteStreamingSession(ctx context.Context, params *nimble.DeleteStreamingSessionInput, optFns ...func(*nimble.Options)) (*nimble.DeleteStreamingSessionOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteStreamingSession")
	}

	var r0 *nimble.DeleteStreamingSessionOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *nimble.DeleteStreamingSessionInput, ...func(*nimble.Options)) (*nimble.DeleteStreamingSessionOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *nimble.DeleteStreamingSessionInput, ...func(*nimble.Options)) *nimble.DeleteStreamingSessionOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*nimble.DeleteStreamingSessionOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *nimble.DeleteStreamingSessionInput, ...func(*nimble.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteStudio provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteStudio(ctx context.Context, params *nimble.DeleteStudioInput, optFns ...func(*nimble.Options)) (*nimble.DeleteStudioOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteStudio")
	}

	var r0 *nimble.DeleteStudioOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *nimble.DeleteStudioInput, ...func(*nimble.Options)) (*nimble.DeleteStudioOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *nimble.DeleteStudioInput, ...func(*nimble.Options)) *nimble.DeleteStudioOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*nimble.DeleteStudioOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *nimble.DeleteStudioInput, ...func(*nimble.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteStudioComponent provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteStudioComponent(ctx context.Context, params *nimble.DeleteStudioComponentInput, optFns ...func(*nimble.Options)) (*nimble.DeleteStudioComponentOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteStudioComponent")
	}

	var r0 *nimble.DeleteStudioComponentOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *nimble.DeleteStudioComponentInput, ...func(*nimble.Options)) (*nimble.DeleteStudioComponentOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *nimble.DeleteStudioComponentInput, ...func(*nimble.Options)) *nimble.DeleteStudioComponentOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*nimble.DeleteStudioComponentOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *nimble.DeleteStudioComponentInput, ...func(*nimble.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteStudioMember provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteStudioMember(ctx context.Context, params *nimble.DeleteStudioMemberInput, optFns ...func(*nimble.Options)) (*nimble.DeleteStudioMemberOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteStudioMember")
	}

	var r0 *nimble.DeleteStudioMemberOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *nimble.DeleteStudioMemberInput, ...func(*nimble.Options)) (*nimble.DeleteStudioMemberOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *nimble.DeleteStudioMemberInput, ...func(*nimble.Options)) *nimble.DeleteStudioMemberOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*nimble.DeleteStudioMemberOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *nimble.DeleteStudioMemberInput, ...func(*nimble.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetEula provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetEula(ctx context.Context, params *nimble.GetEulaInput, optFns ...func(*nimble.Options)) (*nimble.GetEulaOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetEula")
	}

	var r0 *nimble.GetEulaOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *nimble.GetEulaInput, ...func(*nimble.Options)) (*nimble.GetEulaOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *nimble.GetEulaInput, ...func(*nimble.Options)) *nimble.GetEulaOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*nimble.GetEulaOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *nimble.GetEulaInput, ...func(*nimble.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetLaunchProfile provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetLaunchProfile(ctx context.Context, params *nimble.GetLaunchProfileInput, optFns ...func(*nimble.Options)) (*nimble.GetLaunchProfileOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetLaunchProfile")
	}

	var r0 *nimble.GetLaunchProfileOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *nimble.GetLaunchProfileInput, ...func(*nimble.Options)) (*nimble.GetLaunchProfileOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *nimble.GetLaunchProfileInput, ...func(*nimble.Options)) *nimble.GetLaunchProfileOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*nimble.GetLaunchProfileOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *nimble.GetLaunchProfileInput, ...func(*nimble.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetLaunchProfileDetails provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetLaunchProfileDetails(ctx context.Context, params *nimble.GetLaunchProfileDetailsInput, optFns ...func(*nimble.Options)) (*nimble.GetLaunchProfileDetailsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetLaunchProfileDetails")
	}

	var r0 *nimble.GetLaunchProfileDetailsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *nimble.GetLaunchProfileDetailsInput, ...func(*nimble.Options)) (*nimble.GetLaunchProfileDetailsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *nimble.GetLaunchProfileDetailsInput, ...func(*nimble.Options)) *nimble.GetLaunchProfileDetailsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*nimble.GetLaunchProfileDetailsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *nimble.GetLaunchProfileDetailsInput, ...func(*nimble.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetLaunchProfileInitialization provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetLaunchProfileInitialization(ctx context.Context, params *nimble.GetLaunchProfileInitializationInput, optFns ...func(*nimble.Options)) (*nimble.GetLaunchProfileInitializationOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetLaunchProfileInitialization")
	}

	var r0 *nimble.GetLaunchProfileInitializationOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *nimble.GetLaunchProfileInitializationInput, ...func(*nimble.Options)) (*nimble.GetLaunchProfileInitializationOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *nimble.GetLaunchProfileInitializationInput, ...func(*nimble.Options)) *nimble.GetLaunchProfileInitializationOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*nimble.GetLaunchProfileInitializationOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *nimble.GetLaunchProfileInitializationInput, ...func(*nimble.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetLaunchProfileMember provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetLaunchProfileMember(ctx context.Context, params *nimble.GetLaunchProfileMemberInput, optFns ...func(*nimble.Options)) (*nimble.GetLaunchProfileMemberOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetLaunchProfileMember")
	}

	var r0 *nimble.GetLaunchProfileMemberOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *nimble.GetLaunchProfileMemberInput, ...func(*nimble.Options)) (*nimble.GetLaunchProfileMemberOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *nimble.GetLaunchProfileMemberInput, ...func(*nimble.Options)) *nimble.GetLaunchProfileMemberOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*nimble.GetLaunchProfileMemberOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *nimble.GetLaunchProfileMemberInput, ...func(*nimble.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetStreamingImage provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetStreamingImage(ctx context.Context, params *nimble.GetStreamingImageInput, optFns ...func(*nimble.Options)) (*nimble.GetStreamingImageOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetStreamingImage")
	}

	var r0 *nimble.GetStreamingImageOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *nimble.GetStreamingImageInput, ...func(*nimble.Options)) (*nimble.GetStreamingImageOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *nimble.GetStreamingImageInput, ...func(*nimble.Options)) *nimble.GetStreamingImageOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*nimble.GetStreamingImageOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *nimble.GetStreamingImageInput, ...func(*nimble.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetStreamingSession provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetStreamingSession(ctx context.Context, params *nimble.GetStreamingSessionInput, optFns ...func(*nimble.Options)) (*nimble.GetStreamingSessionOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetStreamingSession")
	}

	var r0 *nimble.GetStreamingSessionOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *nimble.GetStreamingSessionInput, ...func(*nimble.Options)) (*nimble.GetStreamingSessionOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *nimble.GetStreamingSessionInput, ...func(*nimble.Options)) *nimble.GetStreamingSessionOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*nimble.GetStreamingSessionOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *nimble.GetStreamingSessionInput, ...func(*nimble.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetStreamingSessionBackup provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetStreamingSessionBackup(ctx context.Context, params *nimble.GetStreamingSessionBackupInput, optFns ...func(*nimble.Options)) (*nimble.GetStreamingSessionBackupOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetStreamingSessionBackup")
	}

	var r0 *nimble.GetStreamingSessionBackupOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *nimble.GetStreamingSessionBackupInput, ...func(*nimble.Options)) (*nimble.GetStreamingSessionBackupOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *nimble.GetStreamingSessionBackupInput, ...func(*nimble.Options)) *nimble.GetStreamingSessionBackupOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*nimble.GetStreamingSessionBackupOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *nimble.GetStreamingSessionBackupInput, ...func(*nimble.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetStreamingSessionStream provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetStreamingSessionStream(ctx context.Context, params *nimble.GetStreamingSessionStreamInput, optFns ...func(*nimble.Options)) (*nimble.GetStreamingSessionStreamOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetStreamingSessionStream")
	}

	var r0 *nimble.GetStreamingSessionStreamOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *nimble.GetStreamingSessionStreamInput, ...func(*nimble.Options)) (*nimble.GetStreamingSessionStreamOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *nimble.GetStreamingSessionStreamInput, ...func(*nimble.Options)) *nimble.GetStreamingSessionStreamOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*nimble.GetStreamingSessionStreamOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *nimble.GetStreamingSessionStreamInput, ...func(*nimble.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetStudio provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetStudio(ctx context.Context, params *nimble.GetStudioInput, optFns ...func(*nimble.Options)) (*nimble.GetStudioOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetStudio")
	}

	var r0 *nimble.GetStudioOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *nimble.GetStudioInput, ...func(*nimble.Options)) (*nimble.GetStudioOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *nimble.GetStudioInput, ...func(*nimble.Options)) *nimble.GetStudioOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*nimble.GetStudioOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *nimble.GetStudioInput, ...func(*nimble.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetStudioComponent provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetStudioComponent(ctx context.Context, params *nimble.GetStudioComponentInput, optFns ...func(*nimble.Options)) (*nimble.GetStudioComponentOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetStudioComponent")
	}

	var r0 *nimble.GetStudioComponentOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *nimble.GetStudioComponentInput, ...func(*nimble.Options)) (*nimble.GetStudioComponentOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *nimble.GetStudioComponentInput, ...func(*nimble.Options)) *nimble.GetStudioComponentOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*nimble.GetStudioComponentOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *nimble.GetStudioComponentInput, ...func(*nimble.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetStudioMember provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetStudioMember(ctx context.Context, params *nimble.GetStudioMemberInput, optFns ...func(*nimble.Options)) (*nimble.GetStudioMemberOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetStudioMember")
	}

	var r0 *nimble.GetStudioMemberOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *nimble.GetStudioMemberInput, ...func(*nimble.Options)) (*nimble.GetStudioMemberOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *nimble.GetStudioMemberInput, ...func(*nimble.Options)) *nimble.GetStudioMemberOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*nimble.GetStudioMemberOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *nimble.GetStudioMemberInput, ...func(*nimble.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListEulaAcceptances provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListEulaAcceptances(ctx context.Context, params *nimble.ListEulaAcceptancesInput, optFns ...func(*nimble.Options)) (*nimble.ListEulaAcceptancesOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListEulaAcceptances")
	}

	var r0 *nimble.ListEulaAcceptancesOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *nimble.ListEulaAcceptancesInput, ...func(*nimble.Options)) (*nimble.ListEulaAcceptancesOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *nimble.ListEulaAcceptancesInput, ...func(*nimble.Options)) *nimble.ListEulaAcceptancesOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*nimble.ListEulaAcceptancesOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *nimble.ListEulaAcceptancesInput, ...func(*nimble.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListEulas provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListEulas(ctx context.Context, params *nimble.ListEulasInput, optFns ...func(*nimble.Options)) (*nimble.ListEulasOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListEulas")
	}

	var r0 *nimble.ListEulasOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *nimble.ListEulasInput, ...func(*nimble.Options)) (*nimble.ListEulasOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *nimble.ListEulasInput, ...func(*nimble.Options)) *nimble.ListEulasOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*nimble.ListEulasOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *nimble.ListEulasInput, ...func(*nimble.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListLaunchProfileMembers provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListLaunchProfileMembers(ctx context.Context, params *nimble.ListLaunchProfileMembersInput, optFns ...func(*nimble.Options)) (*nimble.ListLaunchProfileMembersOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListLaunchProfileMembers")
	}

	var r0 *nimble.ListLaunchProfileMembersOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *nimble.ListLaunchProfileMembersInput, ...func(*nimble.Options)) (*nimble.ListLaunchProfileMembersOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *nimble.ListLaunchProfileMembersInput, ...func(*nimble.Options)) *nimble.ListLaunchProfileMembersOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*nimble.ListLaunchProfileMembersOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *nimble.ListLaunchProfileMembersInput, ...func(*nimble.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListLaunchProfiles provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListLaunchProfiles(ctx context.Context, params *nimble.ListLaunchProfilesInput, optFns ...func(*nimble.Options)) (*nimble.ListLaunchProfilesOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListLaunchProfiles")
	}

	var r0 *nimble.ListLaunchProfilesOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *nimble.ListLaunchProfilesInput, ...func(*nimble.Options)) (*nimble.ListLaunchProfilesOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *nimble.ListLaunchProfilesInput, ...func(*nimble.Options)) *nimble.ListLaunchProfilesOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*nimble.ListLaunchProfilesOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *nimble.ListLaunchProfilesInput, ...func(*nimble.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListStreamingImages provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListStreamingImages(ctx context.Context, params *nimble.ListStreamingImagesInput, optFns ...func(*nimble.Options)) (*nimble.ListStreamingImagesOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListStreamingImages")
	}

	var r0 *nimble.ListStreamingImagesOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *nimble.ListStreamingImagesInput, ...func(*nimble.Options)) (*nimble.ListStreamingImagesOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *nimble.ListStreamingImagesInput, ...func(*nimble.Options)) *nimble.ListStreamingImagesOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*nimble.ListStreamingImagesOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *nimble.ListStreamingImagesInput, ...func(*nimble.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListStreamingSessionBackups provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListStreamingSessionBackups(ctx context.Context, params *nimble.ListStreamingSessionBackupsInput, optFns ...func(*nimble.Options)) (*nimble.ListStreamingSessionBackupsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListStreamingSessionBackups")
	}

	var r0 *nimble.ListStreamingSessionBackupsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *nimble.ListStreamingSessionBackupsInput, ...func(*nimble.Options)) (*nimble.ListStreamingSessionBackupsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *nimble.ListStreamingSessionBackupsInput, ...func(*nimble.Options)) *nimble.ListStreamingSessionBackupsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*nimble.ListStreamingSessionBackupsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *nimble.ListStreamingSessionBackupsInput, ...func(*nimble.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListStreamingSessions provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListStreamingSessions(ctx context.Context, params *nimble.ListStreamingSessionsInput, optFns ...func(*nimble.Options)) (*nimble.ListStreamingSessionsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListStreamingSessions")
	}

	var r0 *nimble.ListStreamingSessionsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *nimble.ListStreamingSessionsInput, ...func(*nimble.Options)) (*nimble.ListStreamingSessionsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *nimble.ListStreamingSessionsInput, ...func(*nimble.Options)) *nimble.ListStreamingSessionsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*nimble.ListStreamingSessionsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *nimble.ListStreamingSessionsInput, ...func(*nimble.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListStudioComponents provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListStudioComponents(ctx context.Context, params *nimble.ListStudioComponentsInput, optFns ...func(*nimble.Options)) (*nimble.ListStudioComponentsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListStudioComponents")
	}

	var r0 *nimble.ListStudioComponentsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *nimble.ListStudioComponentsInput, ...func(*nimble.Options)) (*nimble.ListStudioComponentsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *nimble.ListStudioComponentsInput, ...func(*nimble.Options)) *nimble.ListStudioComponentsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*nimble.ListStudioComponentsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *nimble.ListStudioComponentsInput, ...func(*nimble.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListStudioMembers provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListStudioMembers(ctx context.Context, params *nimble.ListStudioMembersInput, optFns ...func(*nimble.Options)) (*nimble.ListStudioMembersOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListStudioMembers")
	}

	var r0 *nimble.ListStudioMembersOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *nimble.ListStudioMembersInput, ...func(*nimble.Options)) (*nimble.ListStudioMembersOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *nimble.ListStudioMembersInput, ...func(*nimble.Options)) *nimble.ListStudioMembersOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*nimble.ListStudioMembersOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *nimble.ListStudioMembersInput, ...func(*nimble.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListStudios provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListStudios(ctx context.Context, params *nimble.ListStudiosInput, optFns ...func(*nimble.Options)) (*nimble.ListStudiosOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListStudios")
	}

	var r0 *nimble.ListStudiosOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *nimble.ListStudiosInput, ...func(*nimble.Options)) (*nimble.ListStudiosOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *nimble.ListStudiosInput, ...func(*nimble.Options)) *nimble.ListStudiosOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*nimble.ListStudiosOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *nimble.ListStudiosInput, ...func(*nimble.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListTagsForResource provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListTagsForResource(ctx context.Context, params *nimble.ListTagsForResourceInput, optFns ...func(*nimble.Options)) (*nimble.ListTagsForResourceOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListTagsForResource")
	}

	var r0 *nimble.ListTagsForResourceOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *nimble.ListTagsForResourceInput, ...func(*nimble.Options)) (*nimble.ListTagsForResourceOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *nimble.ListTagsForResourceInput, ...func(*nimble.Options)) *nimble.ListTagsForResourceOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*nimble.ListTagsForResourceOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *nimble.ListTagsForResourceInput, ...func(*nimble.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Options provides a mock function with given fields:
func (_m *IClient) Options() nimble.Options {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Options")
	}

	var r0 nimble.Options
	if rf, ok := ret.Get(0).(func() nimble.Options); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(nimble.Options)
	}

	return r0
}

// PutLaunchProfileMembers provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) PutLaunchProfileMembers(ctx context.Context, params *nimble.PutLaunchProfileMembersInput, optFns ...func(*nimble.Options)) (*nimble.PutLaunchProfileMembersOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for PutLaunchProfileMembers")
	}

	var r0 *nimble.PutLaunchProfileMembersOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *nimble.PutLaunchProfileMembersInput, ...func(*nimble.Options)) (*nimble.PutLaunchProfileMembersOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *nimble.PutLaunchProfileMembersInput, ...func(*nimble.Options)) *nimble.PutLaunchProfileMembersOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*nimble.PutLaunchProfileMembersOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *nimble.PutLaunchProfileMembersInput, ...func(*nimble.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PutStudioMembers provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) PutStudioMembers(ctx context.Context, params *nimble.PutStudioMembersInput, optFns ...func(*nimble.Options)) (*nimble.PutStudioMembersOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for PutStudioMembers")
	}

	var r0 *nimble.PutStudioMembersOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *nimble.PutStudioMembersInput, ...func(*nimble.Options)) (*nimble.PutStudioMembersOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *nimble.PutStudioMembersInput, ...func(*nimble.Options)) *nimble.PutStudioMembersOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*nimble.PutStudioMembersOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *nimble.PutStudioMembersInput, ...func(*nimble.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// StartStreamingSession provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) StartStreamingSession(ctx context.Context, params *nimble.StartStreamingSessionInput, optFns ...func(*nimble.Options)) (*nimble.StartStreamingSessionOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for StartStreamingSession")
	}

	var r0 *nimble.StartStreamingSessionOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *nimble.StartStreamingSessionInput, ...func(*nimble.Options)) (*nimble.StartStreamingSessionOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *nimble.StartStreamingSessionInput, ...func(*nimble.Options)) *nimble.StartStreamingSessionOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*nimble.StartStreamingSessionOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *nimble.StartStreamingSessionInput, ...func(*nimble.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// StartStudioSSOConfigurationRepair provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) StartStudioSSOConfigurationRepair(ctx context.Context, params *nimble.StartStudioSSOConfigurationRepairInput, optFns ...func(*nimble.Options)) (*nimble.StartStudioSSOConfigurationRepairOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for StartStudioSSOConfigurationRepair")
	}

	var r0 *nimble.StartStudioSSOConfigurationRepairOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *nimble.StartStudioSSOConfigurationRepairInput, ...func(*nimble.Options)) (*nimble.StartStudioSSOConfigurationRepairOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *nimble.StartStudioSSOConfigurationRepairInput, ...func(*nimble.Options)) *nimble.StartStudioSSOConfigurationRepairOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*nimble.StartStudioSSOConfigurationRepairOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *nimble.StartStudioSSOConfigurationRepairInput, ...func(*nimble.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// StopStreamingSession provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) StopStreamingSession(ctx context.Context, params *nimble.StopStreamingSessionInput, optFns ...func(*nimble.Options)) (*nimble.StopStreamingSessionOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for StopStreamingSession")
	}

	var r0 *nimble.StopStreamingSessionOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *nimble.StopStreamingSessionInput, ...func(*nimble.Options)) (*nimble.StopStreamingSessionOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *nimble.StopStreamingSessionInput, ...func(*nimble.Options)) *nimble.StopStreamingSessionOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*nimble.StopStreamingSessionOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *nimble.StopStreamingSessionInput, ...func(*nimble.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// TagResource provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) TagResource(ctx context.Context, params *nimble.TagResourceInput, optFns ...func(*nimble.Options)) (*nimble.TagResourceOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for TagResource")
	}

	var r0 *nimble.TagResourceOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *nimble.TagResourceInput, ...func(*nimble.Options)) (*nimble.TagResourceOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *nimble.TagResourceInput, ...func(*nimble.Options)) *nimble.TagResourceOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*nimble.TagResourceOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *nimble.TagResourceInput, ...func(*nimble.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UntagResource provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UntagResource(ctx context.Context, params *nimble.UntagResourceInput, optFns ...func(*nimble.Options)) (*nimble.UntagResourceOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UntagResource")
	}

	var r0 *nimble.UntagResourceOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *nimble.UntagResourceInput, ...func(*nimble.Options)) (*nimble.UntagResourceOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *nimble.UntagResourceInput, ...func(*nimble.Options)) *nimble.UntagResourceOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*nimble.UntagResourceOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *nimble.UntagResourceInput, ...func(*nimble.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateLaunchProfile provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UpdateLaunchProfile(ctx context.Context, params *nimble.UpdateLaunchProfileInput, optFns ...func(*nimble.Options)) (*nimble.UpdateLaunchProfileOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateLaunchProfile")
	}

	var r0 *nimble.UpdateLaunchProfileOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *nimble.UpdateLaunchProfileInput, ...func(*nimble.Options)) (*nimble.UpdateLaunchProfileOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *nimble.UpdateLaunchProfileInput, ...func(*nimble.Options)) *nimble.UpdateLaunchProfileOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*nimble.UpdateLaunchProfileOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *nimble.UpdateLaunchProfileInput, ...func(*nimble.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateLaunchProfileMember provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UpdateLaunchProfileMember(ctx context.Context, params *nimble.UpdateLaunchProfileMemberInput, optFns ...func(*nimble.Options)) (*nimble.UpdateLaunchProfileMemberOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateLaunchProfileMember")
	}

	var r0 *nimble.UpdateLaunchProfileMemberOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *nimble.UpdateLaunchProfileMemberInput, ...func(*nimble.Options)) (*nimble.UpdateLaunchProfileMemberOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *nimble.UpdateLaunchProfileMemberInput, ...func(*nimble.Options)) *nimble.UpdateLaunchProfileMemberOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*nimble.UpdateLaunchProfileMemberOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *nimble.UpdateLaunchProfileMemberInput, ...func(*nimble.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateStreamingImage provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UpdateStreamingImage(ctx context.Context, params *nimble.UpdateStreamingImageInput, optFns ...func(*nimble.Options)) (*nimble.UpdateStreamingImageOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateStreamingImage")
	}

	var r0 *nimble.UpdateStreamingImageOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *nimble.UpdateStreamingImageInput, ...func(*nimble.Options)) (*nimble.UpdateStreamingImageOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *nimble.UpdateStreamingImageInput, ...func(*nimble.Options)) *nimble.UpdateStreamingImageOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*nimble.UpdateStreamingImageOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *nimble.UpdateStreamingImageInput, ...func(*nimble.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateStudio provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UpdateStudio(ctx context.Context, params *nimble.UpdateStudioInput, optFns ...func(*nimble.Options)) (*nimble.UpdateStudioOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateStudio")
	}

	var r0 *nimble.UpdateStudioOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *nimble.UpdateStudioInput, ...func(*nimble.Options)) (*nimble.UpdateStudioOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *nimble.UpdateStudioInput, ...func(*nimble.Options)) *nimble.UpdateStudioOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*nimble.UpdateStudioOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *nimble.UpdateStudioInput, ...func(*nimble.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateStudioComponent provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UpdateStudioComponent(ctx context.Context, params *nimble.UpdateStudioComponentInput, optFns ...func(*nimble.Options)) (*nimble.UpdateStudioComponentOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateStudioComponent")
	}

	var r0 *nimble.UpdateStudioComponentOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *nimble.UpdateStudioComponentInput, ...func(*nimble.Options)) (*nimble.UpdateStudioComponentOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *nimble.UpdateStudioComponentInput, ...func(*nimble.Options)) *nimble.UpdateStudioComponentOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*nimble.UpdateStudioComponentOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *nimble.UpdateStudioComponentInput, ...func(*nimble.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewIClient creates a new instance of IClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewIClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *IClient {
	mock := &IClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
