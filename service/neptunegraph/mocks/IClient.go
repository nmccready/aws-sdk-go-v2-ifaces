// Code generated by mockery v2.53.4. DO NOT EDIT.

package mocks

import (
	context "context"

	neptunegraph "github.com/aws/aws-sdk-go-v2/service/neptunegraph"
	mock "github.com/stretchr/testify/mock"
)

// IClient is an autogenerated mock type for the IClient type
type IClient struct {
	mock.Mock
}

// CancelExportTask provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CancelExportTask(ctx context.Context, params *neptunegraph.CancelExportTaskInput, optFns ...func(*neptunegraph.Options)) (*neptunegraph.CancelExportTaskOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CancelExportTask")
	}

	var r0 *neptunegraph.CancelExportTaskOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *neptunegraph.CancelExportTaskInput, ...func(*neptunegraph.Options)) (*neptunegraph.CancelExportTaskOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *neptunegraph.CancelExportTaskInput, ...func(*neptunegraph.Options)) *neptunegraph.CancelExportTaskOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*neptunegraph.CancelExportTaskOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *neptunegraph.CancelExportTaskInput, ...func(*neptunegraph.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CancelImportTask provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CancelImportTask(ctx context.Context, params *neptunegraph.CancelImportTaskInput, optFns ...func(*neptunegraph.Options)) (*neptunegraph.CancelImportTaskOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CancelImportTask")
	}

	var r0 *neptunegraph.CancelImportTaskOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *neptunegraph.CancelImportTaskInput, ...func(*neptunegraph.Options)) (*neptunegraph.CancelImportTaskOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *neptunegraph.CancelImportTaskInput, ...func(*neptunegraph.Options)) *neptunegraph.CancelImportTaskOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*neptunegraph.CancelImportTaskOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *neptunegraph.CancelImportTaskInput, ...func(*neptunegraph.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CancelQuery provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CancelQuery(ctx context.Context, params *neptunegraph.CancelQueryInput, optFns ...func(*neptunegraph.Options)) (*neptunegraph.CancelQueryOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CancelQuery")
	}

	var r0 *neptunegraph.CancelQueryOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *neptunegraph.CancelQueryInput, ...func(*neptunegraph.Options)) (*neptunegraph.CancelQueryOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *neptunegraph.CancelQueryInput, ...func(*neptunegraph.Options)) *neptunegraph.CancelQueryOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*neptunegraph.CancelQueryOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *neptunegraph.CancelQueryInput, ...func(*neptunegraph.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateGraph provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CreateGraph(ctx context.Context, params *neptunegraph.CreateGraphInput, optFns ...func(*neptunegraph.Options)) (*neptunegraph.CreateGraphOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateGraph")
	}

	var r0 *neptunegraph.CreateGraphOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *neptunegraph.CreateGraphInput, ...func(*neptunegraph.Options)) (*neptunegraph.CreateGraphOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *neptunegraph.CreateGraphInput, ...func(*neptunegraph.Options)) *neptunegraph.CreateGraphOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*neptunegraph.CreateGraphOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *neptunegraph.CreateGraphInput, ...func(*neptunegraph.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateGraphSnapshot provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CreateGraphSnapshot(ctx context.Context, params *neptunegraph.CreateGraphSnapshotInput, optFns ...func(*neptunegraph.Options)) (*neptunegraph.CreateGraphSnapshotOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateGraphSnapshot")
	}

	var r0 *neptunegraph.CreateGraphSnapshotOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *neptunegraph.CreateGraphSnapshotInput, ...func(*neptunegraph.Options)) (*neptunegraph.CreateGraphSnapshotOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *neptunegraph.CreateGraphSnapshotInput, ...func(*neptunegraph.Options)) *neptunegraph.CreateGraphSnapshotOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*neptunegraph.CreateGraphSnapshotOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *neptunegraph.CreateGraphSnapshotInput, ...func(*neptunegraph.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateGraphUsingImportTask provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CreateGraphUsingImportTask(ctx context.Context, params *neptunegraph.CreateGraphUsingImportTaskInput, optFns ...func(*neptunegraph.Options)) (*neptunegraph.CreateGraphUsingImportTaskOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateGraphUsingImportTask")
	}

	var r0 *neptunegraph.CreateGraphUsingImportTaskOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *neptunegraph.CreateGraphUsingImportTaskInput, ...func(*neptunegraph.Options)) (*neptunegraph.CreateGraphUsingImportTaskOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *neptunegraph.CreateGraphUsingImportTaskInput, ...func(*neptunegraph.Options)) *neptunegraph.CreateGraphUsingImportTaskOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*neptunegraph.CreateGraphUsingImportTaskOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *neptunegraph.CreateGraphUsingImportTaskInput, ...func(*neptunegraph.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreatePrivateGraphEndpoint provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CreatePrivateGraphEndpoint(ctx context.Context, params *neptunegraph.CreatePrivateGraphEndpointInput, optFns ...func(*neptunegraph.Options)) (*neptunegraph.CreatePrivateGraphEndpointOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreatePrivateGraphEndpoint")
	}

	var r0 *neptunegraph.CreatePrivateGraphEndpointOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *neptunegraph.CreatePrivateGraphEndpointInput, ...func(*neptunegraph.Options)) (*neptunegraph.CreatePrivateGraphEndpointOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *neptunegraph.CreatePrivateGraphEndpointInput, ...func(*neptunegraph.Options)) *neptunegraph.CreatePrivateGraphEndpointOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*neptunegraph.CreatePrivateGraphEndpointOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *neptunegraph.CreatePrivateGraphEndpointInput, ...func(*neptunegraph.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteGraph provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteGraph(ctx context.Context, params *neptunegraph.DeleteGraphInput, optFns ...func(*neptunegraph.Options)) (*neptunegraph.DeleteGraphOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteGraph")
	}

	var r0 *neptunegraph.DeleteGraphOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *neptunegraph.DeleteGraphInput, ...func(*neptunegraph.Options)) (*neptunegraph.DeleteGraphOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *neptunegraph.DeleteGraphInput, ...func(*neptunegraph.Options)) *neptunegraph.DeleteGraphOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*neptunegraph.DeleteGraphOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *neptunegraph.DeleteGraphInput, ...func(*neptunegraph.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteGraphSnapshot provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteGraphSnapshot(ctx context.Context, params *neptunegraph.DeleteGraphSnapshotInput, optFns ...func(*neptunegraph.Options)) (*neptunegraph.DeleteGraphSnapshotOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteGraphSnapshot")
	}

	var r0 *neptunegraph.DeleteGraphSnapshotOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *neptunegraph.DeleteGraphSnapshotInput, ...func(*neptunegraph.Options)) (*neptunegraph.DeleteGraphSnapshotOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *neptunegraph.DeleteGraphSnapshotInput, ...func(*neptunegraph.Options)) *neptunegraph.DeleteGraphSnapshotOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*neptunegraph.DeleteGraphSnapshotOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *neptunegraph.DeleteGraphSnapshotInput, ...func(*neptunegraph.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeletePrivateGraphEndpoint provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeletePrivateGraphEndpoint(ctx context.Context, params *neptunegraph.DeletePrivateGraphEndpointInput, optFns ...func(*neptunegraph.Options)) (*neptunegraph.DeletePrivateGraphEndpointOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeletePrivateGraphEndpoint")
	}

	var r0 *neptunegraph.DeletePrivateGraphEndpointOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *neptunegraph.DeletePrivateGraphEndpointInput, ...func(*neptunegraph.Options)) (*neptunegraph.DeletePrivateGraphEndpointOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *neptunegraph.DeletePrivateGraphEndpointInput, ...func(*neptunegraph.Options)) *neptunegraph.DeletePrivateGraphEndpointOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*neptunegraph.DeletePrivateGraphEndpointOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *neptunegraph.DeletePrivateGraphEndpointInput, ...func(*neptunegraph.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ExecuteQuery provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ExecuteQuery(ctx context.Context, params *neptunegraph.ExecuteQueryInput, optFns ...func(*neptunegraph.Options)) (*neptunegraph.ExecuteQueryOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ExecuteQuery")
	}

	var r0 *neptunegraph.ExecuteQueryOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *neptunegraph.ExecuteQueryInput, ...func(*neptunegraph.Options)) (*neptunegraph.ExecuteQueryOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *neptunegraph.ExecuteQueryInput, ...func(*neptunegraph.Options)) *neptunegraph.ExecuteQueryOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*neptunegraph.ExecuteQueryOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *neptunegraph.ExecuteQueryInput, ...func(*neptunegraph.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetExportTask provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetExportTask(ctx context.Context, params *neptunegraph.GetExportTaskInput, optFns ...func(*neptunegraph.Options)) (*neptunegraph.GetExportTaskOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetExportTask")
	}

	var r0 *neptunegraph.GetExportTaskOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *neptunegraph.GetExportTaskInput, ...func(*neptunegraph.Options)) (*neptunegraph.GetExportTaskOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *neptunegraph.GetExportTaskInput, ...func(*neptunegraph.Options)) *neptunegraph.GetExportTaskOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*neptunegraph.GetExportTaskOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *neptunegraph.GetExportTaskInput, ...func(*neptunegraph.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetGraph provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetGraph(ctx context.Context, params *neptunegraph.GetGraphInput, optFns ...func(*neptunegraph.Options)) (*neptunegraph.GetGraphOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetGraph")
	}

	var r0 *neptunegraph.GetGraphOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *neptunegraph.GetGraphInput, ...func(*neptunegraph.Options)) (*neptunegraph.GetGraphOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *neptunegraph.GetGraphInput, ...func(*neptunegraph.Options)) *neptunegraph.GetGraphOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*neptunegraph.GetGraphOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *neptunegraph.GetGraphInput, ...func(*neptunegraph.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetGraphSnapshot provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetGraphSnapshot(ctx context.Context, params *neptunegraph.GetGraphSnapshotInput, optFns ...func(*neptunegraph.Options)) (*neptunegraph.GetGraphSnapshotOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetGraphSnapshot")
	}

	var r0 *neptunegraph.GetGraphSnapshotOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *neptunegraph.GetGraphSnapshotInput, ...func(*neptunegraph.Options)) (*neptunegraph.GetGraphSnapshotOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *neptunegraph.GetGraphSnapshotInput, ...func(*neptunegraph.Options)) *neptunegraph.GetGraphSnapshotOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*neptunegraph.GetGraphSnapshotOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *neptunegraph.GetGraphSnapshotInput, ...func(*neptunegraph.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetGraphSummary provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetGraphSummary(ctx context.Context, params *neptunegraph.GetGraphSummaryInput, optFns ...func(*neptunegraph.Options)) (*neptunegraph.GetGraphSummaryOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetGraphSummary")
	}

	var r0 *neptunegraph.GetGraphSummaryOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *neptunegraph.GetGraphSummaryInput, ...func(*neptunegraph.Options)) (*neptunegraph.GetGraphSummaryOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *neptunegraph.GetGraphSummaryInput, ...func(*neptunegraph.Options)) *neptunegraph.GetGraphSummaryOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*neptunegraph.GetGraphSummaryOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *neptunegraph.GetGraphSummaryInput, ...func(*neptunegraph.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetImportTask provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetImportTask(ctx context.Context, params *neptunegraph.GetImportTaskInput, optFns ...func(*neptunegraph.Options)) (*neptunegraph.GetImportTaskOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetImportTask")
	}

	var r0 *neptunegraph.GetImportTaskOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *neptunegraph.GetImportTaskInput, ...func(*neptunegraph.Options)) (*neptunegraph.GetImportTaskOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *neptunegraph.GetImportTaskInput, ...func(*neptunegraph.Options)) *neptunegraph.GetImportTaskOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*neptunegraph.GetImportTaskOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *neptunegraph.GetImportTaskInput, ...func(*neptunegraph.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetPrivateGraphEndpoint provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetPrivateGraphEndpoint(ctx context.Context, params *neptunegraph.GetPrivateGraphEndpointInput, optFns ...func(*neptunegraph.Options)) (*neptunegraph.GetPrivateGraphEndpointOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetPrivateGraphEndpoint")
	}

	var r0 *neptunegraph.GetPrivateGraphEndpointOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *neptunegraph.GetPrivateGraphEndpointInput, ...func(*neptunegraph.Options)) (*neptunegraph.GetPrivateGraphEndpointOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *neptunegraph.GetPrivateGraphEndpointInput, ...func(*neptunegraph.Options)) *neptunegraph.GetPrivateGraphEndpointOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*neptunegraph.GetPrivateGraphEndpointOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *neptunegraph.GetPrivateGraphEndpointInput, ...func(*neptunegraph.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetQuery provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetQuery(ctx context.Context, params *neptunegraph.GetQueryInput, optFns ...func(*neptunegraph.Options)) (*neptunegraph.GetQueryOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetQuery")
	}

	var r0 *neptunegraph.GetQueryOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *neptunegraph.GetQueryInput, ...func(*neptunegraph.Options)) (*neptunegraph.GetQueryOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *neptunegraph.GetQueryInput, ...func(*neptunegraph.Options)) *neptunegraph.GetQueryOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*neptunegraph.GetQueryOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *neptunegraph.GetQueryInput, ...func(*neptunegraph.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListExportTasks provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListExportTasks(ctx context.Context, params *neptunegraph.ListExportTasksInput, optFns ...func(*neptunegraph.Options)) (*neptunegraph.ListExportTasksOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListExportTasks")
	}

	var r0 *neptunegraph.ListExportTasksOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *neptunegraph.ListExportTasksInput, ...func(*neptunegraph.Options)) (*neptunegraph.ListExportTasksOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *neptunegraph.ListExportTasksInput, ...func(*neptunegraph.Options)) *neptunegraph.ListExportTasksOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*neptunegraph.ListExportTasksOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *neptunegraph.ListExportTasksInput, ...func(*neptunegraph.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListGraphSnapshots provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListGraphSnapshots(ctx context.Context, params *neptunegraph.ListGraphSnapshotsInput, optFns ...func(*neptunegraph.Options)) (*neptunegraph.ListGraphSnapshotsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListGraphSnapshots")
	}

	var r0 *neptunegraph.ListGraphSnapshotsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *neptunegraph.ListGraphSnapshotsInput, ...func(*neptunegraph.Options)) (*neptunegraph.ListGraphSnapshotsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *neptunegraph.ListGraphSnapshotsInput, ...func(*neptunegraph.Options)) *neptunegraph.ListGraphSnapshotsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*neptunegraph.ListGraphSnapshotsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *neptunegraph.ListGraphSnapshotsInput, ...func(*neptunegraph.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListGraphs provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListGraphs(ctx context.Context, params *neptunegraph.ListGraphsInput, optFns ...func(*neptunegraph.Options)) (*neptunegraph.ListGraphsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListGraphs")
	}

	var r0 *neptunegraph.ListGraphsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *neptunegraph.ListGraphsInput, ...func(*neptunegraph.Options)) (*neptunegraph.ListGraphsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *neptunegraph.ListGraphsInput, ...func(*neptunegraph.Options)) *neptunegraph.ListGraphsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*neptunegraph.ListGraphsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *neptunegraph.ListGraphsInput, ...func(*neptunegraph.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListImportTasks provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListImportTasks(ctx context.Context, params *neptunegraph.ListImportTasksInput, optFns ...func(*neptunegraph.Options)) (*neptunegraph.ListImportTasksOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListImportTasks")
	}

	var r0 *neptunegraph.ListImportTasksOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *neptunegraph.ListImportTasksInput, ...func(*neptunegraph.Options)) (*neptunegraph.ListImportTasksOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *neptunegraph.ListImportTasksInput, ...func(*neptunegraph.Options)) *neptunegraph.ListImportTasksOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*neptunegraph.ListImportTasksOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *neptunegraph.ListImportTasksInput, ...func(*neptunegraph.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListPrivateGraphEndpoints provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListPrivateGraphEndpoints(ctx context.Context, params *neptunegraph.ListPrivateGraphEndpointsInput, optFns ...func(*neptunegraph.Options)) (*neptunegraph.ListPrivateGraphEndpointsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListPrivateGraphEndpoints")
	}

	var r0 *neptunegraph.ListPrivateGraphEndpointsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *neptunegraph.ListPrivateGraphEndpointsInput, ...func(*neptunegraph.Options)) (*neptunegraph.ListPrivateGraphEndpointsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *neptunegraph.ListPrivateGraphEndpointsInput, ...func(*neptunegraph.Options)) *neptunegraph.ListPrivateGraphEndpointsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*neptunegraph.ListPrivateGraphEndpointsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *neptunegraph.ListPrivateGraphEndpointsInput, ...func(*neptunegraph.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListQueries provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListQueries(ctx context.Context, params *neptunegraph.ListQueriesInput, optFns ...func(*neptunegraph.Options)) (*neptunegraph.ListQueriesOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListQueries")
	}

	var r0 *neptunegraph.ListQueriesOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *neptunegraph.ListQueriesInput, ...func(*neptunegraph.Options)) (*neptunegraph.ListQueriesOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *neptunegraph.ListQueriesInput, ...func(*neptunegraph.Options)) *neptunegraph.ListQueriesOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*neptunegraph.ListQueriesOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *neptunegraph.ListQueriesInput, ...func(*neptunegraph.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListTagsForResource provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListTagsForResource(ctx context.Context, params *neptunegraph.ListTagsForResourceInput, optFns ...func(*neptunegraph.Options)) (*neptunegraph.ListTagsForResourceOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListTagsForResource")
	}

	var r0 *neptunegraph.ListTagsForResourceOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *neptunegraph.ListTagsForResourceInput, ...func(*neptunegraph.Options)) (*neptunegraph.ListTagsForResourceOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *neptunegraph.ListTagsForResourceInput, ...func(*neptunegraph.Options)) *neptunegraph.ListTagsForResourceOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*neptunegraph.ListTagsForResourceOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *neptunegraph.ListTagsForResourceInput, ...func(*neptunegraph.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Options provides a mock function with no fields
func (_m *IClient) Options() neptunegraph.Options {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Options")
	}

	var r0 neptunegraph.Options
	if rf, ok := ret.Get(0).(func() neptunegraph.Options); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(neptunegraph.Options)
	}

	return r0
}

// ResetGraph provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ResetGraph(ctx context.Context, params *neptunegraph.ResetGraphInput, optFns ...func(*neptunegraph.Options)) (*neptunegraph.ResetGraphOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ResetGraph")
	}

	var r0 *neptunegraph.ResetGraphOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *neptunegraph.ResetGraphInput, ...func(*neptunegraph.Options)) (*neptunegraph.ResetGraphOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *neptunegraph.ResetGraphInput, ...func(*neptunegraph.Options)) *neptunegraph.ResetGraphOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*neptunegraph.ResetGraphOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *neptunegraph.ResetGraphInput, ...func(*neptunegraph.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RestoreGraphFromSnapshot provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) RestoreGraphFromSnapshot(ctx context.Context, params *neptunegraph.RestoreGraphFromSnapshotInput, optFns ...func(*neptunegraph.Options)) (*neptunegraph.RestoreGraphFromSnapshotOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for RestoreGraphFromSnapshot")
	}

	var r0 *neptunegraph.RestoreGraphFromSnapshotOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *neptunegraph.RestoreGraphFromSnapshotInput, ...func(*neptunegraph.Options)) (*neptunegraph.RestoreGraphFromSnapshotOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *neptunegraph.RestoreGraphFromSnapshotInput, ...func(*neptunegraph.Options)) *neptunegraph.RestoreGraphFromSnapshotOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*neptunegraph.RestoreGraphFromSnapshotOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *neptunegraph.RestoreGraphFromSnapshotInput, ...func(*neptunegraph.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// StartExportTask provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) StartExportTask(ctx context.Context, params *neptunegraph.StartExportTaskInput, optFns ...func(*neptunegraph.Options)) (*neptunegraph.StartExportTaskOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for StartExportTask")
	}

	var r0 *neptunegraph.StartExportTaskOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *neptunegraph.StartExportTaskInput, ...func(*neptunegraph.Options)) (*neptunegraph.StartExportTaskOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *neptunegraph.StartExportTaskInput, ...func(*neptunegraph.Options)) *neptunegraph.StartExportTaskOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*neptunegraph.StartExportTaskOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *neptunegraph.StartExportTaskInput, ...func(*neptunegraph.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// StartGraph provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) StartGraph(ctx context.Context, params *neptunegraph.StartGraphInput, optFns ...func(*neptunegraph.Options)) (*neptunegraph.StartGraphOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for StartGraph")
	}

	var r0 *neptunegraph.StartGraphOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *neptunegraph.StartGraphInput, ...func(*neptunegraph.Options)) (*neptunegraph.StartGraphOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *neptunegraph.StartGraphInput, ...func(*neptunegraph.Options)) *neptunegraph.StartGraphOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*neptunegraph.StartGraphOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *neptunegraph.StartGraphInput, ...func(*neptunegraph.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// StartImportTask provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) StartImportTask(ctx context.Context, params *neptunegraph.StartImportTaskInput, optFns ...func(*neptunegraph.Options)) (*neptunegraph.StartImportTaskOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for StartImportTask")
	}

	var r0 *neptunegraph.StartImportTaskOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *neptunegraph.StartImportTaskInput, ...func(*neptunegraph.Options)) (*neptunegraph.StartImportTaskOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *neptunegraph.StartImportTaskInput, ...func(*neptunegraph.Options)) *neptunegraph.StartImportTaskOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*neptunegraph.StartImportTaskOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *neptunegraph.StartImportTaskInput, ...func(*neptunegraph.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// StopGraph provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) StopGraph(ctx context.Context, params *neptunegraph.StopGraphInput, optFns ...func(*neptunegraph.Options)) (*neptunegraph.StopGraphOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for StopGraph")
	}

	var r0 *neptunegraph.StopGraphOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *neptunegraph.StopGraphInput, ...func(*neptunegraph.Options)) (*neptunegraph.StopGraphOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *neptunegraph.StopGraphInput, ...func(*neptunegraph.Options)) *neptunegraph.StopGraphOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*neptunegraph.StopGraphOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *neptunegraph.StopGraphInput, ...func(*neptunegraph.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// TagResource provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) TagResource(ctx context.Context, params *neptunegraph.TagResourceInput, optFns ...func(*neptunegraph.Options)) (*neptunegraph.TagResourceOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for TagResource")
	}

	var r0 *neptunegraph.TagResourceOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *neptunegraph.TagResourceInput, ...func(*neptunegraph.Options)) (*neptunegraph.TagResourceOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *neptunegraph.TagResourceInput, ...func(*neptunegraph.Options)) *neptunegraph.TagResourceOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*neptunegraph.TagResourceOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *neptunegraph.TagResourceInput, ...func(*neptunegraph.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UntagResource provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UntagResource(ctx context.Context, params *neptunegraph.UntagResourceInput, optFns ...func(*neptunegraph.Options)) (*neptunegraph.UntagResourceOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UntagResource")
	}

	var r0 *neptunegraph.UntagResourceOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *neptunegraph.UntagResourceInput, ...func(*neptunegraph.Options)) (*neptunegraph.UntagResourceOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *neptunegraph.UntagResourceInput, ...func(*neptunegraph.Options)) *neptunegraph.UntagResourceOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*neptunegraph.UntagResourceOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *neptunegraph.UntagResourceInput, ...func(*neptunegraph.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateGraph provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UpdateGraph(ctx context.Context, params *neptunegraph.UpdateGraphInput, optFns ...func(*neptunegraph.Options)) (*neptunegraph.UpdateGraphOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateGraph")
	}

	var r0 *neptunegraph.UpdateGraphOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *neptunegraph.UpdateGraphInput, ...func(*neptunegraph.Options)) (*neptunegraph.UpdateGraphOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *neptunegraph.UpdateGraphInput, ...func(*neptunegraph.Options)) *neptunegraph.UpdateGraphOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*neptunegraph.UpdateGraphOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *neptunegraph.UpdateGraphInput, ...func(*neptunegraph.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewIClient creates a new instance of IClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewIClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *IClient {
	mock := &IClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
