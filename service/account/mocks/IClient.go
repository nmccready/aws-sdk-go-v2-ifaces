// Code generated by mockery v2.53.4. DO NOT EDIT.

package mocks

import (
	account "github.com/aws/aws-sdk-go-v2/service/account"

	context "context"

	mock "github.com/stretchr/testify/mock"
)

// IClient is an autogenerated mock type for the IClient type
type IClient struct {
	mock.Mock
}

// AcceptPrimaryEmailUpdate provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) AcceptPrimaryEmailUpdate(ctx context.Context, params *account.AcceptPrimaryEmailUpdateInput, optFns ...func(*account.Options)) (*account.AcceptPrimaryEmailUpdateOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for AcceptPrimaryEmailUpdate")
	}

	var r0 *account.AcceptPrimaryEmailUpdateOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *account.AcceptPrimaryEmailUpdateInput, ...func(*account.Options)) (*account.AcceptPrimaryEmailUpdateOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *account.AcceptPrimaryEmailUpdateInput, ...func(*account.Options)) *account.AcceptPrimaryEmailUpdateOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*account.AcceptPrimaryEmailUpdateOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *account.AcceptPrimaryEmailUpdateInput, ...func(*account.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteAlternateContact provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteAlternateContact(ctx context.Context, params *account.DeleteAlternateContactInput, optFns ...func(*account.Options)) (*account.DeleteAlternateContactOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteAlternateContact")
	}

	var r0 *account.DeleteAlternateContactOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *account.DeleteAlternateContactInput, ...func(*account.Options)) (*account.DeleteAlternateContactOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *account.DeleteAlternateContactInput, ...func(*account.Options)) *account.DeleteAlternateContactOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*account.DeleteAlternateContactOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *account.DeleteAlternateContactInput, ...func(*account.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DisableRegion provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DisableRegion(ctx context.Context, params *account.DisableRegionInput, optFns ...func(*account.Options)) (*account.DisableRegionOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DisableRegion")
	}

	var r0 *account.DisableRegionOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *account.DisableRegionInput, ...func(*account.Options)) (*account.DisableRegionOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *account.DisableRegionInput, ...func(*account.Options)) *account.DisableRegionOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*account.DisableRegionOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *account.DisableRegionInput, ...func(*account.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// EnableRegion provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) EnableRegion(ctx context.Context, params *account.EnableRegionInput, optFns ...func(*account.Options)) (*account.EnableRegionOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for EnableRegion")
	}

	var r0 *account.EnableRegionOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *account.EnableRegionInput, ...func(*account.Options)) (*account.EnableRegionOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *account.EnableRegionInput, ...func(*account.Options)) *account.EnableRegionOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*account.EnableRegionOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *account.EnableRegionInput, ...func(*account.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAccountInformation provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetAccountInformation(ctx context.Context, params *account.GetAccountInformationInput, optFns ...func(*account.Options)) (*account.GetAccountInformationOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetAccountInformation")
	}

	var r0 *account.GetAccountInformationOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *account.GetAccountInformationInput, ...func(*account.Options)) (*account.GetAccountInformationOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *account.GetAccountInformationInput, ...func(*account.Options)) *account.GetAccountInformationOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*account.GetAccountInformationOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *account.GetAccountInformationInput, ...func(*account.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAlternateContact provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetAlternateContact(ctx context.Context, params *account.GetAlternateContactInput, optFns ...func(*account.Options)) (*account.GetAlternateContactOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetAlternateContact")
	}

	var r0 *account.GetAlternateContactOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *account.GetAlternateContactInput, ...func(*account.Options)) (*account.GetAlternateContactOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *account.GetAlternateContactInput, ...func(*account.Options)) *account.GetAlternateContactOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*account.GetAlternateContactOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *account.GetAlternateContactInput, ...func(*account.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetContactInformation provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetContactInformation(ctx context.Context, params *account.GetContactInformationInput, optFns ...func(*account.Options)) (*account.GetContactInformationOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetContactInformation")
	}

	var r0 *account.GetContactInformationOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *account.GetContactInformationInput, ...func(*account.Options)) (*account.GetContactInformationOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *account.GetContactInformationInput, ...func(*account.Options)) *account.GetContactInformationOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*account.GetContactInformationOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *account.GetContactInformationInput, ...func(*account.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetPrimaryEmail provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetPrimaryEmail(ctx context.Context, params *account.GetPrimaryEmailInput, optFns ...func(*account.Options)) (*account.GetPrimaryEmailOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetPrimaryEmail")
	}

	var r0 *account.GetPrimaryEmailOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *account.GetPrimaryEmailInput, ...func(*account.Options)) (*account.GetPrimaryEmailOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *account.GetPrimaryEmailInput, ...func(*account.Options)) *account.GetPrimaryEmailOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*account.GetPrimaryEmailOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *account.GetPrimaryEmailInput, ...func(*account.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetRegionOptStatus provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetRegionOptStatus(ctx context.Context, params *account.GetRegionOptStatusInput, optFns ...func(*account.Options)) (*account.GetRegionOptStatusOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetRegionOptStatus")
	}

	var r0 *account.GetRegionOptStatusOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *account.GetRegionOptStatusInput, ...func(*account.Options)) (*account.GetRegionOptStatusOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *account.GetRegionOptStatusInput, ...func(*account.Options)) *account.GetRegionOptStatusOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*account.GetRegionOptStatusOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *account.GetRegionOptStatusInput, ...func(*account.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListRegions provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListRegions(ctx context.Context, params *account.ListRegionsInput, optFns ...func(*account.Options)) (*account.ListRegionsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListRegions")
	}

	var r0 *account.ListRegionsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *account.ListRegionsInput, ...func(*account.Options)) (*account.ListRegionsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *account.ListRegionsInput, ...func(*account.Options)) *account.ListRegionsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*account.ListRegionsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *account.ListRegionsInput, ...func(*account.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Options provides a mock function with no fields
func (_m *IClient) Options() account.Options {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Options")
	}

	var r0 account.Options
	if rf, ok := ret.Get(0).(func() account.Options); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(account.Options)
	}

	return r0
}

// PutAccountName provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) PutAccountName(ctx context.Context, params *account.PutAccountNameInput, optFns ...func(*account.Options)) (*account.PutAccountNameOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for PutAccountName")
	}

	var r0 *account.PutAccountNameOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *account.PutAccountNameInput, ...func(*account.Options)) (*account.PutAccountNameOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *account.PutAccountNameInput, ...func(*account.Options)) *account.PutAccountNameOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*account.PutAccountNameOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *account.PutAccountNameInput, ...func(*account.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PutAlternateContact provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) PutAlternateContact(ctx context.Context, params *account.PutAlternateContactInput, optFns ...func(*account.Options)) (*account.PutAlternateContactOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for PutAlternateContact")
	}

	var r0 *account.PutAlternateContactOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *account.PutAlternateContactInput, ...func(*account.Options)) (*account.PutAlternateContactOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *account.PutAlternateContactInput, ...func(*account.Options)) *account.PutAlternateContactOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*account.PutAlternateContactOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *account.PutAlternateContactInput, ...func(*account.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PutContactInformation provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) PutContactInformation(ctx context.Context, params *account.PutContactInformationInput, optFns ...func(*account.Options)) (*account.PutContactInformationOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for PutContactInformation")
	}

	var r0 *account.PutContactInformationOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *account.PutContactInformationInput, ...func(*account.Options)) (*account.PutContactInformationOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *account.PutContactInformationInput, ...func(*account.Options)) *account.PutContactInformationOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*account.PutContactInformationOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *account.PutContactInformationInput, ...func(*account.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// StartPrimaryEmailUpdate provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) StartPrimaryEmailUpdate(ctx context.Context, params *account.StartPrimaryEmailUpdateInput, optFns ...func(*account.Options)) (*account.StartPrimaryEmailUpdateOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for StartPrimaryEmailUpdate")
	}

	var r0 *account.StartPrimaryEmailUpdateOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *account.StartPrimaryEmailUpdateInput, ...func(*account.Options)) (*account.StartPrimaryEmailUpdateOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *account.StartPrimaryEmailUpdateInput, ...func(*account.Options)) *account.StartPrimaryEmailUpdateOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*account.StartPrimaryEmailUpdateOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *account.StartPrimaryEmailUpdateInput, ...func(*account.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewIClient creates a new instance of IClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewIClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *IClient {
	mock := &IClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
