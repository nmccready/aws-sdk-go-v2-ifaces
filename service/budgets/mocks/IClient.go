// Code generated by mockery v2.53.4. DO NOT EDIT.

package mocks

import (
	budgets "github.com/aws/aws-sdk-go-v2/service/budgets"

	context "context"

	mock "github.com/stretchr/testify/mock"
)

// IClient is an autogenerated mock type for the IClient type
type IClient struct {
	mock.Mock
}

// CreateBudget provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CreateBudget(ctx context.Context, params *budgets.CreateBudgetInput, optFns ...func(*budgets.Options)) (*budgets.CreateBudgetOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateBudget")
	}

	var r0 *budgets.CreateBudgetOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *budgets.CreateBudgetInput, ...func(*budgets.Options)) (*budgets.CreateBudgetOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *budgets.CreateBudgetInput, ...func(*budgets.Options)) *budgets.CreateBudgetOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*budgets.CreateBudgetOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *budgets.CreateBudgetInput, ...func(*budgets.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateBudgetAction provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CreateBudgetAction(ctx context.Context, params *budgets.CreateBudgetActionInput, optFns ...func(*budgets.Options)) (*budgets.CreateBudgetActionOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateBudgetAction")
	}

	var r0 *budgets.CreateBudgetActionOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *budgets.CreateBudgetActionInput, ...func(*budgets.Options)) (*budgets.CreateBudgetActionOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *budgets.CreateBudgetActionInput, ...func(*budgets.Options)) *budgets.CreateBudgetActionOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*budgets.CreateBudgetActionOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *budgets.CreateBudgetActionInput, ...func(*budgets.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateNotification provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CreateNotification(ctx context.Context, params *budgets.CreateNotificationInput, optFns ...func(*budgets.Options)) (*budgets.CreateNotificationOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateNotification")
	}

	var r0 *budgets.CreateNotificationOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *budgets.CreateNotificationInput, ...func(*budgets.Options)) (*budgets.CreateNotificationOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *budgets.CreateNotificationInput, ...func(*budgets.Options)) *budgets.CreateNotificationOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*budgets.CreateNotificationOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *budgets.CreateNotificationInput, ...func(*budgets.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateSubscriber provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CreateSubscriber(ctx context.Context, params *budgets.CreateSubscriberInput, optFns ...func(*budgets.Options)) (*budgets.CreateSubscriberOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateSubscriber")
	}

	var r0 *budgets.CreateSubscriberOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *budgets.CreateSubscriberInput, ...func(*budgets.Options)) (*budgets.CreateSubscriberOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *budgets.CreateSubscriberInput, ...func(*budgets.Options)) *budgets.CreateSubscriberOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*budgets.CreateSubscriberOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *budgets.CreateSubscriberInput, ...func(*budgets.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteBudget provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteBudget(ctx context.Context, params *budgets.DeleteBudgetInput, optFns ...func(*budgets.Options)) (*budgets.DeleteBudgetOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteBudget")
	}

	var r0 *budgets.DeleteBudgetOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *budgets.DeleteBudgetInput, ...func(*budgets.Options)) (*budgets.DeleteBudgetOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *budgets.DeleteBudgetInput, ...func(*budgets.Options)) *budgets.DeleteBudgetOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*budgets.DeleteBudgetOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *budgets.DeleteBudgetInput, ...func(*budgets.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteBudgetAction provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteBudgetAction(ctx context.Context, params *budgets.DeleteBudgetActionInput, optFns ...func(*budgets.Options)) (*budgets.DeleteBudgetActionOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteBudgetAction")
	}

	var r0 *budgets.DeleteBudgetActionOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *budgets.DeleteBudgetActionInput, ...func(*budgets.Options)) (*budgets.DeleteBudgetActionOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *budgets.DeleteBudgetActionInput, ...func(*budgets.Options)) *budgets.DeleteBudgetActionOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*budgets.DeleteBudgetActionOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *budgets.DeleteBudgetActionInput, ...func(*budgets.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteNotification provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteNotification(ctx context.Context, params *budgets.DeleteNotificationInput, optFns ...func(*budgets.Options)) (*budgets.DeleteNotificationOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteNotification")
	}

	var r0 *budgets.DeleteNotificationOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *budgets.DeleteNotificationInput, ...func(*budgets.Options)) (*budgets.DeleteNotificationOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *budgets.DeleteNotificationInput, ...func(*budgets.Options)) *budgets.DeleteNotificationOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*budgets.DeleteNotificationOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *budgets.DeleteNotificationInput, ...func(*budgets.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteSubscriber provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteSubscriber(ctx context.Context, params *budgets.DeleteSubscriberInput, optFns ...func(*budgets.Options)) (*budgets.DeleteSubscriberOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteSubscriber")
	}

	var r0 *budgets.DeleteSubscriberOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *budgets.DeleteSubscriberInput, ...func(*budgets.Options)) (*budgets.DeleteSubscriberOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *budgets.DeleteSubscriberInput, ...func(*budgets.Options)) *budgets.DeleteSubscriberOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*budgets.DeleteSubscriberOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *budgets.DeleteSubscriberInput, ...func(*budgets.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeBudget provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DescribeBudget(ctx context.Context, params *budgets.DescribeBudgetInput, optFns ...func(*budgets.Options)) (*budgets.DescribeBudgetOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DescribeBudget")
	}

	var r0 *budgets.DescribeBudgetOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *budgets.DescribeBudgetInput, ...func(*budgets.Options)) (*budgets.DescribeBudgetOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *budgets.DescribeBudgetInput, ...func(*budgets.Options)) *budgets.DescribeBudgetOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*budgets.DescribeBudgetOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *budgets.DescribeBudgetInput, ...func(*budgets.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeBudgetAction provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DescribeBudgetAction(ctx context.Context, params *budgets.DescribeBudgetActionInput, optFns ...func(*budgets.Options)) (*budgets.DescribeBudgetActionOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DescribeBudgetAction")
	}

	var r0 *budgets.DescribeBudgetActionOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *budgets.DescribeBudgetActionInput, ...func(*budgets.Options)) (*budgets.DescribeBudgetActionOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *budgets.DescribeBudgetActionInput, ...func(*budgets.Options)) *budgets.DescribeBudgetActionOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*budgets.DescribeBudgetActionOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *budgets.DescribeBudgetActionInput, ...func(*budgets.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeBudgetActionHistories provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DescribeBudgetActionHistories(ctx context.Context, params *budgets.DescribeBudgetActionHistoriesInput, optFns ...func(*budgets.Options)) (*budgets.DescribeBudgetActionHistoriesOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DescribeBudgetActionHistories")
	}

	var r0 *budgets.DescribeBudgetActionHistoriesOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *budgets.DescribeBudgetActionHistoriesInput, ...func(*budgets.Options)) (*budgets.DescribeBudgetActionHistoriesOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *budgets.DescribeBudgetActionHistoriesInput, ...func(*budgets.Options)) *budgets.DescribeBudgetActionHistoriesOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*budgets.DescribeBudgetActionHistoriesOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *budgets.DescribeBudgetActionHistoriesInput, ...func(*budgets.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeBudgetActionsForAccount provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DescribeBudgetActionsForAccount(ctx context.Context, params *budgets.DescribeBudgetActionsForAccountInput, optFns ...func(*budgets.Options)) (*budgets.DescribeBudgetActionsForAccountOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DescribeBudgetActionsForAccount")
	}

	var r0 *budgets.DescribeBudgetActionsForAccountOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *budgets.DescribeBudgetActionsForAccountInput, ...func(*budgets.Options)) (*budgets.DescribeBudgetActionsForAccountOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *budgets.DescribeBudgetActionsForAccountInput, ...func(*budgets.Options)) *budgets.DescribeBudgetActionsForAccountOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*budgets.DescribeBudgetActionsForAccountOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *budgets.DescribeBudgetActionsForAccountInput, ...func(*budgets.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeBudgetActionsForBudget provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DescribeBudgetActionsForBudget(ctx context.Context, params *budgets.DescribeBudgetActionsForBudgetInput, optFns ...func(*budgets.Options)) (*budgets.DescribeBudgetActionsForBudgetOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DescribeBudgetActionsForBudget")
	}

	var r0 *budgets.DescribeBudgetActionsForBudgetOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *budgets.DescribeBudgetActionsForBudgetInput, ...func(*budgets.Options)) (*budgets.DescribeBudgetActionsForBudgetOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *budgets.DescribeBudgetActionsForBudgetInput, ...func(*budgets.Options)) *budgets.DescribeBudgetActionsForBudgetOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*budgets.DescribeBudgetActionsForBudgetOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *budgets.DescribeBudgetActionsForBudgetInput, ...func(*budgets.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeBudgetNotificationsForAccount provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DescribeBudgetNotificationsForAccount(ctx context.Context, params *budgets.DescribeBudgetNotificationsForAccountInput, optFns ...func(*budgets.Options)) (*budgets.DescribeBudgetNotificationsForAccountOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DescribeBudgetNotificationsForAccount")
	}

	var r0 *budgets.DescribeBudgetNotificationsForAccountOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *budgets.DescribeBudgetNotificationsForAccountInput, ...func(*budgets.Options)) (*budgets.DescribeBudgetNotificationsForAccountOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *budgets.DescribeBudgetNotificationsForAccountInput, ...func(*budgets.Options)) *budgets.DescribeBudgetNotificationsForAccountOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*budgets.DescribeBudgetNotificationsForAccountOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *budgets.DescribeBudgetNotificationsForAccountInput, ...func(*budgets.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeBudgetPerformanceHistory provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DescribeBudgetPerformanceHistory(ctx context.Context, params *budgets.DescribeBudgetPerformanceHistoryInput, optFns ...func(*budgets.Options)) (*budgets.DescribeBudgetPerformanceHistoryOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DescribeBudgetPerformanceHistory")
	}

	var r0 *budgets.DescribeBudgetPerformanceHistoryOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *budgets.DescribeBudgetPerformanceHistoryInput, ...func(*budgets.Options)) (*budgets.DescribeBudgetPerformanceHistoryOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *budgets.DescribeBudgetPerformanceHistoryInput, ...func(*budgets.Options)) *budgets.DescribeBudgetPerformanceHistoryOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*budgets.DescribeBudgetPerformanceHistoryOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *budgets.DescribeBudgetPerformanceHistoryInput, ...func(*budgets.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeBudgets provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DescribeBudgets(ctx context.Context, params *budgets.DescribeBudgetsInput, optFns ...func(*budgets.Options)) (*budgets.DescribeBudgetsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DescribeBudgets")
	}

	var r0 *budgets.DescribeBudgetsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *budgets.DescribeBudgetsInput, ...func(*budgets.Options)) (*budgets.DescribeBudgetsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *budgets.DescribeBudgetsInput, ...func(*budgets.Options)) *budgets.DescribeBudgetsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*budgets.DescribeBudgetsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *budgets.DescribeBudgetsInput, ...func(*budgets.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeNotificationsForBudget provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DescribeNotificationsForBudget(ctx context.Context, params *budgets.DescribeNotificationsForBudgetInput, optFns ...func(*budgets.Options)) (*budgets.DescribeNotificationsForBudgetOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DescribeNotificationsForBudget")
	}

	var r0 *budgets.DescribeNotificationsForBudgetOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *budgets.DescribeNotificationsForBudgetInput, ...func(*budgets.Options)) (*budgets.DescribeNotificationsForBudgetOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *budgets.DescribeNotificationsForBudgetInput, ...func(*budgets.Options)) *budgets.DescribeNotificationsForBudgetOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*budgets.DescribeNotificationsForBudgetOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *budgets.DescribeNotificationsForBudgetInput, ...func(*budgets.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeSubscribersForNotification provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DescribeSubscribersForNotification(ctx context.Context, params *budgets.DescribeSubscribersForNotificationInput, optFns ...func(*budgets.Options)) (*budgets.DescribeSubscribersForNotificationOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DescribeSubscribersForNotification")
	}

	var r0 *budgets.DescribeSubscribersForNotificationOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *budgets.DescribeSubscribersForNotificationInput, ...func(*budgets.Options)) (*budgets.DescribeSubscribersForNotificationOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *budgets.DescribeSubscribersForNotificationInput, ...func(*budgets.Options)) *budgets.DescribeSubscribersForNotificationOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*budgets.DescribeSubscribersForNotificationOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *budgets.DescribeSubscribersForNotificationInput, ...func(*budgets.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ExecuteBudgetAction provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ExecuteBudgetAction(ctx context.Context, params *budgets.ExecuteBudgetActionInput, optFns ...func(*budgets.Options)) (*budgets.ExecuteBudgetActionOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ExecuteBudgetAction")
	}

	var r0 *budgets.ExecuteBudgetActionOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *budgets.ExecuteBudgetActionInput, ...func(*budgets.Options)) (*budgets.ExecuteBudgetActionOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *budgets.ExecuteBudgetActionInput, ...func(*budgets.Options)) *budgets.ExecuteBudgetActionOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*budgets.ExecuteBudgetActionOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *budgets.ExecuteBudgetActionInput, ...func(*budgets.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListTagsForResource provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListTagsForResource(ctx context.Context, params *budgets.ListTagsForResourceInput, optFns ...func(*budgets.Options)) (*budgets.ListTagsForResourceOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListTagsForResource")
	}

	var r0 *budgets.ListTagsForResourceOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *budgets.ListTagsForResourceInput, ...func(*budgets.Options)) (*budgets.ListTagsForResourceOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *budgets.ListTagsForResourceInput, ...func(*budgets.Options)) *budgets.ListTagsForResourceOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*budgets.ListTagsForResourceOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *budgets.ListTagsForResourceInput, ...func(*budgets.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Options provides a mock function with no fields
func (_m *IClient) Options() budgets.Options {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Options")
	}

	var r0 budgets.Options
	if rf, ok := ret.Get(0).(func() budgets.Options); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(budgets.Options)
	}

	return r0
}

// TagResource provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) TagResource(ctx context.Context, params *budgets.TagResourceInput, optFns ...func(*budgets.Options)) (*budgets.TagResourceOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for TagResource")
	}

	var r0 *budgets.TagResourceOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *budgets.TagResourceInput, ...func(*budgets.Options)) (*budgets.TagResourceOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *budgets.TagResourceInput, ...func(*budgets.Options)) *budgets.TagResourceOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*budgets.TagResourceOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *budgets.TagResourceInput, ...func(*budgets.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UntagResource provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UntagResource(ctx context.Context, params *budgets.UntagResourceInput, optFns ...func(*budgets.Options)) (*budgets.UntagResourceOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UntagResource")
	}

	var r0 *budgets.UntagResourceOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *budgets.UntagResourceInput, ...func(*budgets.Options)) (*budgets.UntagResourceOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *budgets.UntagResourceInput, ...func(*budgets.Options)) *budgets.UntagResourceOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*budgets.UntagResourceOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *budgets.UntagResourceInput, ...func(*budgets.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateBudget provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UpdateBudget(ctx context.Context, params *budgets.UpdateBudgetInput, optFns ...func(*budgets.Options)) (*budgets.UpdateBudgetOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateBudget")
	}

	var r0 *budgets.UpdateBudgetOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *budgets.UpdateBudgetInput, ...func(*budgets.Options)) (*budgets.UpdateBudgetOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *budgets.UpdateBudgetInput, ...func(*budgets.Options)) *budgets.UpdateBudgetOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*budgets.UpdateBudgetOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *budgets.UpdateBudgetInput, ...func(*budgets.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateBudgetAction provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UpdateBudgetAction(ctx context.Context, params *budgets.UpdateBudgetActionInput, optFns ...func(*budgets.Options)) (*budgets.UpdateBudgetActionOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateBudgetAction")
	}

	var r0 *budgets.UpdateBudgetActionOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *budgets.UpdateBudgetActionInput, ...func(*budgets.Options)) (*budgets.UpdateBudgetActionOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *budgets.UpdateBudgetActionInput, ...func(*budgets.Options)) *budgets.UpdateBudgetActionOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*budgets.UpdateBudgetActionOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *budgets.UpdateBudgetActionInput, ...func(*budgets.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateNotification provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UpdateNotification(ctx context.Context, params *budgets.UpdateNotificationInput, optFns ...func(*budgets.Options)) (*budgets.UpdateNotificationOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateNotification")
	}

	var r0 *budgets.UpdateNotificationOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *budgets.UpdateNotificationInput, ...func(*budgets.Options)) (*budgets.UpdateNotificationOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *budgets.UpdateNotificationInput, ...func(*budgets.Options)) *budgets.UpdateNotificationOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*budgets.UpdateNotificationOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *budgets.UpdateNotificationInput, ...func(*budgets.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateSubscriber provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UpdateSubscriber(ctx context.Context, params *budgets.UpdateSubscriberInput, optFns ...func(*budgets.Options)) (*budgets.UpdateSubscriberOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateSubscriber")
	}

	var r0 *budgets.UpdateSubscriberOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *budgets.UpdateSubscriberInput, ...func(*budgets.Options)) (*budgets.UpdateSubscriberOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *budgets.UpdateSubscriberInput, ...func(*budgets.Options)) *budgets.UpdateSubscriberOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*budgets.UpdateSubscriberOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *budgets.UpdateSubscriberInput, ...func(*budgets.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewIClient creates a new instance of IClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewIClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *IClient {
	mock := &IClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
