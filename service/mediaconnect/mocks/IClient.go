// Code generated by mockery v2.53.4. DO NOT EDIT.

package mocks

import (
	context "context"

	mediaconnect "github.com/aws/aws-sdk-go-v2/service/mediaconnect"

	mock "github.com/stretchr/testify/mock"
)

// IClient is an autogenerated mock type for the IClient type
type IClient struct {
	mock.Mock
}

// AddBridgeOutputs provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) AddBridgeOutputs(ctx context.Context, params *mediaconnect.AddBridgeOutputsInput, optFns ...func(*mediaconnect.Options)) (*mediaconnect.AddBridgeOutputsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for AddBridgeOutputs")
	}

	var r0 *mediaconnect.AddBridgeOutputsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *mediaconnect.AddBridgeOutputsInput, ...func(*mediaconnect.Options)) (*mediaconnect.AddBridgeOutputsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *mediaconnect.AddBridgeOutputsInput, ...func(*mediaconnect.Options)) *mediaconnect.AddBridgeOutputsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*mediaconnect.AddBridgeOutputsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *mediaconnect.AddBridgeOutputsInput, ...func(*mediaconnect.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AddBridgeSources provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) AddBridgeSources(ctx context.Context, params *mediaconnect.AddBridgeSourcesInput, optFns ...func(*mediaconnect.Options)) (*mediaconnect.AddBridgeSourcesOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for AddBridgeSources")
	}

	var r0 *mediaconnect.AddBridgeSourcesOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *mediaconnect.AddBridgeSourcesInput, ...func(*mediaconnect.Options)) (*mediaconnect.AddBridgeSourcesOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *mediaconnect.AddBridgeSourcesInput, ...func(*mediaconnect.Options)) *mediaconnect.AddBridgeSourcesOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*mediaconnect.AddBridgeSourcesOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *mediaconnect.AddBridgeSourcesInput, ...func(*mediaconnect.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AddFlowMediaStreams provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) AddFlowMediaStreams(ctx context.Context, params *mediaconnect.AddFlowMediaStreamsInput, optFns ...func(*mediaconnect.Options)) (*mediaconnect.AddFlowMediaStreamsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for AddFlowMediaStreams")
	}

	var r0 *mediaconnect.AddFlowMediaStreamsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *mediaconnect.AddFlowMediaStreamsInput, ...func(*mediaconnect.Options)) (*mediaconnect.AddFlowMediaStreamsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *mediaconnect.AddFlowMediaStreamsInput, ...func(*mediaconnect.Options)) *mediaconnect.AddFlowMediaStreamsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*mediaconnect.AddFlowMediaStreamsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *mediaconnect.AddFlowMediaStreamsInput, ...func(*mediaconnect.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AddFlowOutputs provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) AddFlowOutputs(ctx context.Context, params *mediaconnect.AddFlowOutputsInput, optFns ...func(*mediaconnect.Options)) (*mediaconnect.AddFlowOutputsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for AddFlowOutputs")
	}

	var r0 *mediaconnect.AddFlowOutputsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *mediaconnect.AddFlowOutputsInput, ...func(*mediaconnect.Options)) (*mediaconnect.AddFlowOutputsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *mediaconnect.AddFlowOutputsInput, ...func(*mediaconnect.Options)) *mediaconnect.AddFlowOutputsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*mediaconnect.AddFlowOutputsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *mediaconnect.AddFlowOutputsInput, ...func(*mediaconnect.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AddFlowSources provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) AddFlowSources(ctx context.Context, params *mediaconnect.AddFlowSourcesInput, optFns ...func(*mediaconnect.Options)) (*mediaconnect.AddFlowSourcesOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for AddFlowSources")
	}

	var r0 *mediaconnect.AddFlowSourcesOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *mediaconnect.AddFlowSourcesInput, ...func(*mediaconnect.Options)) (*mediaconnect.AddFlowSourcesOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *mediaconnect.AddFlowSourcesInput, ...func(*mediaconnect.Options)) *mediaconnect.AddFlowSourcesOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*mediaconnect.AddFlowSourcesOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *mediaconnect.AddFlowSourcesInput, ...func(*mediaconnect.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AddFlowVpcInterfaces provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) AddFlowVpcInterfaces(ctx context.Context, params *mediaconnect.AddFlowVpcInterfacesInput, optFns ...func(*mediaconnect.Options)) (*mediaconnect.AddFlowVpcInterfacesOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for AddFlowVpcInterfaces")
	}

	var r0 *mediaconnect.AddFlowVpcInterfacesOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *mediaconnect.AddFlowVpcInterfacesInput, ...func(*mediaconnect.Options)) (*mediaconnect.AddFlowVpcInterfacesOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *mediaconnect.AddFlowVpcInterfacesInput, ...func(*mediaconnect.Options)) *mediaconnect.AddFlowVpcInterfacesOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*mediaconnect.AddFlowVpcInterfacesOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *mediaconnect.AddFlowVpcInterfacesInput, ...func(*mediaconnect.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateBridge provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CreateBridge(ctx context.Context, params *mediaconnect.CreateBridgeInput, optFns ...func(*mediaconnect.Options)) (*mediaconnect.CreateBridgeOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateBridge")
	}

	var r0 *mediaconnect.CreateBridgeOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *mediaconnect.CreateBridgeInput, ...func(*mediaconnect.Options)) (*mediaconnect.CreateBridgeOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *mediaconnect.CreateBridgeInput, ...func(*mediaconnect.Options)) *mediaconnect.CreateBridgeOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*mediaconnect.CreateBridgeOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *mediaconnect.CreateBridgeInput, ...func(*mediaconnect.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateFlow provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CreateFlow(ctx context.Context, params *mediaconnect.CreateFlowInput, optFns ...func(*mediaconnect.Options)) (*mediaconnect.CreateFlowOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateFlow")
	}

	var r0 *mediaconnect.CreateFlowOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *mediaconnect.CreateFlowInput, ...func(*mediaconnect.Options)) (*mediaconnect.CreateFlowOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *mediaconnect.CreateFlowInput, ...func(*mediaconnect.Options)) *mediaconnect.CreateFlowOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*mediaconnect.CreateFlowOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *mediaconnect.CreateFlowInput, ...func(*mediaconnect.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateGateway provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CreateGateway(ctx context.Context, params *mediaconnect.CreateGatewayInput, optFns ...func(*mediaconnect.Options)) (*mediaconnect.CreateGatewayOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateGateway")
	}

	var r0 *mediaconnect.CreateGatewayOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *mediaconnect.CreateGatewayInput, ...func(*mediaconnect.Options)) (*mediaconnect.CreateGatewayOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *mediaconnect.CreateGatewayInput, ...func(*mediaconnect.Options)) *mediaconnect.CreateGatewayOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*mediaconnect.CreateGatewayOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *mediaconnect.CreateGatewayInput, ...func(*mediaconnect.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteBridge provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteBridge(ctx context.Context, params *mediaconnect.DeleteBridgeInput, optFns ...func(*mediaconnect.Options)) (*mediaconnect.DeleteBridgeOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteBridge")
	}

	var r0 *mediaconnect.DeleteBridgeOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *mediaconnect.DeleteBridgeInput, ...func(*mediaconnect.Options)) (*mediaconnect.DeleteBridgeOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *mediaconnect.DeleteBridgeInput, ...func(*mediaconnect.Options)) *mediaconnect.DeleteBridgeOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*mediaconnect.DeleteBridgeOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *mediaconnect.DeleteBridgeInput, ...func(*mediaconnect.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteFlow provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteFlow(ctx context.Context, params *mediaconnect.DeleteFlowInput, optFns ...func(*mediaconnect.Options)) (*mediaconnect.DeleteFlowOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteFlow")
	}

	var r0 *mediaconnect.DeleteFlowOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *mediaconnect.DeleteFlowInput, ...func(*mediaconnect.Options)) (*mediaconnect.DeleteFlowOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *mediaconnect.DeleteFlowInput, ...func(*mediaconnect.Options)) *mediaconnect.DeleteFlowOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*mediaconnect.DeleteFlowOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *mediaconnect.DeleteFlowInput, ...func(*mediaconnect.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteGateway provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteGateway(ctx context.Context, params *mediaconnect.DeleteGatewayInput, optFns ...func(*mediaconnect.Options)) (*mediaconnect.DeleteGatewayOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteGateway")
	}

	var r0 *mediaconnect.DeleteGatewayOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *mediaconnect.DeleteGatewayInput, ...func(*mediaconnect.Options)) (*mediaconnect.DeleteGatewayOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *mediaconnect.DeleteGatewayInput, ...func(*mediaconnect.Options)) *mediaconnect.DeleteGatewayOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*mediaconnect.DeleteGatewayOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *mediaconnect.DeleteGatewayInput, ...func(*mediaconnect.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeregisterGatewayInstance provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeregisterGatewayInstance(ctx context.Context, params *mediaconnect.DeregisterGatewayInstanceInput, optFns ...func(*mediaconnect.Options)) (*mediaconnect.DeregisterGatewayInstanceOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeregisterGatewayInstance")
	}

	var r0 *mediaconnect.DeregisterGatewayInstanceOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *mediaconnect.DeregisterGatewayInstanceInput, ...func(*mediaconnect.Options)) (*mediaconnect.DeregisterGatewayInstanceOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *mediaconnect.DeregisterGatewayInstanceInput, ...func(*mediaconnect.Options)) *mediaconnect.DeregisterGatewayInstanceOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*mediaconnect.DeregisterGatewayInstanceOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *mediaconnect.DeregisterGatewayInstanceInput, ...func(*mediaconnect.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeBridge provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DescribeBridge(ctx context.Context, params *mediaconnect.DescribeBridgeInput, optFns ...func(*mediaconnect.Options)) (*mediaconnect.DescribeBridgeOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DescribeBridge")
	}

	var r0 *mediaconnect.DescribeBridgeOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *mediaconnect.DescribeBridgeInput, ...func(*mediaconnect.Options)) (*mediaconnect.DescribeBridgeOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *mediaconnect.DescribeBridgeInput, ...func(*mediaconnect.Options)) *mediaconnect.DescribeBridgeOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*mediaconnect.DescribeBridgeOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *mediaconnect.DescribeBridgeInput, ...func(*mediaconnect.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeFlow provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DescribeFlow(ctx context.Context, params *mediaconnect.DescribeFlowInput, optFns ...func(*mediaconnect.Options)) (*mediaconnect.DescribeFlowOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DescribeFlow")
	}

	var r0 *mediaconnect.DescribeFlowOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *mediaconnect.DescribeFlowInput, ...func(*mediaconnect.Options)) (*mediaconnect.DescribeFlowOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *mediaconnect.DescribeFlowInput, ...func(*mediaconnect.Options)) *mediaconnect.DescribeFlowOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*mediaconnect.DescribeFlowOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *mediaconnect.DescribeFlowInput, ...func(*mediaconnect.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeFlowSourceMetadata provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DescribeFlowSourceMetadata(ctx context.Context, params *mediaconnect.DescribeFlowSourceMetadataInput, optFns ...func(*mediaconnect.Options)) (*mediaconnect.DescribeFlowSourceMetadataOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DescribeFlowSourceMetadata")
	}

	var r0 *mediaconnect.DescribeFlowSourceMetadataOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *mediaconnect.DescribeFlowSourceMetadataInput, ...func(*mediaconnect.Options)) (*mediaconnect.DescribeFlowSourceMetadataOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *mediaconnect.DescribeFlowSourceMetadataInput, ...func(*mediaconnect.Options)) *mediaconnect.DescribeFlowSourceMetadataOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*mediaconnect.DescribeFlowSourceMetadataOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *mediaconnect.DescribeFlowSourceMetadataInput, ...func(*mediaconnect.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeFlowSourceThumbnail provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DescribeFlowSourceThumbnail(ctx context.Context, params *mediaconnect.DescribeFlowSourceThumbnailInput, optFns ...func(*mediaconnect.Options)) (*mediaconnect.DescribeFlowSourceThumbnailOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DescribeFlowSourceThumbnail")
	}

	var r0 *mediaconnect.DescribeFlowSourceThumbnailOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *mediaconnect.DescribeFlowSourceThumbnailInput, ...func(*mediaconnect.Options)) (*mediaconnect.DescribeFlowSourceThumbnailOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *mediaconnect.DescribeFlowSourceThumbnailInput, ...func(*mediaconnect.Options)) *mediaconnect.DescribeFlowSourceThumbnailOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*mediaconnect.DescribeFlowSourceThumbnailOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *mediaconnect.DescribeFlowSourceThumbnailInput, ...func(*mediaconnect.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeGateway provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DescribeGateway(ctx context.Context, params *mediaconnect.DescribeGatewayInput, optFns ...func(*mediaconnect.Options)) (*mediaconnect.DescribeGatewayOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DescribeGateway")
	}

	var r0 *mediaconnect.DescribeGatewayOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *mediaconnect.DescribeGatewayInput, ...func(*mediaconnect.Options)) (*mediaconnect.DescribeGatewayOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *mediaconnect.DescribeGatewayInput, ...func(*mediaconnect.Options)) *mediaconnect.DescribeGatewayOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*mediaconnect.DescribeGatewayOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *mediaconnect.DescribeGatewayInput, ...func(*mediaconnect.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeGatewayInstance provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DescribeGatewayInstance(ctx context.Context, params *mediaconnect.DescribeGatewayInstanceInput, optFns ...func(*mediaconnect.Options)) (*mediaconnect.DescribeGatewayInstanceOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DescribeGatewayInstance")
	}

	var r0 *mediaconnect.DescribeGatewayInstanceOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *mediaconnect.DescribeGatewayInstanceInput, ...func(*mediaconnect.Options)) (*mediaconnect.DescribeGatewayInstanceOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *mediaconnect.DescribeGatewayInstanceInput, ...func(*mediaconnect.Options)) *mediaconnect.DescribeGatewayInstanceOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*mediaconnect.DescribeGatewayInstanceOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *mediaconnect.DescribeGatewayInstanceInput, ...func(*mediaconnect.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeOffering provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DescribeOffering(ctx context.Context, params *mediaconnect.DescribeOfferingInput, optFns ...func(*mediaconnect.Options)) (*mediaconnect.DescribeOfferingOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DescribeOffering")
	}

	var r0 *mediaconnect.DescribeOfferingOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *mediaconnect.DescribeOfferingInput, ...func(*mediaconnect.Options)) (*mediaconnect.DescribeOfferingOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *mediaconnect.DescribeOfferingInput, ...func(*mediaconnect.Options)) *mediaconnect.DescribeOfferingOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*mediaconnect.DescribeOfferingOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *mediaconnect.DescribeOfferingInput, ...func(*mediaconnect.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeReservation provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DescribeReservation(ctx context.Context, params *mediaconnect.DescribeReservationInput, optFns ...func(*mediaconnect.Options)) (*mediaconnect.DescribeReservationOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DescribeReservation")
	}

	var r0 *mediaconnect.DescribeReservationOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *mediaconnect.DescribeReservationInput, ...func(*mediaconnect.Options)) (*mediaconnect.DescribeReservationOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *mediaconnect.DescribeReservationInput, ...func(*mediaconnect.Options)) *mediaconnect.DescribeReservationOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*mediaconnect.DescribeReservationOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *mediaconnect.DescribeReservationInput, ...func(*mediaconnect.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GrantFlowEntitlements provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GrantFlowEntitlements(ctx context.Context, params *mediaconnect.GrantFlowEntitlementsInput, optFns ...func(*mediaconnect.Options)) (*mediaconnect.GrantFlowEntitlementsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GrantFlowEntitlements")
	}

	var r0 *mediaconnect.GrantFlowEntitlementsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *mediaconnect.GrantFlowEntitlementsInput, ...func(*mediaconnect.Options)) (*mediaconnect.GrantFlowEntitlementsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *mediaconnect.GrantFlowEntitlementsInput, ...func(*mediaconnect.Options)) *mediaconnect.GrantFlowEntitlementsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*mediaconnect.GrantFlowEntitlementsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *mediaconnect.GrantFlowEntitlementsInput, ...func(*mediaconnect.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListBridges provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListBridges(ctx context.Context, params *mediaconnect.ListBridgesInput, optFns ...func(*mediaconnect.Options)) (*mediaconnect.ListBridgesOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListBridges")
	}

	var r0 *mediaconnect.ListBridgesOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *mediaconnect.ListBridgesInput, ...func(*mediaconnect.Options)) (*mediaconnect.ListBridgesOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *mediaconnect.ListBridgesInput, ...func(*mediaconnect.Options)) *mediaconnect.ListBridgesOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*mediaconnect.ListBridgesOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *mediaconnect.ListBridgesInput, ...func(*mediaconnect.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListEntitlements provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListEntitlements(ctx context.Context, params *mediaconnect.ListEntitlementsInput, optFns ...func(*mediaconnect.Options)) (*mediaconnect.ListEntitlementsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListEntitlements")
	}

	var r0 *mediaconnect.ListEntitlementsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *mediaconnect.ListEntitlementsInput, ...func(*mediaconnect.Options)) (*mediaconnect.ListEntitlementsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *mediaconnect.ListEntitlementsInput, ...func(*mediaconnect.Options)) *mediaconnect.ListEntitlementsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*mediaconnect.ListEntitlementsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *mediaconnect.ListEntitlementsInput, ...func(*mediaconnect.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListFlows provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListFlows(ctx context.Context, params *mediaconnect.ListFlowsInput, optFns ...func(*mediaconnect.Options)) (*mediaconnect.ListFlowsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListFlows")
	}

	var r0 *mediaconnect.ListFlowsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *mediaconnect.ListFlowsInput, ...func(*mediaconnect.Options)) (*mediaconnect.ListFlowsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *mediaconnect.ListFlowsInput, ...func(*mediaconnect.Options)) *mediaconnect.ListFlowsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*mediaconnect.ListFlowsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *mediaconnect.ListFlowsInput, ...func(*mediaconnect.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListGatewayInstances provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListGatewayInstances(ctx context.Context, params *mediaconnect.ListGatewayInstancesInput, optFns ...func(*mediaconnect.Options)) (*mediaconnect.ListGatewayInstancesOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListGatewayInstances")
	}

	var r0 *mediaconnect.ListGatewayInstancesOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *mediaconnect.ListGatewayInstancesInput, ...func(*mediaconnect.Options)) (*mediaconnect.ListGatewayInstancesOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *mediaconnect.ListGatewayInstancesInput, ...func(*mediaconnect.Options)) *mediaconnect.ListGatewayInstancesOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*mediaconnect.ListGatewayInstancesOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *mediaconnect.ListGatewayInstancesInput, ...func(*mediaconnect.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListGateways provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListGateways(ctx context.Context, params *mediaconnect.ListGatewaysInput, optFns ...func(*mediaconnect.Options)) (*mediaconnect.ListGatewaysOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListGateways")
	}

	var r0 *mediaconnect.ListGatewaysOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *mediaconnect.ListGatewaysInput, ...func(*mediaconnect.Options)) (*mediaconnect.ListGatewaysOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *mediaconnect.ListGatewaysInput, ...func(*mediaconnect.Options)) *mediaconnect.ListGatewaysOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*mediaconnect.ListGatewaysOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *mediaconnect.ListGatewaysInput, ...func(*mediaconnect.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListOfferings provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListOfferings(ctx context.Context, params *mediaconnect.ListOfferingsInput, optFns ...func(*mediaconnect.Options)) (*mediaconnect.ListOfferingsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListOfferings")
	}

	var r0 *mediaconnect.ListOfferingsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *mediaconnect.ListOfferingsInput, ...func(*mediaconnect.Options)) (*mediaconnect.ListOfferingsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *mediaconnect.ListOfferingsInput, ...func(*mediaconnect.Options)) *mediaconnect.ListOfferingsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*mediaconnect.ListOfferingsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *mediaconnect.ListOfferingsInput, ...func(*mediaconnect.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListReservations provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListReservations(ctx context.Context, params *mediaconnect.ListReservationsInput, optFns ...func(*mediaconnect.Options)) (*mediaconnect.ListReservationsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListReservations")
	}

	var r0 *mediaconnect.ListReservationsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *mediaconnect.ListReservationsInput, ...func(*mediaconnect.Options)) (*mediaconnect.ListReservationsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *mediaconnect.ListReservationsInput, ...func(*mediaconnect.Options)) *mediaconnect.ListReservationsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*mediaconnect.ListReservationsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *mediaconnect.ListReservationsInput, ...func(*mediaconnect.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListTagsForResource provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListTagsForResource(ctx context.Context, params *mediaconnect.ListTagsForResourceInput, optFns ...func(*mediaconnect.Options)) (*mediaconnect.ListTagsForResourceOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListTagsForResource")
	}

	var r0 *mediaconnect.ListTagsForResourceOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *mediaconnect.ListTagsForResourceInput, ...func(*mediaconnect.Options)) (*mediaconnect.ListTagsForResourceOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *mediaconnect.ListTagsForResourceInput, ...func(*mediaconnect.Options)) *mediaconnect.ListTagsForResourceOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*mediaconnect.ListTagsForResourceOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *mediaconnect.ListTagsForResourceInput, ...func(*mediaconnect.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Options provides a mock function with no fields
func (_m *IClient) Options() mediaconnect.Options {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Options")
	}

	var r0 mediaconnect.Options
	if rf, ok := ret.Get(0).(func() mediaconnect.Options); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(mediaconnect.Options)
	}

	return r0
}

// PurchaseOffering provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) PurchaseOffering(ctx context.Context, params *mediaconnect.PurchaseOfferingInput, optFns ...func(*mediaconnect.Options)) (*mediaconnect.PurchaseOfferingOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for PurchaseOffering")
	}

	var r0 *mediaconnect.PurchaseOfferingOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *mediaconnect.PurchaseOfferingInput, ...func(*mediaconnect.Options)) (*mediaconnect.PurchaseOfferingOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *mediaconnect.PurchaseOfferingInput, ...func(*mediaconnect.Options)) *mediaconnect.PurchaseOfferingOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*mediaconnect.PurchaseOfferingOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *mediaconnect.PurchaseOfferingInput, ...func(*mediaconnect.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RemoveBridgeOutput provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) RemoveBridgeOutput(ctx context.Context, params *mediaconnect.RemoveBridgeOutputInput, optFns ...func(*mediaconnect.Options)) (*mediaconnect.RemoveBridgeOutputOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for RemoveBridgeOutput")
	}

	var r0 *mediaconnect.RemoveBridgeOutputOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *mediaconnect.RemoveBridgeOutputInput, ...func(*mediaconnect.Options)) (*mediaconnect.RemoveBridgeOutputOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *mediaconnect.RemoveBridgeOutputInput, ...func(*mediaconnect.Options)) *mediaconnect.RemoveBridgeOutputOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*mediaconnect.RemoveBridgeOutputOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *mediaconnect.RemoveBridgeOutputInput, ...func(*mediaconnect.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RemoveBridgeSource provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) RemoveBridgeSource(ctx context.Context, params *mediaconnect.RemoveBridgeSourceInput, optFns ...func(*mediaconnect.Options)) (*mediaconnect.RemoveBridgeSourceOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for RemoveBridgeSource")
	}

	var r0 *mediaconnect.RemoveBridgeSourceOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *mediaconnect.RemoveBridgeSourceInput, ...func(*mediaconnect.Options)) (*mediaconnect.RemoveBridgeSourceOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *mediaconnect.RemoveBridgeSourceInput, ...func(*mediaconnect.Options)) *mediaconnect.RemoveBridgeSourceOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*mediaconnect.RemoveBridgeSourceOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *mediaconnect.RemoveBridgeSourceInput, ...func(*mediaconnect.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RemoveFlowMediaStream provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) RemoveFlowMediaStream(ctx context.Context, params *mediaconnect.RemoveFlowMediaStreamInput, optFns ...func(*mediaconnect.Options)) (*mediaconnect.RemoveFlowMediaStreamOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for RemoveFlowMediaStream")
	}

	var r0 *mediaconnect.RemoveFlowMediaStreamOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *mediaconnect.RemoveFlowMediaStreamInput, ...func(*mediaconnect.Options)) (*mediaconnect.RemoveFlowMediaStreamOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *mediaconnect.RemoveFlowMediaStreamInput, ...func(*mediaconnect.Options)) *mediaconnect.RemoveFlowMediaStreamOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*mediaconnect.RemoveFlowMediaStreamOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *mediaconnect.RemoveFlowMediaStreamInput, ...func(*mediaconnect.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RemoveFlowOutput provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) RemoveFlowOutput(ctx context.Context, params *mediaconnect.RemoveFlowOutputInput, optFns ...func(*mediaconnect.Options)) (*mediaconnect.RemoveFlowOutputOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for RemoveFlowOutput")
	}

	var r0 *mediaconnect.RemoveFlowOutputOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *mediaconnect.RemoveFlowOutputInput, ...func(*mediaconnect.Options)) (*mediaconnect.RemoveFlowOutputOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *mediaconnect.RemoveFlowOutputInput, ...func(*mediaconnect.Options)) *mediaconnect.RemoveFlowOutputOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*mediaconnect.RemoveFlowOutputOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *mediaconnect.RemoveFlowOutputInput, ...func(*mediaconnect.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RemoveFlowSource provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) RemoveFlowSource(ctx context.Context, params *mediaconnect.RemoveFlowSourceInput, optFns ...func(*mediaconnect.Options)) (*mediaconnect.RemoveFlowSourceOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for RemoveFlowSource")
	}

	var r0 *mediaconnect.RemoveFlowSourceOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *mediaconnect.RemoveFlowSourceInput, ...func(*mediaconnect.Options)) (*mediaconnect.RemoveFlowSourceOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *mediaconnect.RemoveFlowSourceInput, ...func(*mediaconnect.Options)) *mediaconnect.RemoveFlowSourceOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*mediaconnect.RemoveFlowSourceOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *mediaconnect.RemoveFlowSourceInput, ...func(*mediaconnect.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RemoveFlowVpcInterface provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) RemoveFlowVpcInterface(ctx context.Context, params *mediaconnect.RemoveFlowVpcInterfaceInput, optFns ...func(*mediaconnect.Options)) (*mediaconnect.RemoveFlowVpcInterfaceOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for RemoveFlowVpcInterface")
	}

	var r0 *mediaconnect.RemoveFlowVpcInterfaceOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *mediaconnect.RemoveFlowVpcInterfaceInput, ...func(*mediaconnect.Options)) (*mediaconnect.RemoveFlowVpcInterfaceOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *mediaconnect.RemoveFlowVpcInterfaceInput, ...func(*mediaconnect.Options)) *mediaconnect.RemoveFlowVpcInterfaceOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*mediaconnect.RemoveFlowVpcInterfaceOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *mediaconnect.RemoveFlowVpcInterfaceInput, ...func(*mediaconnect.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RevokeFlowEntitlement provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) RevokeFlowEntitlement(ctx context.Context, params *mediaconnect.RevokeFlowEntitlementInput, optFns ...func(*mediaconnect.Options)) (*mediaconnect.RevokeFlowEntitlementOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for RevokeFlowEntitlement")
	}

	var r0 *mediaconnect.RevokeFlowEntitlementOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *mediaconnect.RevokeFlowEntitlementInput, ...func(*mediaconnect.Options)) (*mediaconnect.RevokeFlowEntitlementOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *mediaconnect.RevokeFlowEntitlementInput, ...func(*mediaconnect.Options)) *mediaconnect.RevokeFlowEntitlementOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*mediaconnect.RevokeFlowEntitlementOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *mediaconnect.RevokeFlowEntitlementInput, ...func(*mediaconnect.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// StartFlow provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) StartFlow(ctx context.Context, params *mediaconnect.StartFlowInput, optFns ...func(*mediaconnect.Options)) (*mediaconnect.StartFlowOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for StartFlow")
	}

	var r0 *mediaconnect.StartFlowOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *mediaconnect.StartFlowInput, ...func(*mediaconnect.Options)) (*mediaconnect.StartFlowOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *mediaconnect.StartFlowInput, ...func(*mediaconnect.Options)) *mediaconnect.StartFlowOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*mediaconnect.StartFlowOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *mediaconnect.StartFlowInput, ...func(*mediaconnect.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// StopFlow provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) StopFlow(ctx context.Context, params *mediaconnect.StopFlowInput, optFns ...func(*mediaconnect.Options)) (*mediaconnect.StopFlowOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for StopFlow")
	}

	var r0 *mediaconnect.StopFlowOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *mediaconnect.StopFlowInput, ...func(*mediaconnect.Options)) (*mediaconnect.StopFlowOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *mediaconnect.StopFlowInput, ...func(*mediaconnect.Options)) *mediaconnect.StopFlowOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*mediaconnect.StopFlowOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *mediaconnect.StopFlowInput, ...func(*mediaconnect.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// TagResource provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) TagResource(ctx context.Context, params *mediaconnect.TagResourceInput, optFns ...func(*mediaconnect.Options)) (*mediaconnect.TagResourceOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for TagResource")
	}

	var r0 *mediaconnect.TagResourceOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *mediaconnect.TagResourceInput, ...func(*mediaconnect.Options)) (*mediaconnect.TagResourceOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *mediaconnect.TagResourceInput, ...func(*mediaconnect.Options)) *mediaconnect.TagResourceOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*mediaconnect.TagResourceOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *mediaconnect.TagResourceInput, ...func(*mediaconnect.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UntagResource provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UntagResource(ctx context.Context, params *mediaconnect.UntagResourceInput, optFns ...func(*mediaconnect.Options)) (*mediaconnect.UntagResourceOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UntagResource")
	}

	var r0 *mediaconnect.UntagResourceOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *mediaconnect.UntagResourceInput, ...func(*mediaconnect.Options)) (*mediaconnect.UntagResourceOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *mediaconnect.UntagResourceInput, ...func(*mediaconnect.Options)) *mediaconnect.UntagResourceOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*mediaconnect.UntagResourceOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *mediaconnect.UntagResourceInput, ...func(*mediaconnect.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateBridge provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UpdateBridge(ctx context.Context, params *mediaconnect.UpdateBridgeInput, optFns ...func(*mediaconnect.Options)) (*mediaconnect.UpdateBridgeOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateBridge")
	}

	var r0 *mediaconnect.UpdateBridgeOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *mediaconnect.UpdateBridgeInput, ...func(*mediaconnect.Options)) (*mediaconnect.UpdateBridgeOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *mediaconnect.UpdateBridgeInput, ...func(*mediaconnect.Options)) *mediaconnect.UpdateBridgeOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*mediaconnect.UpdateBridgeOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *mediaconnect.UpdateBridgeInput, ...func(*mediaconnect.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateBridgeOutput provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UpdateBridgeOutput(ctx context.Context, params *mediaconnect.UpdateBridgeOutputInput, optFns ...func(*mediaconnect.Options)) (*mediaconnect.UpdateBridgeOutputOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateBridgeOutput")
	}

	var r0 *mediaconnect.UpdateBridgeOutputOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *mediaconnect.UpdateBridgeOutputInput, ...func(*mediaconnect.Options)) (*mediaconnect.UpdateBridgeOutputOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *mediaconnect.UpdateBridgeOutputInput, ...func(*mediaconnect.Options)) *mediaconnect.UpdateBridgeOutputOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*mediaconnect.UpdateBridgeOutputOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *mediaconnect.UpdateBridgeOutputInput, ...func(*mediaconnect.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateBridgeSource provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UpdateBridgeSource(ctx context.Context, params *mediaconnect.UpdateBridgeSourceInput, optFns ...func(*mediaconnect.Options)) (*mediaconnect.UpdateBridgeSourceOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateBridgeSource")
	}

	var r0 *mediaconnect.UpdateBridgeSourceOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *mediaconnect.UpdateBridgeSourceInput, ...func(*mediaconnect.Options)) (*mediaconnect.UpdateBridgeSourceOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *mediaconnect.UpdateBridgeSourceInput, ...func(*mediaconnect.Options)) *mediaconnect.UpdateBridgeSourceOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*mediaconnect.UpdateBridgeSourceOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *mediaconnect.UpdateBridgeSourceInput, ...func(*mediaconnect.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateBridgeState provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UpdateBridgeState(ctx context.Context, params *mediaconnect.UpdateBridgeStateInput, optFns ...func(*mediaconnect.Options)) (*mediaconnect.UpdateBridgeStateOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateBridgeState")
	}

	var r0 *mediaconnect.UpdateBridgeStateOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *mediaconnect.UpdateBridgeStateInput, ...func(*mediaconnect.Options)) (*mediaconnect.UpdateBridgeStateOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *mediaconnect.UpdateBridgeStateInput, ...func(*mediaconnect.Options)) *mediaconnect.UpdateBridgeStateOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*mediaconnect.UpdateBridgeStateOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *mediaconnect.UpdateBridgeStateInput, ...func(*mediaconnect.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateFlow provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UpdateFlow(ctx context.Context, params *mediaconnect.UpdateFlowInput, optFns ...func(*mediaconnect.Options)) (*mediaconnect.UpdateFlowOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateFlow")
	}

	var r0 *mediaconnect.UpdateFlowOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *mediaconnect.UpdateFlowInput, ...func(*mediaconnect.Options)) (*mediaconnect.UpdateFlowOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *mediaconnect.UpdateFlowInput, ...func(*mediaconnect.Options)) *mediaconnect.UpdateFlowOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*mediaconnect.UpdateFlowOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *mediaconnect.UpdateFlowInput, ...func(*mediaconnect.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateFlowEntitlement provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UpdateFlowEntitlement(ctx context.Context, params *mediaconnect.UpdateFlowEntitlementInput, optFns ...func(*mediaconnect.Options)) (*mediaconnect.UpdateFlowEntitlementOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateFlowEntitlement")
	}

	var r0 *mediaconnect.UpdateFlowEntitlementOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *mediaconnect.UpdateFlowEntitlementInput, ...func(*mediaconnect.Options)) (*mediaconnect.UpdateFlowEntitlementOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *mediaconnect.UpdateFlowEntitlementInput, ...func(*mediaconnect.Options)) *mediaconnect.UpdateFlowEntitlementOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*mediaconnect.UpdateFlowEntitlementOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *mediaconnect.UpdateFlowEntitlementInput, ...func(*mediaconnect.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateFlowMediaStream provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UpdateFlowMediaStream(ctx context.Context, params *mediaconnect.UpdateFlowMediaStreamInput, optFns ...func(*mediaconnect.Options)) (*mediaconnect.UpdateFlowMediaStreamOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateFlowMediaStream")
	}

	var r0 *mediaconnect.UpdateFlowMediaStreamOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *mediaconnect.UpdateFlowMediaStreamInput, ...func(*mediaconnect.Options)) (*mediaconnect.UpdateFlowMediaStreamOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *mediaconnect.UpdateFlowMediaStreamInput, ...func(*mediaconnect.Options)) *mediaconnect.UpdateFlowMediaStreamOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*mediaconnect.UpdateFlowMediaStreamOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *mediaconnect.UpdateFlowMediaStreamInput, ...func(*mediaconnect.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateFlowOutput provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UpdateFlowOutput(ctx context.Context, params *mediaconnect.UpdateFlowOutputInput, optFns ...func(*mediaconnect.Options)) (*mediaconnect.UpdateFlowOutputOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateFlowOutput")
	}

	var r0 *mediaconnect.UpdateFlowOutputOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *mediaconnect.UpdateFlowOutputInput, ...func(*mediaconnect.Options)) (*mediaconnect.UpdateFlowOutputOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *mediaconnect.UpdateFlowOutputInput, ...func(*mediaconnect.Options)) *mediaconnect.UpdateFlowOutputOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*mediaconnect.UpdateFlowOutputOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *mediaconnect.UpdateFlowOutputInput, ...func(*mediaconnect.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateFlowSource provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UpdateFlowSource(ctx context.Context, params *mediaconnect.UpdateFlowSourceInput, optFns ...func(*mediaconnect.Options)) (*mediaconnect.UpdateFlowSourceOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateFlowSource")
	}

	var r0 *mediaconnect.UpdateFlowSourceOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *mediaconnect.UpdateFlowSourceInput, ...func(*mediaconnect.Options)) (*mediaconnect.UpdateFlowSourceOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *mediaconnect.UpdateFlowSourceInput, ...func(*mediaconnect.Options)) *mediaconnect.UpdateFlowSourceOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*mediaconnect.UpdateFlowSourceOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *mediaconnect.UpdateFlowSourceInput, ...func(*mediaconnect.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateGatewayInstance provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UpdateGatewayInstance(ctx context.Context, params *mediaconnect.UpdateGatewayInstanceInput, optFns ...func(*mediaconnect.Options)) (*mediaconnect.UpdateGatewayInstanceOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateGatewayInstance")
	}

	var r0 *mediaconnect.UpdateGatewayInstanceOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *mediaconnect.UpdateGatewayInstanceInput, ...func(*mediaconnect.Options)) (*mediaconnect.UpdateGatewayInstanceOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *mediaconnect.UpdateGatewayInstanceInput, ...func(*mediaconnect.Options)) *mediaconnect.UpdateGatewayInstanceOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*mediaconnect.UpdateGatewayInstanceOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *mediaconnect.UpdateGatewayInstanceInput, ...func(*mediaconnect.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewIClient creates a new instance of IClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewIClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *IClient {
	mock := &IClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
