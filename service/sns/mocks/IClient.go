// Code generated by mockery v2.39.2. DO NOT EDIT.

package mocks

import (
	context "context"

	sns "github.com/aws/aws-sdk-go-v2/service/sns"
	mock "github.com/stretchr/testify/mock"
)

// IClient is an autogenerated mock type for the IClient type
type IClient struct {
	mock.Mock
}

// AddPermission provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) AddPermission(ctx context.Context, params *sns.AddPermissionInput, optFns ...func(*sns.Options)) (*sns.AddPermissionOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for AddPermission")
	}

	var r0 *sns.AddPermissionOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *sns.AddPermissionInput, ...func(*sns.Options)) (*sns.AddPermissionOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *sns.AddPermissionInput, ...func(*sns.Options)) *sns.AddPermissionOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sns.AddPermissionOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *sns.AddPermissionInput, ...func(*sns.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CheckIfPhoneNumberIsOptedOut provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CheckIfPhoneNumberIsOptedOut(ctx context.Context, params *sns.CheckIfPhoneNumberIsOptedOutInput, optFns ...func(*sns.Options)) (*sns.CheckIfPhoneNumberIsOptedOutOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CheckIfPhoneNumberIsOptedOut")
	}

	var r0 *sns.CheckIfPhoneNumberIsOptedOutOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *sns.CheckIfPhoneNumberIsOptedOutInput, ...func(*sns.Options)) (*sns.CheckIfPhoneNumberIsOptedOutOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *sns.CheckIfPhoneNumberIsOptedOutInput, ...func(*sns.Options)) *sns.CheckIfPhoneNumberIsOptedOutOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sns.CheckIfPhoneNumberIsOptedOutOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *sns.CheckIfPhoneNumberIsOptedOutInput, ...func(*sns.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ConfirmSubscription provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ConfirmSubscription(ctx context.Context, params *sns.ConfirmSubscriptionInput, optFns ...func(*sns.Options)) (*sns.ConfirmSubscriptionOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ConfirmSubscription")
	}

	var r0 *sns.ConfirmSubscriptionOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *sns.ConfirmSubscriptionInput, ...func(*sns.Options)) (*sns.ConfirmSubscriptionOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *sns.ConfirmSubscriptionInput, ...func(*sns.Options)) *sns.ConfirmSubscriptionOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sns.ConfirmSubscriptionOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *sns.ConfirmSubscriptionInput, ...func(*sns.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreatePlatformApplication provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CreatePlatformApplication(ctx context.Context, params *sns.CreatePlatformApplicationInput, optFns ...func(*sns.Options)) (*sns.CreatePlatformApplicationOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreatePlatformApplication")
	}

	var r0 *sns.CreatePlatformApplicationOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *sns.CreatePlatformApplicationInput, ...func(*sns.Options)) (*sns.CreatePlatformApplicationOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *sns.CreatePlatformApplicationInput, ...func(*sns.Options)) *sns.CreatePlatformApplicationOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sns.CreatePlatformApplicationOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *sns.CreatePlatformApplicationInput, ...func(*sns.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreatePlatformEndpoint provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CreatePlatformEndpoint(ctx context.Context, params *sns.CreatePlatformEndpointInput, optFns ...func(*sns.Options)) (*sns.CreatePlatformEndpointOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreatePlatformEndpoint")
	}

	var r0 *sns.CreatePlatformEndpointOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *sns.CreatePlatformEndpointInput, ...func(*sns.Options)) (*sns.CreatePlatformEndpointOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *sns.CreatePlatformEndpointInput, ...func(*sns.Options)) *sns.CreatePlatformEndpointOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sns.CreatePlatformEndpointOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *sns.CreatePlatformEndpointInput, ...func(*sns.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateSMSSandboxPhoneNumber provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CreateSMSSandboxPhoneNumber(ctx context.Context, params *sns.CreateSMSSandboxPhoneNumberInput, optFns ...func(*sns.Options)) (*sns.CreateSMSSandboxPhoneNumberOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateSMSSandboxPhoneNumber")
	}

	var r0 *sns.CreateSMSSandboxPhoneNumberOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *sns.CreateSMSSandboxPhoneNumberInput, ...func(*sns.Options)) (*sns.CreateSMSSandboxPhoneNumberOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *sns.CreateSMSSandboxPhoneNumberInput, ...func(*sns.Options)) *sns.CreateSMSSandboxPhoneNumberOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sns.CreateSMSSandboxPhoneNumberOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *sns.CreateSMSSandboxPhoneNumberInput, ...func(*sns.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateTopic provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CreateTopic(ctx context.Context, params *sns.CreateTopicInput, optFns ...func(*sns.Options)) (*sns.CreateTopicOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateTopic")
	}

	var r0 *sns.CreateTopicOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *sns.CreateTopicInput, ...func(*sns.Options)) (*sns.CreateTopicOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *sns.CreateTopicInput, ...func(*sns.Options)) *sns.CreateTopicOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sns.CreateTopicOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *sns.CreateTopicInput, ...func(*sns.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteEndpoint provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteEndpoint(ctx context.Context, params *sns.DeleteEndpointInput, optFns ...func(*sns.Options)) (*sns.DeleteEndpointOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteEndpoint")
	}

	var r0 *sns.DeleteEndpointOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *sns.DeleteEndpointInput, ...func(*sns.Options)) (*sns.DeleteEndpointOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *sns.DeleteEndpointInput, ...func(*sns.Options)) *sns.DeleteEndpointOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sns.DeleteEndpointOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *sns.DeleteEndpointInput, ...func(*sns.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeletePlatformApplication provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeletePlatformApplication(ctx context.Context, params *sns.DeletePlatformApplicationInput, optFns ...func(*sns.Options)) (*sns.DeletePlatformApplicationOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeletePlatformApplication")
	}

	var r0 *sns.DeletePlatformApplicationOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *sns.DeletePlatformApplicationInput, ...func(*sns.Options)) (*sns.DeletePlatformApplicationOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *sns.DeletePlatformApplicationInput, ...func(*sns.Options)) *sns.DeletePlatformApplicationOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sns.DeletePlatformApplicationOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *sns.DeletePlatformApplicationInput, ...func(*sns.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteSMSSandboxPhoneNumber provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteSMSSandboxPhoneNumber(ctx context.Context, params *sns.DeleteSMSSandboxPhoneNumberInput, optFns ...func(*sns.Options)) (*sns.DeleteSMSSandboxPhoneNumberOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteSMSSandboxPhoneNumber")
	}

	var r0 *sns.DeleteSMSSandboxPhoneNumberOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *sns.DeleteSMSSandboxPhoneNumberInput, ...func(*sns.Options)) (*sns.DeleteSMSSandboxPhoneNumberOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *sns.DeleteSMSSandboxPhoneNumberInput, ...func(*sns.Options)) *sns.DeleteSMSSandboxPhoneNumberOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sns.DeleteSMSSandboxPhoneNumberOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *sns.DeleteSMSSandboxPhoneNumberInput, ...func(*sns.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteTopic provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteTopic(ctx context.Context, params *sns.DeleteTopicInput, optFns ...func(*sns.Options)) (*sns.DeleteTopicOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteTopic")
	}

	var r0 *sns.DeleteTopicOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *sns.DeleteTopicInput, ...func(*sns.Options)) (*sns.DeleteTopicOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *sns.DeleteTopicInput, ...func(*sns.Options)) *sns.DeleteTopicOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sns.DeleteTopicOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *sns.DeleteTopicInput, ...func(*sns.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetDataProtectionPolicy provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetDataProtectionPolicy(ctx context.Context, params *sns.GetDataProtectionPolicyInput, optFns ...func(*sns.Options)) (*sns.GetDataProtectionPolicyOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetDataProtectionPolicy")
	}

	var r0 *sns.GetDataProtectionPolicyOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *sns.GetDataProtectionPolicyInput, ...func(*sns.Options)) (*sns.GetDataProtectionPolicyOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *sns.GetDataProtectionPolicyInput, ...func(*sns.Options)) *sns.GetDataProtectionPolicyOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sns.GetDataProtectionPolicyOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *sns.GetDataProtectionPolicyInput, ...func(*sns.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetEndpointAttributes provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetEndpointAttributes(ctx context.Context, params *sns.GetEndpointAttributesInput, optFns ...func(*sns.Options)) (*sns.GetEndpointAttributesOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetEndpointAttributes")
	}

	var r0 *sns.GetEndpointAttributesOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *sns.GetEndpointAttributesInput, ...func(*sns.Options)) (*sns.GetEndpointAttributesOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *sns.GetEndpointAttributesInput, ...func(*sns.Options)) *sns.GetEndpointAttributesOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sns.GetEndpointAttributesOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *sns.GetEndpointAttributesInput, ...func(*sns.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetPlatformApplicationAttributes provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetPlatformApplicationAttributes(ctx context.Context, params *sns.GetPlatformApplicationAttributesInput, optFns ...func(*sns.Options)) (*sns.GetPlatformApplicationAttributesOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetPlatformApplicationAttributes")
	}

	var r0 *sns.GetPlatformApplicationAttributesOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *sns.GetPlatformApplicationAttributesInput, ...func(*sns.Options)) (*sns.GetPlatformApplicationAttributesOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *sns.GetPlatformApplicationAttributesInput, ...func(*sns.Options)) *sns.GetPlatformApplicationAttributesOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sns.GetPlatformApplicationAttributesOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *sns.GetPlatformApplicationAttributesInput, ...func(*sns.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetSMSAttributes provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetSMSAttributes(ctx context.Context, params *sns.GetSMSAttributesInput, optFns ...func(*sns.Options)) (*sns.GetSMSAttributesOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetSMSAttributes")
	}

	var r0 *sns.GetSMSAttributesOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *sns.GetSMSAttributesInput, ...func(*sns.Options)) (*sns.GetSMSAttributesOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *sns.GetSMSAttributesInput, ...func(*sns.Options)) *sns.GetSMSAttributesOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sns.GetSMSAttributesOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *sns.GetSMSAttributesInput, ...func(*sns.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetSMSSandboxAccountStatus provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetSMSSandboxAccountStatus(ctx context.Context, params *sns.GetSMSSandboxAccountStatusInput, optFns ...func(*sns.Options)) (*sns.GetSMSSandboxAccountStatusOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetSMSSandboxAccountStatus")
	}

	var r0 *sns.GetSMSSandboxAccountStatusOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *sns.GetSMSSandboxAccountStatusInput, ...func(*sns.Options)) (*sns.GetSMSSandboxAccountStatusOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *sns.GetSMSSandboxAccountStatusInput, ...func(*sns.Options)) *sns.GetSMSSandboxAccountStatusOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sns.GetSMSSandboxAccountStatusOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *sns.GetSMSSandboxAccountStatusInput, ...func(*sns.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetSubscriptionAttributes provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetSubscriptionAttributes(ctx context.Context, params *sns.GetSubscriptionAttributesInput, optFns ...func(*sns.Options)) (*sns.GetSubscriptionAttributesOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetSubscriptionAttributes")
	}

	var r0 *sns.GetSubscriptionAttributesOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *sns.GetSubscriptionAttributesInput, ...func(*sns.Options)) (*sns.GetSubscriptionAttributesOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *sns.GetSubscriptionAttributesInput, ...func(*sns.Options)) *sns.GetSubscriptionAttributesOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sns.GetSubscriptionAttributesOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *sns.GetSubscriptionAttributesInput, ...func(*sns.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetTopicAttributes provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetTopicAttributes(ctx context.Context, params *sns.GetTopicAttributesInput, optFns ...func(*sns.Options)) (*sns.GetTopicAttributesOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetTopicAttributes")
	}

	var r0 *sns.GetTopicAttributesOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *sns.GetTopicAttributesInput, ...func(*sns.Options)) (*sns.GetTopicAttributesOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *sns.GetTopicAttributesInput, ...func(*sns.Options)) *sns.GetTopicAttributesOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sns.GetTopicAttributesOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *sns.GetTopicAttributesInput, ...func(*sns.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListEndpointsByPlatformApplication provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListEndpointsByPlatformApplication(ctx context.Context, params *sns.ListEndpointsByPlatformApplicationInput, optFns ...func(*sns.Options)) (*sns.ListEndpointsByPlatformApplicationOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListEndpointsByPlatformApplication")
	}

	var r0 *sns.ListEndpointsByPlatformApplicationOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *sns.ListEndpointsByPlatformApplicationInput, ...func(*sns.Options)) (*sns.ListEndpointsByPlatformApplicationOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *sns.ListEndpointsByPlatformApplicationInput, ...func(*sns.Options)) *sns.ListEndpointsByPlatformApplicationOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sns.ListEndpointsByPlatformApplicationOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *sns.ListEndpointsByPlatformApplicationInput, ...func(*sns.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListOriginationNumbers provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListOriginationNumbers(ctx context.Context, params *sns.ListOriginationNumbersInput, optFns ...func(*sns.Options)) (*sns.ListOriginationNumbersOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListOriginationNumbers")
	}

	var r0 *sns.ListOriginationNumbersOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *sns.ListOriginationNumbersInput, ...func(*sns.Options)) (*sns.ListOriginationNumbersOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *sns.ListOriginationNumbersInput, ...func(*sns.Options)) *sns.ListOriginationNumbersOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sns.ListOriginationNumbersOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *sns.ListOriginationNumbersInput, ...func(*sns.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListPhoneNumbersOptedOut provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListPhoneNumbersOptedOut(ctx context.Context, params *sns.ListPhoneNumbersOptedOutInput, optFns ...func(*sns.Options)) (*sns.ListPhoneNumbersOptedOutOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListPhoneNumbersOptedOut")
	}

	var r0 *sns.ListPhoneNumbersOptedOutOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *sns.ListPhoneNumbersOptedOutInput, ...func(*sns.Options)) (*sns.ListPhoneNumbersOptedOutOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *sns.ListPhoneNumbersOptedOutInput, ...func(*sns.Options)) *sns.ListPhoneNumbersOptedOutOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sns.ListPhoneNumbersOptedOutOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *sns.ListPhoneNumbersOptedOutInput, ...func(*sns.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListPlatformApplications provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListPlatformApplications(ctx context.Context, params *sns.ListPlatformApplicationsInput, optFns ...func(*sns.Options)) (*sns.ListPlatformApplicationsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListPlatformApplications")
	}

	var r0 *sns.ListPlatformApplicationsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *sns.ListPlatformApplicationsInput, ...func(*sns.Options)) (*sns.ListPlatformApplicationsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *sns.ListPlatformApplicationsInput, ...func(*sns.Options)) *sns.ListPlatformApplicationsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sns.ListPlatformApplicationsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *sns.ListPlatformApplicationsInput, ...func(*sns.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListSMSSandboxPhoneNumbers provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListSMSSandboxPhoneNumbers(ctx context.Context, params *sns.ListSMSSandboxPhoneNumbersInput, optFns ...func(*sns.Options)) (*sns.ListSMSSandboxPhoneNumbersOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListSMSSandboxPhoneNumbers")
	}

	var r0 *sns.ListSMSSandboxPhoneNumbersOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *sns.ListSMSSandboxPhoneNumbersInput, ...func(*sns.Options)) (*sns.ListSMSSandboxPhoneNumbersOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *sns.ListSMSSandboxPhoneNumbersInput, ...func(*sns.Options)) *sns.ListSMSSandboxPhoneNumbersOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sns.ListSMSSandboxPhoneNumbersOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *sns.ListSMSSandboxPhoneNumbersInput, ...func(*sns.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListSubscriptions provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListSubscriptions(ctx context.Context, params *sns.ListSubscriptionsInput, optFns ...func(*sns.Options)) (*sns.ListSubscriptionsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListSubscriptions")
	}

	var r0 *sns.ListSubscriptionsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *sns.ListSubscriptionsInput, ...func(*sns.Options)) (*sns.ListSubscriptionsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *sns.ListSubscriptionsInput, ...func(*sns.Options)) *sns.ListSubscriptionsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sns.ListSubscriptionsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *sns.ListSubscriptionsInput, ...func(*sns.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListSubscriptionsByTopic provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListSubscriptionsByTopic(ctx context.Context, params *sns.ListSubscriptionsByTopicInput, optFns ...func(*sns.Options)) (*sns.ListSubscriptionsByTopicOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListSubscriptionsByTopic")
	}

	var r0 *sns.ListSubscriptionsByTopicOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *sns.ListSubscriptionsByTopicInput, ...func(*sns.Options)) (*sns.ListSubscriptionsByTopicOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *sns.ListSubscriptionsByTopicInput, ...func(*sns.Options)) *sns.ListSubscriptionsByTopicOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sns.ListSubscriptionsByTopicOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *sns.ListSubscriptionsByTopicInput, ...func(*sns.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListTagsForResource provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListTagsForResource(ctx context.Context, params *sns.ListTagsForResourceInput, optFns ...func(*sns.Options)) (*sns.ListTagsForResourceOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListTagsForResource")
	}

	var r0 *sns.ListTagsForResourceOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *sns.ListTagsForResourceInput, ...func(*sns.Options)) (*sns.ListTagsForResourceOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *sns.ListTagsForResourceInput, ...func(*sns.Options)) *sns.ListTagsForResourceOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sns.ListTagsForResourceOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *sns.ListTagsForResourceInput, ...func(*sns.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListTopics provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListTopics(ctx context.Context, params *sns.ListTopicsInput, optFns ...func(*sns.Options)) (*sns.ListTopicsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListTopics")
	}

	var r0 *sns.ListTopicsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *sns.ListTopicsInput, ...func(*sns.Options)) (*sns.ListTopicsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *sns.ListTopicsInput, ...func(*sns.Options)) *sns.ListTopicsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sns.ListTopicsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *sns.ListTopicsInput, ...func(*sns.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// OptInPhoneNumber provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) OptInPhoneNumber(ctx context.Context, params *sns.OptInPhoneNumberInput, optFns ...func(*sns.Options)) (*sns.OptInPhoneNumberOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for OptInPhoneNumber")
	}

	var r0 *sns.OptInPhoneNumberOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *sns.OptInPhoneNumberInput, ...func(*sns.Options)) (*sns.OptInPhoneNumberOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *sns.OptInPhoneNumberInput, ...func(*sns.Options)) *sns.OptInPhoneNumberOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sns.OptInPhoneNumberOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *sns.OptInPhoneNumberInput, ...func(*sns.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Options provides a mock function with given fields:
func (_m *IClient) Options() sns.Options {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Options")
	}

	var r0 sns.Options
	if rf, ok := ret.Get(0).(func() sns.Options); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(sns.Options)
	}

	return r0
}

// Publish provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) Publish(ctx context.Context, params *sns.PublishInput, optFns ...func(*sns.Options)) (*sns.PublishOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for Publish")
	}

	var r0 *sns.PublishOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *sns.PublishInput, ...func(*sns.Options)) (*sns.PublishOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *sns.PublishInput, ...func(*sns.Options)) *sns.PublishOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sns.PublishOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *sns.PublishInput, ...func(*sns.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PublishBatch provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) PublishBatch(ctx context.Context, params *sns.PublishBatchInput, optFns ...func(*sns.Options)) (*sns.PublishBatchOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for PublishBatch")
	}

	var r0 *sns.PublishBatchOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *sns.PublishBatchInput, ...func(*sns.Options)) (*sns.PublishBatchOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *sns.PublishBatchInput, ...func(*sns.Options)) *sns.PublishBatchOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sns.PublishBatchOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *sns.PublishBatchInput, ...func(*sns.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PutDataProtectionPolicy provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) PutDataProtectionPolicy(ctx context.Context, params *sns.PutDataProtectionPolicyInput, optFns ...func(*sns.Options)) (*sns.PutDataProtectionPolicyOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for PutDataProtectionPolicy")
	}

	var r0 *sns.PutDataProtectionPolicyOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *sns.PutDataProtectionPolicyInput, ...func(*sns.Options)) (*sns.PutDataProtectionPolicyOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *sns.PutDataProtectionPolicyInput, ...func(*sns.Options)) *sns.PutDataProtectionPolicyOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sns.PutDataProtectionPolicyOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *sns.PutDataProtectionPolicyInput, ...func(*sns.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RemovePermission provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) RemovePermission(ctx context.Context, params *sns.RemovePermissionInput, optFns ...func(*sns.Options)) (*sns.RemovePermissionOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for RemovePermission")
	}

	var r0 *sns.RemovePermissionOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *sns.RemovePermissionInput, ...func(*sns.Options)) (*sns.RemovePermissionOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *sns.RemovePermissionInput, ...func(*sns.Options)) *sns.RemovePermissionOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sns.RemovePermissionOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *sns.RemovePermissionInput, ...func(*sns.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SetEndpointAttributes provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) SetEndpointAttributes(ctx context.Context, params *sns.SetEndpointAttributesInput, optFns ...func(*sns.Options)) (*sns.SetEndpointAttributesOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for SetEndpointAttributes")
	}

	var r0 *sns.SetEndpointAttributesOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *sns.SetEndpointAttributesInput, ...func(*sns.Options)) (*sns.SetEndpointAttributesOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *sns.SetEndpointAttributesInput, ...func(*sns.Options)) *sns.SetEndpointAttributesOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sns.SetEndpointAttributesOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *sns.SetEndpointAttributesInput, ...func(*sns.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SetPlatformApplicationAttributes provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) SetPlatformApplicationAttributes(ctx context.Context, params *sns.SetPlatformApplicationAttributesInput, optFns ...func(*sns.Options)) (*sns.SetPlatformApplicationAttributesOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for SetPlatformApplicationAttributes")
	}

	var r0 *sns.SetPlatformApplicationAttributesOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *sns.SetPlatformApplicationAttributesInput, ...func(*sns.Options)) (*sns.SetPlatformApplicationAttributesOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *sns.SetPlatformApplicationAttributesInput, ...func(*sns.Options)) *sns.SetPlatformApplicationAttributesOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sns.SetPlatformApplicationAttributesOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *sns.SetPlatformApplicationAttributesInput, ...func(*sns.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SetSMSAttributes provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) SetSMSAttributes(ctx context.Context, params *sns.SetSMSAttributesInput, optFns ...func(*sns.Options)) (*sns.SetSMSAttributesOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for SetSMSAttributes")
	}

	var r0 *sns.SetSMSAttributesOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *sns.SetSMSAttributesInput, ...func(*sns.Options)) (*sns.SetSMSAttributesOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *sns.SetSMSAttributesInput, ...func(*sns.Options)) *sns.SetSMSAttributesOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sns.SetSMSAttributesOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *sns.SetSMSAttributesInput, ...func(*sns.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SetSubscriptionAttributes provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) SetSubscriptionAttributes(ctx context.Context, params *sns.SetSubscriptionAttributesInput, optFns ...func(*sns.Options)) (*sns.SetSubscriptionAttributesOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for SetSubscriptionAttributes")
	}

	var r0 *sns.SetSubscriptionAttributesOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *sns.SetSubscriptionAttributesInput, ...func(*sns.Options)) (*sns.SetSubscriptionAttributesOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *sns.SetSubscriptionAttributesInput, ...func(*sns.Options)) *sns.SetSubscriptionAttributesOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sns.SetSubscriptionAttributesOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *sns.SetSubscriptionAttributesInput, ...func(*sns.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SetTopicAttributes provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) SetTopicAttributes(ctx context.Context, params *sns.SetTopicAttributesInput, optFns ...func(*sns.Options)) (*sns.SetTopicAttributesOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for SetTopicAttributes")
	}

	var r0 *sns.SetTopicAttributesOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *sns.SetTopicAttributesInput, ...func(*sns.Options)) (*sns.SetTopicAttributesOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *sns.SetTopicAttributesInput, ...func(*sns.Options)) *sns.SetTopicAttributesOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sns.SetTopicAttributesOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *sns.SetTopicAttributesInput, ...func(*sns.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Subscribe provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) Subscribe(ctx context.Context, params *sns.SubscribeInput, optFns ...func(*sns.Options)) (*sns.SubscribeOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for Subscribe")
	}

	var r0 *sns.SubscribeOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *sns.SubscribeInput, ...func(*sns.Options)) (*sns.SubscribeOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *sns.SubscribeInput, ...func(*sns.Options)) *sns.SubscribeOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sns.SubscribeOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *sns.SubscribeInput, ...func(*sns.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// TagResource provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) TagResource(ctx context.Context, params *sns.TagResourceInput, optFns ...func(*sns.Options)) (*sns.TagResourceOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for TagResource")
	}

	var r0 *sns.TagResourceOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *sns.TagResourceInput, ...func(*sns.Options)) (*sns.TagResourceOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *sns.TagResourceInput, ...func(*sns.Options)) *sns.TagResourceOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sns.TagResourceOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *sns.TagResourceInput, ...func(*sns.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Unsubscribe provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) Unsubscribe(ctx context.Context, params *sns.UnsubscribeInput, optFns ...func(*sns.Options)) (*sns.UnsubscribeOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for Unsubscribe")
	}

	var r0 *sns.UnsubscribeOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *sns.UnsubscribeInput, ...func(*sns.Options)) (*sns.UnsubscribeOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *sns.UnsubscribeInput, ...func(*sns.Options)) *sns.UnsubscribeOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sns.UnsubscribeOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *sns.UnsubscribeInput, ...func(*sns.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UntagResource provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UntagResource(ctx context.Context, params *sns.UntagResourceInput, optFns ...func(*sns.Options)) (*sns.UntagResourceOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UntagResource")
	}

	var r0 *sns.UntagResourceOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *sns.UntagResourceInput, ...func(*sns.Options)) (*sns.UntagResourceOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *sns.UntagResourceInput, ...func(*sns.Options)) *sns.UntagResourceOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sns.UntagResourceOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *sns.UntagResourceInput, ...func(*sns.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// VerifySMSSandboxPhoneNumber provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) VerifySMSSandboxPhoneNumber(ctx context.Context, params *sns.VerifySMSSandboxPhoneNumberInput, optFns ...func(*sns.Options)) (*sns.VerifySMSSandboxPhoneNumberOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for VerifySMSSandboxPhoneNumber")
	}

	var r0 *sns.VerifySMSSandboxPhoneNumberOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *sns.VerifySMSSandboxPhoneNumberInput, ...func(*sns.Options)) (*sns.VerifySMSSandboxPhoneNumberOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *sns.VerifySMSSandboxPhoneNumberInput, ...func(*sns.Options)) *sns.VerifySMSSandboxPhoneNumberOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sns.VerifySMSSandboxPhoneNumberOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *sns.VerifySMSSandboxPhoneNumberInput, ...func(*sns.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewIClient creates a new instance of IClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewIClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *IClient {
	mock := &IClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
