// Code generated by mockery v2.39.2. DO NOT EDIT.

package mocks

import (
	codedeploy "github.com/aws/aws-sdk-go-v2/service/codedeploy"

	context "context"

	mock "github.com/stretchr/testify/mock"
)

// IClient is an autogenerated mock type for the IClient type
type IClient struct {
	mock.Mock
}

// AddTagsToOnPremisesInstances provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) AddTagsToOnPremisesInstances(ctx context.Context, params *codedeploy.AddTagsToOnPremisesInstancesInput, optFns ...func(*codedeploy.Options)) (*codedeploy.AddTagsToOnPremisesInstancesOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for AddTagsToOnPremisesInstances")
	}

	var r0 *codedeploy.AddTagsToOnPremisesInstancesOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *codedeploy.AddTagsToOnPremisesInstancesInput, ...func(*codedeploy.Options)) (*codedeploy.AddTagsToOnPremisesInstancesOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *codedeploy.AddTagsToOnPremisesInstancesInput, ...func(*codedeploy.Options)) *codedeploy.AddTagsToOnPremisesInstancesOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*codedeploy.AddTagsToOnPremisesInstancesOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *codedeploy.AddTagsToOnPremisesInstancesInput, ...func(*codedeploy.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// BatchGetApplicationRevisions provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) BatchGetApplicationRevisions(ctx context.Context, params *codedeploy.BatchGetApplicationRevisionsInput, optFns ...func(*codedeploy.Options)) (*codedeploy.BatchGetApplicationRevisionsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for BatchGetApplicationRevisions")
	}

	var r0 *codedeploy.BatchGetApplicationRevisionsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *codedeploy.BatchGetApplicationRevisionsInput, ...func(*codedeploy.Options)) (*codedeploy.BatchGetApplicationRevisionsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *codedeploy.BatchGetApplicationRevisionsInput, ...func(*codedeploy.Options)) *codedeploy.BatchGetApplicationRevisionsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*codedeploy.BatchGetApplicationRevisionsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *codedeploy.BatchGetApplicationRevisionsInput, ...func(*codedeploy.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// BatchGetApplications provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) BatchGetApplications(ctx context.Context, params *codedeploy.BatchGetApplicationsInput, optFns ...func(*codedeploy.Options)) (*codedeploy.BatchGetApplicationsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for BatchGetApplications")
	}

	var r0 *codedeploy.BatchGetApplicationsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *codedeploy.BatchGetApplicationsInput, ...func(*codedeploy.Options)) (*codedeploy.BatchGetApplicationsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *codedeploy.BatchGetApplicationsInput, ...func(*codedeploy.Options)) *codedeploy.BatchGetApplicationsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*codedeploy.BatchGetApplicationsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *codedeploy.BatchGetApplicationsInput, ...func(*codedeploy.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// BatchGetDeploymentGroups provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) BatchGetDeploymentGroups(ctx context.Context, params *codedeploy.BatchGetDeploymentGroupsInput, optFns ...func(*codedeploy.Options)) (*codedeploy.BatchGetDeploymentGroupsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for BatchGetDeploymentGroups")
	}

	var r0 *codedeploy.BatchGetDeploymentGroupsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *codedeploy.BatchGetDeploymentGroupsInput, ...func(*codedeploy.Options)) (*codedeploy.BatchGetDeploymentGroupsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *codedeploy.BatchGetDeploymentGroupsInput, ...func(*codedeploy.Options)) *codedeploy.BatchGetDeploymentGroupsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*codedeploy.BatchGetDeploymentGroupsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *codedeploy.BatchGetDeploymentGroupsInput, ...func(*codedeploy.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// BatchGetDeploymentInstances provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) BatchGetDeploymentInstances(ctx context.Context, params *codedeploy.BatchGetDeploymentInstancesInput, optFns ...func(*codedeploy.Options)) (*codedeploy.BatchGetDeploymentInstancesOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for BatchGetDeploymentInstances")
	}

	var r0 *codedeploy.BatchGetDeploymentInstancesOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *codedeploy.BatchGetDeploymentInstancesInput, ...func(*codedeploy.Options)) (*codedeploy.BatchGetDeploymentInstancesOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *codedeploy.BatchGetDeploymentInstancesInput, ...func(*codedeploy.Options)) *codedeploy.BatchGetDeploymentInstancesOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*codedeploy.BatchGetDeploymentInstancesOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *codedeploy.BatchGetDeploymentInstancesInput, ...func(*codedeploy.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// BatchGetDeploymentTargets provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) BatchGetDeploymentTargets(ctx context.Context, params *codedeploy.BatchGetDeploymentTargetsInput, optFns ...func(*codedeploy.Options)) (*codedeploy.BatchGetDeploymentTargetsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for BatchGetDeploymentTargets")
	}

	var r0 *codedeploy.BatchGetDeploymentTargetsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *codedeploy.BatchGetDeploymentTargetsInput, ...func(*codedeploy.Options)) (*codedeploy.BatchGetDeploymentTargetsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *codedeploy.BatchGetDeploymentTargetsInput, ...func(*codedeploy.Options)) *codedeploy.BatchGetDeploymentTargetsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*codedeploy.BatchGetDeploymentTargetsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *codedeploy.BatchGetDeploymentTargetsInput, ...func(*codedeploy.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// BatchGetDeployments provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) BatchGetDeployments(ctx context.Context, params *codedeploy.BatchGetDeploymentsInput, optFns ...func(*codedeploy.Options)) (*codedeploy.BatchGetDeploymentsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for BatchGetDeployments")
	}

	var r0 *codedeploy.BatchGetDeploymentsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *codedeploy.BatchGetDeploymentsInput, ...func(*codedeploy.Options)) (*codedeploy.BatchGetDeploymentsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *codedeploy.BatchGetDeploymentsInput, ...func(*codedeploy.Options)) *codedeploy.BatchGetDeploymentsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*codedeploy.BatchGetDeploymentsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *codedeploy.BatchGetDeploymentsInput, ...func(*codedeploy.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// BatchGetOnPremisesInstances provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) BatchGetOnPremisesInstances(ctx context.Context, params *codedeploy.BatchGetOnPremisesInstancesInput, optFns ...func(*codedeploy.Options)) (*codedeploy.BatchGetOnPremisesInstancesOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for BatchGetOnPremisesInstances")
	}

	var r0 *codedeploy.BatchGetOnPremisesInstancesOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *codedeploy.BatchGetOnPremisesInstancesInput, ...func(*codedeploy.Options)) (*codedeploy.BatchGetOnPremisesInstancesOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *codedeploy.BatchGetOnPremisesInstancesInput, ...func(*codedeploy.Options)) *codedeploy.BatchGetOnPremisesInstancesOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*codedeploy.BatchGetOnPremisesInstancesOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *codedeploy.BatchGetOnPremisesInstancesInput, ...func(*codedeploy.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ContinueDeployment provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ContinueDeployment(ctx context.Context, params *codedeploy.ContinueDeploymentInput, optFns ...func(*codedeploy.Options)) (*codedeploy.ContinueDeploymentOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ContinueDeployment")
	}

	var r0 *codedeploy.ContinueDeploymentOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *codedeploy.ContinueDeploymentInput, ...func(*codedeploy.Options)) (*codedeploy.ContinueDeploymentOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *codedeploy.ContinueDeploymentInput, ...func(*codedeploy.Options)) *codedeploy.ContinueDeploymentOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*codedeploy.ContinueDeploymentOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *codedeploy.ContinueDeploymentInput, ...func(*codedeploy.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateApplication provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CreateApplication(ctx context.Context, params *codedeploy.CreateApplicationInput, optFns ...func(*codedeploy.Options)) (*codedeploy.CreateApplicationOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateApplication")
	}

	var r0 *codedeploy.CreateApplicationOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *codedeploy.CreateApplicationInput, ...func(*codedeploy.Options)) (*codedeploy.CreateApplicationOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *codedeploy.CreateApplicationInput, ...func(*codedeploy.Options)) *codedeploy.CreateApplicationOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*codedeploy.CreateApplicationOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *codedeploy.CreateApplicationInput, ...func(*codedeploy.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateDeployment provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CreateDeployment(ctx context.Context, params *codedeploy.CreateDeploymentInput, optFns ...func(*codedeploy.Options)) (*codedeploy.CreateDeploymentOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateDeployment")
	}

	var r0 *codedeploy.CreateDeploymentOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *codedeploy.CreateDeploymentInput, ...func(*codedeploy.Options)) (*codedeploy.CreateDeploymentOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *codedeploy.CreateDeploymentInput, ...func(*codedeploy.Options)) *codedeploy.CreateDeploymentOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*codedeploy.CreateDeploymentOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *codedeploy.CreateDeploymentInput, ...func(*codedeploy.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateDeploymentConfig provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CreateDeploymentConfig(ctx context.Context, params *codedeploy.CreateDeploymentConfigInput, optFns ...func(*codedeploy.Options)) (*codedeploy.CreateDeploymentConfigOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateDeploymentConfig")
	}

	var r0 *codedeploy.CreateDeploymentConfigOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *codedeploy.CreateDeploymentConfigInput, ...func(*codedeploy.Options)) (*codedeploy.CreateDeploymentConfigOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *codedeploy.CreateDeploymentConfigInput, ...func(*codedeploy.Options)) *codedeploy.CreateDeploymentConfigOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*codedeploy.CreateDeploymentConfigOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *codedeploy.CreateDeploymentConfigInput, ...func(*codedeploy.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateDeploymentGroup provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CreateDeploymentGroup(ctx context.Context, params *codedeploy.CreateDeploymentGroupInput, optFns ...func(*codedeploy.Options)) (*codedeploy.CreateDeploymentGroupOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateDeploymentGroup")
	}

	var r0 *codedeploy.CreateDeploymentGroupOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *codedeploy.CreateDeploymentGroupInput, ...func(*codedeploy.Options)) (*codedeploy.CreateDeploymentGroupOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *codedeploy.CreateDeploymentGroupInput, ...func(*codedeploy.Options)) *codedeploy.CreateDeploymentGroupOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*codedeploy.CreateDeploymentGroupOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *codedeploy.CreateDeploymentGroupInput, ...func(*codedeploy.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteApplication provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteApplication(ctx context.Context, params *codedeploy.DeleteApplicationInput, optFns ...func(*codedeploy.Options)) (*codedeploy.DeleteApplicationOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteApplication")
	}

	var r0 *codedeploy.DeleteApplicationOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *codedeploy.DeleteApplicationInput, ...func(*codedeploy.Options)) (*codedeploy.DeleteApplicationOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *codedeploy.DeleteApplicationInput, ...func(*codedeploy.Options)) *codedeploy.DeleteApplicationOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*codedeploy.DeleteApplicationOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *codedeploy.DeleteApplicationInput, ...func(*codedeploy.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteDeploymentConfig provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteDeploymentConfig(ctx context.Context, params *codedeploy.DeleteDeploymentConfigInput, optFns ...func(*codedeploy.Options)) (*codedeploy.DeleteDeploymentConfigOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteDeploymentConfig")
	}

	var r0 *codedeploy.DeleteDeploymentConfigOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *codedeploy.DeleteDeploymentConfigInput, ...func(*codedeploy.Options)) (*codedeploy.DeleteDeploymentConfigOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *codedeploy.DeleteDeploymentConfigInput, ...func(*codedeploy.Options)) *codedeploy.DeleteDeploymentConfigOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*codedeploy.DeleteDeploymentConfigOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *codedeploy.DeleteDeploymentConfigInput, ...func(*codedeploy.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteDeploymentGroup provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteDeploymentGroup(ctx context.Context, params *codedeploy.DeleteDeploymentGroupInput, optFns ...func(*codedeploy.Options)) (*codedeploy.DeleteDeploymentGroupOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteDeploymentGroup")
	}

	var r0 *codedeploy.DeleteDeploymentGroupOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *codedeploy.DeleteDeploymentGroupInput, ...func(*codedeploy.Options)) (*codedeploy.DeleteDeploymentGroupOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *codedeploy.DeleteDeploymentGroupInput, ...func(*codedeploy.Options)) *codedeploy.DeleteDeploymentGroupOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*codedeploy.DeleteDeploymentGroupOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *codedeploy.DeleteDeploymentGroupInput, ...func(*codedeploy.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteGitHubAccountToken provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteGitHubAccountToken(ctx context.Context, params *codedeploy.DeleteGitHubAccountTokenInput, optFns ...func(*codedeploy.Options)) (*codedeploy.DeleteGitHubAccountTokenOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteGitHubAccountToken")
	}

	var r0 *codedeploy.DeleteGitHubAccountTokenOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *codedeploy.DeleteGitHubAccountTokenInput, ...func(*codedeploy.Options)) (*codedeploy.DeleteGitHubAccountTokenOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *codedeploy.DeleteGitHubAccountTokenInput, ...func(*codedeploy.Options)) *codedeploy.DeleteGitHubAccountTokenOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*codedeploy.DeleteGitHubAccountTokenOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *codedeploy.DeleteGitHubAccountTokenInput, ...func(*codedeploy.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteResourcesByExternalId provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteResourcesByExternalId(ctx context.Context, params *codedeploy.DeleteResourcesByExternalIdInput, optFns ...func(*codedeploy.Options)) (*codedeploy.DeleteResourcesByExternalIdOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteResourcesByExternalId")
	}

	var r0 *codedeploy.DeleteResourcesByExternalIdOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *codedeploy.DeleteResourcesByExternalIdInput, ...func(*codedeploy.Options)) (*codedeploy.DeleteResourcesByExternalIdOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *codedeploy.DeleteResourcesByExternalIdInput, ...func(*codedeploy.Options)) *codedeploy.DeleteResourcesByExternalIdOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*codedeploy.DeleteResourcesByExternalIdOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *codedeploy.DeleteResourcesByExternalIdInput, ...func(*codedeploy.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeregisterOnPremisesInstance provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeregisterOnPremisesInstance(ctx context.Context, params *codedeploy.DeregisterOnPremisesInstanceInput, optFns ...func(*codedeploy.Options)) (*codedeploy.DeregisterOnPremisesInstanceOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeregisterOnPremisesInstance")
	}

	var r0 *codedeploy.DeregisterOnPremisesInstanceOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *codedeploy.DeregisterOnPremisesInstanceInput, ...func(*codedeploy.Options)) (*codedeploy.DeregisterOnPremisesInstanceOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *codedeploy.DeregisterOnPremisesInstanceInput, ...func(*codedeploy.Options)) *codedeploy.DeregisterOnPremisesInstanceOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*codedeploy.DeregisterOnPremisesInstanceOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *codedeploy.DeregisterOnPremisesInstanceInput, ...func(*codedeploy.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetApplication provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetApplication(ctx context.Context, params *codedeploy.GetApplicationInput, optFns ...func(*codedeploy.Options)) (*codedeploy.GetApplicationOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetApplication")
	}

	var r0 *codedeploy.GetApplicationOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *codedeploy.GetApplicationInput, ...func(*codedeploy.Options)) (*codedeploy.GetApplicationOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *codedeploy.GetApplicationInput, ...func(*codedeploy.Options)) *codedeploy.GetApplicationOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*codedeploy.GetApplicationOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *codedeploy.GetApplicationInput, ...func(*codedeploy.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetApplicationRevision provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetApplicationRevision(ctx context.Context, params *codedeploy.GetApplicationRevisionInput, optFns ...func(*codedeploy.Options)) (*codedeploy.GetApplicationRevisionOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetApplicationRevision")
	}

	var r0 *codedeploy.GetApplicationRevisionOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *codedeploy.GetApplicationRevisionInput, ...func(*codedeploy.Options)) (*codedeploy.GetApplicationRevisionOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *codedeploy.GetApplicationRevisionInput, ...func(*codedeploy.Options)) *codedeploy.GetApplicationRevisionOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*codedeploy.GetApplicationRevisionOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *codedeploy.GetApplicationRevisionInput, ...func(*codedeploy.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetDeployment provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetDeployment(ctx context.Context, params *codedeploy.GetDeploymentInput, optFns ...func(*codedeploy.Options)) (*codedeploy.GetDeploymentOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetDeployment")
	}

	var r0 *codedeploy.GetDeploymentOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *codedeploy.GetDeploymentInput, ...func(*codedeploy.Options)) (*codedeploy.GetDeploymentOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *codedeploy.GetDeploymentInput, ...func(*codedeploy.Options)) *codedeploy.GetDeploymentOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*codedeploy.GetDeploymentOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *codedeploy.GetDeploymentInput, ...func(*codedeploy.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetDeploymentConfig provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetDeploymentConfig(ctx context.Context, params *codedeploy.GetDeploymentConfigInput, optFns ...func(*codedeploy.Options)) (*codedeploy.GetDeploymentConfigOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetDeploymentConfig")
	}

	var r0 *codedeploy.GetDeploymentConfigOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *codedeploy.GetDeploymentConfigInput, ...func(*codedeploy.Options)) (*codedeploy.GetDeploymentConfigOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *codedeploy.GetDeploymentConfigInput, ...func(*codedeploy.Options)) *codedeploy.GetDeploymentConfigOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*codedeploy.GetDeploymentConfigOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *codedeploy.GetDeploymentConfigInput, ...func(*codedeploy.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetDeploymentGroup provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetDeploymentGroup(ctx context.Context, params *codedeploy.GetDeploymentGroupInput, optFns ...func(*codedeploy.Options)) (*codedeploy.GetDeploymentGroupOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetDeploymentGroup")
	}

	var r0 *codedeploy.GetDeploymentGroupOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *codedeploy.GetDeploymentGroupInput, ...func(*codedeploy.Options)) (*codedeploy.GetDeploymentGroupOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *codedeploy.GetDeploymentGroupInput, ...func(*codedeploy.Options)) *codedeploy.GetDeploymentGroupOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*codedeploy.GetDeploymentGroupOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *codedeploy.GetDeploymentGroupInput, ...func(*codedeploy.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetDeploymentInstance provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetDeploymentInstance(ctx context.Context, params *codedeploy.GetDeploymentInstanceInput, optFns ...func(*codedeploy.Options)) (*codedeploy.GetDeploymentInstanceOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetDeploymentInstance")
	}

	var r0 *codedeploy.GetDeploymentInstanceOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *codedeploy.GetDeploymentInstanceInput, ...func(*codedeploy.Options)) (*codedeploy.GetDeploymentInstanceOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *codedeploy.GetDeploymentInstanceInput, ...func(*codedeploy.Options)) *codedeploy.GetDeploymentInstanceOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*codedeploy.GetDeploymentInstanceOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *codedeploy.GetDeploymentInstanceInput, ...func(*codedeploy.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetDeploymentTarget provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetDeploymentTarget(ctx context.Context, params *codedeploy.GetDeploymentTargetInput, optFns ...func(*codedeploy.Options)) (*codedeploy.GetDeploymentTargetOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetDeploymentTarget")
	}

	var r0 *codedeploy.GetDeploymentTargetOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *codedeploy.GetDeploymentTargetInput, ...func(*codedeploy.Options)) (*codedeploy.GetDeploymentTargetOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *codedeploy.GetDeploymentTargetInput, ...func(*codedeploy.Options)) *codedeploy.GetDeploymentTargetOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*codedeploy.GetDeploymentTargetOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *codedeploy.GetDeploymentTargetInput, ...func(*codedeploy.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetOnPremisesInstance provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetOnPremisesInstance(ctx context.Context, params *codedeploy.GetOnPremisesInstanceInput, optFns ...func(*codedeploy.Options)) (*codedeploy.GetOnPremisesInstanceOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetOnPremisesInstance")
	}

	var r0 *codedeploy.GetOnPremisesInstanceOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *codedeploy.GetOnPremisesInstanceInput, ...func(*codedeploy.Options)) (*codedeploy.GetOnPremisesInstanceOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *codedeploy.GetOnPremisesInstanceInput, ...func(*codedeploy.Options)) *codedeploy.GetOnPremisesInstanceOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*codedeploy.GetOnPremisesInstanceOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *codedeploy.GetOnPremisesInstanceInput, ...func(*codedeploy.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListApplicationRevisions provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListApplicationRevisions(ctx context.Context, params *codedeploy.ListApplicationRevisionsInput, optFns ...func(*codedeploy.Options)) (*codedeploy.ListApplicationRevisionsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListApplicationRevisions")
	}

	var r0 *codedeploy.ListApplicationRevisionsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *codedeploy.ListApplicationRevisionsInput, ...func(*codedeploy.Options)) (*codedeploy.ListApplicationRevisionsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *codedeploy.ListApplicationRevisionsInput, ...func(*codedeploy.Options)) *codedeploy.ListApplicationRevisionsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*codedeploy.ListApplicationRevisionsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *codedeploy.ListApplicationRevisionsInput, ...func(*codedeploy.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListApplications provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListApplications(ctx context.Context, params *codedeploy.ListApplicationsInput, optFns ...func(*codedeploy.Options)) (*codedeploy.ListApplicationsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListApplications")
	}

	var r0 *codedeploy.ListApplicationsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *codedeploy.ListApplicationsInput, ...func(*codedeploy.Options)) (*codedeploy.ListApplicationsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *codedeploy.ListApplicationsInput, ...func(*codedeploy.Options)) *codedeploy.ListApplicationsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*codedeploy.ListApplicationsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *codedeploy.ListApplicationsInput, ...func(*codedeploy.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListDeploymentConfigs provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListDeploymentConfigs(ctx context.Context, params *codedeploy.ListDeploymentConfigsInput, optFns ...func(*codedeploy.Options)) (*codedeploy.ListDeploymentConfigsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListDeploymentConfigs")
	}

	var r0 *codedeploy.ListDeploymentConfigsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *codedeploy.ListDeploymentConfigsInput, ...func(*codedeploy.Options)) (*codedeploy.ListDeploymentConfigsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *codedeploy.ListDeploymentConfigsInput, ...func(*codedeploy.Options)) *codedeploy.ListDeploymentConfigsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*codedeploy.ListDeploymentConfigsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *codedeploy.ListDeploymentConfigsInput, ...func(*codedeploy.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListDeploymentGroups provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListDeploymentGroups(ctx context.Context, params *codedeploy.ListDeploymentGroupsInput, optFns ...func(*codedeploy.Options)) (*codedeploy.ListDeploymentGroupsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListDeploymentGroups")
	}

	var r0 *codedeploy.ListDeploymentGroupsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *codedeploy.ListDeploymentGroupsInput, ...func(*codedeploy.Options)) (*codedeploy.ListDeploymentGroupsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *codedeploy.ListDeploymentGroupsInput, ...func(*codedeploy.Options)) *codedeploy.ListDeploymentGroupsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*codedeploy.ListDeploymentGroupsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *codedeploy.ListDeploymentGroupsInput, ...func(*codedeploy.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListDeploymentInstances provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListDeploymentInstances(ctx context.Context, params *codedeploy.ListDeploymentInstancesInput, optFns ...func(*codedeploy.Options)) (*codedeploy.ListDeploymentInstancesOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListDeploymentInstances")
	}

	var r0 *codedeploy.ListDeploymentInstancesOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *codedeploy.ListDeploymentInstancesInput, ...func(*codedeploy.Options)) (*codedeploy.ListDeploymentInstancesOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *codedeploy.ListDeploymentInstancesInput, ...func(*codedeploy.Options)) *codedeploy.ListDeploymentInstancesOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*codedeploy.ListDeploymentInstancesOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *codedeploy.ListDeploymentInstancesInput, ...func(*codedeploy.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListDeploymentTargets provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListDeploymentTargets(ctx context.Context, params *codedeploy.ListDeploymentTargetsInput, optFns ...func(*codedeploy.Options)) (*codedeploy.ListDeploymentTargetsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListDeploymentTargets")
	}

	var r0 *codedeploy.ListDeploymentTargetsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *codedeploy.ListDeploymentTargetsInput, ...func(*codedeploy.Options)) (*codedeploy.ListDeploymentTargetsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *codedeploy.ListDeploymentTargetsInput, ...func(*codedeploy.Options)) *codedeploy.ListDeploymentTargetsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*codedeploy.ListDeploymentTargetsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *codedeploy.ListDeploymentTargetsInput, ...func(*codedeploy.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListDeployments provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListDeployments(ctx context.Context, params *codedeploy.ListDeploymentsInput, optFns ...func(*codedeploy.Options)) (*codedeploy.ListDeploymentsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListDeployments")
	}

	var r0 *codedeploy.ListDeploymentsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *codedeploy.ListDeploymentsInput, ...func(*codedeploy.Options)) (*codedeploy.ListDeploymentsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *codedeploy.ListDeploymentsInput, ...func(*codedeploy.Options)) *codedeploy.ListDeploymentsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*codedeploy.ListDeploymentsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *codedeploy.ListDeploymentsInput, ...func(*codedeploy.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListGitHubAccountTokenNames provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListGitHubAccountTokenNames(ctx context.Context, params *codedeploy.ListGitHubAccountTokenNamesInput, optFns ...func(*codedeploy.Options)) (*codedeploy.ListGitHubAccountTokenNamesOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListGitHubAccountTokenNames")
	}

	var r0 *codedeploy.ListGitHubAccountTokenNamesOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *codedeploy.ListGitHubAccountTokenNamesInput, ...func(*codedeploy.Options)) (*codedeploy.ListGitHubAccountTokenNamesOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *codedeploy.ListGitHubAccountTokenNamesInput, ...func(*codedeploy.Options)) *codedeploy.ListGitHubAccountTokenNamesOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*codedeploy.ListGitHubAccountTokenNamesOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *codedeploy.ListGitHubAccountTokenNamesInput, ...func(*codedeploy.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListOnPremisesInstances provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListOnPremisesInstances(ctx context.Context, params *codedeploy.ListOnPremisesInstancesInput, optFns ...func(*codedeploy.Options)) (*codedeploy.ListOnPremisesInstancesOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListOnPremisesInstances")
	}

	var r0 *codedeploy.ListOnPremisesInstancesOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *codedeploy.ListOnPremisesInstancesInput, ...func(*codedeploy.Options)) (*codedeploy.ListOnPremisesInstancesOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *codedeploy.ListOnPremisesInstancesInput, ...func(*codedeploy.Options)) *codedeploy.ListOnPremisesInstancesOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*codedeploy.ListOnPremisesInstancesOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *codedeploy.ListOnPremisesInstancesInput, ...func(*codedeploy.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListTagsForResource provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListTagsForResource(ctx context.Context, params *codedeploy.ListTagsForResourceInput, optFns ...func(*codedeploy.Options)) (*codedeploy.ListTagsForResourceOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListTagsForResource")
	}

	var r0 *codedeploy.ListTagsForResourceOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *codedeploy.ListTagsForResourceInput, ...func(*codedeploy.Options)) (*codedeploy.ListTagsForResourceOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *codedeploy.ListTagsForResourceInput, ...func(*codedeploy.Options)) *codedeploy.ListTagsForResourceOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*codedeploy.ListTagsForResourceOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *codedeploy.ListTagsForResourceInput, ...func(*codedeploy.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Options provides a mock function with given fields:
func (_m *IClient) Options() codedeploy.Options {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Options")
	}

	var r0 codedeploy.Options
	if rf, ok := ret.Get(0).(func() codedeploy.Options); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(codedeploy.Options)
	}

	return r0
}

// PutLifecycleEventHookExecutionStatus provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) PutLifecycleEventHookExecutionStatus(ctx context.Context, params *codedeploy.PutLifecycleEventHookExecutionStatusInput, optFns ...func(*codedeploy.Options)) (*codedeploy.PutLifecycleEventHookExecutionStatusOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for PutLifecycleEventHookExecutionStatus")
	}

	var r0 *codedeploy.PutLifecycleEventHookExecutionStatusOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *codedeploy.PutLifecycleEventHookExecutionStatusInput, ...func(*codedeploy.Options)) (*codedeploy.PutLifecycleEventHookExecutionStatusOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *codedeploy.PutLifecycleEventHookExecutionStatusInput, ...func(*codedeploy.Options)) *codedeploy.PutLifecycleEventHookExecutionStatusOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*codedeploy.PutLifecycleEventHookExecutionStatusOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *codedeploy.PutLifecycleEventHookExecutionStatusInput, ...func(*codedeploy.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RegisterApplicationRevision provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) RegisterApplicationRevision(ctx context.Context, params *codedeploy.RegisterApplicationRevisionInput, optFns ...func(*codedeploy.Options)) (*codedeploy.RegisterApplicationRevisionOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for RegisterApplicationRevision")
	}

	var r0 *codedeploy.RegisterApplicationRevisionOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *codedeploy.RegisterApplicationRevisionInput, ...func(*codedeploy.Options)) (*codedeploy.RegisterApplicationRevisionOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *codedeploy.RegisterApplicationRevisionInput, ...func(*codedeploy.Options)) *codedeploy.RegisterApplicationRevisionOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*codedeploy.RegisterApplicationRevisionOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *codedeploy.RegisterApplicationRevisionInput, ...func(*codedeploy.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RegisterOnPremisesInstance provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) RegisterOnPremisesInstance(ctx context.Context, params *codedeploy.RegisterOnPremisesInstanceInput, optFns ...func(*codedeploy.Options)) (*codedeploy.RegisterOnPremisesInstanceOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for RegisterOnPremisesInstance")
	}

	var r0 *codedeploy.RegisterOnPremisesInstanceOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *codedeploy.RegisterOnPremisesInstanceInput, ...func(*codedeploy.Options)) (*codedeploy.RegisterOnPremisesInstanceOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *codedeploy.RegisterOnPremisesInstanceInput, ...func(*codedeploy.Options)) *codedeploy.RegisterOnPremisesInstanceOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*codedeploy.RegisterOnPremisesInstanceOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *codedeploy.RegisterOnPremisesInstanceInput, ...func(*codedeploy.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RemoveTagsFromOnPremisesInstances provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) RemoveTagsFromOnPremisesInstances(ctx context.Context, params *codedeploy.RemoveTagsFromOnPremisesInstancesInput, optFns ...func(*codedeploy.Options)) (*codedeploy.RemoveTagsFromOnPremisesInstancesOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for RemoveTagsFromOnPremisesInstances")
	}

	var r0 *codedeploy.RemoveTagsFromOnPremisesInstancesOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *codedeploy.RemoveTagsFromOnPremisesInstancesInput, ...func(*codedeploy.Options)) (*codedeploy.RemoveTagsFromOnPremisesInstancesOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *codedeploy.RemoveTagsFromOnPremisesInstancesInput, ...func(*codedeploy.Options)) *codedeploy.RemoveTagsFromOnPremisesInstancesOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*codedeploy.RemoveTagsFromOnPremisesInstancesOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *codedeploy.RemoveTagsFromOnPremisesInstancesInput, ...func(*codedeploy.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SkipWaitTimeForInstanceTermination provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) SkipWaitTimeForInstanceTermination(ctx context.Context, params *codedeploy.SkipWaitTimeForInstanceTerminationInput, optFns ...func(*codedeploy.Options)) (*codedeploy.SkipWaitTimeForInstanceTerminationOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for SkipWaitTimeForInstanceTermination")
	}

	var r0 *codedeploy.SkipWaitTimeForInstanceTerminationOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *codedeploy.SkipWaitTimeForInstanceTerminationInput, ...func(*codedeploy.Options)) (*codedeploy.SkipWaitTimeForInstanceTerminationOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *codedeploy.SkipWaitTimeForInstanceTerminationInput, ...func(*codedeploy.Options)) *codedeploy.SkipWaitTimeForInstanceTerminationOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*codedeploy.SkipWaitTimeForInstanceTerminationOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *codedeploy.SkipWaitTimeForInstanceTerminationInput, ...func(*codedeploy.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// StopDeployment provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) StopDeployment(ctx context.Context, params *codedeploy.StopDeploymentInput, optFns ...func(*codedeploy.Options)) (*codedeploy.StopDeploymentOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for StopDeployment")
	}

	var r0 *codedeploy.StopDeploymentOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *codedeploy.StopDeploymentInput, ...func(*codedeploy.Options)) (*codedeploy.StopDeploymentOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *codedeploy.StopDeploymentInput, ...func(*codedeploy.Options)) *codedeploy.StopDeploymentOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*codedeploy.StopDeploymentOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *codedeploy.StopDeploymentInput, ...func(*codedeploy.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// TagResource provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) TagResource(ctx context.Context, params *codedeploy.TagResourceInput, optFns ...func(*codedeploy.Options)) (*codedeploy.TagResourceOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for TagResource")
	}

	var r0 *codedeploy.TagResourceOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *codedeploy.TagResourceInput, ...func(*codedeploy.Options)) (*codedeploy.TagResourceOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *codedeploy.TagResourceInput, ...func(*codedeploy.Options)) *codedeploy.TagResourceOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*codedeploy.TagResourceOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *codedeploy.TagResourceInput, ...func(*codedeploy.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UntagResource provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UntagResource(ctx context.Context, params *codedeploy.UntagResourceInput, optFns ...func(*codedeploy.Options)) (*codedeploy.UntagResourceOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UntagResource")
	}

	var r0 *codedeploy.UntagResourceOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *codedeploy.UntagResourceInput, ...func(*codedeploy.Options)) (*codedeploy.UntagResourceOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *codedeploy.UntagResourceInput, ...func(*codedeploy.Options)) *codedeploy.UntagResourceOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*codedeploy.UntagResourceOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *codedeploy.UntagResourceInput, ...func(*codedeploy.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateApplication provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UpdateApplication(ctx context.Context, params *codedeploy.UpdateApplicationInput, optFns ...func(*codedeploy.Options)) (*codedeploy.UpdateApplicationOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateApplication")
	}

	var r0 *codedeploy.UpdateApplicationOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *codedeploy.UpdateApplicationInput, ...func(*codedeploy.Options)) (*codedeploy.UpdateApplicationOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *codedeploy.UpdateApplicationInput, ...func(*codedeploy.Options)) *codedeploy.UpdateApplicationOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*codedeploy.UpdateApplicationOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *codedeploy.UpdateApplicationInput, ...func(*codedeploy.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateDeploymentGroup provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UpdateDeploymentGroup(ctx context.Context, params *codedeploy.UpdateDeploymentGroupInput, optFns ...func(*codedeploy.Options)) (*codedeploy.UpdateDeploymentGroupOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateDeploymentGroup")
	}

	var r0 *codedeploy.UpdateDeploymentGroupOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *codedeploy.UpdateDeploymentGroupInput, ...func(*codedeploy.Options)) (*codedeploy.UpdateDeploymentGroupOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *codedeploy.UpdateDeploymentGroupInput, ...func(*codedeploy.Options)) *codedeploy.UpdateDeploymentGroupOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*codedeploy.UpdateDeploymentGroupOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *codedeploy.UpdateDeploymentGroupInput, ...func(*codedeploy.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewIClient creates a new instance of IClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewIClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *IClient {
	mock := &IClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
