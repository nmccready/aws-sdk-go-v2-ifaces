// Code generated by mockery v2.53.4. DO NOT EDIT.

package mocks

import (
	codeguruprofiler "github.com/aws/aws-sdk-go-v2/service/codeguruprofiler"

	context "context"

	mock "github.com/stretchr/testify/mock"
)

// IClient is an autogenerated mock type for the IClient type
type IClient struct {
	mock.Mock
}

// AddNotificationChannels provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) AddNotificationChannels(ctx context.Context, params *codeguruprofiler.AddNotificationChannelsInput, optFns ...func(*codeguruprofiler.Options)) (*codeguruprofiler.AddNotificationChannelsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for AddNotificationChannels")
	}

	var r0 *codeguruprofiler.AddNotificationChannelsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *codeguruprofiler.AddNotificationChannelsInput, ...func(*codeguruprofiler.Options)) (*codeguruprofiler.AddNotificationChannelsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *codeguruprofiler.AddNotificationChannelsInput, ...func(*codeguruprofiler.Options)) *codeguruprofiler.AddNotificationChannelsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*codeguruprofiler.AddNotificationChannelsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *codeguruprofiler.AddNotificationChannelsInput, ...func(*codeguruprofiler.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// BatchGetFrameMetricData provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) BatchGetFrameMetricData(ctx context.Context, params *codeguruprofiler.BatchGetFrameMetricDataInput, optFns ...func(*codeguruprofiler.Options)) (*codeguruprofiler.BatchGetFrameMetricDataOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for BatchGetFrameMetricData")
	}

	var r0 *codeguruprofiler.BatchGetFrameMetricDataOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *codeguruprofiler.BatchGetFrameMetricDataInput, ...func(*codeguruprofiler.Options)) (*codeguruprofiler.BatchGetFrameMetricDataOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *codeguruprofiler.BatchGetFrameMetricDataInput, ...func(*codeguruprofiler.Options)) *codeguruprofiler.BatchGetFrameMetricDataOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*codeguruprofiler.BatchGetFrameMetricDataOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *codeguruprofiler.BatchGetFrameMetricDataInput, ...func(*codeguruprofiler.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ConfigureAgent provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ConfigureAgent(ctx context.Context, params *codeguruprofiler.ConfigureAgentInput, optFns ...func(*codeguruprofiler.Options)) (*codeguruprofiler.ConfigureAgentOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ConfigureAgent")
	}

	var r0 *codeguruprofiler.ConfigureAgentOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *codeguruprofiler.ConfigureAgentInput, ...func(*codeguruprofiler.Options)) (*codeguruprofiler.ConfigureAgentOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *codeguruprofiler.ConfigureAgentInput, ...func(*codeguruprofiler.Options)) *codeguruprofiler.ConfigureAgentOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*codeguruprofiler.ConfigureAgentOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *codeguruprofiler.ConfigureAgentInput, ...func(*codeguruprofiler.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateProfilingGroup provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CreateProfilingGroup(ctx context.Context, params *codeguruprofiler.CreateProfilingGroupInput, optFns ...func(*codeguruprofiler.Options)) (*codeguruprofiler.CreateProfilingGroupOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateProfilingGroup")
	}

	var r0 *codeguruprofiler.CreateProfilingGroupOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *codeguruprofiler.CreateProfilingGroupInput, ...func(*codeguruprofiler.Options)) (*codeguruprofiler.CreateProfilingGroupOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *codeguruprofiler.CreateProfilingGroupInput, ...func(*codeguruprofiler.Options)) *codeguruprofiler.CreateProfilingGroupOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*codeguruprofiler.CreateProfilingGroupOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *codeguruprofiler.CreateProfilingGroupInput, ...func(*codeguruprofiler.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteProfilingGroup provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteProfilingGroup(ctx context.Context, params *codeguruprofiler.DeleteProfilingGroupInput, optFns ...func(*codeguruprofiler.Options)) (*codeguruprofiler.DeleteProfilingGroupOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteProfilingGroup")
	}

	var r0 *codeguruprofiler.DeleteProfilingGroupOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *codeguruprofiler.DeleteProfilingGroupInput, ...func(*codeguruprofiler.Options)) (*codeguruprofiler.DeleteProfilingGroupOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *codeguruprofiler.DeleteProfilingGroupInput, ...func(*codeguruprofiler.Options)) *codeguruprofiler.DeleteProfilingGroupOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*codeguruprofiler.DeleteProfilingGroupOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *codeguruprofiler.DeleteProfilingGroupInput, ...func(*codeguruprofiler.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeProfilingGroup provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DescribeProfilingGroup(ctx context.Context, params *codeguruprofiler.DescribeProfilingGroupInput, optFns ...func(*codeguruprofiler.Options)) (*codeguruprofiler.DescribeProfilingGroupOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DescribeProfilingGroup")
	}

	var r0 *codeguruprofiler.DescribeProfilingGroupOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *codeguruprofiler.DescribeProfilingGroupInput, ...func(*codeguruprofiler.Options)) (*codeguruprofiler.DescribeProfilingGroupOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *codeguruprofiler.DescribeProfilingGroupInput, ...func(*codeguruprofiler.Options)) *codeguruprofiler.DescribeProfilingGroupOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*codeguruprofiler.DescribeProfilingGroupOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *codeguruprofiler.DescribeProfilingGroupInput, ...func(*codeguruprofiler.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetFindingsReportAccountSummary provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetFindingsReportAccountSummary(ctx context.Context, params *codeguruprofiler.GetFindingsReportAccountSummaryInput, optFns ...func(*codeguruprofiler.Options)) (*codeguruprofiler.GetFindingsReportAccountSummaryOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetFindingsReportAccountSummary")
	}

	var r0 *codeguruprofiler.GetFindingsReportAccountSummaryOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *codeguruprofiler.GetFindingsReportAccountSummaryInput, ...func(*codeguruprofiler.Options)) (*codeguruprofiler.GetFindingsReportAccountSummaryOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *codeguruprofiler.GetFindingsReportAccountSummaryInput, ...func(*codeguruprofiler.Options)) *codeguruprofiler.GetFindingsReportAccountSummaryOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*codeguruprofiler.GetFindingsReportAccountSummaryOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *codeguruprofiler.GetFindingsReportAccountSummaryInput, ...func(*codeguruprofiler.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetNotificationConfiguration provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetNotificationConfiguration(ctx context.Context, params *codeguruprofiler.GetNotificationConfigurationInput, optFns ...func(*codeguruprofiler.Options)) (*codeguruprofiler.GetNotificationConfigurationOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetNotificationConfiguration")
	}

	var r0 *codeguruprofiler.GetNotificationConfigurationOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *codeguruprofiler.GetNotificationConfigurationInput, ...func(*codeguruprofiler.Options)) (*codeguruprofiler.GetNotificationConfigurationOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *codeguruprofiler.GetNotificationConfigurationInput, ...func(*codeguruprofiler.Options)) *codeguruprofiler.GetNotificationConfigurationOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*codeguruprofiler.GetNotificationConfigurationOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *codeguruprofiler.GetNotificationConfigurationInput, ...func(*codeguruprofiler.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetPolicy provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetPolicy(ctx context.Context, params *codeguruprofiler.GetPolicyInput, optFns ...func(*codeguruprofiler.Options)) (*codeguruprofiler.GetPolicyOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetPolicy")
	}

	var r0 *codeguruprofiler.GetPolicyOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *codeguruprofiler.GetPolicyInput, ...func(*codeguruprofiler.Options)) (*codeguruprofiler.GetPolicyOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *codeguruprofiler.GetPolicyInput, ...func(*codeguruprofiler.Options)) *codeguruprofiler.GetPolicyOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*codeguruprofiler.GetPolicyOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *codeguruprofiler.GetPolicyInput, ...func(*codeguruprofiler.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetProfile provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetProfile(ctx context.Context, params *codeguruprofiler.GetProfileInput, optFns ...func(*codeguruprofiler.Options)) (*codeguruprofiler.GetProfileOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetProfile")
	}

	var r0 *codeguruprofiler.GetProfileOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *codeguruprofiler.GetProfileInput, ...func(*codeguruprofiler.Options)) (*codeguruprofiler.GetProfileOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *codeguruprofiler.GetProfileInput, ...func(*codeguruprofiler.Options)) *codeguruprofiler.GetProfileOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*codeguruprofiler.GetProfileOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *codeguruprofiler.GetProfileInput, ...func(*codeguruprofiler.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetRecommendations provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetRecommendations(ctx context.Context, params *codeguruprofiler.GetRecommendationsInput, optFns ...func(*codeguruprofiler.Options)) (*codeguruprofiler.GetRecommendationsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetRecommendations")
	}

	var r0 *codeguruprofiler.GetRecommendationsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *codeguruprofiler.GetRecommendationsInput, ...func(*codeguruprofiler.Options)) (*codeguruprofiler.GetRecommendationsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *codeguruprofiler.GetRecommendationsInput, ...func(*codeguruprofiler.Options)) *codeguruprofiler.GetRecommendationsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*codeguruprofiler.GetRecommendationsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *codeguruprofiler.GetRecommendationsInput, ...func(*codeguruprofiler.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListFindingsReports provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListFindingsReports(ctx context.Context, params *codeguruprofiler.ListFindingsReportsInput, optFns ...func(*codeguruprofiler.Options)) (*codeguruprofiler.ListFindingsReportsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListFindingsReports")
	}

	var r0 *codeguruprofiler.ListFindingsReportsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *codeguruprofiler.ListFindingsReportsInput, ...func(*codeguruprofiler.Options)) (*codeguruprofiler.ListFindingsReportsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *codeguruprofiler.ListFindingsReportsInput, ...func(*codeguruprofiler.Options)) *codeguruprofiler.ListFindingsReportsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*codeguruprofiler.ListFindingsReportsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *codeguruprofiler.ListFindingsReportsInput, ...func(*codeguruprofiler.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListProfileTimes provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListProfileTimes(ctx context.Context, params *codeguruprofiler.ListProfileTimesInput, optFns ...func(*codeguruprofiler.Options)) (*codeguruprofiler.ListProfileTimesOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListProfileTimes")
	}

	var r0 *codeguruprofiler.ListProfileTimesOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *codeguruprofiler.ListProfileTimesInput, ...func(*codeguruprofiler.Options)) (*codeguruprofiler.ListProfileTimesOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *codeguruprofiler.ListProfileTimesInput, ...func(*codeguruprofiler.Options)) *codeguruprofiler.ListProfileTimesOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*codeguruprofiler.ListProfileTimesOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *codeguruprofiler.ListProfileTimesInput, ...func(*codeguruprofiler.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListProfilingGroups provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListProfilingGroups(ctx context.Context, params *codeguruprofiler.ListProfilingGroupsInput, optFns ...func(*codeguruprofiler.Options)) (*codeguruprofiler.ListProfilingGroupsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListProfilingGroups")
	}

	var r0 *codeguruprofiler.ListProfilingGroupsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *codeguruprofiler.ListProfilingGroupsInput, ...func(*codeguruprofiler.Options)) (*codeguruprofiler.ListProfilingGroupsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *codeguruprofiler.ListProfilingGroupsInput, ...func(*codeguruprofiler.Options)) *codeguruprofiler.ListProfilingGroupsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*codeguruprofiler.ListProfilingGroupsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *codeguruprofiler.ListProfilingGroupsInput, ...func(*codeguruprofiler.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListTagsForResource provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListTagsForResource(ctx context.Context, params *codeguruprofiler.ListTagsForResourceInput, optFns ...func(*codeguruprofiler.Options)) (*codeguruprofiler.ListTagsForResourceOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListTagsForResource")
	}

	var r0 *codeguruprofiler.ListTagsForResourceOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *codeguruprofiler.ListTagsForResourceInput, ...func(*codeguruprofiler.Options)) (*codeguruprofiler.ListTagsForResourceOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *codeguruprofiler.ListTagsForResourceInput, ...func(*codeguruprofiler.Options)) *codeguruprofiler.ListTagsForResourceOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*codeguruprofiler.ListTagsForResourceOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *codeguruprofiler.ListTagsForResourceInput, ...func(*codeguruprofiler.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Options provides a mock function with no fields
func (_m *IClient) Options() codeguruprofiler.Options {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Options")
	}

	var r0 codeguruprofiler.Options
	if rf, ok := ret.Get(0).(func() codeguruprofiler.Options); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(codeguruprofiler.Options)
	}

	return r0
}

// PostAgentProfile provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) PostAgentProfile(ctx context.Context, params *codeguruprofiler.PostAgentProfileInput, optFns ...func(*codeguruprofiler.Options)) (*codeguruprofiler.PostAgentProfileOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for PostAgentProfile")
	}

	var r0 *codeguruprofiler.PostAgentProfileOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *codeguruprofiler.PostAgentProfileInput, ...func(*codeguruprofiler.Options)) (*codeguruprofiler.PostAgentProfileOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *codeguruprofiler.PostAgentProfileInput, ...func(*codeguruprofiler.Options)) *codeguruprofiler.PostAgentProfileOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*codeguruprofiler.PostAgentProfileOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *codeguruprofiler.PostAgentProfileInput, ...func(*codeguruprofiler.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PutPermission provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) PutPermission(ctx context.Context, params *codeguruprofiler.PutPermissionInput, optFns ...func(*codeguruprofiler.Options)) (*codeguruprofiler.PutPermissionOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for PutPermission")
	}

	var r0 *codeguruprofiler.PutPermissionOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *codeguruprofiler.PutPermissionInput, ...func(*codeguruprofiler.Options)) (*codeguruprofiler.PutPermissionOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *codeguruprofiler.PutPermissionInput, ...func(*codeguruprofiler.Options)) *codeguruprofiler.PutPermissionOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*codeguruprofiler.PutPermissionOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *codeguruprofiler.PutPermissionInput, ...func(*codeguruprofiler.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RemoveNotificationChannel provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) RemoveNotificationChannel(ctx context.Context, params *codeguruprofiler.RemoveNotificationChannelInput, optFns ...func(*codeguruprofiler.Options)) (*codeguruprofiler.RemoveNotificationChannelOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for RemoveNotificationChannel")
	}

	var r0 *codeguruprofiler.RemoveNotificationChannelOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *codeguruprofiler.RemoveNotificationChannelInput, ...func(*codeguruprofiler.Options)) (*codeguruprofiler.RemoveNotificationChannelOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *codeguruprofiler.RemoveNotificationChannelInput, ...func(*codeguruprofiler.Options)) *codeguruprofiler.RemoveNotificationChannelOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*codeguruprofiler.RemoveNotificationChannelOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *codeguruprofiler.RemoveNotificationChannelInput, ...func(*codeguruprofiler.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RemovePermission provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) RemovePermission(ctx context.Context, params *codeguruprofiler.RemovePermissionInput, optFns ...func(*codeguruprofiler.Options)) (*codeguruprofiler.RemovePermissionOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for RemovePermission")
	}

	var r0 *codeguruprofiler.RemovePermissionOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *codeguruprofiler.RemovePermissionInput, ...func(*codeguruprofiler.Options)) (*codeguruprofiler.RemovePermissionOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *codeguruprofiler.RemovePermissionInput, ...func(*codeguruprofiler.Options)) *codeguruprofiler.RemovePermissionOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*codeguruprofiler.RemovePermissionOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *codeguruprofiler.RemovePermissionInput, ...func(*codeguruprofiler.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SubmitFeedback provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) SubmitFeedback(ctx context.Context, params *codeguruprofiler.SubmitFeedbackInput, optFns ...func(*codeguruprofiler.Options)) (*codeguruprofiler.SubmitFeedbackOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for SubmitFeedback")
	}

	var r0 *codeguruprofiler.SubmitFeedbackOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *codeguruprofiler.SubmitFeedbackInput, ...func(*codeguruprofiler.Options)) (*codeguruprofiler.SubmitFeedbackOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *codeguruprofiler.SubmitFeedbackInput, ...func(*codeguruprofiler.Options)) *codeguruprofiler.SubmitFeedbackOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*codeguruprofiler.SubmitFeedbackOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *codeguruprofiler.SubmitFeedbackInput, ...func(*codeguruprofiler.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// TagResource provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) TagResource(ctx context.Context, params *codeguruprofiler.TagResourceInput, optFns ...func(*codeguruprofiler.Options)) (*codeguruprofiler.TagResourceOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for TagResource")
	}

	var r0 *codeguruprofiler.TagResourceOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *codeguruprofiler.TagResourceInput, ...func(*codeguruprofiler.Options)) (*codeguruprofiler.TagResourceOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *codeguruprofiler.TagResourceInput, ...func(*codeguruprofiler.Options)) *codeguruprofiler.TagResourceOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*codeguruprofiler.TagResourceOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *codeguruprofiler.TagResourceInput, ...func(*codeguruprofiler.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UntagResource provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UntagResource(ctx context.Context, params *codeguruprofiler.UntagResourceInput, optFns ...func(*codeguruprofiler.Options)) (*codeguruprofiler.UntagResourceOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UntagResource")
	}

	var r0 *codeguruprofiler.UntagResourceOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *codeguruprofiler.UntagResourceInput, ...func(*codeguruprofiler.Options)) (*codeguruprofiler.UntagResourceOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *codeguruprofiler.UntagResourceInput, ...func(*codeguruprofiler.Options)) *codeguruprofiler.UntagResourceOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*codeguruprofiler.UntagResourceOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *codeguruprofiler.UntagResourceInput, ...func(*codeguruprofiler.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateProfilingGroup provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UpdateProfilingGroup(ctx context.Context, params *codeguruprofiler.UpdateProfilingGroupInput, optFns ...func(*codeguruprofiler.Options)) (*codeguruprofiler.UpdateProfilingGroupOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateProfilingGroup")
	}

	var r0 *codeguruprofiler.UpdateProfilingGroupOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *codeguruprofiler.UpdateProfilingGroupInput, ...func(*codeguruprofiler.Options)) (*codeguruprofiler.UpdateProfilingGroupOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *codeguruprofiler.UpdateProfilingGroupInput, ...func(*codeguruprofiler.Options)) *codeguruprofiler.UpdateProfilingGroupOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*codeguruprofiler.UpdateProfilingGroupOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *codeguruprofiler.UpdateProfilingGroupInput, ...func(*codeguruprofiler.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewIClient creates a new instance of IClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewIClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *IClient {
	mock := &IClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
