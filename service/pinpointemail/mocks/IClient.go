// Code generated by mockery v2.53.4. DO NOT EDIT.

package mocks

import (
	context "context"

	pinpointemail "github.com/aws/aws-sdk-go-v2/service/pinpointemail"
	mock "github.com/stretchr/testify/mock"
)

// IClient is an autogenerated mock type for the IClient type
type IClient struct {
	mock.Mock
}

// CreateConfigurationSet provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CreateConfigurationSet(ctx context.Context, params *pinpointemail.CreateConfigurationSetInput, optFns ...func(*pinpointemail.Options)) (*pinpointemail.CreateConfigurationSetOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateConfigurationSet")
	}

	var r0 *pinpointemail.CreateConfigurationSetOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *pinpointemail.CreateConfigurationSetInput, ...func(*pinpointemail.Options)) (*pinpointemail.CreateConfigurationSetOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *pinpointemail.CreateConfigurationSetInput, ...func(*pinpointemail.Options)) *pinpointemail.CreateConfigurationSetOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*pinpointemail.CreateConfigurationSetOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *pinpointemail.CreateConfigurationSetInput, ...func(*pinpointemail.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateConfigurationSetEventDestination provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CreateConfigurationSetEventDestination(ctx context.Context, params *pinpointemail.CreateConfigurationSetEventDestinationInput, optFns ...func(*pinpointemail.Options)) (*pinpointemail.CreateConfigurationSetEventDestinationOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateConfigurationSetEventDestination")
	}

	var r0 *pinpointemail.CreateConfigurationSetEventDestinationOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *pinpointemail.CreateConfigurationSetEventDestinationInput, ...func(*pinpointemail.Options)) (*pinpointemail.CreateConfigurationSetEventDestinationOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *pinpointemail.CreateConfigurationSetEventDestinationInput, ...func(*pinpointemail.Options)) *pinpointemail.CreateConfigurationSetEventDestinationOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*pinpointemail.CreateConfigurationSetEventDestinationOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *pinpointemail.CreateConfigurationSetEventDestinationInput, ...func(*pinpointemail.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateDedicatedIpPool provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CreateDedicatedIpPool(ctx context.Context, params *pinpointemail.CreateDedicatedIpPoolInput, optFns ...func(*pinpointemail.Options)) (*pinpointemail.CreateDedicatedIpPoolOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateDedicatedIpPool")
	}

	var r0 *pinpointemail.CreateDedicatedIpPoolOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *pinpointemail.CreateDedicatedIpPoolInput, ...func(*pinpointemail.Options)) (*pinpointemail.CreateDedicatedIpPoolOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *pinpointemail.CreateDedicatedIpPoolInput, ...func(*pinpointemail.Options)) *pinpointemail.CreateDedicatedIpPoolOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*pinpointemail.CreateDedicatedIpPoolOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *pinpointemail.CreateDedicatedIpPoolInput, ...func(*pinpointemail.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateDeliverabilityTestReport provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CreateDeliverabilityTestReport(ctx context.Context, params *pinpointemail.CreateDeliverabilityTestReportInput, optFns ...func(*pinpointemail.Options)) (*pinpointemail.CreateDeliverabilityTestReportOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateDeliverabilityTestReport")
	}

	var r0 *pinpointemail.CreateDeliverabilityTestReportOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *pinpointemail.CreateDeliverabilityTestReportInput, ...func(*pinpointemail.Options)) (*pinpointemail.CreateDeliverabilityTestReportOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *pinpointemail.CreateDeliverabilityTestReportInput, ...func(*pinpointemail.Options)) *pinpointemail.CreateDeliverabilityTestReportOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*pinpointemail.CreateDeliverabilityTestReportOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *pinpointemail.CreateDeliverabilityTestReportInput, ...func(*pinpointemail.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateEmailIdentity provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CreateEmailIdentity(ctx context.Context, params *pinpointemail.CreateEmailIdentityInput, optFns ...func(*pinpointemail.Options)) (*pinpointemail.CreateEmailIdentityOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateEmailIdentity")
	}

	var r0 *pinpointemail.CreateEmailIdentityOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *pinpointemail.CreateEmailIdentityInput, ...func(*pinpointemail.Options)) (*pinpointemail.CreateEmailIdentityOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *pinpointemail.CreateEmailIdentityInput, ...func(*pinpointemail.Options)) *pinpointemail.CreateEmailIdentityOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*pinpointemail.CreateEmailIdentityOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *pinpointemail.CreateEmailIdentityInput, ...func(*pinpointemail.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteConfigurationSet provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteConfigurationSet(ctx context.Context, params *pinpointemail.DeleteConfigurationSetInput, optFns ...func(*pinpointemail.Options)) (*pinpointemail.DeleteConfigurationSetOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteConfigurationSet")
	}

	var r0 *pinpointemail.DeleteConfigurationSetOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *pinpointemail.DeleteConfigurationSetInput, ...func(*pinpointemail.Options)) (*pinpointemail.DeleteConfigurationSetOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *pinpointemail.DeleteConfigurationSetInput, ...func(*pinpointemail.Options)) *pinpointemail.DeleteConfigurationSetOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*pinpointemail.DeleteConfigurationSetOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *pinpointemail.DeleteConfigurationSetInput, ...func(*pinpointemail.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteConfigurationSetEventDestination provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteConfigurationSetEventDestination(ctx context.Context, params *pinpointemail.DeleteConfigurationSetEventDestinationInput, optFns ...func(*pinpointemail.Options)) (*pinpointemail.DeleteConfigurationSetEventDestinationOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteConfigurationSetEventDestination")
	}

	var r0 *pinpointemail.DeleteConfigurationSetEventDestinationOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *pinpointemail.DeleteConfigurationSetEventDestinationInput, ...func(*pinpointemail.Options)) (*pinpointemail.DeleteConfigurationSetEventDestinationOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *pinpointemail.DeleteConfigurationSetEventDestinationInput, ...func(*pinpointemail.Options)) *pinpointemail.DeleteConfigurationSetEventDestinationOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*pinpointemail.DeleteConfigurationSetEventDestinationOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *pinpointemail.DeleteConfigurationSetEventDestinationInput, ...func(*pinpointemail.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteDedicatedIpPool provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteDedicatedIpPool(ctx context.Context, params *pinpointemail.DeleteDedicatedIpPoolInput, optFns ...func(*pinpointemail.Options)) (*pinpointemail.DeleteDedicatedIpPoolOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteDedicatedIpPool")
	}

	var r0 *pinpointemail.DeleteDedicatedIpPoolOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *pinpointemail.DeleteDedicatedIpPoolInput, ...func(*pinpointemail.Options)) (*pinpointemail.DeleteDedicatedIpPoolOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *pinpointemail.DeleteDedicatedIpPoolInput, ...func(*pinpointemail.Options)) *pinpointemail.DeleteDedicatedIpPoolOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*pinpointemail.DeleteDedicatedIpPoolOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *pinpointemail.DeleteDedicatedIpPoolInput, ...func(*pinpointemail.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteEmailIdentity provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteEmailIdentity(ctx context.Context, params *pinpointemail.DeleteEmailIdentityInput, optFns ...func(*pinpointemail.Options)) (*pinpointemail.DeleteEmailIdentityOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteEmailIdentity")
	}

	var r0 *pinpointemail.DeleteEmailIdentityOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *pinpointemail.DeleteEmailIdentityInput, ...func(*pinpointemail.Options)) (*pinpointemail.DeleteEmailIdentityOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *pinpointemail.DeleteEmailIdentityInput, ...func(*pinpointemail.Options)) *pinpointemail.DeleteEmailIdentityOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*pinpointemail.DeleteEmailIdentityOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *pinpointemail.DeleteEmailIdentityInput, ...func(*pinpointemail.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAccount provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetAccount(ctx context.Context, params *pinpointemail.GetAccountInput, optFns ...func(*pinpointemail.Options)) (*pinpointemail.GetAccountOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetAccount")
	}

	var r0 *pinpointemail.GetAccountOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *pinpointemail.GetAccountInput, ...func(*pinpointemail.Options)) (*pinpointemail.GetAccountOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *pinpointemail.GetAccountInput, ...func(*pinpointemail.Options)) *pinpointemail.GetAccountOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*pinpointemail.GetAccountOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *pinpointemail.GetAccountInput, ...func(*pinpointemail.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetBlacklistReports provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetBlacklistReports(ctx context.Context, params *pinpointemail.GetBlacklistReportsInput, optFns ...func(*pinpointemail.Options)) (*pinpointemail.GetBlacklistReportsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetBlacklistReports")
	}

	var r0 *pinpointemail.GetBlacklistReportsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *pinpointemail.GetBlacklistReportsInput, ...func(*pinpointemail.Options)) (*pinpointemail.GetBlacklistReportsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *pinpointemail.GetBlacklistReportsInput, ...func(*pinpointemail.Options)) *pinpointemail.GetBlacklistReportsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*pinpointemail.GetBlacklistReportsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *pinpointemail.GetBlacklistReportsInput, ...func(*pinpointemail.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetConfigurationSet provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetConfigurationSet(ctx context.Context, params *pinpointemail.GetConfigurationSetInput, optFns ...func(*pinpointemail.Options)) (*pinpointemail.GetConfigurationSetOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetConfigurationSet")
	}

	var r0 *pinpointemail.GetConfigurationSetOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *pinpointemail.GetConfigurationSetInput, ...func(*pinpointemail.Options)) (*pinpointemail.GetConfigurationSetOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *pinpointemail.GetConfigurationSetInput, ...func(*pinpointemail.Options)) *pinpointemail.GetConfigurationSetOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*pinpointemail.GetConfigurationSetOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *pinpointemail.GetConfigurationSetInput, ...func(*pinpointemail.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetConfigurationSetEventDestinations provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetConfigurationSetEventDestinations(ctx context.Context, params *pinpointemail.GetConfigurationSetEventDestinationsInput, optFns ...func(*pinpointemail.Options)) (*pinpointemail.GetConfigurationSetEventDestinationsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetConfigurationSetEventDestinations")
	}

	var r0 *pinpointemail.GetConfigurationSetEventDestinationsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *pinpointemail.GetConfigurationSetEventDestinationsInput, ...func(*pinpointemail.Options)) (*pinpointemail.GetConfigurationSetEventDestinationsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *pinpointemail.GetConfigurationSetEventDestinationsInput, ...func(*pinpointemail.Options)) *pinpointemail.GetConfigurationSetEventDestinationsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*pinpointemail.GetConfigurationSetEventDestinationsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *pinpointemail.GetConfigurationSetEventDestinationsInput, ...func(*pinpointemail.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetDedicatedIp provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetDedicatedIp(ctx context.Context, params *pinpointemail.GetDedicatedIpInput, optFns ...func(*pinpointemail.Options)) (*pinpointemail.GetDedicatedIpOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetDedicatedIp")
	}

	var r0 *pinpointemail.GetDedicatedIpOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *pinpointemail.GetDedicatedIpInput, ...func(*pinpointemail.Options)) (*pinpointemail.GetDedicatedIpOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *pinpointemail.GetDedicatedIpInput, ...func(*pinpointemail.Options)) *pinpointemail.GetDedicatedIpOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*pinpointemail.GetDedicatedIpOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *pinpointemail.GetDedicatedIpInput, ...func(*pinpointemail.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetDedicatedIps provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetDedicatedIps(ctx context.Context, params *pinpointemail.GetDedicatedIpsInput, optFns ...func(*pinpointemail.Options)) (*pinpointemail.GetDedicatedIpsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetDedicatedIps")
	}

	var r0 *pinpointemail.GetDedicatedIpsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *pinpointemail.GetDedicatedIpsInput, ...func(*pinpointemail.Options)) (*pinpointemail.GetDedicatedIpsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *pinpointemail.GetDedicatedIpsInput, ...func(*pinpointemail.Options)) *pinpointemail.GetDedicatedIpsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*pinpointemail.GetDedicatedIpsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *pinpointemail.GetDedicatedIpsInput, ...func(*pinpointemail.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetDeliverabilityDashboardOptions provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetDeliverabilityDashboardOptions(ctx context.Context, params *pinpointemail.GetDeliverabilityDashboardOptionsInput, optFns ...func(*pinpointemail.Options)) (*pinpointemail.GetDeliverabilityDashboardOptionsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetDeliverabilityDashboardOptions")
	}

	var r0 *pinpointemail.GetDeliverabilityDashboardOptionsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *pinpointemail.GetDeliverabilityDashboardOptionsInput, ...func(*pinpointemail.Options)) (*pinpointemail.GetDeliverabilityDashboardOptionsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *pinpointemail.GetDeliverabilityDashboardOptionsInput, ...func(*pinpointemail.Options)) *pinpointemail.GetDeliverabilityDashboardOptionsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*pinpointemail.GetDeliverabilityDashboardOptionsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *pinpointemail.GetDeliverabilityDashboardOptionsInput, ...func(*pinpointemail.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetDeliverabilityTestReport provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetDeliverabilityTestReport(ctx context.Context, params *pinpointemail.GetDeliverabilityTestReportInput, optFns ...func(*pinpointemail.Options)) (*pinpointemail.GetDeliverabilityTestReportOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetDeliverabilityTestReport")
	}

	var r0 *pinpointemail.GetDeliverabilityTestReportOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *pinpointemail.GetDeliverabilityTestReportInput, ...func(*pinpointemail.Options)) (*pinpointemail.GetDeliverabilityTestReportOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *pinpointemail.GetDeliverabilityTestReportInput, ...func(*pinpointemail.Options)) *pinpointemail.GetDeliverabilityTestReportOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*pinpointemail.GetDeliverabilityTestReportOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *pinpointemail.GetDeliverabilityTestReportInput, ...func(*pinpointemail.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetDomainDeliverabilityCampaign provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetDomainDeliverabilityCampaign(ctx context.Context, params *pinpointemail.GetDomainDeliverabilityCampaignInput, optFns ...func(*pinpointemail.Options)) (*pinpointemail.GetDomainDeliverabilityCampaignOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetDomainDeliverabilityCampaign")
	}

	var r0 *pinpointemail.GetDomainDeliverabilityCampaignOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *pinpointemail.GetDomainDeliverabilityCampaignInput, ...func(*pinpointemail.Options)) (*pinpointemail.GetDomainDeliverabilityCampaignOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *pinpointemail.GetDomainDeliverabilityCampaignInput, ...func(*pinpointemail.Options)) *pinpointemail.GetDomainDeliverabilityCampaignOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*pinpointemail.GetDomainDeliverabilityCampaignOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *pinpointemail.GetDomainDeliverabilityCampaignInput, ...func(*pinpointemail.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetDomainStatisticsReport provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetDomainStatisticsReport(ctx context.Context, params *pinpointemail.GetDomainStatisticsReportInput, optFns ...func(*pinpointemail.Options)) (*pinpointemail.GetDomainStatisticsReportOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetDomainStatisticsReport")
	}

	var r0 *pinpointemail.GetDomainStatisticsReportOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *pinpointemail.GetDomainStatisticsReportInput, ...func(*pinpointemail.Options)) (*pinpointemail.GetDomainStatisticsReportOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *pinpointemail.GetDomainStatisticsReportInput, ...func(*pinpointemail.Options)) *pinpointemail.GetDomainStatisticsReportOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*pinpointemail.GetDomainStatisticsReportOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *pinpointemail.GetDomainStatisticsReportInput, ...func(*pinpointemail.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetEmailIdentity provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetEmailIdentity(ctx context.Context, params *pinpointemail.GetEmailIdentityInput, optFns ...func(*pinpointemail.Options)) (*pinpointemail.GetEmailIdentityOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetEmailIdentity")
	}

	var r0 *pinpointemail.GetEmailIdentityOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *pinpointemail.GetEmailIdentityInput, ...func(*pinpointemail.Options)) (*pinpointemail.GetEmailIdentityOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *pinpointemail.GetEmailIdentityInput, ...func(*pinpointemail.Options)) *pinpointemail.GetEmailIdentityOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*pinpointemail.GetEmailIdentityOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *pinpointemail.GetEmailIdentityInput, ...func(*pinpointemail.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListConfigurationSets provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListConfigurationSets(ctx context.Context, params *pinpointemail.ListConfigurationSetsInput, optFns ...func(*pinpointemail.Options)) (*pinpointemail.ListConfigurationSetsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListConfigurationSets")
	}

	var r0 *pinpointemail.ListConfigurationSetsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *pinpointemail.ListConfigurationSetsInput, ...func(*pinpointemail.Options)) (*pinpointemail.ListConfigurationSetsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *pinpointemail.ListConfigurationSetsInput, ...func(*pinpointemail.Options)) *pinpointemail.ListConfigurationSetsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*pinpointemail.ListConfigurationSetsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *pinpointemail.ListConfigurationSetsInput, ...func(*pinpointemail.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListDedicatedIpPools provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListDedicatedIpPools(ctx context.Context, params *pinpointemail.ListDedicatedIpPoolsInput, optFns ...func(*pinpointemail.Options)) (*pinpointemail.ListDedicatedIpPoolsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListDedicatedIpPools")
	}

	var r0 *pinpointemail.ListDedicatedIpPoolsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *pinpointemail.ListDedicatedIpPoolsInput, ...func(*pinpointemail.Options)) (*pinpointemail.ListDedicatedIpPoolsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *pinpointemail.ListDedicatedIpPoolsInput, ...func(*pinpointemail.Options)) *pinpointemail.ListDedicatedIpPoolsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*pinpointemail.ListDedicatedIpPoolsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *pinpointemail.ListDedicatedIpPoolsInput, ...func(*pinpointemail.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListDeliverabilityTestReports provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListDeliverabilityTestReports(ctx context.Context, params *pinpointemail.ListDeliverabilityTestReportsInput, optFns ...func(*pinpointemail.Options)) (*pinpointemail.ListDeliverabilityTestReportsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListDeliverabilityTestReports")
	}

	var r0 *pinpointemail.ListDeliverabilityTestReportsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *pinpointemail.ListDeliverabilityTestReportsInput, ...func(*pinpointemail.Options)) (*pinpointemail.ListDeliverabilityTestReportsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *pinpointemail.ListDeliverabilityTestReportsInput, ...func(*pinpointemail.Options)) *pinpointemail.ListDeliverabilityTestReportsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*pinpointemail.ListDeliverabilityTestReportsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *pinpointemail.ListDeliverabilityTestReportsInput, ...func(*pinpointemail.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListDomainDeliverabilityCampaigns provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListDomainDeliverabilityCampaigns(ctx context.Context, params *pinpointemail.ListDomainDeliverabilityCampaignsInput, optFns ...func(*pinpointemail.Options)) (*pinpointemail.ListDomainDeliverabilityCampaignsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListDomainDeliverabilityCampaigns")
	}

	var r0 *pinpointemail.ListDomainDeliverabilityCampaignsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *pinpointemail.ListDomainDeliverabilityCampaignsInput, ...func(*pinpointemail.Options)) (*pinpointemail.ListDomainDeliverabilityCampaignsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *pinpointemail.ListDomainDeliverabilityCampaignsInput, ...func(*pinpointemail.Options)) *pinpointemail.ListDomainDeliverabilityCampaignsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*pinpointemail.ListDomainDeliverabilityCampaignsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *pinpointemail.ListDomainDeliverabilityCampaignsInput, ...func(*pinpointemail.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListEmailIdentities provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListEmailIdentities(ctx context.Context, params *pinpointemail.ListEmailIdentitiesInput, optFns ...func(*pinpointemail.Options)) (*pinpointemail.ListEmailIdentitiesOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListEmailIdentities")
	}

	var r0 *pinpointemail.ListEmailIdentitiesOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *pinpointemail.ListEmailIdentitiesInput, ...func(*pinpointemail.Options)) (*pinpointemail.ListEmailIdentitiesOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *pinpointemail.ListEmailIdentitiesInput, ...func(*pinpointemail.Options)) *pinpointemail.ListEmailIdentitiesOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*pinpointemail.ListEmailIdentitiesOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *pinpointemail.ListEmailIdentitiesInput, ...func(*pinpointemail.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListTagsForResource provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListTagsForResource(ctx context.Context, params *pinpointemail.ListTagsForResourceInput, optFns ...func(*pinpointemail.Options)) (*pinpointemail.ListTagsForResourceOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListTagsForResource")
	}

	var r0 *pinpointemail.ListTagsForResourceOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *pinpointemail.ListTagsForResourceInput, ...func(*pinpointemail.Options)) (*pinpointemail.ListTagsForResourceOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *pinpointemail.ListTagsForResourceInput, ...func(*pinpointemail.Options)) *pinpointemail.ListTagsForResourceOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*pinpointemail.ListTagsForResourceOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *pinpointemail.ListTagsForResourceInput, ...func(*pinpointemail.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Options provides a mock function with no fields
func (_m *IClient) Options() pinpointemail.Options {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Options")
	}

	var r0 pinpointemail.Options
	if rf, ok := ret.Get(0).(func() pinpointemail.Options); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(pinpointemail.Options)
	}

	return r0
}

// PutAccountDedicatedIpWarmupAttributes provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) PutAccountDedicatedIpWarmupAttributes(ctx context.Context, params *pinpointemail.PutAccountDedicatedIpWarmupAttributesInput, optFns ...func(*pinpointemail.Options)) (*pinpointemail.PutAccountDedicatedIpWarmupAttributesOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for PutAccountDedicatedIpWarmupAttributes")
	}

	var r0 *pinpointemail.PutAccountDedicatedIpWarmupAttributesOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *pinpointemail.PutAccountDedicatedIpWarmupAttributesInput, ...func(*pinpointemail.Options)) (*pinpointemail.PutAccountDedicatedIpWarmupAttributesOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *pinpointemail.PutAccountDedicatedIpWarmupAttributesInput, ...func(*pinpointemail.Options)) *pinpointemail.PutAccountDedicatedIpWarmupAttributesOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*pinpointemail.PutAccountDedicatedIpWarmupAttributesOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *pinpointemail.PutAccountDedicatedIpWarmupAttributesInput, ...func(*pinpointemail.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PutAccountSendingAttributes provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) PutAccountSendingAttributes(ctx context.Context, params *pinpointemail.PutAccountSendingAttributesInput, optFns ...func(*pinpointemail.Options)) (*pinpointemail.PutAccountSendingAttributesOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for PutAccountSendingAttributes")
	}

	var r0 *pinpointemail.PutAccountSendingAttributesOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *pinpointemail.PutAccountSendingAttributesInput, ...func(*pinpointemail.Options)) (*pinpointemail.PutAccountSendingAttributesOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *pinpointemail.PutAccountSendingAttributesInput, ...func(*pinpointemail.Options)) *pinpointemail.PutAccountSendingAttributesOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*pinpointemail.PutAccountSendingAttributesOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *pinpointemail.PutAccountSendingAttributesInput, ...func(*pinpointemail.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PutConfigurationSetDeliveryOptions provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) PutConfigurationSetDeliveryOptions(ctx context.Context, params *pinpointemail.PutConfigurationSetDeliveryOptionsInput, optFns ...func(*pinpointemail.Options)) (*pinpointemail.PutConfigurationSetDeliveryOptionsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for PutConfigurationSetDeliveryOptions")
	}

	var r0 *pinpointemail.PutConfigurationSetDeliveryOptionsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *pinpointemail.PutConfigurationSetDeliveryOptionsInput, ...func(*pinpointemail.Options)) (*pinpointemail.PutConfigurationSetDeliveryOptionsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *pinpointemail.PutConfigurationSetDeliveryOptionsInput, ...func(*pinpointemail.Options)) *pinpointemail.PutConfigurationSetDeliveryOptionsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*pinpointemail.PutConfigurationSetDeliveryOptionsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *pinpointemail.PutConfigurationSetDeliveryOptionsInput, ...func(*pinpointemail.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PutConfigurationSetReputationOptions provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) PutConfigurationSetReputationOptions(ctx context.Context, params *pinpointemail.PutConfigurationSetReputationOptionsInput, optFns ...func(*pinpointemail.Options)) (*pinpointemail.PutConfigurationSetReputationOptionsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for PutConfigurationSetReputationOptions")
	}

	var r0 *pinpointemail.PutConfigurationSetReputationOptionsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *pinpointemail.PutConfigurationSetReputationOptionsInput, ...func(*pinpointemail.Options)) (*pinpointemail.PutConfigurationSetReputationOptionsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *pinpointemail.PutConfigurationSetReputationOptionsInput, ...func(*pinpointemail.Options)) *pinpointemail.PutConfigurationSetReputationOptionsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*pinpointemail.PutConfigurationSetReputationOptionsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *pinpointemail.PutConfigurationSetReputationOptionsInput, ...func(*pinpointemail.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PutConfigurationSetSendingOptions provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) PutConfigurationSetSendingOptions(ctx context.Context, params *pinpointemail.PutConfigurationSetSendingOptionsInput, optFns ...func(*pinpointemail.Options)) (*pinpointemail.PutConfigurationSetSendingOptionsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for PutConfigurationSetSendingOptions")
	}

	var r0 *pinpointemail.PutConfigurationSetSendingOptionsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *pinpointemail.PutConfigurationSetSendingOptionsInput, ...func(*pinpointemail.Options)) (*pinpointemail.PutConfigurationSetSendingOptionsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *pinpointemail.PutConfigurationSetSendingOptionsInput, ...func(*pinpointemail.Options)) *pinpointemail.PutConfigurationSetSendingOptionsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*pinpointemail.PutConfigurationSetSendingOptionsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *pinpointemail.PutConfigurationSetSendingOptionsInput, ...func(*pinpointemail.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PutConfigurationSetTrackingOptions provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) PutConfigurationSetTrackingOptions(ctx context.Context, params *pinpointemail.PutConfigurationSetTrackingOptionsInput, optFns ...func(*pinpointemail.Options)) (*pinpointemail.PutConfigurationSetTrackingOptionsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for PutConfigurationSetTrackingOptions")
	}

	var r0 *pinpointemail.PutConfigurationSetTrackingOptionsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *pinpointemail.PutConfigurationSetTrackingOptionsInput, ...func(*pinpointemail.Options)) (*pinpointemail.PutConfigurationSetTrackingOptionsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *pinpointemail.PutConfigurationSetTrackingOptionsInput, ...func(*pinpointemail.Options)) *pinpointemail.PutConfigurationSetTrackingOptionsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*pinpointemail.PutConfigurationSetTrackingOptionsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *pinpointemail.PutConfigurationSetTrackingOptionsInput, ...func(*pinpointemail.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PutDedicatedIpInPool provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) PutDedicatedIpInPool(ctx context.Context, params *pinpointemail.PutDedicatedIpInPoolInput, optFns ...func(*pinpointemail.Options)) (*pinpointemail.PutDedicatedIpInPoolOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for PutDedicatedIpInPool")
	}

	var r0 *pinpointemail.PutDedicatedIpInPoolOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *pinpointemail.PutDedicatedIpInPoolInput, ...func(*pinpointemail.Options)) (*pinpointemail.PutDedicatedIpInPoolOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *pinpointemail.PutDedicatedIpInPoolInput, ...func(*pinpointemail.Options)) *pinpointemail.PutDedicatedIpInPoolOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*pinpointemail.PutDedicatedIpInPoolOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *pinpointemail.PutDedicatedIpInPoolInput, ...func(*pinpointemail.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PutDedicatedIpWarmupAttributes provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) PutDedicatedIpWarmupAttributes(ctx context.Context, params *pinpointemail.PutDedicatedIpWarmupAttributesInput, optFns ...func(*pinpointemail.Options)) (*pinpointemail.PutDedicatedIpWarmupAttributesOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for PutDedicatedIpWarmupAttributes")
	}

	var r0 *pinpointemail.PutDedicatedIpWarmupAttributesOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *pinpointemail.PutDedicatedIpWarmupAttributesInput, ...func(*pinpointemail.Options)) (*pinpointemail.PutDedicatedIpWarmupAttributesOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *pinpointemail.PutDedicatedIpWarmupAttributesInput, ...func(*pinpointemail.Options)) *pinpointemail.PutDedicatedIpWarmupAttributesOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*pinpointemail.PutDedicatedIpWarmupAttributesOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *pinpointemail.PutDedicatedIpWarmupAttributesInput, ...func(*pinpointemail.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PutDeliverabilityDashboardOption provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) PutDeliverabilityDashboardOption(ctx context.Context, params *pinpointemail.PutDeliverabilityDashboardOptionInput, optFns ...func(*pinpointemail.Options)) (*pinpointemail.PutDeliverabilityDashboardOptionOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for PutDeliverabilityDashboardOption")
	}

	var r0 *pinpointemail.PutDeliverabilityDashboardOptionOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *pinpointemail.PutDeliverabilityDashboardOptionInput, ...func(*pinpointemail.Options)) (*pinpointemail.PutDeliverabilityDashboardOptionOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *pinpointemail.PutDeliverabilityDashboardOptionInput, ...func(*pinpointemail.Options)) *pinpointemail.PutDeliverabilityDashboardOptionOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*pinpointemail.PutDeliverabilityDashboardOptionOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *pinpointemail.PutDeliverabilityDashboardOptionInput, ...func(*pinpointemail.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PutEmailIdentityDkimAttributes provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) PutEmailIdentityDkimAttributes(ctx context.Context, params *pinpointemail.PutEmailIdentityDkimAttributesInput, optFns ...func(*pinpointemail.Options)) (*pinpointemail.PutEmailIdentityDkimAttributesOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for PutEmailIdentityDkimAttributes")
	}

	var r0 *pinpointemail.PutEmailIdentityDkimAttributesOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *pinpointemail.PutEmailIdentityDkimAttributesInput, ...func(*pinpointemail.Options)) (*pinpointemail.PutEmailIdentityDkimAttributesOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *pinpointemail.PutEmailIdentityDkimAttributesInput, ...func(*pinpointemail.Options)) *pinpointemail.PutEmailIdentityDkimAttributesOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*pinpointemail.PutEmailIdentityDkimAttributesOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *pinpointemail.PutEmailIdentityDkimAttributesInput, ...func(*pinpointemail.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PutEmailIdentityFeedbackAttributes provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) PutEmailIdentityFeedbackAttributes(ctx context.Context, params *pinpointemail.PutEmailIdentityFeedbackAttributesInput, optFns ...func(*pinpointemail.Options)) (*pinpointemail.PutEmailIdentityFeedbackAttributesOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for PutEmailIdentityFeedbackAttributes")
	}

	var r0 *pinpointemail.PutEmailIdentityFeedbackAttributesOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *pinpointemail.PutEmailIdentityFeedbackAttributesInput, ...func(*pinpointemail.Options)) (*pinpointemail.PutEmailIdentityFeedbackAttributesOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *pinpointemail.PutEmailIdentityFeedbackAttributesInput, ...func(*pinpointemail.Options)) *pinpointemail.PutEmailIdentityFeedbackAttributesOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*pinpointemail.PutEmailIdentityFeedbackAttributesOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *pinpointemail.PutEmailIdentityFeedbackAttributesInput, ...func(*pinpointemail.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PutEmailIdentityMailFromAttributes provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) PutEmailIdentityMailFromAttributes(ctx context.Context, params *pinpointemail.PutEmailIdentityMailFromAttributesInput, optFns ...func(*pinpointemail.Options)) (*pinpointemail.PutEmailIdentityMailFromAttributesOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for PutEmailIdentityMailFromAttributes")
	}

	var r0 *pinpointemail.PutEmailIdentityMailFromAttributesOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *pinpointemail.PutEmailIdentityMailFromAttributesInput, ...func(*pinpointemail.Options)) (*pinpointemail.PutEmailIdentityMailFromAttributesOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *pinpointemail.PutEmailIdentityMailFromAttributesInput, ...func(*pinpointemail.Options)) *pinpointemail.PutEmailIdentityMailFromAttributesOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*pinpointemail.PutEmailIdentityMailFromAttributesOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *pinpointemail.PutEmailIdentityMailFromAttributesInput, ...func(*pinpointemail.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SendEmail provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) SendEmail(ctx context.Context, params *pinpointemail.SendEmailInput, optFns ...func(*pinpointemail.Options)) (*pinpointemail.SendEmailOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for SendEmail")
	}

	var r0 *pinpointemail.SendEmailOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *pinpointemail.SendEmailInput, ...func(*pinpointemail.Options)) (*pinpointemail.SendEmailOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *pinpointemail.SendEmailInput, ...func(*pinpointemail.Options)) *pinpointemail.SendEmailOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*pinpointemail.SendEmailOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *pinpointemail.SendEmailInput, ...func(*pinpointemail.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// TagResource provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) TagResource(ctx context.Context, params *pinpointemail.TagResourceInput, optFns ...func(*pinpointemail.Options)) (*pinpointemail.TagResourceOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for TagResource")
	}

	var r0 *pinpointemail.TagResourceOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *pinpointemail.TagResourceInput, ...func(*pinpointemail.Options)) (*pinpointemail.TagResourceOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *pinpointemail.TagResourceInput, ...func(*pinpointemail.Options)) *pinpointemail.TagResourceOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*pinpointemail.TagResourceOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *pinpointemail.TagResourceInput, ...func(*pinpointemail.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UntagResource provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UntagResource(ctx context.Context, params *pinpointemail.UntagResourceInput, optFns ...func(*pinpointemail.Options)) (*pinpointemail.UntagResourceOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UntagResource")
	}

	var r0 *pinpointemail.UntagResourceOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *pinpointemail.UntagResourceInput, ...func(*pinpointemail.Options)) (*pinpointemail.UntagResourceOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *pinpointemail.UntagResourceInput, ...func(*pinpointemail.Options)) *pinpointemail.UntagResourceOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*pinpointemail.UntagResourceOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *pinpointemail.UntagResourceInput, ...func(*pinpointemail.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateConfigurationSetEventDestination provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UpdateConfigurationSetEventDestination(ctx context.Context, params *pinpointemail.UpdateConfigurationSetEventDestinationInput, optFns ...func(*pinpointemail.Options)) (*pinpointemail.UpdateConfigurationSetEventDestinationOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateConfigurationSetEventDestination")
	}

	var r0 *pinpointemail.UpdateConfigurationSetEventDestinationOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *pinpointemail.UpdateConfigurationSetEventDestinationInput, ...func(*pinpointemail.Options)) (*pinpointemail.UpdateConfigurationSetEventDestinationOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *pinpointemail.UpdateConfigurationSetEventDestinationInput, ...func(*pinpointemail.Options)) *pinpointemail.UpdateConfigurationSetEventDestinationOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*pinpointemail.UpdateConfigurationSetEventDestinationOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *pinpointemail.UpdateConfigurationSetEventDestinationInput, ...func(*pinpointemail.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewIClient creates a new instance of IClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewIClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *IClient {
	mock := &IClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
