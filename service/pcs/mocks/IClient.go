// Code generated by mockery v2.53.4. DO NOT EDIT.

package mocks

import (
	context "context"

	pcs "github.com/aws/aws-sdk-go-v2/service/pcs"
	mock "github.com/stretchr/testify/mock"
)

// IClient is an autogenerated mock type for the IClient type
type IClient struct {
	mock.Mock
}

// CreateCluster provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CreateCluster(ctx context.Context, params *pcs.CreateClusterInput, optFns ...func(*pcs.Options)) (*pcs.CreateClusterOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateCluster")
	}

	var r0 *pcs.CreateClusterOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *pcs.CreateClusterInput, ...func(*pcs.Options)) (*pcs.CreateClusterOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *pcs.CreateClusterInput, ...func(*pcs.Options)) *pcs.CreateClusterOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*pcs.CreateClusterOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *pcs.CreateClusterInput, ...func(*pcs.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateComputeNodeGroup provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CreateComputeNodeGroup(ctx context.Context, params *pcs.CreateComputeNodeGroupInput, optFns ...func(*pcs.Options)) (*pcs.CreateComputeNodeGroupOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateComputeNodeGroup")
	}

	var r0 *pcs.CreateComputeNodeGroupOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *pcs.CreateComputeNodeGroupInput, ...func(*pcs.Options)) (*pcs.CreateComputeNodeGroupOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *pcs.CreateComputeNodeGroupInput, ...func(*pcs.Options)) *pcs.CreateComputeNodeGroupOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*pcs.CreateComputeNodeGroupOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *pcs.CreateComputeNodeGroupInput, ...func(*pcs.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateQueue provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CreateQueue(ctx context.Context, params *pcs.CreateQueueInput, optFns ...func(*pcs.Options)) (*pcs.CreateQueueOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateQueue")
	}

	var r0 *pcs.CreateQueueOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *pcs.CreateQueueInput, ...func(*pcs.Options)) (*pcs.CreateQueueOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *pcs.CreateQueueInput, ...func(*pcs.Options)) *pcs.CreateQueueOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*pcs.CreateQueueOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *pcs.CreateQueueInput, ...func(*pcs.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteCluster provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteCluster(ctx context.Context, params *pcs.DeleteClusterInput, optFns ...func(*pcs.Options)) (*pcs.DeleteClusterOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteCluster")
	}

	var r0 *pcs.DeleteClusterOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *pcs.DeleteClusterInput, ...func(*pcs.Options)) (*pcs.DeleteClusterOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *pcs.DeleteClusterInput, ...func(*pcs.Options)) *pcs.DeleteClusterOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*pcs.DeleteClusterOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *pcs.DeleteClusterInput, ...func(*pcs.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteComputeNodeGroup provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteComputeNodeGroup(ctx context.Context, params *pcs.DeleteComputeNodeGroupInput, optFns ...func(*pcs.Options)) (*pcs.DeleteComputeNodeGroupOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteComputeNodeGroup")
	}

	var r0 *pcs.DeleteComputeNodeGroupOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *pcs.DeleteComputeNodeGroupInput, ...func(*pcs.Options)) (*pcs.DeleteComputeNodeGroupOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *pcs.DeleteComputeNodeGroupInput, ...func(*pcs.Options)) *pcs.DeleteComputeNodeGroupOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*pcs.DeleteComputeNodeGroupOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *pcs.DeleteComputeNodeGroupInput, ...func(*pcs.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteQueue provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteQueue(ctx context.Context, params *pcs.DeleteQueueInput, optFns ...func(*pcs.Options)) (*pcs.DeleteQueueOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteQueue")
	}

	var r0 *pcs.DeleteQueueOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *pcs.DeleteQueueInput, ...func(*pcs.Options)) (*pcs.DeleteQueueOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *pcs.DeleteQueueInput, ...func(*pcs.Options)) *pcs.DeleteQueueOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*pcs.DeleteQueueOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *pcs.DeleteQueueInput, ...func(*pcs.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetCluster provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetCluster(ctx context.Context, params *pcs.GetClusterInput, optFns ...func(*pcs.Options)) (*pcs.GetClusterOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetCluster")
	}

	var r0 *pcs.GetClusterOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *pcs.GetClusterInput, ...func(*pcs.Options)) (*pcs.GetClusterOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *pcs.GetClusterInput, ...func(*pcs.Options)) *pcs.GetClusterOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*pcs.GetClusterOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *pcs.GetClusterInput, ...func(*pcs.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetComputeNodeGroup provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetComputeNodeGroup(ctx context.Context, params *pcs.GetComputeNodeGroupInput, optFns ...func(*pcs.Options)) (*pcs.GetComputeNodeGroupOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetComputeNodeGroup")
	}

	var r0 *pcs.GetComputeNodeGroupOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *pcs.GetComputeNodeGroupInput, ...func(*pcs.Options)) (*pcs.GetComputeNodeGroupOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *pcs.GetComputeNodeGroupInput, ...func(*pcs.Options)) *pcs.GetComputeNodeGroupOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*pcs.GetComputeNodeGroupOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *pcs.GetComputeNodeGroupInput, ...func(*pcs.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetQueue provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetQueue(ctx context.Context, params *pcs.GetQueueInput, optFns ...func(*pcs.Options)) (*pcs.GetQueueOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetQueue")
	}

	var r0 *pcs.GetQueueOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *pcs.GetQueueInput, ...func(*pcs.Options)) (*pcs.GetQueueOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *pcs.GetQueueInput, ...func(*pcs.Options)) *pcs.GetQueueOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*pcs.GetQueueOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *pcs.GetQueueInput, ...func(*pcs.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListClusters provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListClusters(ctx context.Context, params *pcs.ListClustersInput, optFns ...func(*pcs.Options)) (*pcs.ListClustersOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListClusters")
	}

	var r0 *pcs.ListClustersOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *pcs.ListClustersInput, ...func(*pcs.Options)) (*pcs.ListClustersOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *pcs.ListClustersInput, ...func(*pcs.Options)) *pcs.ListClustersOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*pcs.ListClustersOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *pcs.ListClustersInput, ...func(*pcs.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListComputeNodeGroups provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListComputeNodeGroups(ctx context.Context, params *pcs.ListComputeNodeGroupsInput, optFns ...func(*pcs.Options)) (*pcs.ListComputeNodeGroupsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListComputeNodeGroups")
	}

	var r0 *pcs.ListComputeNodeGroupsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *pcs.ListComputeNodeGroupsInput, ...func(*pcs.Options)) (*pcs.ListComputeNodeGroupsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *pcs.ListComputeNodeGroupsInput, ...func(*pcs.Options)) *pcs.ListComputeNodeGroupsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*pcs.ListComputeNodeGroupsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *pcs.ListComputeNodeGroupsInput, ...func(*pcs.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListQueues provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListQueues(ctx context.Context, params *pcs.ListQueuesInput, optFns ...func(*pcs.Options)) (*pcs.ListQueuesOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListQueues")
	}

	var r0 *pcs.ListQueuesOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *pcs.ListQueuesInput, ...func(*pcs.Options)) (*pcs.ListQueuesOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *pcs.ListQueuesInput, ...func(*pcs.Options)) *pcs.ListQueuesOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*pcs.ListQueuesOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *pcs.ListQueuesInput, ...func(*pcs.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListTagsForResource provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListTagsForResource(ctx context.Context, params *pcs.ListTagsForResourceInput, optFns ...func(*pcs.Options)) (*pcs.ListTagsForResourceOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListTagsForResource")
	}

	var r0 *pcs.ListTagsForResourceOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *pcs.ListTagsForResourceInput, ...func(*pcs.Options)) (*pcs.ListTagsForResourceOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *pcs.ListTagsForResourceInput, ...func(*pcs.Options)) *pcs.ListTagsForResourceOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*pcs.ListTagsForResourceOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *pcs.ListTagsForResourceInput, ...func(*pcs.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Options provides a mock function with no fields
func (_m *IClient) Options() pcs.Options {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Options")
	}

	var r0 pcs.Options
	if rf, ok := ret.Get(0).(func() pcs.Options); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(pcs.Options)
	}

	return r0
}

// RegisterComputeNodeGroupInstance provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) RegisterComputeNodeGroupInstance(ctx context.Context, params *pcs.RegisterComputeNodeGroupInstanceInput, optFns ...func(*pcs.Options)) (*pcs.RegisterComputeNodeGroupInstanceOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for RegisterComputeNodeGroupInstance")
	}

	var r0 *pcs.RegisterComputeNodeGroupInstanceOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *pcs.RegisterComputeNodeGroupInstanceInput, ...func(*pcs.Options)) (*pcs.RegisterComputeNodeGroupInstanceOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *pcs.RegisterComputeNodeGroupInstanceInput, ...func(*pcs.Options)) *pcs.RegisterComputeNodeGroupInstanceOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*pcs.RegisterComputeNodeGroupInstanceOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *pcs.RegisterComputeNodeGroupInstanceInput, ...func(*pcs.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// TagResource provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) TagResource(ctx context.Context, params *pcs.TagResourceInput, optFns ...func(*pcs.Options)) (*pcs.TagResourceOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for TagResource")
	}

	var r0 *pcs.TagResourceOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *pcs.TagResourceInput, ...func(*pcs.Options)) (*pcs.TagResourceOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *pcs.TagResourceInput, ...func(*pcs.Options)) *pcs.TagResourceOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*pcs.TagResourceOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *pcs.TagResourceInput, ...func(*pcs.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UntagResource provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UntagResource(ctx context.Context, params *pcs.UntagResourceInput, optFns ...func(*pcs.Options)) (*pcs.UntagResourceOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UntagResource")
	}

	var r0 *pcs.UntagResourceOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *pcs.UntagResourceInput, ...func(*pcs.Options)) (*pcs.UntagResourceOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *pcs.UntagResourceInput, ...func(*pcs.Options)) *pcs.UntagResourceOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*pcs.UntagResourceOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *pcs.UntagResourceInput, ...func(*pcs.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateComputeNodeGroup provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UpdateComputeNodeGroup(ctx context.Context, params *pcs.UpdateComputeNodeGroupInput, optFns ...func(*pcs.Options)) (*pcs.UpdateComputeNodeGroupOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateComputeNodeGroup")
	}

	var r0 *pcs.UpdateComputeNodeGroupOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *pcs.UpdateComputeNodeGroupInput, ...func(*pcs.Options)) (*pcs.UpdateComputeNodeGroupOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *pcs.UpdateComputeNodeGroupInput, ...func(*pcs.Options)) *pcs.UpdateComputeNodeGroupOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*pcs.UpdateComputeNodeGroupOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *pcs.UpdateComputeNodeGroupInput, ...func(*pcs.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateQueue provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UpdateQueue(ctx context.Context, params *pcs.UpdateQueueInput, optFns ...func(*pcs.Options)) (*pcs.UpdateQueueOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateQueue")
	}

	var r0 *pcs.UpdateQueueOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *pcs.UpdateQueueInput, ...func(*pcs.Options)) (*pcs.UpdateQueueOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *pcs.UpdateQueueInput, ...func(*pcs.Options)) *pcs.UpdateQueueOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*pcs.UpdateQueueOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *pcs.UpdateQueueInput, ...func(*pcs.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewIClient creates a new instance of IClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewIClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *IClient {
	mock := &IClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
