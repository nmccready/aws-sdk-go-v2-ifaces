// Code generated by mockery v2.39.2. DO NOT EDIT.

package mocks

import (
	context "context"

	iotsecuretunneling "github.com/aws/aws-sdk-go-v2/service/iotsecuretunneling"
	mock "github.com/stretchr/testify/mock"
)

// IClient is an autogenerated mock type for the IClient type
type IClient struct {
	mock.Mock
}

// CloseTunnel provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CloseTunnel(ctx context.Context, params *iotsecuretunneling.CloseTunnelInput, optFns ...func(*iotsecuretunneling.Options)) (*iotsecuretunneling.CloseTunnelOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CloseTunnel")
	}

	var r0 *iotsecuretunneling.CloseTunnelOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *iotsecuretunneling.CloseTunnelInput, ...func(*iotsecuretunneling.Options)) (*iotsecuretunneling.CloseTunnelOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *iotsecuretunneling.CloseTunnelInput, ...func(*iotsecuretunneling.Options)) *iotsecuretunneling.CloseTunnelOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*iotsecuretunneling.CloseTunnelOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *iotsecuretunneling.CloseTunnelInput, ...func(*iotsecuretunneling.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeTunnel provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DescribeTunnel(ctx context.Context, params *iotsecuretunneling.DescribeTunnelInput, optFns ...func(*iotsecuretunneling.Options)) (*iotsecuretunneling.DescribeTunnelOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DescribeTunnel")
	}

	var r0 *iotsecuretunneling.DescribeTunnelOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *iotsecuretunneling.DescribeTunnelInput, ...func(*iotsecuretunneling.Options)) (*iotsecuretunneling.DescribeTunnelOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *iotsecuretunneling.DescribeTunnelInput, ...func(*iotsecuretunneling.Options)) *iotsecuretunneling.DescribeTunnelOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*iotsecuretunneling.DescribeTunnelOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *iotsecuretunneling.DescribeTunnelInput, ...func(*iotsecuretunneling.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListTagsForResource provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListTagsForResource(ctx context.Context, params *iotsecuretunneling.ListTagsForResourceInput, optFns ...func(*iotsecuretunneling.Options)) (*iotsecuretunneling.ListTagsForResourceOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListTagsForResource")
	}

	var r0 *iotsecuretunneling.ListTagsForResourceOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *iotsecuretunneling.ListTagsForResourceInput, ...func(*iotsecuretunneling.Options)) (*iotsecuretunneling.ListTagsForResourceOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *iotsecuretunneling.ListTagsForResourceInput, ...func(*iotsecuretunneling.Options)) *iotsecuretunneling.ListTagsForResourceOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*iotsecuretunneling.ListTagsForResourceOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *iotsecuretunneling.ListTagsForResourceInput, ...func(*iotsecuretunneling.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListTunnels provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListTunnels(ctx context.Context, params *iotsecuretunneling.ListTunnelsInput, optFns ...func(*iotsecuretunneling.Options)) (*iotsecuretunneling.ListTunnelsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListTunnels")
	}

	var r0 *iotsecuretunneling.ListTunnelsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *iotsecuretunneling.ListTunnelsInput, ...func(*iotsecuretunneling.Options)) (*iotsecuretunneling.ListTunnelsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *iotsecuretunneling.ListTunnelsInput, ...func(*iotsecuretunneling.Options)) *iotsecuretunneling.ListTunnelsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*iotsecuretunneling.ListTunnelsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *iotsecuretunneling.ListTunnelsInput, ...func(*iotsecuretunneling.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// OpenTunnel provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) OpenTunnel(ctx context.Context, params *iotsecuretunneling.OpenTunnelInput, optFns ...func(*iotsecuretunneling.Options)) (*iotsecuretunneling.OpenTunnelOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for OpenTunnel")
	}

	var r0 *iotsecuretunneling.OpenTunnelOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *iotsecuretunneling.OpenTunnelInput, ...func(*iotsecuretunneling.Options)) (*iotsecuretunneling.OpenTunnelOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *iotsecuretunneling.OpenTunnelInput, ...func(*iotsecuretunneling.Options)) *iotsecuretunneling.OpenTunnelOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*iotsecuretunneling.OpenTunnelOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *iotsecuretunneling.OpenTunnelInput, ...func(*iotsecuretunneling.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Options provides a mock function with given fields:
func (_m *IClient) Options() iotsecuretunneling.Options {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Options")
	}

	var r0 iotsecuretunneling.Options
	if rf, ok := ret.Get(0).(func() iotsecuretunneling.Options); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(iotsecuretunneling.Options)
	}

	return r0
}

// RotateTunnelAccessToken provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) RotateTunnelAccessToken(ctx context.Context, params *iotsecuretunneling.RotateTunnelAccessTokenInput, optFns ...func(*iotsecuretunneling.Options)) (*iotsecuretunneling.RotateTunnelAccessTokenOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for RotateTunnelAccessToken")
	}

	var r0 *iotsecuretunneling.RotateTunnelAccessTokenOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *iotsecuretunneling.RotateTunnelAccessTokenInput, ...func(*iotsecuretunneling.Options)) (*iotsecuretunneling.RotateTunnelAccessTokenOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *iotsecuretunneling.RotateTunnelAccessTokenInput, ...func(*iotsecuretunneling.Options)) *iotsecuretunneling.RotateTunnelAccessTokenOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*iotsecuretunneling.RotateTunnelAccessTokenOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *iotsecuretunneling.RotateTunnelAccessTokenInput, ...func(*iotsecuretunneling.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// TagResource provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) TagResource(ctx context.Context, params *iotsecuretunneling.TagResourceInput, optFns ...func(*iotsecuretunneling.Options)) (*iotsecuretunneling.TagResourceOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for TagResource")
	}

	var r0 *iotsecuretunneling.TagResourceOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *iotsecuretunneling.TagResourceInput, ...func(*iotsecuretunneling.Options)) (*iotsecuretunneling.TagResourceOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *iotsecuretunneling.TagResourceInput, ...func(*iotsecuretunneling.Options)) *iotsecuretunneling.TagResourceOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*iotsecuretunneling.TagResourceOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *iotsecuretunneling.TagResourceInput, ...func(*iotsecuretunneling.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UntagResource provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UntagResource(ctx context.Context, params *iotsecuretunneling.UntagResourceInput, optFns ...func(*iotsecuretunneling.Options)) (*iotsecuretunneling.UntagResourceOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UntagResource")
	}

	var r0 *iotsecuretunneling.UntagResourceOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *iotsecuretunneling.UntagResourceInput, ...func(*iotsecuretunneling.Options)) (*iotsecuretunneling.UntagResourceOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *iotsecuretunneling.UntagResourceInput, ...func(*iotsecuretunneling.Options)) *iotsecuretunneling.UntagResourceOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*iotsecuretunneling.UntagResourceOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *iotsecuretunneling.UntagResourceInput, ...func(*iotsecuretunneling.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewIClient creates a new instance of IClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewIClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *IClient {
	mock := &IClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
