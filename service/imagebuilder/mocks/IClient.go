// Code generated by mockery v2.43.2. DO NOT EDIT.

package mocks

import (
	context "context"

	imagebuilder "github.com/aws/aws-sdk-go-v2/service/imagebuilder"

	mock "github.com/stretchr/testify/mock"
)

// IClient is an autogenerated mock type for the IClient type
type IClient struct {
	mock.Mock
}

// CancelImageCreation provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CancelImageCreation(ctx context.Context, params *imagebuilder.CancelImageCreationInput, optFns ...func(*imagebuilder.Options)) (*imagebuilder.CancelImageCreationOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CancelImageCreation")
	}

	var r0 *imagebuilder.CancelImageCreationOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *imagebuilder.CancelImageCreationInput, ...func(*imagebuilder.Options)) (*imagebuilder.CancelImageCreationOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *imagebuilder.CancelImageCreationInput, ...func(*imagebuilder.Options)) *imagebuilder.CancelImageCreationOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*imagebuilder.CancelImageCreationOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *imagebuilder.CancelImageCreationInput, ...func(*imagebuilder.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CancelLifecycleExecution provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CancelLifecycleExecution(ctx context.Context, params *imagebuilder.CancelLifecycleExecutionInput, optFns ...func(*imagebuilder.Options)) (*imagebuilder.CancelLifecycleExecutionOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CancelLifecycleExecution")
	}

	var r0 *imagebuilder.CancelLifecycleExecutionOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *imagebuilder.CancelLifecycleExecutionInput, ...func(*imagebuilder.Options)) (*imagebuilder.CancelLifecycleExecutionOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *imagebuilder.CancelLifecycleExecutionInput, ...func(*imagebuilder.Options)) *imagebuilder.CancelLifecycleExecutionOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*imagebuilder.CancelLifecycleExecutionOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *imagebuilder.CancelLifecycleExecutionInput, ...func(*imagebuilder.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateComponent provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CreateComponent(ctx context.Context, params *imagebuilder.CreateComponentInput, optFns ...func(*imagebuilder.Options)) (*imagebuilder.CreateComponentOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateComponent")
	}

	var r0 *imagebuilder.CreateComponentOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *imagebuilder.CreateComponentInput, ...func(*imagebuilder.Options)) (*imagebuilder.CreateComponentOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *imagebuilder.CreateComponentInput, ...func(*imagebuilder.Options)) *imagebuilder.CreateComponentOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*imagebuilder.CreateComponentOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *imagebuilder.CreateComponentInput, ...func(*imagebuilder.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateContainerRecipe provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CreateContainerRecipe(ctx context.Context, params *imagebuilder.CreateContainerRecipeInput, optFns ...func(*imagebuilder.Options)) (*imagebuilder.CreateContainerRecipeOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateContainerRecipe")
	}

	var r0 *imagebuilder.CreateContainerRecipeOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *imagebuilder.CreateContainerRecipeInput, ...func(*imagebuilder.Options)) (*imagebuilder.CreateContainerRecipeOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *imagebuilder.CreateContainerRecipeInput, ...func(*imagebuilder.Options)) *imagebuilder.CreateContainerRecipeOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*imagebuilder.CreateContainerRecipeOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *imagebuilder.CreateContainerRecipeInput, ...func(*imagebuilder.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateDistributionConfiguration provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CreateDistributionConfiguration(ctx context.Context, params *imagebuilder.CreateDistributionConfigurationInput, optFns ...func(*imagebuilder.Options)) (*imagebuilder.CreateDistributionConfigurationOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateDistributionConfiguration")
	}

	var r0 *imagebuilder.CreateDistributionConfigurationOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *imagebuilder.CreateDistributionConfigurationInput, ...func(*imagebuilder.Options)) (*imagebuilder.CreateDistributionConfigurationOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *imagebuilder.CreateDistributionConfigurationInput, ...func(*imagebuilder.Options)) *imagebuilder.CreateDistributionConfigurationOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*imagebuilder.CreateDistributionConfigurationOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *imagebuilder.CreateDistributionConfigurationInput, ...func(*imagebuilder.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateImage provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CreateImage(ctx context.Context, params *imagebuilder.CreateImageInput, optFns ...func(*imagebuilder.Options)) (*imagebuilder.CreateImageOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateImage")
	}

	var r0 *imagebuilder.CreateImageOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *imagebuilder.CreateImageInput, ...func(*imagebuilder.Options)) (*imagebuilder.CreateImageOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *imagebuilder.CreateImageInput, ...func(*imagebuilder.Options)) *imagebuilder.CreateImageOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*imagebuilder.CreateImageOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *imagebuilder.CreateImageInput, ...func(*imagebuilder.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateImagePipeline provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CreateImagePipeline(ctx context.Context, params *imagebuilder.CreateImagePipelineInput, optFns ...func(*imagebuilder.Options)) (*imagebuilder.CreateImagePipelineOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateImagePipeline")
	}

	var r0 *imagebuilder.CreateImagePipelineOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *imagebuilder.CreateImagePipelineInput, ...func(*imagebuilder.Options)) (*imagebuilder.CreateImagePipelineOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *imagebuilder.CreateImagePipelineInput, ...func(*imagebuilder.Options)) *imagebuilder.CreateImagePipelineOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*imagebuilder.CreateImagePipelineOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *imagebuilder.CreateImagePipelineInput, ...func(*imagebuilder.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateImageRecipe provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CreateImageRecipe(ctx context.Context, params *imagebuilder.CreateImageRecipeInput, optFns ...func(*imagebuilder.Options)) (*imagebuilder.CreateImageRecipeOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateImageRecipe")
	}

	var r0 *imagebuilder.CreateImageRecipeOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *imagebuilder.CreateImageRecipeInput, ...func(*imagebuilder.Options)) (*imagebuilder.CreateImageRecipeOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *imagebuilder.CreateImageRecipeInput, ...func(*imagebuilder.Options)) *imagebuilder.CreateImageRecipeOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*imagebuilder.CreateImageRecipeOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *imagebuilder.CreateImageRecipeInput, ...func(*imagebuilder.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateInfrastructureConfiguration provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CreateInfrastructureConfiguration(ctx context.Context, params *imagebuilder.CreateInfrastructureConfigurationInput, optFns ...func(*imagebuilder.Options)) (*imagebuilder.CreateInfrastructureConfigurationOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateInfrastructureConfiguration")
	}

	var r0 *imagebuilder.CreateInfrastructureConfigurationOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *imagebuilder.CreateInfrastructureConfigurationInput, ...func(*imagebuilder.Options)) (*imagebuilder.CreateInfrastructureConfigurationOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *imagebuilder.CreateInfrastructureConfigurationInput, ...func(*imagebuilder.Options)) *imagebuilder.CreateInfrastructureConfigurationOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*imagebuilder.CreateInfrastructureConfigurationOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *imagebuilder.CreateInfrastructureConfigurationInput, ...func(*imagebuilder.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateLifecyclePolicy provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CreateLifecyclePolicy(ctx context.Context, params *imagebuilder.CreateLifecyclePolicyInput, optFns ...func(*imagebuilder.Options)) (*imagebuilder.CreateLifecyclePolicyOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateLifecyclePolicy")
	}

	var r0 *imagebuilder.CreateLifecyclePolicyOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *imagebuilder.CreateLifecyclePolicyInput, ...func(*imagebuilder.Options)) (*imagebuilder.CreateLifecyclePolicyOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *imagebuilder.CreateLifecyclePolicyInput, ...func(*imagebuilder.Options)) *imagebuilder.CreateLifecyclePolicyOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*imagebuilder.CreateLifecyclePolicyOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *imagebuilder.CreateLifecyclePolicyInput, ...func(*imagebuilder.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateWorkflow provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CreateWorkflow(ctx context.Context, params *imagebuilder.CreateWorkflowInput, optFns ...func(*imagebuilder.Options)) (*imagebuilder.CreateWorkflowOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateWorkflow")
	}

	var r0 *imagebuilder.CreateWorkflowOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *imagebuilder.CreateWorkflowInput, ...func(*imagebuilder.Options)) (*imagebuilder.CreateWorkflowOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *imagebuilder.CreateWorkflowInput, ...func(*imagebuilder.Options)) *imagebuilder.CreateWorkflowOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*imagebuilder.CreateWorkflowOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *imagebuilder.CreateWorkflowInput, ...func(*imagebuilder.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteComponent provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteComponent(ctx context.Context, params *imagebuilder.DeleteComponentInput, optFns ...func(*imagebuilder.Options)) (*imagebuilder.DeleteComponentOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteComponent")
	}

	var r0 *imagebuilder.DeleteComponentOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *imagebuilder.DeleteComponentInput, ...func(*imagebuilder.Options)) (*imagebuilder.DeleteComponentOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *imagebuilder.DeleteComponentInput, ...func(*imagebuilder.Options)) *imagebuilder.DeleteComponentOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*imagebuilder.DeleteComponentOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *imagebuilder.DeleteComponentInput, ...func(*imagebuilder.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteContainerRecipe provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteContainerRecipe(ctx context.Context, params *imagebuilder.DeleteContainerRecipeInput, optFns ...func(*imagebuilder.Options)) (*imagebuilder.DeleteContainerRecipeOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteContainerRecipe")
	}

	var r0 *imagebuilder.DeleteContainerRecipeOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *imagebuilder.DeleteContainerRecipeInput, ...func(*imagebuilder.Options)) (*imagebuilder.DeleteContainerRecipeOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *imagebuilder.DeleteContainerRecipeInput, ...func(*imagebuilder.Options)) *imagebuilder.DeleteContainerRecipeOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*imagebuilder.DeleteContainerRecipeOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *imagebuilder.DeleteContainerRecipeInput, ...func(*imagebuilder.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteDistributionConfiguration provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteDistributionConfiguration(ctx context.Context, params *imagebuilder.DeleteDistributionConfigurationInput, optFns ...func(*imagebuilder.Options)) (*imagebuilder.DeleteDistributionConfigurationOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteDistributionConfiguration")
	}

	var r0 *imagebuilder.DeleteDistributionConfigurationOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *imagebuilder.DeleteDistributionConfigurationInput, ...func(*imagebuilder.Options)) (*imagebuilder.DeleteDistributionConfigurationOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *imagebuilder.DeleteDistributionConfigurationInput, ...func(*imagebuilder.Options)) *imagebuilder.DeleteDistributionConfigurationOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*imagebuilder.DeleteDistributionConfigurationOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *imagebuilder.DeleteDistributionConfigurationInput, ...func(*imagebuilder.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteImage provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteImage(ctx context.Context, params *imagebuilder.DeleteImageInput, optFns ...func(*imagebuilder.Options)) (*imagebuilder.DeleteImageOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteImage")
	}

	var r0 *imagebuilder.DeleteImageOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *imagebuilder.DeleteImageInput, ...func(*imagebuilder.Options)) (*imagebuilder.DeleteImageOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *imagebuilder.DeleteImageInput, ...func(*imagebuilder.Options)) *imagebuilder.DeleteImageOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*imagebuilder.DeleteImageOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *imagebuilder.DeleteImageInput, ...func(*imagebuilder.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteImagePipeline provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteImagePipeline(ctx context.Context, params *imagebuilder.DeleteImagePipelineInput, optFns ...func(*imagebuilder.Options)) (*imagebuilder.DeleteImagePipelineOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteImagePipeline")
	}

	var r0 *imagebuilder.DeleteImagePipelineOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *imagebuilder.DeleteImagePipelineInput, ...func(*imagebuilder.Options)) (*imagebuilder.DeleteImagePipelineOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *imagebuilder.DeleteImagePipelineInput, ...func(*imagebuilder.Options)) *imagebuilder.DeleteImagePipelineOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*imagebuilder.DeleteImagePipelineOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *imagebuilder.DeleteImagePipelineInput, ...func(*imagebuilder.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteImageRecipe provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteImageRecipe(ctx context.Context, params *imagebuilder.DeleteImageRecipeInput, optFns ...func(*imagebuilder.Options)) (*imagebuilder.DeleteImageRecipeOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteImageRecipe")
	}

	var r0 *imagebuilder.DeleteImageRecipeOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *imagebuilder.DeleteImageRecipeInput, ...func(*imagebuilder.Options)) (*imagebuilder.DeleteImageRecipeOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *imagebuilder.DeleteImageRecipeInput, ...func(*imagebuilder.Options)) *imagebuilder.DeleteImageRecipeOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*imagebuilder.DeleteImageRecipeOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *imagebuilder.DeleteImageRecipeInput, ...func(*imagebuilder.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteInfrastructureConfiguration provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteInfrastructureConfiguration(ctx context.Context, params *imagebuilder.DeleteInfrastructureConfigurationInput, optFns ...func(*imagebuilder.Options)) (*imagebuilder.DeleteInfrastructureConfigurationOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteInfrastructureConfiguration")
	}

	var r0 *imagebuilder.DeleteInfrastructureConfigurationOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *imagebuilder.DeleteInfrastructureConfigurationInput, ...func(*imagebuilder.Options)) (*imagebuilder.DeleteInfrastructureConfigurationOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *imagebuilder.DeleteInfrastructureConfigurationInput, ...func(*imagebuilder.Options)) *imagebuilder.DeleteInfrastructureConfigurationOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*imagebuilder.DeleteInfrastructureConfigurationOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *imagebuilder.DeleteInfrastructureConfigurationInput, ...func(*imagebuilder.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteLifecyclePolicy provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteLifecyclePolicy(ctx context.Context, params *imagebuilder.DeleteLifecyclePolicyInput, optFns ...func(*imagebuilder.Options)) (*imagebuilder.DeleteLifecyclePolicyOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteLifecyclePolicy")
	}

	var r0 *imagebuilder.DeleteLifecyclePolicyOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *imagebuilder.DeleteLifecyclePolicyInput, ...func(*imagebuilder.Options)) (*imagebuilder.DeleteLifecyclePolicyOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *imagebuilder.DeleteLifecyclePolicyInput, ...func(*imagebuilder.Options)) *imagebuilder.DeleteLifecyclePolicyOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*imagebuilder.DeleteLifecyclePolicyOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *imagebuilder.DeleteLifecyclePolicyInput, ...func(*imagebuilder.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteWorkflow provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteWorkflow(ctx context.Context, params *imagebuilder.DeleteWorkflowInput, optFns ...func(*imagebuilder.Options)) (*imagebuilder.DeleteWorkflowOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteWorkflow")
	}

	var r0 *imagebuilder.DeleteWorkflowOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *imagebuilder.DeleteWorkflowInput, ...func(*imagebuilder.Options)) (*imagebuilder.DeleteWorkflowOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *imagebuilder.DeleteWorkflowInput, ...func(*imagebuilder.Options)) *imagebuilder.DeleteWorkflowOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*imagebuilder.DeleteWorkflowOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *imagebuilder.DeleteWorkflowInput, ...func(*imagebuilder.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetComponent provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetComponent(ctx context.Context, params *imagebuilder.GetComponentInput, optFns ...func(*imagebuilder.Options)) (*imagebuilder.GetComponentOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetComponent")
	}

	var r0 *imagebuilder.GetComponentOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *imagebuilder.GetComponentInput, ...func(*imagebuilder.Options)) (*imagebuilder.GetComponentOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *imagebuilder.GetComponentInput, ...func(*imagebuilder.Options)) *imagebuilder.GetComponentOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*imagebuilder.GetComponentOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *imagebuilder.GetComponentInput, ...func(*imagebuilder.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetComponentPolicy provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetComponentPolicy(ctx context.Context, params *imagebuilder.GetComponentPolicyInput, optFns ...func(*imagebuilder.Options)) (*imagebuilder.GetComponentPolicyOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetComponentPolicy")
	}

	var r0 *imagebuilder.GetComponentPolicyOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *imagebuilder.GetComponentPolicyInput, ...func(*imagebuilder.Options)) (*imagebuilder.GetComponentPolicyOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *imagebuilder.GetComponentPolicyInput, ...func(*imagebuilder.Options)) *imagebuilder.GetComponentPolicyOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*imagebuilder.GetComponentPolicyOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *imagebuilder.GetComponentPolicyInput, ...func(*imagebuilder.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetContainerRecipe provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetContainerRecipe(ctx context.Context, params *imagebuilder.GetContainerRecipeInput, optFns ...func(*imagebuilder.Options)) (*imagebuilder.GetContainerRecipeOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetContainerRecipe")
	}

	var r0 *imagebuilder.GetContainerRecipeOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *imagebuilder.GetContainerRecipeInput, ...func(*imagebuilder.Options)) (*imagebuilder.GetContainerRecipeOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *imagebuilder.GetContainerRecipeInput, ...func(*imagebuilder.Options)) *imagebuilder.GetContainerRecipeOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*imagebuilder.GetContainerRecipeOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *imagebuilder.GetContainerRecipeInput, ...func(*imagebuilder.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetContainerRecipePolicy provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetContainerRecipePolicy(ctx context.Context, params *imagebuilder.GetContainerRecipePolicyInput, optFns ...func(*imagebuilder.Options)) (*imagebuilder.GetContainerRecipePolicyOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetContainerRecipePolicy")
	}

	var r0 *imagebuilder.GetContainerRecipePolicyOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *imagebuilder.GetContainerRecipePolicyInput, ...func(*imagebuilder.Options)) (*imagebuilder.GetContainerRecipePolicyOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *imagebuilder.GetContainerRecipePolicyInput, ...func(*imagebuilder.Options)) *imagebuilder.GetContainerRecipePolicyOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*imagebuilder.GetContainerRecipePolicyOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *imagebuilder.GetContainerRecipePolicyInput, ...func(*imagebuilder.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetDistributionConfiguration provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetDistributionConfiguration(ctx context.Context, params *imagebuilder.GetDistributionConfigurationInput, optFns ...func(*imagebuilder.Options)) (*imagebuilder.GetDistributionConfigurationOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetDistributionConfiguration")
	}

	var r0 *imagebuilder.GetDistributionConfigurationOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *imagebuilder.GetDistributionConfigurationInput, ...func(*imagebuilder.Options)) (*imagebuilder.GetDistributionConfigurationOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *imagebuilder.GetDistributionConfigurationInput, ...func(*imagebuilder.Options)) *imagebuilder.GetDistributionConfigurationOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*imagebuilder.GetDistributionConfigurationOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *imagebuilder.GetDistributionConfigurationInput, ...func(*imagebuilder.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetImage provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetImage(ctx context.Context, params *imagebuilder.GetImageInput, optFns ...func(*imagebuilder.Options)) (*imagebuilder.GetImageOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetImage")
	}

	var r0 *imagebuilder.GetImageOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *imagebuilder.GetImageInput, ...func(*imagebuilder.Options)) (*imagebuilder.GetImageOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *imagebuilder.GetImageInput, ...func(*imagebuilder.Options)) *imagebuilder.GetImageOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*imagebuilder.GetImageOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *imagebuilder.GetImageInput, ...func(*imagebuilder.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetImagePipeline provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetImagePipeline(ctx context.Context, params *imagebuilder.GetImagePipelineInput, optFns ...func(*imagebuilder.Options)) (*imagebuilder.GetImagePipelineOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetImagePipeline")
	}

	var r0 *imagebuilder.GetImagePipelineOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *imagebuilder.GetImagePipelineInput, ...func(*imagebuilder.Options)) (*imagebuilder.GetImagePipelineOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *imagebuilder.GetImagePipelineInput, ...func(*imagebuilder.Options)) *imagebuilder.GetImagePipelineOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*imagebuilder.GetImagePipelineOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *imagebuilder.GetImagePipelineInput, ...func(*imagebuilder.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetImagePolicy provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetImagePolicy(ctx context.Context, params *imagebuilder.GetImagePolicyInput, optFns ...func(*imagebuilder.Options)) (*imagebuilder.GetImagePolicyOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetImagePolicy")
	}

	var r0 *imagebuilder.GetImagePolicyOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *imagebuilder.GetImagePolicyInput, ...func(*imagebuilder.Options)) (*imagebuilder.GetImagePolicyOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *imagebuilder.GetImagePolicyInput, ...func(*imagebuilder.Options)) *imagebuilder.GetImagePolicyOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*imagebuilder.GetImagePolicyOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *imagebuilder.GetImagePolicyInput, ...func(*imagebuilder.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetImageRecipe provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetImageRecipe(ctx context.Context, params *imagebuilder.GetImageRecipeInput, optFns ...func(*imagebuilder.Options)) (*imagebuilder.GetImageRecipeOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetImageRecipe")
	}

	var r0 *imagebuilder.GetImageRecipeOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *imagebuilder.GetImageRecipeInput, ...func(*imagebuilder.Options)) (*imagebuilder.GetImageRecipeOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *imagebuilder.GetImageRecipeInput, ...func(*imagebuilder.Options)) *imagebuilder.GetImageRecipeOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*imagebuilder.GetImageRecipeOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *imagebuilder.GetImageRecipeInput, ...func(*imagebuilder.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetImageRecipePolicy provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetImageRecipePolicy(ctx context.Context, params *imagebuilder.GetImageRecipePolicyInput, optFns ...func(*imagebuilder.Options)) (*imagebuilder.GetImageRecipePolicyOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetImageRecipePolicy")
	}

	var r0 *imagebuilder.GetImageRecipePolicyOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *imagebuilder.GetImageRecipePolicyInput, ...func(*imagebuilder.Options)) (*imagebuilder.GetImageRecipePolicyOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *imagebuilder.GetImageRecipePolicyInput, ...func(*imagebuilder.Options)) *imagebuilder.GetImageRecipePolicyOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*imagebuilder.GetImageRecipePolicyOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *imagebuilder.GetImageRecipePolicyInput, ...func(*imagebuilder.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetInfrastructureConfiguration provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetInfrastructureConfiguration(ctx context.Context, params *imagebuilder.GetInfrastructureConfigurationInput, optFns ...func(*imagebuilder.Options)) (*imagebuilder.GetInfrastructureConfigurationOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetInfrastructureConfiguration")
	}

	var r0 *imagebuilder.GetInfrastructureConfigurationOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *imagebuilder.GetInfrastructureConfigurationInput, ...func(*imagebuilder.Options)) (*imagebuilder.GetInfrastructureConfigurationOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *imagebuilder.GetInfrastructureConfigurationInput, ...func(*imagebuilder.Options)) *imagebuilder.GetInfrastructureConfigurationOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*imagebuilder.GetInfrastructureConfigurationOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *imagebuilder.GetInfrastructureConfigurationInput, ...func(*imagebuilder.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetLifecycleExecution provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetLifecycleExecution(ctx context.Context, params *imagebuilder.GetLifecycleExecutionInput, optFns ...func(*imagebuilder.Options)) (*imagebuilder.GetLifecycleExecutionOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetLifecycleExecution")
	}

	var r0 *imagebuilder.GetLifecycleExecutionOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *imagebuilder.GetLifecycleExecutionInput, ...func(*imagebuilder.Options)) (*imagebuilder.GetLifecycleExecutionOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *imagebuilder.GetLifecycleExecutionInput, ...func(*imagebuilder.Options)) *imagebuilder.GetLifecycleExecutionOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*imagebuilder.GetLifecycleExecutionOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *imagebuilder.GetLifecycleExecutionInput, ...func(*imagebuilder.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetLifecyclePolicy provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetLifecyclePolicy(ctx context.Context, params *imagebuilder.GetLifecyclePolicyInput, optFns ...func(*imagebuilder.Options)) (*imagebuilder.GetLifecyclePolicyOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetLifecyclePolicy")
	}

	var r0 *imagebuilder.GetLifecyclePolicyOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *imagebuilder.GetLifecyclePolicyInput, ...func(*imagebuilder.Options)) (*imagebuilder.GetLifecyclePolicyOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *imagebuilder.GetLifecyclePolicyInput, ...func(*imagebuilder.Options)) *imagebuilder.GetLifecyclePolicyOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*imagebuilder.GetLifecyclePolicyOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *imagebuilder.GetLifecyclePolicyInput, ...func(*imagebuilder.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetWorkflow provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetWorkflow(ctx context.Context, params *imagebuilder.GetWorkflowInput, optFns ...func(*imagebuilder.Options)) (*imagebuilder.GetWorkflowOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetWorkflow")
	}

	var r0 *imagebuilder.GetWorkflowOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *imagebuilder.GetWorkflowInput, ...func(*imagebuilder.Options)) (*imagebuilder.GetWorkflowOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *imagebuilder.GetWorkflowInput, ...func(*imagebuilder.Options)) *imagebuilder.GetWorkflowOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*imagebuilder.GetWorkflowOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *imagebuilder.GetWorkflowInput, ...func(*imagebuilder.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetWorkflowExecution provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetWorkflowExecution(ctx context.Context, params *imagebuilder.GetWorkflowExecutionInput, optFns ...func(*imagebuilder.Options)) (*imagebuilder.GetWorkflowExecutionOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetWorkflowExecution")
	}

	var r0 *imagebuilder.GetWorkflowExecutionOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *imagebuilder.GetWorkflowExecutionInput, ...func(*imagebuilder.Options)) (*imagebuilder.GetWorkflowExecutionOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *imagebuilder.GetWorkflowExecutionInput, ...func(*imagebuilder.Options)) *imagebuilder.GetWorkflowExecutionOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*imagebuilder.GetWorkflowExecutionOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *imagebuilder.GetWorkflowExecutionInput, ...func(*imagebuilder.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetWorkflowStepExecution provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetWorkflowStepExecution(ctx context.Context, params *imagebuilder.GetWorkflowStepExecutionInput, optFns ...func(*imagebuilder.Options)) (*imagebuilder.GetWorkflowStepExecutionOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetWorkflowStepExecution")
	}

	var r0 *imagebuilder.GetWorkflowStepExecutionOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *imagebuilder.GetWorkflowStepExecutionInput, ...func(*imagebuilder.Options)) (*imagebuilder.GetWorkflowStepExecutionOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *imagebuilder.GetWorkflowStepExecutionInput, ...func(*imagebuilder.Options)) *imagebuilder.GetWorkflowStepExecutionOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*imagebuilder.GetWorkflowStepExecutionOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *imagebuilder.GetWorkflowStepExecutionInput, ...func(*imagebuilder.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ImportComponent provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ImportComponent(ctx context.Context, params *imagebuilder.ImportComponentInput, optFns ...func(*imagebuilder.Options)) (*imagebuilder.ImportComponentOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ImportComponent")
	}

	var r0 *imagebuilder.ImportComponentOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *imagebuilder.ImportComponentInput, ...func(*imagebuilder.Options)) (*imagebuilder.ImportComponentOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *imagebuilder.ImportComponentInput, ...func(*imagebuilder.Options)) *imagebuilder.ImportComponentOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*imagebuilder.ImportComponentOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *imagebuilder.ImportComponentInput, ...func(*imagebuilder.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ImportVmImage provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ImportVmImage(ctx context.Context, params *imagebuilder.ImportVmImageInput, optFns ...func(*imagebuilder.Options)) (*imagebuilder.ImportVmImageOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ImportVmImage")
	}

	var r0 *imagebuilder.ImportVmImageOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *imagebuilder.ImportVmImageInput, ...func(*imagebuilder.Options)) (*imagebuilder.ImportVmImageOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *imagebuilder.ImportVmImageInput, ...func(*imagebuilder.Options)) *imagebuilder.ImportVmImageOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*imagebuilder.ImportVmImageOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *imagebuilder.ImportVmImageInput, ...func(*imagebuilder.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListComponentBuildVersions provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListComponentBuildVersions(ctx context.Context, params *imagebuilder.ListComponentBuildVersionsInput, optFns ...func(*imagebuilder.Options)) (*imagebuilder.ListComponentBuildVersionsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListComponentBuildVersions")
	}

	var r0 *imagebuilder.ListComponentBuildVersionsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *imagebuilder.ListComponentBuildVersionsInput, ...func(*imagebuilder.Options)) (*imagebuilder.ListComponentBuildVersionsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *imagebuilder.ListComponentBuildVersionsInput, ...func(*imagebuilder.Options)) *imagebuilder.ListComponentBuildVersionsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*imagebuilder.ListComponentBuildVersionsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *imagebuilder.ListComponentBuildVersionsInput, ...func(*imagebuilder.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListComponents provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListComponents(ctx context.Context, params *imagebuilder.ListComponentsInput, optFns ...func(*imagebuilder.Options)) (*imagebuilder.ListComponentsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListComponents")
	}

	var r0 *imagebuilder.ListComponentsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *imagebuilder.ListComponentsInput, ...func(*imagebuilder.Options)) (*imagebuilder.ListComponentsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *imagebuilder.ListComponentsInput, ...func(*imagebuilder.Options)) *imagebuilder.ListComponentsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*imagebuilder.ListComponentsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *imagebuilder.ListComponentsInput, ...func(*imagebuilder.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListContainerRecipes provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListContainerRecipes(ctx context.Context, params *imagebuilder.ListContainerRecipesInput, optFns ...func(*imagebuilder.Options)) (*imagebuilder.ListContainerRecipesOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListContainerRecipes")
	}

	var r0 *imagebuilder.ListContainerRecipesOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *imagebuilder.ListContainerRecipesInput, ...func(*imagebuilder.Options)) (*imagebuilder.ListContainerRecipesOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *imagebuilder.ListContainerRecipesInput, ...func(*imagebuilder.Options)) *imagebuilder.ListContainerRecipesOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*imagebuilder.ListContainerRecipesOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *imagebuilder.ListContainerRecipesInput, ...func(*imagebuilder.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListDistributionConfigurations provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListDistributionConfigurations(ctx context.Context, params *imagebuilder.ListDistributionConfigurationsInput, optFns ...func(*imagebuilder.Options)) (*imagebuilder.ListDistributionConfigurationsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListDistributionConfigurations")
	}

	var r0 *imagebuilder.ListDistributionConfigurationsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *imagebuilder.ListDistributionConfigurationsInput, ...func(*imagebuilder.Options)) (*imagebuilder.ListDistributionConfigurationsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *imagebuilder.ListDistributionConfigurationsInput, ...func(*imagebuilder.Options)) *imagebuilder.ListDistributionConfigurationsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*imagebuilder.ListDistributionConfigurationsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *imagebuilder.ListDistributionConfigurationsInput, ...func(*imagebuilder.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListImageBuildVersions provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListImageBuildVersions(ctx context.Context, params *imagebuilder.ListImageBuildVersionsInput, optFns ...func(*imagebuilder.Options)) (*imagebuilder.ListImageBuildVersionsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListImageBuildVersions")
	}

	var r0 *imagebuilder.ListImageBuildVersionsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *imagebuilder.ListImageBuildVersionsInput, ...func(*imagebuilder.Options)) (*imagebuilder.ListImageBuildVersionsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *imagebuilder.ListImageBuildVersionsInput, ...func(*imagebuilder.Options)) *imagebuilder.ListImageBuildVersionsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*imagebuilder.ListImageBuildVersionsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *imagebuilder.ListImageBuildVersionsInput, ...func(*imagebuilder.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListImagePackages provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListImagePackages(ctx context.Context, params *imagebuilder.ListImagePackagesInput, optFns ...func(*imagebuilder.Options)) (*imagebuilder.ListImagePackagesOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListImagePackages")
	}

	var r0 *imagebuilder.ListImagePackagesOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *imagebuilder.ListImagePackagesInput, ...func(*imagebuilder.Options)) (*imagebuilder.ListImagePackagesOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *imagebuilder.ListImagePackagesInput, ...func(*imagebuilder.Options)) *imagebuilder.ListImagePackagesOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*imagebuilder.ListImagePackagesOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *imagebuilder.ListImagePackagesInput, ...func(*imagebuilder.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListImagePipelineImages provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListImagePipelineImages(ctx context.Context, params *imagebuilder.ListImagePipelineImagesInput, optFns ...func(*imagebuilder.Options)) (*imagebuilder.ListImagePipelineImagesOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListImagePipelineImages")
	}

	var r0 *imagebuilder.ListImagePipelineImagesOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *imagebuilder.ListImagePipelineImagesInput, ...func(*imagebuilder.Options)) (*imagebuilder.ListImagePipelineImagesOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *imagebuilder.ListImagePipelineImagesInput, ...func(*imagebuilder.Options)) *imagebuilder.ListImagePipelineImagesOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*imagebuilder.ListImagePipelineImagesOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *imagebuilder.ListImagePipelineImagesInput, ...func(*imagebuilder.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListImagePipelines provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListImagePipelines(ctx context.Context, params *imagebuilder.ListImagePipelinesInput, optFns ...func(*imagebuilder.Options)) (*imagebuilder.ListImagePipelinesOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListImagePipelines")
	}

	var r0 *imagebuilder.ListImagePipelinesOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *imagebuilder.ListImagePipelinesInput, ...func(*imagebuilder.Options)) (*imagebuilder.ListImagePipelinesOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *imagebuilder.ListImagePipelinesInput, ...func(*imagebuilder.Options)) *imagebuilder.ListImagePipelinesOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*imagebuilder.ListImagePipelinesOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *imagebuilder.ListImagePipelinesInput, ...func(*imagebuilder.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListImageRecipes provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListImageRecipes(ctx context.Context, params *imagebuilder.ListImageRecipesInput, optFns ...func(*imagebuilder.Options)) (*imagebuilder.ListImageRecipesOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListImageRecipes")
	}

	var r0 *imagebuilder.ListImageRecipesOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *imagebuilder.ListImageRecipesInput, ...func(*imagebuilder.Options)) (*imagebuilder.ListImageRecipesOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *imagebuilder.ListImageRecipesInput, ...func(*imagebuilder.Options)) *imagebuilder.ListImageRecipesOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*imagebuilder.ListImageRecipesOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *imagebuilder.ListImageRecipesInput, ...func(*imagebuilder.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListImageScanFindingAggregations provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListImageScanFindingAggregations(ctx context.Context, params *imagebuilder.ListImageScanFindingAggregationsInput, optFns ...func(*imagebuilder.Options)) (*imagebuilder.ListImageScanFindingAggregationsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListImageScanFindingAggregations")
	}

	var r0 *imagebuilder.ListImageScanFindingAggregationsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *imagebuilder.ListImageScanFindingAggregationsInput, ...func(*imagebuilder.Options)) (*imagebuilder.ListImageScanFindingAggregationsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *imagebuilder.ListImageScanFindingAggregationsInput, ...func(*imagebuilder.Options)) *imagebuilder.ListImageScanFindingAggregationsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*imagebuilder.ListImageScanFindingAggregationsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *imagebuilder.ListImageScanFindingAggregationsInput, ...func(*imagebuilder.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListImageScanFindings provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListImageScanFindings(ctx context.Context, params *imagebuilder.ListImageScanFindingsInput, optFns ...func(*imagebuilder.Options)) (*imagebuilder.ListImageScanFindingsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListImageScanFindings")
	}

	var r0 *imagebuilder.ListImageScanFindingsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *imagebuilder.ListImageScanFindingsInput, ...func(*imagebuilder.Options)) (*imagebuilder.ListImageScanFindingsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *imagebuilder.ListImageScanFindingsInput, ...func(*imagebuilder.Options)) *imagebuilder.ListImageScanFindingsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*imagebuilder.ListImageScanFindingsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *imagebuilder.ListImageScanFindingsInput, ...func(*imagebuilder.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListImages provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListImages(ctx context.Context, params *imagebuilder.ListImagesInput, optFns ...func(*imagebuilder.Options)) (*imagebuilder.ListImagesOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListImages")
	}

	var r0 *imagebuilder.ListImagesOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *imagebuilder.ListImagesInput, ...func(*imagebuilder.Options)) (*imagebuilder.ListImagesOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *imagebuilder.ListImagesInput, ...func(*imagebuilder.Options)) *imagebuilder.ListImagesOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*imagebuilder.ListImagesOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *imagebuilder.ListImagesInput, ...func(*imagebuilder.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListInfrastructureConfigurations provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListInfrastructureConfigurations(ctx context.Context, params *imagebuilder.ListInfrastructureConfigurationsInput, optFns ...func(*imagebuilder.Options)) (*imagebuilder.ListInfrastructureConfigurationsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListInfrastructureConfigurations")
	}

	var r0 *imagebuilder.ListInfrastructureConfigurationsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *imagebuilder.ListInfrastructureConfigurationsInput, ...func(*imagebuilder.Options)) (*imagebuilder.ListInfrastructureConfigurationsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *imagebuilder.ListInfrastructureConfigurationsInput, ...func(*imagebuilder.Options)) *imagebuilder.ListInfrastructureConfigurationsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*imagebuilder.ListInfrastructureConfigurationsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *imagebuilder.ListInfrastructureConfigurationsInput, ...func(*imagebuilder.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListLifecycleExecutionResources provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListLifecycleExecutionResources(ctx context.Context, params *imagebuilder.ListLifecycleExecutionResourcesInput, optFns ...func(*imagebuilder.Options)) (*imagebuilder.ListLifecycleExecutionResourcesOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListLifecycleExecutionResources")
	}

	var r0 *imagebuilder.ListLifecycleExecutionResourcesOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *imagebuilder.ListLifecycleExecutionResourcesInput, ...func(*imagebuilder.Options)) (*imagebuilder.ListLifecycleExecutionResourcesOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *imagebuilder.ListLifecycleExecutionResourcesInput, ...func(*imagebuilder.Options)) *imagebuilder.ListLifecycleExecutionResourcesOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*imagebuilder.ListLifecycleExecutionResourcesOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *imagebuilder.ListLifecycleExecutionResourcesInput, ...func(*imagebuilder.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListLifecycleExecutions provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListLifecycleExecutions(ctx context.Context, params *imagebuilder.ListLifecycleExecutionsInput, optFns ...func(*imagebuilder.Options)) (*imagebuilder.ListLifecycleExecutionsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListLifecycleExecutions")
	}

	var r0 *imagebuilder.ListLifecycleExecutionsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *imagebuilder.ListLifecycleExecutionsInput, ...func(*imagebuilder.Options)) (*imagebuilder.ListLifecycleExecutionsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *imagebuilder.ListLifecycleExecutionsInput, ...func(*imagebuilder.Options)) *imagebuilder.ListLifecycleExecutionsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*imagebuilder.ListLifecycleExecutionsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *imagebuilder.ListLifecycleExecutionsInput, ...func(*imagebuilder.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListLifecyclePolicies provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListLifecyclePolicies(ctx context.Context, params *imagebuilder.ListLifecyclePoliciesInput, optFns ...func(*imagebuilder.Options)) (*imagebuilder.ListLifecyclePoliciesOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListLifecyclePolicies")
	}

	var r0 *imagebuilder.ListLifecyclePoliciesOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *imagebuilder.ListLifecyclePoliciesInput, ...func(*imagebuilder.Options)) (*imagebuilder.ListLifecyclePoliciesOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *imagebuilder.ListLifecyclePoliciesInput, ...func(*imagebuilder.Options)) *imagebuilder.ListLifecyclePoliciesOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*imagebuilder.ListLifecyclePoliciesOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *imagebuilder.ListLifecyclePoliciesInput, ...func(*imagebuilder.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListTagsForResource provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListTagsForResource(ctx context.Context, params *imagebuilder.ListTagsForResourceInput, optFns ...func(*imagebuilder.Options)) (*imagebuilder.ListTagsForResourceOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListTagsForResource")
	}

	var r0 *imagebuilder.ListTagsForResourceOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *imagebuilder.ListTagsForResourceInput, ...func(*imagebuilder.Options)) (*imagebuilder.ListTagsForResourceOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *imagebuilder.ListTagsForResourceInput, ...func(*imagebuilder.Options)) *imagebuilder.ListTagsForResourceOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*imagebuilder.ListTagsForResourceOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *imagebuilder.ListTagsForResourceInput, ...func(*imagebuilder.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListWaitingWorkflowSteps provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListWaitingWorkflowSteps(ctx context.Context, params *imagebuilder.ListWaitingWorkflowStepsInput, optFns ...func(*imagebuilder.Options)) (*imagebuilder.ListWaitingWorkflowStepsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListWaitingWorkflowSteps")
	}

	var r0 *imagebuilder.ListWaitingWorkflowStepsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *imagebuilder.ListWaitingWorkflowStepsInput, ...func(*imagebuilder.Options)) (*imagebuilder.ListWaitingWorkflowStepsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *imagebuilder.ListWaitingWorkflowStepsInput, ...func(*imagebuilder.Options)) *imagebuilder.ListWaitingWorkflowStepsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*imagebuilder.ListWaitingWorkflowStepsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *imagebuilder.ListWaitingWorkflowStepsInput, ...func(*imagebuilder.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListWorkflowBuildVersions provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListWorkflowBuildVersions(ctx context.Context, params *imagebuilder.ListWorkflowBuildVersionsInput, optFns ...func(*imagebuilder.Options)) (*imagebuilder.ListWorkflowBuildVersionsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListWorkflowBuildVersions")
	}

	var r0 *imagebuilder.ListWorkflowBuildVersionsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *imagebuilder.ListWorkflowBuildVersionsInput, ...func(*imagebuilder.Options)) (*imagebuilder.ListWorkflowBuildVersionsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *imagebuilder.ListWorkflowBuildVersionsInput, ...func(*imagebuilder.Options)) *imagebuilder.ListWorkflowBuildVersionsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*imagebuilder.ListWorkflowBuildVersionsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *imagebuilder.ListWorkflowBuildVersionsInput, ...func(*imagebuilder.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListWorkflowExecutions provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListWorkflowExecutions(ctx context.Context, params *imagebuilder.ListWorkflowExecutionsInput, optFns ...func(*imagebuilder.Options)) (*imagebuilder.ListWorkflowExecutionsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListWorkflowExecutions")
	}

	var r0 *imagebuilder.ListWorkflowExecutionsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *imagebuilder.ListWorkflowExecutionsInput, ...func(*imagebuilder.Options)) (*imagebuilder.ListWorkflowExecutionsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *imagebuilder.ListWorkflowExecutionsInput, ...func(*imagebuilder.Options)) *imagebuilder.ListWorkflowExecutionsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*imagebuilder.ListWorkflowExecutionsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *imagebuilder.ListWorkflowExecutionsInput, ...func(*imagebuilder.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListWorkflowStepExecutions provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListWorkflowStepExecutions(ctx context.Context, params *imagebuilder.ListWorkflowStepExecutionsInput, optFns ...func(*imagebuilder.Options)) (*imagebuilder.ListWorkflowStepExecutionsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListWorkflowStepExecutions")
	}

	var r0 *imagebuilder.ListWorkflowStepExecutionsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *imagebuilder.ListWorkflowStepExecutionsInput, ...func(*imagebuilder.Options)) (*imagebuilder.ListWorkflowStepExecutionsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *imagebuilder.ListWorkflowStepExecutionsInput, ...func(*imagebuilder.Options)) *imagebuilder.ListWorkflowStepExecutionsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*imagebuilder.ListWorkflowStepExecutionsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *imagebuilder.ListWorkflowStepExecutionsInput, ...func(*imagebuilder.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListWorkflows provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListWorkflows(ctx context.Context, params *imagebuilder.ListWorkflowsInput, optFns ...func(*imagebuilder.Options)) (*imagebuilder.ListWorkflowsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListWorkflows")
	}

	var r0 *imagebuilder.ListWorkflowsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *imagebuilder.ListWorkflowsInput, ...func(*imagebuilder.Options)) (*imagebuilder.ListWorkflowsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *imagebuilder.ListWorkflowsInput, ...func(*imagebuilder.Options)) *imagebuilder.ListWorkflowsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*imagebuilder.ListWorkflowsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *imagebuilder.ListWorkflowsInput, ...func(*imagebuilder.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Options provides a mock function with given fields:
func (_m *IClient) Options() imagebuilder.Options {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Options")
	}

	var r0 imagebuilder.Options
	if rf, ok := ret.Get(0).(func() imagebuilder.Options); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(imagebuilder.Options)
	}

	return r0
}

// PutComponentPolicy provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) PutComponentPolicy(ctx context.Context, params *imagebuilder.PutComponentPolicyInput, optFns ...func(*imagebuilder.Options)) (*imagebuilder.PutComponentPolicyOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for PutComponentPolicy")
	}

	var r0 *imagebuilder.PutComponentPolicyOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *imagebuilder.PutComponentPolicyInput, ...func(*imagebuilder.Options)) (*imagebuilder.PutComponentPolicyOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *imagebuilder.PutComponentPolicyInput, ...func(*imagebuilder.Options)) *imagebuilder.PutComponentPolicyOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*imagebuilder.PutComponentPolicyOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *imagebuilder.PutComponentPolicyInput, ...func(*imagebuilder.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PutContainerRecipePolicy provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) PutContainerRecipePolicy(ctx context.Context, params *imagebuilder.PutContainerRecipePolicyInput, optFns ...func(*imagebuilder.Options)) (*imagebuilder.PutContainerRecipePolicyOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for PutContainerRecipePolicy")
	}

	var r0 *imagebuilder.PutContainerRecipePolicyOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *imagebuilder.PutContainerRecipePolicyInput, ...func(*imagebuilder.Options)) (*imagebuilder.PutContainerRecipePolicyOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *imagebuilder.PutContainerRecipePolicyInput, ...func(*imagebuilder.Options)) *imagebuilder.PutContainerRecipePolicyOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*imagebuilder.PutContainerRecipePolicyOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *imagebuilder.PutContainerRecipePolicyInput, ...func(*imagebuilder.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PutImagePolicy provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) PutImagePolicy(ctx context.Context, params *imagebuilder.PutImagePolicyInput, optFns ...func(*imagebuilder.Options)) (*imagebuilder.PutImagePolicyOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for PutImagePolicy")
	}

	var r0 *imagebuilder.PutImagePolicyOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *imagebuilder.PutImagePolicyInput, ...func(*imagebuilder.Options)) (*imagebuilder.PutImagePolicyOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *imagebuilder.PutImagePolicyInput, ...func(*imagebuilder.Options)) *imagebuilder.PutImagePolicyOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*imagebuilder.PutImagePolicyOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *imagebuilder.PutImagePolicyInput, ...func(*imagebuilder.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PutImageRecipePolicy provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) PutImageRecipePolicy(ctx context.Context, params *imagebuilder.PutImageRecipePolicyInput, optFns ...func(*imagebuilder.Options)) (*imagebuilder.PutImageRecipePolicyOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for PutImageRecipePolicy")
	}

	var r0 *imagebuilder.PutImageRecipePolicyOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *imagebuilder.PutImageRecipePolicyInput, ...func(*imagebuilder.Options)) (*imagebuilder.PutImageRecipePolicyOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *imagebuilder.PutImageRecipePolicyInput, ...func(*imagebuilder.Options)) *imagebuilder.PutImageRecipePolicyOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*imagebuilder.PutImageRecipePolicyOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *imagebuilder.PutImageRecipePolicyInput, ...func(*imagebuilder.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SendWorkflowStepAction provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) SendWorkflowStepAction(ctx context.Context, params *imagebuilder.SendWorkflowStepActionInput, optFns ...func(*imagebuilder.Options)) (*imagebuilder.SendWorkflowStepActionOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for SendWorkflowStepAction")
	}

	var r0 *imagebuilder.SendWorkflowStepActionOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *imagebuilder.SendWorkflowStepActionInput, ...func(*imagebuilder.Options)) (*imagebuilder.SendWorkflowStepActionOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *imagebuilder.SendWorkflowStepActionInput, ...func(*imagebuilder.Options)) *imagebuilder.SendWorkflowStepActionOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*imagebuilder.SendWorkflowStepActionOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *imagebuilder.SendWorkflowStepActionInput, ...func(*imagebuilder.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// StartImagePipelineExecution provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) StartImagePipelineExecution(ctx context.Context, params *imagebuilder.StartImagePipelineExecutionInput, optFns ...func(*imagebuilder.Options)) (*imagebuilder.StartImagePipelineExecutionOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for StartImagePipelineExecution")
	}

	var r0 *imagebuilder.StartImagePipelineExecutionOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *imagebuilder.StartImagePipelineExecutionInput, ...func(*imagebuilder.Options)) (*imagebuilder.StartImagePipelineExecutionOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *imagebuilder.StartImagePipelineExecutionInput, ...func(*imagebuilder.Options)) *imagebuilder.StartImagePipelineExecutionOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*imagebuilder.StartImagePipelineExecutionOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *imagebuilder.StartImagePipelineExecutionInput, ...func(*imagebuilder.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// StartResourceStateUpdate provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) StartResourceStateUpdate(ctx context.Context, params *imagebuilder.StartResourceStateUpdateInput, optFns ...func(*imagebuilder.Options)) (*imagebuilder.StartResourceStateUpdateOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for StartResourceStateUpdate")
	}

	var r0 *imagebuilder.StartResourceStateUpdateOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *imagebuilder.StartResourceStateUpdateInput, ...func(*imagebuilder.Options)) (*imagebuilder.StartResourceStateUpdateOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *imagebuilder.StartResourceStateUpdateInput, ...func(*imagebuilder.Options)) *imagebuilder.StartResourceStateUpdateOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*imagebuilder.StartResourceStateUpdateOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *imagebuilder.StartResourceStateUpdateInput, ...func(*imagebuilder.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// TagResource provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) TagResource(ctx context.Context, params *imagebuilder.TagResourceInput, optFns ...func(*imagebuilder.Options)) (*imagebuilder.TagResourceOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for TagResource")
	}

	var r0 *imagebuilder.TagResourceOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *imagebuilder.TagResourceInput, ...func(*imagebuilder.Options)) (*imagebuilder.TagResourceOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *imagebuilder.TagResourceInput, ...func(*imagebuilder.Options)) *imagebuilder.TagResourceOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*imagebuilder.TagResourceOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *imagebuilder.TagResourceInput, ...func(*imagebuilder.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UntagResource provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UntagResource(ctx context.Context, params *imagebuilder.UntagResourceInput, optFns ...func(*imagebuilder.Options)) (*imagebuilder.UntagResourceOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UntagResource")
	}

	var r0 *imagebuilder.UntagResourceOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *imagebuilder.UntagResourceInput, ...func(*imagebuilder.Options)) (*imagebuilder.UntagResourceOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *imagebuilder.UntagResourceInput, ...func(*imagebuilder.Options)) *imagebuilder.UntagResourceOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*imagebuilder.UntagResourceOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *imagebuilder.UntagResourceInput, ...func(*imagebuilder.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateDistributionConfiguration provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UpdateDistributionConfiguration(ctx context.Context, params *imagebuilder.UpdateDistributionConfigurationInput, optFns ...func(*imagebuilder.Options)) (*imagebuilder.UpdateDistributionConfigurationOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateDistributionConfiguration")
	}

	var r0 *imagebuilder.UpdateDistributionConfigurationOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *imagebuilder.UpdateDistributionConfigurationInput, ...func(*imagebuilder.Options)) (*imagebuilder.UpdateDistributionConfigurationOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *imagebuilder.UpdateDistributionConfigurationInput, ...func(*imagebuilder.Options)) *imagebuilder.UpdateDistributionConfigurationOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*imagebuilder.UpdateDistributionConfigurationOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *imagebuilder.UpdateDistributionConfigurationInput, ...func(*imagebuilder.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateImagePipeline provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UpdateImagePipeline(ctx context.Context, params *imagebuilder.UpdateImagePipelineInput, optFns ...func(*imagebuilder.Options)) (*imagebuilder.UpdateImagePipelineOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateImagePipeline")
	}

	var r0 *imagebuilder.UpdateImagePipelineOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *imagebuilder.UpdateImagePipelineInput, ...func(*imagebuilder.Options)) (*imagebuilder.UpdateImagePipelineOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *imagebuilder.UpdateImagePipelineInput, ...func(*imagebuilder.Options)) *imagebuilder.UpdateImagePipelineOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*imagebuilder.UpdateImagePipelineOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *imagebuilder.UpdateImagePipelineInput, ...func(*imagebuilder.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateInfrastructureConfiguration provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UpdateInfrastructureConfiguration(ctx context.Context, params *imagebuilder.UpdateInfrastructureConfigurationInput, optFns ...func(*imagebuilder.Options)) (*imagebuilder.UpdateInfrastructureConfigurationOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateInfrastructureConfiguration")
	}

	var r0 *imagebuilder.UpdateInfrastructureConfigurationOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *imagebuilder.UpdateInfrastructureConfigurationInput, ...func(*imagebuilder.Options)) (*imagebuilder.UpdateInfrastructureConfigurationOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *imagebuilder.UpdateInfrastructureConfigurationInput, ...func(*imagebuilder.Options)) *imagebuilder.UpdateInfrastructureConfigurationOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*imagebuilder.UpdateInfrastructureConfigurationOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *imagebuilder.UpdateInfrastructureConfigurationInput, ...func(*imagebuilder.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateLifecyclePolicy provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UpdateLifecyclePolicy(ctx context.Context, params *imagebuilder.UpdateLifecyclePolicyInput, optFns ...func(*imagebuilder.Options)) (*imagebuilder.UpdateLifecyclePolicyOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateLifecyclePolicy")
	}

	var r0 *imagebuilder.UpdateLifecyclePolicyOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *imagebuilder.UpdateLifecyclePolicyInput, ...func(*imagebuilder.Options)) (*imagebuilder.UpdateLifecyclePolicyOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *imagebuilder.UpdateLifecyclePolicyInput, ...func(*imagebuilder.Options)) *imagebuilder.UpdateLifecyclePolicyOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*imagebuilder.UpdateLifecyclePolicyOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *imagebuilder.UpdateLifecyclePolicyInput, ...func(*imagebuilder.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewIClient creates a new instance of IClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewIClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *IClient {
	mock := &IClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
