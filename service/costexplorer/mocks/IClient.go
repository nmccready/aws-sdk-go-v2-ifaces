// Code generated by mockery v2.53.4. DO NOT EDIT.

package mocks

import (
	context "context"

	costexplorer "github.com/aws/aws-sdk-go-v2/service/costexplorer"

	mock "github.com/stretchr/testify/mock"
)

// IClient is an autogenerated mock type for the IClient type
type IClient struct {
	mock.Mock
}

// CreateAnomalyMonitor provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CreateAnomalyMonitor(ctx context.Context, params *costexplorer.CreateAnomalyMonitorInput, optFns ...func(*costexplorer.Options)) (*costexplorer.CreateAnomalyMonitorOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateAnomalyMonitor")
	}

	var r0 *costexplorer.CreateAnomalyMonitorOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *costexplorer.CreateAnomalyMonitorInput, ...func(*costexplorer.Options)) (*costexplorer.CreateAnomalyMonitorOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *costexplorer.CreateAnomalyMonitorInput, ...func(*costexplorer.Options)) *costexplorer.CreateAnomalyMonitorOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*costexplorer.CreateAnomalyMonitorOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *costexplorer.CreateAnomalyMonitorInput, ...func(*costexplorer.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateAnomalySubscription provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CreateAnomalySubscription(ctx context.Context, params *costexplorer.CreateAnomalySubscriptionInput, optFns ...func(*costexplorer.Options)) (*costexplorer.CreateAnomalySubscriptionOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateAnomalySubscription")
	}

	var r0 *costexplorer.CreateAnomalySubscriptionOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *costexplorer.CreateAnomalySubscriptionInput, ...func(*costexplorer.Options)) (*costexplorer.CreateAnomalySubscriptionOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *costexplorer.CreateAnomalySubscriptionInput, ...func(*costexplorer.Options)) *costexplorer.CreateAnomalySubscriptionOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*costexplorer.CreateAnomalySubscriptionOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *costexplorer.CreateAnomalySubscriptionInput, ...func(*costexplorer.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateCostCategoryDefinition provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CreateCostCategoryDefinition(ctx context.Context, params *costexplorer.CreateCostCategoryDefinitionInput, optFns ...func(*costexplorer.Options)) (*costexplorer.CreateCostCategoryDefinitionOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateCostCategoryDefinition")
	}

	var r0 *costexplorer.CreateCostCategoryDefinitionOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *costexplorer.CreateCostCategoryDefinitionInput, ...func(*costexplorer.Options)) (*costexplorer.CreateCostCategoryDefinitionOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *costexplorer.CreateCostCategoryDefinitionInput, ...func(*costexplorer.Options)) *costexplorer.CreateCostCategoryDefinitionOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*costexplorer.CreateCostCategoryDefinitionOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *costexplorer.CreateCostCategoryDefinitionInput, ...func(*costexplorer.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteAnomalyMonitor provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteAnomalyMonitor(ctx context.Context, params *costexplorer.DeleteAnomalyMonitorInput, optFns ...func(*costexplorer.Options)) (*costexplorer.DeleteAnomalyMonitorOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteAnomalyMonitor")
	}

	var r0 *costexplorer.DeleteAnomalyMonitorOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *costexplorer.DeleteAnomalyMonitorInput, ...func(*costexplorer.Options)) (*costexplorer.DeleteAnomalyMonitorOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *costexplorer.DeleteAnomalyMonitorInput, ...func(*costexplorer.Options)) *costexplorer.DeleteAnomalyMonitorOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*costexplorer.DeleteAnomalyMonitorOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *costexplorer.DeleteAnomalyMonitorInput, ...func(*costexplorer.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteAnomalySubscription provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteAnomalySubscription(ctx context.Context, params *costexplorer.DeleteAnomalySubscriptionInput, optFns ...func(*costexplorer.Options)) (*costexplorer.DeleteAnomalySubscriptionOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteAnomalySubscription")
	}

	var r0 *costexplorer.DeleteAnomalySubscriptionOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *costexplorer.DeleteAnomalySubscriptionInput, ...func(*costexplorer.Options)) (*costexplorer.DeleteAnomalySubscriptionOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *costexplorer.DeleteAnomalySubscriptionInput, ...func(*costexplorer.Options)) *costexplorer.DeleteAnomalySubscriptionOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*costexplorer.DeleteAnomalySubscriptionOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *costexplorer.DeleteAnomalySubscriptionInput, ...func(*costexplorer.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteCostCategoryDefinition provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteCostCategoryDefinition(ctx context.Context, params *costexplorer.DeleteCostCategoryDefinitionInput, optFns ...func(*costexplorer.Options)) (*costexplorer.DeleteCostCategoryDefinitionOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteCostCategoryDefinition")
	}

	var r0 *costexplorer.DeleteCostCategoryDefinitionOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *costexplorer.DeleteCostCategoryDefinitionInput, ...func(*costexplorer.Options)) (*costexplorer.DeleteCostCategoryDefinitionOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *costexplorer.DeleteCostCategoryDefinitionInput, ...func(*costexplorer.Options)) *costexplorer.DeleteCostCategoryDefinitionOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*costexplorer.DeleteCostCategoryDefinitionOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *costexplorer.DeleteCostCategoryDefinitionInput, ...func(*costexplorer.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeCostCategoryDefinition provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DescribeCostCategoryDefinition(ctx context.Context, params *costexplorer.DescribeCostCategoryDefinitionInput, optFns ...func(*costexplorer.Options)) (*costexplorer.DescribeCostCategoryDefinitionOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DescribeCostCategoryDefinition")
	}

	var r0 *costexplorer.DescribeCostCategoryDefinitionOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *costexplorer.DescribeCostCategoryDefinitionInput, ...func(*costexplorer.Options)) (*costexplorer.DescribeCostCategoryDefinitionOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *costexplorer.DescribeCostCategoryDefinitionInput, ...func(*costexplorer.Options)) *costexplorer.DescribeCostCategoryDefinitionOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*costexplorer.DescribeCostCategoryDefinitionOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *costexplorer.DescribeCostCategoryDefinitionInput, ...func(*costexplorer.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAnomalies provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetAnomalies(ctx context.Context, params *costexplorer.GetAnomaliesInput, optFns ...func(*costexplorer.Options)) (*costexplorer.GetAnomaliesOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetAnomalies")
	}

	var r0 *costexplorer.GetAnomaliesOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *costexplorer.GetAnomaliesInput, ...func(*costexplorer.Options)) (*costexplorer.GetAnomaliesOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *costexplorer.GetAnomaliesInput, ...func(*costexplorer.Options)) *costexplorer.GetAnomaliesOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*costexplorer.GetAnomaliesOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *costexplorer.GetAnomaliesInput, ...func(*costexplorer.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAnomalyMonitors provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetAnomalyMonitors(ctx context.Context, params *costexplorer.GetAnomalyMonitorsInput, optFns ...func(*costexplorer.Options)) (*costexplorer.GetAnomalyMonitorsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetAnomalyMonitors")
	}

	var r0 *costexplorer.GetAnomalyMonitorsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *costexplorer.GetAnomalyMonitorsInput, ...func(*costexplorer.Options)) (*costexplorer.GetAnomalyMonitorsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *costexplorer.GetAnomalyMonitorsInput, ...func(*costexplorer.Options)) *costexplorer.GetAnomalyMonitorsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*costexplorer.GetAnomalyMonitorsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *costexplorer.GetAnomalyMonitorsInput, ...func(*costexplorer.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAnomalySubscriptions provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetAnomalySubscriptions(ctx context.Context, params *costexplorer.GetAnomalySubscriptionsInput, optFns ...func(*costexplorer.Options)) (*costexplorer.GetAnomalySubscriptionsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetAnomalySubscriptions")
	}

	var r0 *costexplorer.GetAnomalySubscriptionsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *costexplorer.GetAnomalySubscriptionsInput, ...func(*costexplorer.Options)) (*costexplorer.GetAnomalySubscriptionsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *costexplorer.GetAnomalySubscriptionsInput, ...func(*costexplorer.Options)) *costexplorer.GetAnomalySubscriptionsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*costexplorer.GetAnomalySubscriptionsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *costexplorer.GetAnomalySubscriptionsInput, ...func(*costexplorer.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetApproximateUsageRecords provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetApproximateUsageRecords(ctx context.Context, params *costexplorer.GetApproximateUsageRecordsInput, optFns ...func(*costexplorer.Options)) (*costexplorer.GetApproximateUsageRecordsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetApproximateUsageRecords")
	}

	var r0 *costexplorer.GetApproximateUsageRecordsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *costexplorer.GetApproximateUsageRecordsInput, ...func(*costexplorer.Options)) (*costexplorer.GetApproximateUsageRecordsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *costexplorer.GetApproximateUsageRecordsInput, ...func(*costexplorer.Options)) *costexplorer.GetApproximateUsageRecordsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*costexplorer.GetApproximateUsageRecordsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *costexplorer.GetApproximateUsageRecordsInput, ...func(*costexplorer.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetCommitmentPurchaseAnalysis provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetCommitmentPurchaseAnalysis(ctx context.Context, params *costexplorer.GetCommitmentPurchaseAnalysisInput, optFns ...func(*costexplorer.Options)) (*costexplorer.GetCommitmentPurchaseAnalysisOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetCommitmentPurchaseAnalysis")
	}

	var r0 *costexplorer.GetCommitmentPurchaseAnalysisOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *costexplorer.GetCommitmentPurchaseAnalysisInput, ...func(*costexplorer.Options)) (*costexplorer.GetCommitmentPurchaseAnalysisOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *costexplorer.GetCommitmentPurchaseAnalysisInput, ...func(*costexplorer.Options)) *costexplorer.GetCommitmentPurchaseAnalysisOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*costexplorer.GetCommitmentPurchaseAnalysisOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *costexplorer.GetCommitmentPurchaseAnalysisInput, ...func(*costexplorer.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetCostAndUsage provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetCostAndUsage(ctx context.Context, params *costexplorer.GetCostAndUsageInput, optFns ...func(*costexplorer.Options)) (*costexplorer.GetCostAndUsageOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetCostAndUsage")
	}

	var r0 *costexplorer.GetCostAndUsageOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *costexplorer.GetCostAndUsageInput, ...func(*costexplorer.Options)) (*costexplorer.GetCostAndUsageOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *costexplorer.GetCostAndUsageInput, ...func(*costexplorer.Options)) *costexplorer.GetCostAndUsageOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*costexplorer.GetCostAndUsageOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *costexplorer.GetCostAndUsageInput, ...func(*costexplorer.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetCostAndUsageComparisons provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetCostAndUsageComparisons(ctx context.Context, params *costexplorer.GetCostAndUsageComparisonsInput, optFns ...func(*costexplorer.Options)) (*costexplorer.GetCostAndUsageComparisonsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetCostAndUsageComparisons")
	}

	var r0 *costexplorer.GetCostAndUsageComparisonsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *costexplorer.GetCostAndUsageComparisonsInput, ...func(*costexplorer.Options)) (*costexplorer.GetCostAndUsageComparisonsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *costexplorer.GetCostAndUsageComparisonsInput, ...func(*costexplorer.Options)) *costexplorer.GetCostAndUsageComparisonsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*costexplorer.GetCostAndUsageComparisonsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *costexplorer.GetCostAndUsageComparisonsInput, ...func(*costexplorer.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetCostAndUsageWithResources provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetCostAndUsageWithResources(ctx context.Context, params *costexplorer.GetCostAndUsageWithResourcesInput, optFns ...func(*costexplorer.Options)) (*costexplorer.GetCostAndUsageWithResourcesOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetCostAndUsageWithResources")
	}

	var r0 *costexplorer.GetCostAndUsageWithResourcesOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *costexplorer.GetCostAndUsageWithResourcesInput, ...func(*costexplorer.Options)) (*costexplorer.GetCostAndUsageWithResourcesOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *costexplorer.GetCostAndUsageWithResourcesInput, ...func(*costexplorer.Options)) *costexplorer.GetCostAndUsageWithResourcesOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*costexplorer.GetCostAndUsageWithResourcesOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *costexplorer.GetCostAndUsageWithResourcesInput, ...func(*costexplorer.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetCostCategories provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetCostCategories(ctx context.Context, params *costexplorer.GetCostCategoriesInput, optFns ...func(*costexplorer.Options)) (*costexplorer.GetCostCategoriesOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetCostCategories")
	}

	var r0 *costexplorer.GetCostCategoriesOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *costexplorer.GetCostCategoriesInput, ...func(*costexplorer.Options)) (*costexplorer.GetCostCategoriesOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *costexplorer.GetCostCategoriesInput, ...func(*costexplorer.Options)) *costexplorer.GetCostCategoriesOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*costexplorer.GetCostCategoriesOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *costexplorer.GetCostCategoriesInput, ...func(*costexplorer.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetCostComparisonDrivers provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetCostComparisonDrivers(ctx context.Context, params *costexplorer.GetCostComparisonDriversInput, optFns ...func(*costexplorer.Options)) (*costexplorer.GetCostComparisonDriversOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetCostComparisonDrivers")
	}

	var r0 *costexplorer.GetCostComparisonDriversOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *costexplorer.GetCostComparisonDriversInput, ...func(*costexplorer.Options)) (*costexplorer.GetCostComparisonDriversOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *costexplorer.GetCostComparisonDriversInput, ...func(*costexplorer.Options)) *costexplorer.GetCostComparisonDriversOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*costexplorer.GetCostComparisonDriversOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *costexplorer.GetCostComparisonDriversInput, ...func(*costexplorer.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetCostForecast provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetCostForecast(ctx context.Context, params *costexplorer.GetCostForecastInput, optFns ...func(*costexplorer.Options)) (*costexplorer.GetCostForecastOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetCostForecast")
	}

	var r0 *costexplorer.GetCostForecastOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *costexplorer.GetCostForecastInput, ...func(*costexplorer.Options)) (*costexplorer.GetCostForecastOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *costexplorer.GetCostForecastInput, ...func(*costexplorer.Options)) *costexplorer.GetCostForecastOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*costexplorer.GetCostForecastOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *costexplorer.GetCostForecastInput, ...func(*costexplorer.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetDimensionValues provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetDimensionValues(ctx context.Context, params *costexplorer.GetDimensionValuesInput, optFns ...func(*costexplorer.Options)) (*costexplorer.GetDimensionValuesOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetDimensionValues")
	}

	var r0 *costexplorer.GetDimensionValuesOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *costexplorer.GetDimensionValuesInput, ...func(*costexplorer.Options)) (*costexplorer.GetDimensionValuesOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *costexplorer.GetDimensionValuesInput, ...func(*costexplorer.Options)) *costexplorer.GetDimensionValuesOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*costexplorer.GetDimensionValuesOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *costexplorer.GetDimensionValuesInput, ...func(*costexplorer.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetReservationCoverage provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetReservationCoverage(ctx context.Context, params *costexplorer.GetReservationCoverageInput, optFns ...func(*costexplorer.Options)) (*costexplorer.GetReservationCoverageOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetReservationCoverage")
	}

	var r0 *costexplorer.GetReservationCoverageOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *costexplorer.GetReservationCoverageInput, ...func(*costexplorer.Options)) (*costexplorer.GetReservationCoverageOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *costexplorer.GetReservationCoverageInput, ...func(*costexplorer.Options)) *costexplorer.GetReservationCoverageOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*costexplorer.GetReservationCoverageOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *costexplorer.GetReservationCoverageInput, ...func(*costexplorer.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetReservationPurchaseRecommendation provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetReservationPurchaseRecommendation(ctx context.Context, params *costexplorer.GetReservationPurchaseRecommendationInput, optFns ...func(*costexplorer.Options)) (*costexplorer.GetReservationPurchaseRecommendationOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetReservationPurchaseRecommendation")
	}

	var r0 *costexplorer.GetReservationPurchaseRecommendationOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *costexplorer.GetReservationPurchaseRecommendationInput, ...func(*costexplorer.Options)) (*costexplorer.GetReservationPurchaseRecommendationOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *costexplorer.GetReservationPurchaseRecommendationInput, ...func(*costexplorer.Options)) *costexplorer.GetReservationPurchaseRecommendationOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*costexplorer.GetReservationPurchaseRecommendationOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *costexplorer.GetReservationPurchaseRecommendationInput, ...func(*costexplorer.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetReservationUtilization provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetReservationUtilization(ctx context.Context, params *costexplorer.GetReservationUtilizationInput, optFns ...func(*costexplorer.Options)) (*costexplorer.GetReservationUtilizationOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetReservationUtilization")
	}

	var r0 *costexplorer.GetReservationUtilizationOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *costexplorer.GetReservationUtilizationInput, ...func(*costexplorer.Options)) (*costexplorer.GetReservationUtilizationOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *costexplorer.GetReservationUtilizationInput, ...func(*costexplorer.Options)) *costexplorer.GetReservationUtilizationOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*costexplorer.GetReservationUtilizationOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *costexplorer.GetReservationUtilizationInput, ...func(*costexplorer.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetRightsizingRecommendation provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetRightsizingRecommendation(ctx context.Context, params *costexplorer.GetRightsizingRecommendationInput, optFns ...func(*costexplorer.Options)) (*costexplorer.GetRightsizingRecommendationOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetRightsizingRecommendation")
	}

	var r0 *costexplorer.GetRightsizingRecommendationOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *costexplorer.GetRightsizingRecommendationInput, ...func(*costexplorer.Options)) (*costexplorer.GetRightsizingRecommendationOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *costexplorer.GetRightsizingRecommendationInput, ...func(*costexplorer.Options)) *costexplorer.GetRightsizingRecommendationOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*costexplorer.GetRightsizingRecommendationOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *costexplorer.GetRightsizingRecommendationInput, ...func(*costexplorer.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetSavingsPlanPurchaseRecommendationDetails provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetSavingsPlanPurchaseRecommendationDetails(ctx context.Context, params *costexplorer.GetSavingsPlanPurchaseRecommendationDetailsInput, optFns ...func(*costexplorer.Options)) (*costexplorer.GetSavingsPlanPurchaseRecommendationDetailsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetSavingsPlanPurchaseRecommendationDetails")
	}

	var r0 *costexplorer.GetSavingsPlanPurchaseRecommendationDetailsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *costexplorer.GetSavingsPlanPurchaseRecommendationDetailsInput, ...func(*costexplorer.Options)) (*costexplorer.GetSavingsPlanPurchaseRecommendationDetailsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *costexplorer.GetSavingsPlanPurchaseRecommendationDetailsInput, ...func(*costexplorer.Options)) *costexplorer.GetSavingsPlanPurchaseRecommendationDetailsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*costexplorer.GetSavingsPlanPurchaseRecommendationDetailsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *costexplorer.GetSavingsPlanPurchaseRecommendationDetailsInput, ...func(*costexplorer.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetSavingsPlansCoverage provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetSavingsPlansCoverage(ctx context.Context, params *costexplorer.GetSavingsPlansCoverageInput, optFns ...func(*costexplorer.Options)) (*costexplorer.GetSavingsPlansCoverageOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetSavingsPlansCoverage")
	}

	var r0 *costexplorer.GetSavingsPlansCoverageOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *costexplorer.GetSavingsPlansCoverageInput, ...func(*costexplorer.Options)) (*costexplorer.GetSavingsPlansCoverageOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *costexplorer.GetSavingsPlansCoverageInput, ...func(*costexplorer.Options)) *costexplorer.GetSavingsPlansCoverageOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*costexplorer.GetSavingsPlansCoverageOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *costexplorer.GetSavingsPlansCoverageInput, ...func(*costexplorer.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetSavingsPlansPurchaseRecommendation provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetSavingsPlansPurchaseRecommendation(ctx context.Context, params *costexplorer.GetSavingsPlansPurchaseRecommendationInput, optFns ...func(*costexplorer.Options)) (*costexplorer.GetSavingsPlansPurchaseRecommendationOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetSavingsPlansPurchaseRecommendation")
	}

	var r0 *costexplorer.GetSavingsPlansPurchaseRecommendationOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *costexplorer.GetSavingsPlansPurchaseRecommendationInput, ...func(*costexplorer.Options)) (*costexplorer.GetSavingsPlansPurchaseRecommendationOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *costexplorer.GetSavingsPlansPurchaseRecommendationInput, ...func(*costexplorer.Options)) *costexplorer.GetSavingsPlansPurchaseRecommendationOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*costexplorer.GetSavingsPlansPurchaseRecommendationOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *costexplorer.GetSavingsPlansPurchaseRecommendationInput, ...func(*costexplorer.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetSavingsPlansUtilization provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetSavingsPlansUtilization(ctx context.Context, params *costexplorer.GetSavingsPlansUtilizationInput, optFns ...func(*costexplorer.Options)) (*costexplorer.GetSavingsPlansUtilizationOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetSavingsPlansUtilization")
	}

	var r0 *costexplorer.GetSavingsPlansUtilizationOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *costexplorer.GetSavingsPlansUtilizationInput, ...func(*costexplorer.Options)) (*costexplorer.GetSavingsPlansUtilizationOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *costexplorer.GetSavingsPlansUtilizationInput, ...func(*costexplorer.Options)) *costexplorer.GetSavingsPlansUtilizationOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*costexplorer.GetSavingsPlansUtilizationOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *costexplorer.GetSavingsPlansUtilizationInput, ...func(*costexplorer.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetSavingsPlansUtilizationDetails provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetSavingsPlansUtilizationDetails(ctx context.Context, params *costexplorer.GetSavingsPlansUtilizationDetailsInput, optFns ...func(*costexplorer.Options)) (*costexplorer.GetSavingsPlansUtilizationDetailsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetSavingsPlansUtilizationDetails")
	}

	var r0 *costexplorer.GetSavingsPlansUtilizationDetailsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *costexplorer.GetSavingsPlansUtilizationDetailsInput, ...func(*costexplorer.Options)) (*costexplorer.GetSavingsPlansUtilizationDetailsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *costexplorer.GetSavingsPlansUtilizationDetailsInput, ...func(*costexplorer.Options)) *costexplorer.GetSavingsPlansUtilizationDetailsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*costexplorer.GetSavingsPlansUtilizationDetailsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *costexplorer.GetSavingsPlansUtilizationDetailsInput, ...func(*costexplorer.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetTags provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetTags(ctx context.Context, params *costexplorer.GetTagsInput, optFns ...func(*costexplorer.Options)) (*costexplorer.GetTagsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetTags")
	}

	var r0 *costexplorer.GetTagsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *costexplorer.GetTagsInput, ...func(*costexplorer.Options)) (*costexplorer.GetTagsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *costexplorer.GetTagsInput, ...func(*costexplorer.Options)) *costexplorer.GetTagsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*costexplorer.GetTagsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *costexplorer.GetTagsInput, ...func(*costexplorer.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetUsageForecast provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetUsageForecast(ctx context.Context, params *costexplorer.GetUsageForecastInput, optFns ...func(*costexplorer.Options)) (*costexplorer.GetUsageForecastOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetUsageForecast")
	}

	var r0 *costexplorer.GetUsageForecastOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *costexplorer.GetUsageForecastInput, ...func(*costexplorer.Options)) (*costexplorer.GetUsageForecastOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *costexplorer.GetUsageForecastInput, ...func(*costexplorer.Options)) *costexplorer.GetUsageForecastOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*costexplorer.GetUsageForecastOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *costexplorer.GetUsageForecastInput, ...func(*costexplorer.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListCommitmentPurchaseAnalyses provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListCommitmentPurchaseAnalyses(ctx context.Context, params *costexplorer.ListCommitmentPurchaseAnalysesInput, optFns ...func(*costexplorer.Options)) (*costexplorer.ListCommitmentPurchaseAnalysesOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListCommitmentPurchaseAnalyses")
	}

	var r0 *costexplorer.ListCommitmentPurchaseAnalysesOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *costexplorer.ListCommitmentPurchaseAnalysesInput, ...func(*costexplorer.Options)) (*costexplorer.ListCommitmentPurchaseAnalysesOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *costexplorer.ListCommitmentPurchaseAnalysesInput, ...func(*costexplorer.Options)) *costexplorer.ListCommitmentPurchaseAnalysesOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*costexplorer.ListCommitmentPurchaseAnalysesOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *costexplorer.ListCommitmentPurchaseAnalysesInput, ...func(*costexplorer.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListCostAllocationTagBackfillHistory provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListCostAllocationTagBackfillHistory(ctx context.Context, params *costexplorer.ListCostAllocationTagBackfillHistoryInput, optFns ...func(*costexplorer.Options)) (*costexplorer.ListCostAllocationTagBackfillHistoryOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListCostAllocationTagBackfillHistory")
	}

	var r0 *costexplorer.ListCostAllocationTagBackfillHistoryOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *costexplorer.ListCostAllocationTagBackfillHistoryInput, ...func(*costexplorer.Options)) (*costexplorer.ListCostAllocationTagBackfillHistoryOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *costexplorer.ListCostAllocationTagBackfillHistoryInput, ...func(*costexplorer.Options)) *costexplorer.ListCostAllocationTagBackfillHistoryOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*costexplorer.ListCostAllocationTagBackfillHistoryOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *costexplorer.ListCostAllocationTagBackfillHistoryInput, ...func(*costexplorer.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListCostAllocationTags provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListCostAllocationTags(ctx context.Context, params *costexplorer.ListCostAllocationTagsInput, optFns ...func(*costexplorer.Options)) (*costexplorer.ListCostAllocationTagsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListCostAllocationTags")
	}

	var r0 *costexplorer.ListCostAllocationTagsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *costexplorer.ListCostAllocationTagsInput, ...func(*costexplorer.Options)) (*costexplorer.ListCostAllocationTagsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *costexplorer.ListCostAllocationTagsInput, ...func(*costexplorer.Options)) *costexplorer.ListCostAllocationTagsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*costexplorer.ListCostAllocationTagsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *costexplorer.ListCostAllocationTagsInput, ...func(*costexplorer.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListCostCategoryDefinitions provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListCostCategoryDefinitions(ctx context.Context, params *costexplorer.ListCostCategoryDefinitionsInput, optFns ...func(*costexplorer.Options)) (*costexplorer.ListCostCategoryDefinitionsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListCostCategoryDefinitions")
	}

	var r0 *costexplorer.ListCostCategoryDefinitionsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *costexplorer.ListCostCategoryDefinitionsInput, ...func(*costexplorer.Options)) (*costexplorer.ListCostCategoryDefinitionsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *costexplorer.ListCostCategoryDefinitionsInput, ...func(*costexplorer.Options)) *costexplorer.ListCostCategoryDefinitionsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*costexplorer.ListCostCategoryDefinitionsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *costexplorer.ListCostCategoryDefinitionsInput, ...func(*costexplorer.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListSavingsPlansPurchaseRecommendationGeneration provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListSavingsPlansPurchaseRecommendationGeneration(ctx context.Context, params *costexplorer.ListSavingsPlansPurchaseRecommendationGenerationInput, optFns ...func(*costexplorer.Options)) (*costexplorer.ListSavingsPlansPurchaseRecommendationGenerationOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListSavingsPlansPurchaseRecommendationGeneration")
	}

	var r0 *costexplorer.ListSavingsPlansPurchaseRecommendationGenerationOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *costexplorer.ListSavingsPlansPurchaseRecommendationGenerationInput, ...func(*costexplorer.Options)) (*costexplorer.ListSavingsPlansPurchaseRecommendationGenerationOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *costexplorer.ListSavingsPlansPurchaseRecommendationGenerationInput, ...func(*costexplorer.Options)) *costexplorer.ListSavingsPlansPurchaseRecommendationGenerationOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*costexplorer.ListSavingsPlansPurchaseRecommendationGenerationOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *costexplorer.ListSavingsPlansPurchaseRecommendationGenerationInput, ...func(*costexplorer.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListTagsForResource provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListTagsForResource(ctx context.Context, params *costexplorer.ListTagsForResourceInput, optFns ...func(*costexplorer.Options)) (*costexplorer.ListTagsForResourceOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListTagsForResource")
	}

	var r0 *costexplorer.ListTagsForResourceOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *costexplorer.ListTagsForResourceInput, ...func(*costexplorer.Options)) (*costexplorer.ListTagsForResourceOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *costexplorer.ListTagsForResourceInput, ...func(*costexplorer.Options)) *costexplorer.ListTagsForResourceOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*costexplorer.ListTagsForResourceOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *costexplorer.ListTagsForResourceInput, ...func(*costexplorer.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Options provides a mock function with no fields
func (_m *IClient) Options() costexplorer.Options {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Options")
	}

	var r0 costexplorer.Options
	if rf, ok := ret.Get(0).(func() costexplorer.Options); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(costexplorer.Options)
	}

	return r0
}

// ProvideAnomalyFeedback provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ProvideAnomalyFeedback(ctx context.Context, params *costexplorer.ProvideAnomalyFeedbackInput, optFns ...func(*costexplorer.Options)) (*costexplorer.ProvideAnomalyFeedbackOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ProvideAnomalyFeedback")
	}

	var r0 *costexplorer.ProvideAnomalyFeedbackOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *costexplorer.ProvideAnomalyFeedbackInput, ...func(*costexplorer.Options)) (*costexplorer.ProvideAnomalyFeedbackOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *costexplorer.ProvideAnomalyFeedbackInput, ...func(*costexplorer.Options)) *costexplorer.ProvideAnomalyFeedbackOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*costexplorer.ProvideAnomalyFeedbackOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *costexplorer.ProvideAnomalyFeedbackInput, ...func(*costexplorer.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// StartCommitmentPurchaseAnalysis provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) StartCommitmentPurchaseAnalysis(ctx context.Context, params *costexplorer.StartCommitmentPurchaseAnalysisInput, optFns ...func(*costexplorer.Options)) (*costexplorer.StartCommitmentPurchaseAnalysisOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for StartCommitmentPurchaseAnalysis")
	}

	var r0 *costexplorer.StartCommitmentPurchaseAnalysisOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *costexplorer.StartCommitmentPurchaseAnalysisInput, ...func(*costexplorer.Options)) (*costexplorer.StartCommitmentPurchaseAnalysisOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *costexplorer.StartCommitmentPurchaseAnalysisInput, ...func(*costexplorer.Options)) *costexplorer.StartCommitmentPurchaseAnalysisOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*costexplorer.StartCommitmentPurchaseAnalysisOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *costexplorer.StartCommitmentPurchaseAnalysisInput, ...func(*costexplorer.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// StartCostAllocationTagBackfill provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) StartCostAllocationTagBackfill(ctx context.Context, params *costexplorer.StartCostAllocationTagBackfillInput, optFns ...func(*costexplorer.Options)) (*costexplorer.StartCostAllocationTagBackfillOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for StartCostAllocationTagBackfill")
	}

	var r0 *costexplorer.StartCostAllocationTagBackfillOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *costexplorer.StartCostAllocationTagBackfillInput, ...func(*costexplorer.Options)) (*costexplorer.StartCostAllocationTagBackfillOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *costexplorer.StartCostAllocationTagBackfillInput, ...func(*costexplorer.Options)) *costexplorer.StartCostAllocationTagBackfillOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*costexplorer.StartCostAllocationTagBackfillOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *costexplorer.StartCostAllocationTagBackfillInput, ...func(*costexplorer.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// StartSavingsPlansPurchaseRecommendationGeneration provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) StartSavingsPlansPurchaseRecommendationGeneration(ctx context.Context, params *costexplorer.StartSavingsPlansPurchaseRecommendationGenerationInput, optFns ...func(*costexplorer.Options)) (*costexplorer.StartSavingsPlansPurchaseRecommendationGenerationOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for StartSavingsPlansPurchaseRecommendationGeneration")
	}

	var r0 *costexplorer.StartSavingsPlansPurchaseRecommendationGenerationOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *costexplorer.StartSavingsPlansPurchaseRecommendationGenerationInput, ...func(*costexplorer.Options)) (*costexplorer.StartSavingsPlansPurchaseRecommendationGenerationOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *costexplorer.StartSavingsPlansPurchaseRecommendationGenerationInput, ...func(*costexplorer.Options)) *costexplorer.StartSavingsPlansPurchaseRecommendationGenerationOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*costexplorer.StartSavingsPlansPurchaseRecommendationGenerationOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *costexplorer.StartSavingsPlansPurchaseRecommendationGenerationInput, ...func(*costexplorer.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// TagResource provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) TagResource(ctx context.Context, params *costexplorer.TagResourceInput, optFns ...func(*costexplorer.Options)) (*costexplorer.TagResourceOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for TagResource")
	}

	var r0 *costexplorer.TagResourceOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *costexplorer.TagResourceInput, ...func(*costexplorer.Options)) (*costexplorer.TagResourceOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *costexplorer.TagResourceInput, ...func(*costexplorer.Options)) *costexplorer.TagResourceOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*costexplorer.TagResourceOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *costexplorer.TagResourceInput, ...func(*costexplorer.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UntagResource provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UntagResource(ctx context.Context, params *costexplorer.UntagResourceInput, optFns ...func(*costexplorer.Options)) (*costexplorer.UntagResourceOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UntagResource")
	}

	var r0 *costexplorer.UntagResourceOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *costexplorer.UntagResourceInput, ...func(*costexplorer.Options)) (*costexplorer.UntagResourceOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *costexplorer.UntagResourceInput, ...func(*costexplorer.Options)) *costexplorer.UntagResourceOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*costexplorer.UntagResourceOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *costexplorer.UntagResourceInput, ...func(*costexplorer.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateAnomalyMonitor provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UpdateAnomalyMonitor(ctx context.Context, params *costexplorer.UpdateAnomalyMonitorInput, optFns ...func(*costexplorer.Options)) (*costexplorer.UpdateAnomalyMonitorOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateAnomalyMonitor")
	}

	var r0 *costexplorer.UpdateAnomalyMonitorOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *costexplorer.UpdateAnomalyMonitorInput, ...func(*costexplorer.Options)) (*costexplorer.UpdateAnomalyMonitorOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *costexplorer.UpdateAnomalyMonitorInput, ...func(*costexplorer.Options)) *costexplorer.UpdateAnomalyMonitorOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*costexplorer.UpdateAnomalyMonitorOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *costexplorer.UpdateAnomalyMonitorInput, ...func(*costexplorer.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateAnomalySubscription provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UpdateAnomalySubscription(ctx context.Context, params *costexplorer.UpdateAnomalySubscriptionInput, optFns ...func(*costexplorer.Options)) (*costexplorer.UpdateAnomalySubscriptionOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateAnomalySubscription")
	}

	var r0 *costexplorer.UpdateAnomalySubscriptionOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *costexplorer.UpdateAnomalySubscriptionInput, ...func(*costexplorer.Options)) (*costexplorer.UpdateAnomalySubscriptionOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *costexplorer.UpdateAnomalySubscriptionInput, ...func(*costexplorer.Options)) *costexplorer.UpdateAnomalySubscriptionOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*costexplorer.UpdateAnomalySubscriptionOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *costexplorer.UpdateAnomalySubscriptionInput, ...func(*costexplorer.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateCostAllocationTagsStatus provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UpdateCostAllocationTagsStatus(ctx context.Context, params *costexplorer.UpdateCostAllocationTagsStatusInput, optFns ...func(*costexplorer.Options)) (*costexplorer.UpdateCostAllocationTagsStatusOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateCostAllocationTagsStatus")
	}

	var r0 *costexplorer.UpdateCostAllocationTagsStatusOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *costexplorer.UpdateCostAllocationTagsStatusInput, ...func(*costexplorer.Options)) (*costexplorer.UpdateCostAllocationTagsStatusOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *costexplorer.UpdateCostAllocationTagsStatusInput, ...func(*costexplorer.Options)) *costexplorer.UpdateCostAllocationTagsStatusOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*costexplorer.UpdateCostAllocationTagsStatusOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *costexplorer.UpdateCostAllocationTagsStatusInput, ...func(*costexplorer.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateCostCategoryDefinition provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UpdateCostCategoryDefinition(ctx context.Context, params *costexplorer.UpdateCostCategoryDefinitionInput, optFns ...func(*costexplorer.Options)) (*costexplorer.UpdateCostCategoryDefinitionOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateCostCategoryDefinition")
	}

	var r0 *costexplorer.UpdateCostCategoryDefinitionOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *costexplorer.UpdateCostCategoryDefinitionInput, ...func(*costexplorer.Options)) (*costexplorer.UpdateCostCategoryDefinitionOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *costexplorer.UpdateCostCategoryDefinitionInput, ...func(*costexplorer.Options)) *costexplorer.UpdateCostCategoryDefinitionOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*costexplorer.UpdateCostCategoryDefinitionOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *costexplorer.UpdateCostCategoryDefinitionInput, ...func(*costexplorer.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewIClient creates a new instance of IClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewIClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *IClient {
	mock := &IClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
