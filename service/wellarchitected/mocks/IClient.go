// Code generated by mockery v2.43.2. DO NOT EDIT.

package mocks

import (
	context "context"

	wellarchitected "github.com/aws/aws-sdk-go-v2/service/wellarchitected"
	mock "github.com/stretchr/testify/mock"
)

// IClient is an autogenerated mock type for the IClient type
type IClient struct {
	mock.Mock
}

// AssociateLenses provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) AssociateLenses(ctx context.Context, params *wellarchitected.AssociateLensesInput, optFns ...func(*wellarchitected.Options)) (*wellarchitected.AssociateLensesOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for AssociateLenses")
	}

	var r0 *wellarchitected.AssociateLensesOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *wellarchitected.AssociateLensesInput, ...func(*wellarchitected.Options)) (*wellarchitected.AssociateLensesOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *wellarchitected.AssociateLensesInput, ...func(*wellarchitected.Options)) *wellarchitected.AssociateLensesOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*wellarchitected.AssociateLensesOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *wellarchitected.AssociateLensesInput, ...func(*wellarchitected.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AssociateProfiles provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) AssociateProfiles(ctx context.Context, params *wellarchitected.AssociateProfilesInput, optFns ...func(*wellarchitected.Options)) (*wellarchitected.AssociateProfilesOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for AssociateProfiles")
	}

	var r0 *wellarchitected.AssociateProfilesOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *wellarchitected.AssociateProfilesInput, ...func(*wellarchitected.Options)) (*wellarchitected.AssociateProfilesOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *wellarchitected.AssociateProfilesInput, ...func(*wellarchitected.Options)) *wellarchitected.AssociateProfilesOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*wellarchitected.AssociateProfilesOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *wellarchitected.AssociateProfilesInput, ...func(*wellarchitected.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateLensShare provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CreateLensShare(ctx context.Context, params *wellarchitected.CreateLensShareInput, optFns ...func(*wellarchitected.Options)) (*wellarchitected.CreateLensShareOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateLensShare")
	}

	var r0 *wellarchitected.CreateLensShareOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *wellarchitected.CreateLensShareInput, ...func(*wellarchitected.Options)) (*wellarchitected.CreateLensShareOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *wellarchitected.CreateLensShareInput, ...func(*wellarchitected.Options)) *wellarchitected.CreateLensShareOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*wellarchitected.CreateLensShareOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *wellarchitected.CreateLensShareInput, ...func(*wellarchitected.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateLensVersion provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CreateLensVersion(ctx context.Context, params *wellarchitected.CreateLensVersionInput, optFns ...func(*wellarchitected.Options)) (*wellarchitected.CreateLensVersionOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateLensVersion")
	}

	var r0 *wellarchitected.CreateLensVersionOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *wellarchitected.CreateLensVersionInput, ...func(*wellarchitected.Options)) (*wellarchitected.CreateLensVersionOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *wellarchitected.CreateLensVersionInput, ...func(*wellarchitected.Options)) *wellarchitected.CreateLensVersionOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*wellarchitected.CreateLensVersionOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *wellarchitected.CreateLensVersionInput, ...func(*wellarchitected.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateMilestone provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CreateMilestone(ctx context.Context, params *wellarchitected.CreateMilestoneInput, optFns ...func(*wellarchitected.Options)) (*wellarchitected.CreateMilestoneOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateMilestone")
	}

	var r0 *wellarchitected.CreateMilestoneOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *wellarchitected.CreateMilestoneInput, ...func(*wellarchitected.Options)) (*wellarchitected.CreateMilestoneOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *wellarchitected.CreateMilestoneInput, ...func(*wellarchitected.Options)) *wellarchitected.CreateMilestoneOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*wellarchitected.CreateMilestoneOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *wellarchitected.CreateMilestoneInput, ...func(*wellarchitected.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateProfile provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CreateProfile(ctx context.Context, params *wellarchitected.CreateProfileInput, optFns ...func(*wellarchitected.Options)) (*wellarchitected.CreateProfileOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateProfile")
	}

	var r0 *wellarchitected.CreateProfileOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *wellarchitected.CreateProfileInput, ...func(*wellarchitected.Options)) (*wellarchitected.CreateProfileOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *wellarchitected.CreateProfileInput, ...func(*wellarchitected.Options)) *wellarchitected.CreateProfileOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*wellarchitected.CreateProfileOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *wellarchitected.CreateProfileInput, ...func(*wellarchitected.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateProfileShare provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CreateProfileShare(ctx context.Context, params *wellarchitected.CreateProfileShareInput, optFns ...func(*wellarchitected.Options)) (*wellarchitected.CreateProfileShareOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateProfileShare")
	}

	var r0 *wellarchitected.CreateProfileShareOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *wellarchitected.CreateProfileShareInput, ...func(*wellarchitected.Options)) (*wellarchitected.CreateProfileShareOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *wellarchitected.CreateProfileShareInput, ...func(*wellarchitected.Options)) *wellarchitected.CreateProfileShareOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*wellarchitected.CreateProfileShareOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *wellarchitected.CreateProfileShareInput, ...func(*wellarchitected.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateReviewTemplate provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CreateReviewTemplate(ctx context.Context, params *wellarchitected.CreateReviewTemplateInput, optFns ...func(*wellarchitected.Options)) (*wellarchitected.CreateReviewTemplateOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateReviewTemplate")
	}

	var r0 *wellarchitected.CreateReviewTemplateOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *wellarchitected.CreateReviewTemplateInput, ...func(*wellarchitected.Options)) (*wellarchitected.CreateReviewTemplateOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *wellarchitected.CreateReviewTemplateInput, ...func(*wellarchitected.Options)) *wellarchitected.CreateReviewTemplateOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*wellarchitected.CreateReviewTemplateOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *wellarchitected.CreateReviewTemplateInput, ...func(*wellarchitected.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateTemplateShare provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CreateTemplateShare(ctx context.Context, params *wellarchitected.CreateTemplateShareInput, optFns ...func(*wellarchitected.Options)) (*wellarchitected.CreateTemplateShareOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateTemplateShare")
	}

	var r0 *wellarchitected.CreateTemplateShareOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *wellarchitected.CreateTemplateShareInput, ...func(*wellarchitected.Options)) (*wellarchitected.CreateTemplateShareOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *wellarchitected.CreateTemplateShareInput, ...func(*wellarchitected.Options)) *wellarchitected.CreateTemplateShareOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*wellarchitected.CreateTemplateShareOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *wellarchitected.CreateTemplateShareInput, ...func(*wellarchitected.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateWorkload provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CreateWorkload(ctx context.Context, params *wellarchitected.CreateWorkloadInput, optFns ...func(*wellarchitected.Options)) (*wellarchitected.CreateWorkloadOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateWorkload")
	}

	var r0 *wellarchitected.CreateWorkloadOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *wellarchitected.CreateWorkloadInput, ...func(*wellarchitected.Options)) (*wellarchitected.CreateWorkloadOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *wellarchitected.CreateWorkloadInput, ...func(*wellarchitected.Options)) *wellarchitected.CreateWorkloadOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*wellarchitected.CreateWorkloadOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *wellarchitected.CreateWorkloadInput, ...func(*wellarchitected.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateWorkloadShare provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CreateWorkloadShare(ctx context.Context, params *wellarchitected.CreateWorkloadShareInput, optFns ...func(*wellarchitected.Options)) (*wellarchitected.CreateWorkloadShareOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateWorkloadShare")
	}

	var r0 *wellarchitected.CreateWorkloadShareOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *wellarchitected.CreateWorkloadShareInput, ...func(*wellarchitected.Options)) (*wellarchitected.CreateWorkloadShareOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *wellarchitected.CreateWorkloadShareInput, ...func(*wellarchitected.Options)) *wellarchitected.CreateWorkloadShareOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*wellarchitected.CreateWorkloadShareOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *wellarchitected.CreateWorkloadShareInput, ...func(*wellarchitected.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteLens provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteLens(ctx context.Context, params *wellarchitected.DeleteLensInput, optFns ...func(*wellarchitected.Options)) (*wellarchitected.DeleteLensOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteLens")
	}

	var r0 *wellarchitected.DeleteLensOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *wellarchitected.DeleteLensInput, ...func(*wellarchitected.Options)) (*wellarchitected.DeleteLensOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *wellarchitected.DeleteLensInput, ...func(*wellarchitected.Options)) *wellarchitected.DeleteLensOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*wellarchitected.DeleteLensOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *wellarchitected.DeleteLensInput, ...func(*wellarchitected.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteLensShare provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteLensShare(ctx context.Context, params *wellarchitected.DeleteLensShareInput, optFns ...func(*wellarchitected.Options)) (*wellarchitected.DeleteLensShareOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteLensShare")
	}

	var r0 *wellarchitected.DeleteLensShareOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *wellarchitected.DeleteLensShareInput, ...func(*wellarchitected.Options)) (*wellarchitected.DeleteLensShareOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *wellarchitected.DeleteLensShareInput, ...func(*wellarchitected.Options)) *wellarchitected.DeleteLensShareOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*wellarchitected.DeleteLensShareOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *wellarchitected.DeleteLensShareInput, ...func(*wellarchitected.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteProfile provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteProfile(ctx context.Context, params *wellarchitected.DeleteProfileInput, optFns ...func(*wellarchitected.Options)) (*wellarchitected.DeleteProfileOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteProfile")
	}

	var r0 *wellarchitected.DeleteProfileOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *wellarchitected.DeleteProfileInput, ...func(*wellarchitected.Options)) (*wellarchitected.DeleteProfileOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *wellarchitected.DeleteProfileInput, ...func(*wellarchitected.Options)) *wellarchitected.DeleteProfileOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*wellarchitected.DeleteProfileOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *wellarchitected.DeleteProfileInput, ...func(*wellarchitected.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteProfileShare provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteProfileShare(ctx context.Context, params *wellarchitected.DeleteProfileShareInput, optFns ...func(*wellarchitected.Options)) (*wellarchitected.DeleteProfileShareOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteProfileShare")
	}

	var r0 *wellarchitected.DeleteProfileShareOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *wellarchitected.DeleteProfileShareInput, ...func(*wellarchitected.Options)) (*wellarchitected.DeleteProfileShareOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *wellarchitected.DeleteProfileShareInput, ...func(*wellarchitected.Options)) *wellarchitected.DeleteProfileShareOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*wellarchitected.DeleteProfileShareOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *wellarchitected.DeleteProfileShareInput, ...func(*wellarchitected.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteReviewTemplate provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteReviewTemplate(ctx context.Context, params *wellarchitected.DeleteReviewTemplateInput, optFns ...func(*wellarchitected.Options)) (*wellarchitected.DeleteReviewTemplateOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteReviewTemplate")
	}

	var r0 *wellarchitected.DeleteReviewTemplateOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *wellarchitected.DeleteReviewTemplateInput, ...func(*wellarchitected.Options)) (*wellarchitected.DeleteReviewTemplateOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *wellarchitected.DeleteReviewTemplateInput, ...func(*wellarchitected.Options)) *wellarchitected.DeleteReviewTemplateOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*wellarchitected.DeleteReviewTemplateOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *wellarchitected.DeleteReviewTemplateInput, ...func(*wellarchitected.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteTemplateShare provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteTemplateShare(ctx context.Context, params *wellarchitected.DeleteTemplateShareInput, optFns ...func(*wellarchitected.Options)) (*wellarchitected.DeleteTemplateShareOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteTemplateShare")
	}

	var r0 *wellarchitected.DeleteTemplateShareOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *wellarchitected.DeleteTemplateShareInput, ...func(*wellarchitected.Options)) (*wellarchitected.DeleteTemplateShareOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *wellarchitected.DeleteTemplateShareInput, ...func(*wellarchitected.Options)) *wellarchitected.DeleteTemplateShareOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*wellarchitected.DeleteTemplateShareOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *wellarchitected.DeleteTemplateShareInput, ...func(*wellarchitected.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteWorkload provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteWorkload(ctx context.Context, params *wellarchitected.DeleteWorkloadInput, optFns ...func(*wellarchitected.Options)) (*wellarchitected.DeleteWorkloadOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteWorkload")
	}

	var r0 *wellarchitected.DeleteWorkloadOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *wellarchitected.DeleteWorkloadInput, ...func(*wellarchitected.Options)) (*wellarchitected.DeleteWorkloadOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *wellarchitected.DeleteWorkloadInput, ...func(*wellarchitected.Options)) *wellarchitected.DeleteWorkloadOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*wellarchitected.DeleteWorkloadOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *wellarchitected.DeleteWorkloadInput, ...func(*wellarchitected.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteWorkloadShare provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteWorkloadShare(ctx context.Context, params *wellarchitected.DeleteWorkloadShareInput, optFns ...func(*wellarchitected.Options)) (*wellarchitected.DeleteWorkloadShareOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteWorkloadShare")
	}

	var r0 *wellarchitected.DeleteWorkloadShareOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *wellarchitected.DeleteWorkloadShareInput, ...func(*wellarchitected.Options)) (*wellarchitected.DeleteWorkloadShareOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *wellarchitected.DeleteWorkloadShareInput, ...func(*wellarchitected.Options)) *wellarchitected.DeleteWorkloadShareOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*wellarchitected.DeleteWorkloadShareOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *wellarchitected.DeleteWorkloadShareInput, ...func(*wellarchitected.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DisassociateLenses provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DisassociateLenses(ctx context.Context, params *wellarchitected.DisassociateLensesInput, optFns ...func(*wellarchitected.Options)) (*wellarchitected.DisassociateLensesOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DisassociateLenses")
	}

	var r0 *wellarchitected.DisassociateLensesOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *wellarchitected.DisassociateLensesInput, ...func(*wellarchitected.Options)) (*wellarchitected.DisassociateLensesOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *wellarchitected.DisassociateLensesInput, ...func(*wellarchitected.Options)) *wellarchitected.DisassociateLensesOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*wellarchitected.DisassociateLensesOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *wellarchitected.DisassociateLensesInput, ...func(*wellarchitected.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DisassociateProfiles provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DisassociateProfiles(ctx context.Context, params *wellarchitected.DisassociateProfilesInput, optFns ...func(*wellarchitected.Options)) (*wellarchitected.DisassociateProfilesOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DisassociateProfiles")
	}

	var r0 *wellarchitected.DisassociateProfilesOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *wellarchitected.DisassociateProfilesInput, ...func(*wellarchitected.Options)) (*wellarchitected.DisassociateProfilesOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *wellarchitected.DisassociateProfilesInput, ...func(*wellarchitected.Options)) *wellarchitected.DisassociateProfilesOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*wellarchitected.DisassociateProfilesOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *wellarchitected.DisassociateProfilesInput, ...func(*wellarchitected.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ExportLens provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ExportLens(ctx context.Context, params *wellarchitected.ExportLensInput, optFns ...func(*wellarchitected.Options)) (*wellarchitected.ExportLensOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ExportLens")
	}

	var r0 *wellarchitected.ExportLensOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *wellarchitected.ExportLensInput, ...func(*wellarchitected.Options)) (*wellarchitected.ExportLensOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *wellarchitected.ExportLensInput, ...func(*wellarchitected.Options)) *wellarchitected.ExportLensOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*wellarchitected.ExportLensOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *wellarchitected.ExportLensInput, ...func(*wellarchitected.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAnswer provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetAnswer(ctx context.Context, params *wellarchitected.GetAnswerInput, optFns ...func(*wellarchitected.Options)) (*wellarchitected.GetAnswerOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetAnswer")
	}

	var r0 *wellarchitected.GetAnswerOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *wellarchitected.GetAnswerInput, ...func(*wellarchitected.Options)) (*wellarchitected.GetAnswerOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *wellarchitected.GetAnswerInput, ...func(*wellarchitected.Options)) *wellarchitected.GetAnswerOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*wellarchitected.GetAnswerOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *wellarchitected.GetAnswerInput, ...func(*wellarchitected.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetConsolidatedReport provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetConsolidatedReport(ctx context.Context, params *wellarchitected.GetConsolidatedReportInput, optFns ...func(*wellarchitected.Options)) (*wellarchitected.GetConsolidatedReportOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetConsolidatedReport")
	}

	var r0 *wellarchitected.GetConsolidatedReportOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *wellarchitected.GetConsolidatedReportInput, ...func(*wellarchitected.Options)) (*wellarchitected.GetConsolidatedReportOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *wellarchitected.GetConsolidatedReportInput, ...func(*wellarchitected.Options)) *wellarchitected.GetConsolidatedReportOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*wellarchitected.GetConsolidatedReportOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *wellarchitected.GetConsolidatedReportInput, ...func(*wellarchitected.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetGlobalSettings provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetGlobalSettings(ctx context.Context, params *wellarchitected.GetGlobalSettingsInput, optFns ...func(*wellarchitected.Options)) (*wellarchitected.GetGlobalSettingsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetGlobalSettings")
	}

	var r0 *wellarchitected.GetGlobalSettingsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *wellarchitected.GetGlobalSettingsInput, ...func(*wellarchitected.Options)) (*wellarchitected.GetGlobalSettingsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *wellarchitected.GetGlobalSettingsInput, ...func(*wellarchitected.Options)) *wellarchitected.GetGlobalSettingsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*wellarchitected.GetGlobalSettingsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *wellarchitected.GetGlobalSettingsInput, ...func(*wellarchitected.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetLens provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetLens(ctx context.Context, params *wellarchitected.GetLensInput, optFns ...func(*wellarchitected.Options)) (*wellarchitected.GetLensOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetLens")
	}

	var r0 *wellarchitected.GetLensOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *wellarchitected.GetLensInput, ...func(*wellarchitected.Options)) (*wellarchitected.GetLensOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *wellarchitected.GetLensInput, ...func(*wellarchitected.Options)) *wellarchitected.GetLensOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*wellarchitected.GetLensOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *wellarchitected.GetLensInput, ...func(*wellarchitected.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetLensReview provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetLensReview(ctx context.Context, params *wellarchitected.GetLensReviewInput, optFns ...func(*wellarchitected.Options)) (*wellarchitected.GetLensReviewOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetLensReview")
	}

	var r0 *wellarchitected.GetLensReviewOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *wellarchitected.GetLensReviewInput, ...func(*wellarchitected.Options)) (*wellarchitected.GetLensReviewOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *wellarchitected.GetLensReviewInput, ...func(*wellarchitected.Options)) *wellarchitected.GetLensReviewOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*wellarchitected.GetLensReviewOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *wellarchitected.GetLensReviewInput, ...func(*wellarchitected.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetLensReviewReport provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetLensReviewReport(ctx context.Context, params *wellarchitected.GetLensReviewReportInput, optFns ...func(*wellarchitected.Options)) (*wellarchitected.GetLensReviewReportOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetLensReviewReport")
	}

	var r0 *wellarchitected.GetLensReviewReportOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *wellarchitected.GetLensReviewReportInput, ...func(*wellarchitected.Options)) (*wellarchitected.GetLensReviewReportOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *wellarchitected.GetLensReviewReportInput, ...func(*wellarchitected.Options)) *wellarchitected.GetLensReviewReportOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*wellarchitected.GetLensReviewReportOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *wellarchitected.GetLensReviewReportInput, ...func(*wellarchitected.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetLensVersionDifference provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetLensVersionDifference(ctx context.Context, params *wellarchitected.GetLensVersionDifferenceInput, optFns ...func(*wellarchitected.Options)) (*wellarchitected.GetLensVersionDifferenceOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetLensVersionDifference")
	}

	var r0 *wellarchitected.GetLensVersionDifferenceOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *wellarchitected.GetLensVersionDifferenceInput, ...func(*wellarchitected.Options)) (*wellarchitected.GetLensVersionDifferenceOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *wellarchitected.GetLensVersionDifferenceInput, ...func(*wellarchitected.Options)) *wellarchitected.GetLensVersionDifferenceOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*wellarchitected.GetLensVersionDifferenceOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *wellarchitected.GetLensVersionDifferenceInput, ...func(*wellarchitected.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetMilestone provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetMilestone(ctx context.Context, params *wellarchitected.GetMilestoneInput, optFns ...func(*wellarchitected.Options)) (*wellarchitected.GetMilestoneOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetMilestone")
	}

	var r0 *wellarchitected.GetMilestoneOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *wellarchitected.GetMilestoneInput, ...func(*wellarchitected.Options)) (*wellarchitected.GetMilestoneOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *wellarchitected.GetMilestoneInput, ...func(*wellarchitected.Options)) *wellarchitected.GetMilestoneOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*wellarchitected.GetMilestoneOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *wellarchitected.GetMilestoneInput, ...func(*wellarchitected.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetProfile provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetProfile(ctx context.Context, params *wellarchitected.GetProfileInput, optFns ...func(*wellarchitected.Options)) (*wellarchitected.GetProfileOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetProfile")
	}

	var r0 *wellarchitected.GetProfileOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *wellarchitected.GetProfileInput, ...func(*wellarchitected.Options)) (*wellarchitected.GetProfileOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *wellarchitected.GetProfileInput, ...func(*wellarchitected.Options)) *wellarchitected.GetProfileOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*wellarchitected.GetProfileOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *wellarchitected.GetProfileInput, ...func(*wellarchitected.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetProfileTemplate provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetProfileTemplate(ctx context.Context, params *wellarchitected.GetProfileTemplateInput, optFns ...func(*wellarchitected.Options)) (*wellarchitected.GetProfileTemplateOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetProfileTemplate")
	}

	var r0 *wellarchitected.GetProfileTemplateOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *wellarchitected.GetProfileTemplateInput, ...func(*wellarchitected.Options)) (*wellarchitected.GetProfileTemplateOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *wellarchitected.GetProfileTemplateInput, ...func(*wellarchitected.Options)) *wellarchitected.GetProfileTemplateOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*wellarchitected.GetProfileTemplateOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *wellarchitected.GetProfileTemplateInput, ...func(*wellarchitected.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetReviewTemplate provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetReviewTemplate(ctx context.Context, params *wellarchitected.GetReviewTemplateInput, optFns ...func(*wellarchitected.Options)) (*wellarchitected.GetReviewTemplateOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetReviewTemplate")
	}

	var r0 *wellarchitected.GetReviewTemplateOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *wellarchitected.GetReviewTemplateInput, ...func(*wellarchitected.Options)) (*wellarchitected.GetReviewTemplateOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *wellarchitected.GetReviewTemplateInput, ...func(*wellarchitected.Options)) *wellarchitected.GetReviewTemplateOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*wellarchitected.GetReviewTemplateOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *wellarchitected.GetReviewTemplateInput, ...func(*wellarchitected.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetReviewTemplateAnswer provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetReviewTemplateAnswer(ctx context.Context, params *wellarchitected.GetReviewTemplateAnswerInput, optFns ...func(*wellarchitected.Options)) (*wellarchitected.GetReviewTemplateAnswerOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetReviewTemplateAnswer")
	}

	var r0 *wellarchitected.GetReviewTemplateAnswerOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *wellarchitected.GetReviewTemplateAnswerInput, ...func(*wellarchitected.Options)) (*wellarchitected.GetReviewTemplateAnswerOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *wellarchitected.GetReviewTemplateAnswerInput, ...func(*wellarchitected.Options)) *wellarchitected.GetReviewTemplateAnswerOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*wellarchitected.GetReviewTemplateAnswerOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *wellarchitected.GetReviewTemplateAnswerInput, ...func(*wellarchitected.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetReviewTemplateLensReview provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetReviewTemplateLensReview(ctx context.Context, params *wellarchitected.GetReviewTemplateLensReviewInput, optFns ...func(*wellarchitected.Options)) (*wellarchitected.GetReviewTemplateLensReviewOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetReviewTemplateLensReview")
	}

	var r0 *wellarchitected.GetReviewTemplateLensReviewOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *wellarchitected.GetReviewTemplateLensReviewInput, ...func(*wellarchitected.Options)) (*wellarchitected.GetReviewTemplateLensReviewOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *wellarchitected.GetReviewTemplateLensReviewInput, ...func(*wellarchitected.Options)) *wellarchitected.GetReviewTemplateLensReviewOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*wellarchitected.GetReviewTemplateLensReviewOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *wellarchitected.GetReviewTemplateLensReviewInput, ...func(*wellarchitected.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetWorkload provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetWorkload(ctx context.Context, params *wellarchitected.GetWorkloadInput, optFns ...func(*wellarchitected.Options)) (*wellarchitected.GetWorkloadOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetWorkload")
	}

	var r0 *wellarchitected.GetWorkloadOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *wellarchitected.GetWorkloadInput, ...func(*wellarchitected.Options)) (*wellarchitected.GetWorkloadOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *wellarchitected.GetWorkloadInput, ...func(*wellarchitected.Options)) *wellarchitected.GetWorkloadOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*wellarchitected.GetWorkloadOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *wellarchitected.GetWorkloadInput, ...func(*wellarchitected.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ImportLens provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ImportLens(ctx context.Context, params *wellarchitected.ImportLensInput, optFns ...func(*wellarchitected.Options)) (*wellarchitected.ImportLensOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ImportLens")
	}

	var r0 *wellarchitected.ImportLensOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *wellarchitected.ImportLensInput, ...func(*wellarchitected.Options)) (*wellarchitected.ImportLensOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *wellarchitected.ImportLensInput, ...func(*wellarchitected.Options)) *wellarchitected.ImportLensOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*wellarchitected.ImportLensOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *wellarchitected.ImportLensInput, ...func(*wellarchitected.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListAnswers provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListAnswers(ctx context.Context, params *wellarchitected.ListAnswersInput, optFns ...func(*wellarchitected.Options)) (*wellarchitected.ListAnswersOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListAnswers")
	}

	var r0 *wellarchitected.ListAnswersOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *wellarchitected.ListAnswersInput, ...func(*wellarchitected.Options)) (*wellarchitected.ListAnswersOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *wellarchitected.ListAnswersInput, ...func(*wellarchitected.Options)) *wellarchitected.ListAnswersOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*wellarchitected.ListAnswersOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *wellarchitected.ListAnswersInput, ...func(*wellarchitected.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListCheckDetails provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListCheckDetails(ctx context.Context, params *wellarchitected.ListCheckDetailsInput, optFns ...func(*wellarchitected.Options)) (*wellarchitected.ListCheckDetailsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListCheckDetails")
	}

	var r0 *wellarchitected.ListCheckDetailsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *wellarchitected.ListCheckDetailsInput, ...func(*wellarchitected.Options)) (*wellarchitected.ListCheckDetailsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *wellarchitected.ListCheckDetailsInput, ...func(*wellarchitected.Options)) *wellarchitected.ListCheckDetailsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*wellarchitected.ListCheckDetailsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *wellarchitected.ListCheckDetailsInput, ...func(*wellarchitected.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListCheckSummaries provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListCheckSummaries(ctx context.Context, params *wellarchitected.ListCheckSummariesInput, optFns ...func(*wellarchitected.Options)) (*wellarchitected.ListCheckSummariesOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListCheckSummaries")
	}

	var r0 *wellarchitected.ListCheckSummariesOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *wellarchitected.ListCheckSummariesInput, ...func(*wellarchitected.Options)) (*wellarchitected.ListCheckSummariesOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *wellarchitected.ListCheckSummariesInput, ...func(*wellarchitected.Options)) *wellarchitected.ListCheckSummariesOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*wellarchitected.ListCheckSummariesOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *wellarchitected.ListCheckSummariesInput, ...func(*wellarchitected.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListLensReviewImprovements provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListLensReviewImprovements(ctx context.Context, params *wellarchitected.ListLensReviewImprovementsInput, optFns ...func(*wellarchitected.Options)) (*wellarchitected.ListLensReviewImprovementsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListLensReviewImprovements")
	}

	var r0 *wellarchitected.ListLensReviewImprovementsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *wellarchitected.ListLensReviewImprovementsInput, ...func(*wellarchitected.Options)) (*wellarchitected.ListLensReviewImprovementsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *wellarchitected.ListLensReviewImprovementsInput, ...func(*wellarchitected.Options)) *wellarchitected.ListLensReviewImprovementsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*wellarchitected.ListLensReviewImprovementsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *wellarchitected.ListLensReviewImprovementsInput, ...func(*wellarchitected.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListLensReviews provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListLensReviews(ctx context.Context, params *wellarchitected.ListLensReviewsInput, optFns ...func(*wellarchitected.Options)) (*wellarchitected.ListLensReviewsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListLensReviews")
	}

	var r0 *wellarchitected.ListLensReviewsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *wellarchitected.ListLensReviewsInput, ...func(*wellarchitected.Options)) (*wellarchitected.ListLensReviewsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *wellarchitected.ListLensReviewsInput, ...func(*wellarchitected.Options)) *wellarchitected.ListLensReviewsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*wellarchitected.ListLensReviewsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *wellarchitected.ListLensReviewsInput, ...func(*wellarchitected.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListLensShares provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListLensShares(ctx context.Context, params *wellarchitected.ListLensSharesInput, optFns ...func(*wellarchitected.Options)) (*wellarchitected.ListLensSharesOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListLensShares")
	}

	var r0 *wellarchitected.ListLensSharesOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *wellarchitected.ListLensSharesInput, ...func(*wellarchitected.Options)) (*wellarchitected.ListLensSharesOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *wellarchitected.ListLensSharesInput, ...func(*wellarchitected.Options)) *wellarchitected.ListLensSharesOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*wellarchitected.ListLensSharesOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *wellarchitected.ListLensSharesInput, ...func(*wellarchitected.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListLenses provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListLenses(ctx context.Context, params *wellarchitected.ListLensesInput, optFns ...func(*wellarchitected.Options)) (*wellarchitected.ListLensesOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListLenses")
	}

	var r0 *wellarchitected.ListLensesOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *wellarchitected.ListLensesInput, ...func(*wellarchitected.Options)) (*wellarchitected.ListLensesOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *wellarchitected.ListLensesInput, ...func(*wellarchitected.Options)) *wellarchitected.ListLensesOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*wellarchitected.ListLensesOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *wellarchitected.ListLensesInput, ...func(*wellarchitected.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListMilestones provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListMilestones(ctx context.Context, params *wellarchitected.ListMilestonesInput, optFns ...func(*wellarchitected.Options)) (*wellarchitected.ListMilestonesOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListMilestones")
	}

	var r0 *wellarchitected.ListMilestonesOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *wellarchitected.ListMilestonesInput, ...func(*wellarchitected.Options)) (*wellarchitected.ListMilestonesOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *wellarchitected.ListMilestonesInput, ...func(*wellarchitected.Options)) *wellarchitected.ListMilestonesOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*wellarchitected.ListMilestonesOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *wellarchitected.ListMilestonesInput, ...func(*wellarchitected.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListNotifications provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListNotifications(ctx context.Context, params *wellarchitected.ListNotificationsInput, optFns ...func(*wellarchitected.Options)) (*wellarchitected.ListNotificationsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListNotifications")
	}

	var r0 *wellarchitected.ListNotificationsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *wellarchitected.ListNotificationsInput, ...func(*wellarchitected.Options)) (*wellarchitected.ListNotificationsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *wellarchitected.ListNotificationsInput, ...func(*wellarchitected.Options)) *wellarchitected.ListNotificationsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*wellarchitected.ListNotificationsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *wellarchitected.ListNotificationsInput, ...func(*wellarchitected.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListProfileNotifications provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListProfileNotifications(ctx context.Context, params *wellarchitected.ListProfileNotificationsInput, optFns ...func(*wellarchitected.Options)) (*wellarchitected.ListProfileNotificationsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListProfileNotifications")
	}

	var r0 *wellarchitected.ListProfileNotificationsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *wellarchitected.ListProfileNotificationsInput, ...func(*wellarchitected.Options)) (*wellarchitected.ListProfileNotificationsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *wellarchitected.ListProfileNotificationsInput, ...func(*wellarchitected.Options)) *wellarchitected.ListProfileNotificationsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*wellarchitected.ListProfileNotificationsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *wellarchitected.ListProfileNotificationsInput, ...func(*wellarchitected.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListProfileShares provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListProfileShares(ctx context.Context, params *wellarchitected.ListProfileSharesInput, optFns ...func(*wellarchitected.Options)) (*wellarchitected.ListProfileSharesOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListProfileShares")
	}

	var r0 *wellarchitected.ListProfileSharesOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *wellarchitected.ListProfileSharesInput, ...func(*wellarchitected.Options)) (*wellarchitected.ListProfileSharesOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *wellarchitected.ListProfileSharesInput, ...func(*wellarchitected.Options)) *wellarchitected.ListProfileSharesOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*wellarchitected.ListProfileSharesOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *wellarchitected.ListProfileSharesInput, ...func(*wellarchitected.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListProfiles provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListProfiles(ctx context.Context, params *wellarchitected.ListProfilesInput, optFns ...func(*wellarchitected.Options)) (*wellarchitected.ListProfilesOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListProfiles")
	}

	var r0 *wellarchitected.ListProfilesOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *wellarchitected.ListProfilesInput, ...func(*wellarchitected.Options)) (*wellarchitected.ListProfilesOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *wellarchitected.ListProfilesInput, ...func(*wellarchitected.Options)) *wellarchitected.ListProfilesOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*wellarchitected.ListProfilesOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *wellarchitected.ListProfilesInput, ...func(*wellarchitected.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListReviewTemplateAnswers provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListReviewTemplateAnswers(ctx context.Context, params *wellarchitected.ListReviewTemplateAnswersInput, optFns ...func(*wellarchitected.Options)) (*wellarchitected.ListReviewTemplateAnswersOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListReviewTemplateAnswers")
	}

	var r0 *wellarchitected.ListReviewTemplateAnswersOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *wellarchitected.ListReviewTemplateAnswersInput, ...func(*wellarchitected.Options)) (*wellarchitected.ListReviewTemplateAnswersOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *wellarchitected.ListReviewTemplateAnswersInput, ...func(*wellarchitected.Options)) *wellarchitected.ListReviewTemplateAnswersOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*wellarchitected.ListReviewTemplateAnswersOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *wellarchitected.ListReviewTemplateAnswersInput, ...func(*wellarchitected.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListReviewTemplates provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListReviewTemplates(ctx context.Context, params *wellarchitected.ListReviewTemplatesInput, optFns ...func(*wellarchitected.Options)) (*wellarchitected.ListReviewTemplatesOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListReviewTemplates")
	}

	var r0 *wellarchitected.ListReviewTemplatesOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *wellarchitected.ListReviewTemplatesInput, ...func(*wellarchitected.Options)) (*wellarchitected.ListReviewTemplatesOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *wellarchitected.ListReviewTemplatesInput, ...func(*wellarchitected.Options)) *wellarchitected.ListReviewTemplatesOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*wellarchitected.ListReviewTemplatesOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *wellarchitected.ListReviewTemplatesInput, ...func(*wellarchitected.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListShareInvitations provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListShareInvitations(ctx context.Context, params *wellarchitected.ListShareInvitationsInput, optFns ...func(*wellarchitected.Options)) (*wellarchitected.ListShareInvitationsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListShareInvitations")
	}

	var r0 *wellarchitected.ListShareInvitationsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *wellarchitected.ListShareInvitationsInput, ...func(*wellarchitected.Options)) (*wellarchitected.ListShareInvitationsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *wellarchitected.ListShareInvitationsInput, ...func(*wellarchitected.Options)) *wellarchitected.ListShareInvitationsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*wellarchitected.ListShareInvitationsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *wellarchitected.ListShareInvitationsInput, ...func(*wellarchitected.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListTagsForResource provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListTagsForResource(ctx context.Context, params *wellarchitected.ListTagsForResourceInput, optFns ...func(*wellarchitected.Options)) (*wellarchitected.ListTagsForResourceOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListTagsForResource")
	}

	var r0 *wellarchitected.ListTagsForResourceOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *wellarchitected.ListTagsForResourceInput, ...func(*wellarchitected.Options)) (*wellarchitected.ListTagsForResourceOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *wellarchitected.ListTagsForResourceInput, ...func(*wellarchitected.Options)) *wellarchitected.ListTagsForResourceOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*wellarchitected.ListTagsForResourceOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *wellarchitected.ListTagsForResourceInput, ...func(*wellarchitected.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListTemplateShares provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListTemplateShares(ctx context.Context, params *wellarchitected.ListTemplateSharesInput, optFns ...func(*wellarchitected.Options)) (*wellarchitected.ListTemplateSharesOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListTemplateShares")
	}

	var r0 *wellarchitected.ListTemplateSharesOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *wellarchitected.ListTemplateSharesInput, ...func(*wellarchitected.Options)) (*wellarchitected.ListTemplateSharesOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *wellarchitected.ListTemplateSharesInput, ...func(*wellarchitected.Options)) *wellarchitected.ListTemplateSharesOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*wellarchitected.ListTemplateSharesOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *wellarchitected.ListTemplateSharesInput, ...func(*wellarchitected.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListWorkloadShares provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListWorkloadShares(ctx context.Context, params *wellarchitected.ListWorkloadSharesInput, optFns ...func(*wellarchitected.Options)) (*wellarchitected.ListWorkloadSharesOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListWorkloadShares")
	}

	var r0 *wellarchitected.ListWorkloadSharesOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *wellarchitected.ListWorkloadSharesInput, ...func(*wellarchitected.Options)) (*wellarchitected.ListWorkloadSharesOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *wellarchitected.ListWorkloadSharesInput, ...func(*wellarchitected.Options)) *wellarchitected.ListWorkloadSharesOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*wellarchitected.ListWorkloadSharesOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *wellarchitected.ListWorkloadSharesInput, ...func(*wellarchitected.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListWorkloads provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListWorkloads(ctx context.Context, params *wellarchitected.ListWorkloadsInput, optFns ...func(*wellarchitected.Options)) (*wellarchitected.ListWorkloadsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListWorkloads")
	}

	var r0 *wellarchitected.ListWorkloadsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *wellarchitected.ListWorkloadsInput, ...func(*wellarchitected.Options)) (*wellarchitected.ListWorkloadsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *wellarchitected.ListWorkloadsInput, ...func(*wellarchitected.Options)) *wellarchitected.ListWorkloadsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*wellarchitected.ListWorkloadsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *wellarchitected.ListWorkloadsInput, ...func(*wellarchitected.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Options provides a mock function with given fields:
func (_m *IClient) Options() wellarchitected.Options {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Options")
	}

	var r0 wellarchitected.Options
	if rf, ok := ret.Get(0).(func() wellarchitected.Options); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(wellarchitected.Options)
	}

	return r0
}

// TagResource provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) TagResource(ctx context.Context, params *wellarchitected.TagResourceInput, optFns ...func(*wellarchitected.Options)) (*wellarchitected.TagResourceOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for TagResource")
	}

	var r0 *wellarchitected.TagResourceOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *wellarchitected.TagResourceInput, ...func(*wellarchitected.Options)) (*wellarchitected.TagResourceOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *wellarchitected.TagResourceInput, ...func(*wellarchitected.Options)) *wellarchitected.TagResourceOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*wellarchitected.TagResourceOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *wellarchitected.TagResourceInput, ...func(*wellarchitected.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UntagResource provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UntagResource(ctx context.Context, params *wellarchitected.UntagResourceInput, optFns ...func(*wellarchitected.Options)) (*wellarchitected.UntagResourceOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UntagResource")
	}

	var r0 *wellarchitected.UntagResourceOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *wellarchitected.UntagResourceInput, ...func(*wellarchitected.Options)) (*wellarchitected.UntagResourceOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *wellarchitected.UntagResourceInput, ...func(*wellarchitected.Options)) *wellarchitected.UntagResourceOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*wellarchitected.UntagResourceOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *wellarchitected.UntagResourceInput, ...func(*wellarchitected.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateAnswer provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UpdateAnswer(ctx context.Context, params *wellarchitected.UpdateAnswerInput, optFns ...func(*wellarchitected.Options)) (*wellarchitected.UpdateAnswerOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateAnswer")
	}

	var r0 *wellarchitected.UpdateAnswerOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *wellarchitected.UpdateAnswerInput, ...func(*wellarchitected.Options)) (*wellarchitected.UpdateAnswerOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *wellarchitected.UpdateAnswerInput, ...func(*wellarchitected.Options)) *wellarchitected.UpdateAnswerOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*wellarchitected.UpdateAnswerOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *wellarchitected.UpdateAnswerInput, ...func(*wellarchitected.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateGlobalSettings provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UpdateGlobalSettings(ctx context.Context, params *wellarchitected.UpdateGlobalSettingsInput, optFns ...func(*wellarchitected.Options)) (*wellarchitected.UpdateGlobalSettingsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateGlobalSettings")
	}

	var r0 *wellarchitected.UpdateGlobalSettingsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *wellarchitected.UpdateGlobalSettingsInput, ...func(*wellarchitected.Options)) (*wellarchitected.UpdateGlobalSettingsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *wellarchitected.UpdateGlobalSettingsInput, ...func(*wellarchitected.Options)) *wellarchitected.UpdateGlobalSettingsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*wellarchitected.UpdateGlobalSettingsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *wellarchitected.UpdateGlobalSettingsInput, ...func(*wellarchitected.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateIntegration provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UpdateIntegration(ctx context.Context, params *wellarchitected.UpdateIntegrationInput, optFns ...func(*wellarchitected.Options)) (*wellarchitected.UpdateIntegrationOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateIntegration")
	}

	var r0 *wellarchitected.UpdateIntegrationOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *wellarchitected.UpdateIntegrationInput, ...func(*wellarchitected.Options)) (*wellarchitected.UpdateIntegrationOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *wellarchitected.UpdateIntegrationInput, ...func(*wellarchitected.Options)) *wellarchitected.UpdateIntegrationOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*wellarchitected.UpdateIntegrationOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *wellarchitected.UpdateIntegrationInput, ...func(*wellarchitected.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateLensReview provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UpdateLensReview(ctx context.Context, params *wellarchitected.UpdateLensReviewInput, optFns ...func(*wellarchitected.Options)) (*wellarchitected.UpdateLensReviewOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateLensReview")
	}

	var r0 *wellarchitected.UpdateLensReviewOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *wellarchitected.UpdateLensReviewInput, ...func(*wellarchitected.Options)) (*wellarchitected.UpdateLensReviewOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *wellarchitected.UpdateLensReviewInput, ...func(*wellarchitected.Options)) *wellarchitected.UpdateLensReviewOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*wellarchitected.UpdateLensReviewOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *wellarchitected.UpdateLensReviewInput, ...func(*wellarchitected.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateProfile provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UpdateProfile(ctx context.Context, params *wellarchitected.UpdateProfileInput, optFns ...func(*wellarchitected.Options)) (*wellarchitected.UpdateProfileOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateProfile")
	}

	var r0 *wellarchitected.UpdateProfileOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *wellarchitected.UpdateProfileInput, ...func(*wellarchitected.Options)) (*wellarchitected.UpdateProfileOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *wellarchitected.UpdateProfileInput, ...func(*wellarchitected.Options)) *wellarchitected.UpdateProfileOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*wellarchitected.UpdateProfileOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *wellarchitected.UpdateProfileInput, ...func(*wellarchitected.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateReviewTemplate provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UpdateReviewTemplate(ctx context.Context, params *wellarchitected.UpdateReviewTemplateInput, optFns ...func(*wellarchitected.Options)) (*wellarchitected.UpdateReviewTemplateOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateReviewTemplate")
	}

	var r0 *wellarchitected.UpdateReviewTemplateOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *wellarchitected.UpdateReviewTemplateInput, ...func(*wellarchitected.Options)) (*wellarchitected.UpdateReviewTemplateOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *wellarchitected.UpdateReviewTemplateInput, ...func(*wellarchitected.Options)) *wellarchitected.UpdateReviewTemplateOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*wellarchitected.UpdateReviewTemplateOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *wellarchitected.UpdateReviewTemplateInput, ...func(*wellarchitected.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateReviewTemplateAnswer provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UpdateReviewTemplateAnswer(ctx context.Context, params *wellarchitected.UpdateReviewTemplateAnswerInput, optFns ...func(*wellarchitected.Options)) (*wellarchitected.UpdateReviewTemplateAnswerOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateReviewTemplateAnswer")
	}

	var r0 *wellarchitected.UpdateReviewTemplateAnswerOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *wellarchitected.UpdateReviewTemplateAnswerInput, ...func(*wellarchitected.Options)) (*wellarchitected.UpdateReviewTemplateAnswerOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *wellarchitected.UpdateReviewTemplateAnswerInput, ...func(*wellarchitected.Options)) *wellarchitected.UpdateReviewTemplateAnswerOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*wellarchitected.UpdateReviewTemplateAnswerOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *wellarchitected.UpdateReviewTemplateAnswerInput, ...func(*wellarchitected.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateReviewTemplateLensReview provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UpdateReviewTemplateLensReview(ctx context.Context, params *wellarchitected.UpdateReviewTemplateLensReviewInput, optFns ...func(*wellarchitected.Options)) (*wellarchitected.UpdateReviewTemplateLensReviewOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateReviewTemplateLensReview")
	}

	var r0 *wellarchitected.UpdateReviewTemplateLensReviewOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *wellarchitected.UpdateReviewTemplateLensReviewInput, ...func(*wellarchitected.Options)) (*wellarchitected.UpdateReviewTemplateLensReviewOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *wellarchitected.UpdateReviewTemplateLensReviewInput, ...func(*wellarchitected.Options)) *wellarchitected.UpdateReviewTemplateLensReviewOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*wellarchitected.UpdateReviewTemplateLensReviewOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *wellarchitected.UpdateReviewTemplateLensReviewInput, ...func(*wellarchitected.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateShareInvitation provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UpdateShareInvitation(ctx context.Context, params *wellarchitected.UpdateShareInvitationInput, optFns ...func(*wellarchitected.Options)) (*wellarchitected.UpdateShareInvitationOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateShareInvitation")
	}

	var r0 *wellarchitected.UpdateShareInvitationOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *wellarchitected.UpdateShareInvitationInput, ...func(*wellarchitected.Options)) (*wellarchitected.UpdateShareInvitationOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *wellarchitected.UpdateShareInvitationInput, ...func(*wellarchitected.Options)) *wellarchitected.UpdateShareInvitationOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*wellarchitected.UpdateShareInvitationOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *wellarchitected.UpdateShareInvitationInput, ...func(*wellarchitected.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateWorkload provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UpdateWorkload(ctx context.Context, params *wellarchitected.UpdateWorkloadInput, optFns ...func(*wellarchitected.Options)) (*wellarchitected.UpdateWorkloadOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateWorkload")
	}

	var r0 *wellarchitected.UpdateWorkloadOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *wellarchitected.UpdateWorkloadInput, ...func(*wellarchitected.Options)) (*wellarchitected.UpdateWorkloadOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *wellarchitected.UpdateWorkloadInput, ...func(*wellarchitected.Options)) *wellarchitected.UpdateWorkloadOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*wellarchitected.UpdateWorkloadOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *wellarchitected.UpdateWorkloadInput, ...func(*wellarchitected.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateWorkloadShare provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UpdateWorkloadShare(ctx context.Context, params *wellarchitected.UpdateWorkloadShareInput, optFns ...func(*wellarchitected.Options)) (*wellarchitected.UpdateWorkloadShareOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateWorkloadShare")
	}

	var r0 *wellarchitected.UpdateWorkloadShareOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *wellarchitected.UpdateWorkloadShareInput, ...func(*wellarchitected.Options)) (*wellarchitected.UpdateWorkloadShareOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *wellarchitected.UpdateWorkloadShareInput, ...func(*wellarchitected.Options)) *wellarchitected.UpdateWorkloadShareOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*wellarchitected.UpdateWorkloadShareOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *wellarchitected.UpdateWorkloadShareInput, ...func(*wellarchitected.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpgradeLensReview provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UpgradeLensReview(ctx context.Context, params *wellarchitected.UpgradeLensReviewInput, optFns ...func(*wellarchitected.Options)) (*wellarchitected.UpgradeLensReviewOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpgradeLensReview")
	}

	var r0 *wellarchitected.UpgradeLensReviewOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *wellarchitected.UpgradeLensReviewInput, ...func(*wellarchitected.Options)) (*wellarchitected.UpgradeLensReviewOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *wellarchitected.UpgradeLensReviewInput, ...func(*wellarchitected.Options)) *wellarchitected.UpgradeLensReviewOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*wellarchitected.UpgradeLensReviewOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *wellarchitected.UpgradeLensReviewInput, ...func(*wellarchitected.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpgradeProfileVersion provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UpgradeProfileVersion(ctx context.Context, params *wellarchitected.UpgradeProfileVersionInput, optFns ...func(*wellarchitected.Options)) (*wellarchitected.UpgradeProfileVersionOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpgradeProfileVersion")
	}

	var r0 *wellarchitected.UpgradeProfileVersionOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *wellarchitected.UpgradeProfileVersionInput, ...func(*wellarchitected.Options)) (*wellarchitected.UpgradeProfileVersionOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *wellarchitected.UpgradeProfileVersionInput, ...func(*wellarchitected.Options)) *wellarchitected.UpgradeProfileVersionOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*wellarchitected.UpgradeProfileVersionOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *wellarchitected.UpgradeProfileVersionInput, ...func(*wellarchitected.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpgradeReviewTemplateLensReview provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UpgradeReviewTemplateLensReview(ctx context.Context, params *wellarchitected.UpgradeReviewTemplateLensReviewInput, optFns ...func(*wellarchitected.Options)) (*wellarchitected.UpgradeReviewTemplateLensReviewOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpgradeReviewTemplateLensReview")
	}

	var r0 *wellarchitected.UpgradeReviewTemplateLensReviewOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *wellarchitected.UpgradeReviewTemplateLensReviewInput, ...func(*wellarchitected.Options)) (*wellarchitected.UpgradeReviewTemplateLensReviewOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *wellarchitected.UpgradeReviewTemplateLensReviewInput, ...func(*wellarchitected.Options)) *wellarchitected.UpgradeReviewTemplateLensReviewOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*wellarchitected.UpgradeReviewTemplateLensReviewOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *wellarchitected.UpgradeReviewTemplateLensReviewInput, ...func(*wellarchitected.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewIClient creates a new instance of IClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewIClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *IClient {
	mock := &IClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
