// Code generated by mockery v2.43.2. DO NOT EDIT.

package mocks

import (
	context "context"

	worklink "github.com/aws/aws-sdk-go-v2/service/worklink"
	mock "github.com/stretchr/testify/mock"
)

// IClient is an autogenerated mock type for the IClient type
type IClient struct {
	mock.Mock
}

// AssociateDomain provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) AssociateDomain(ctx context.Context, params *worklink.AssociateDomainInput, optFns ...func(*worklink.Options)) (*worklink.AssociateDomainOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for AssociateDomain")
	}

	var r0 *worklink.AssociateDomainOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *worklink.AssociateDomainInput, ...func(*worklink.Options)) (*worklink.AssociateDomainOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *worklink.AssociateDomainInput, ...func(*worklink.Options)) *worklink.AssociateDomainOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*worklink.AssociateDomainOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *worklink.AssociateDomainInput, ...func(*worklink.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AssociateWebsiteAuthorizationProvider provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) AssociateWebsiteAuthorizationProvider(ctx context.Context, params *worklink.AssociateWebsiteAuthorizationProviderInput, optFns ...func(*worklink.Options)) (*worklink.AssociateWebsiteAuthorizationProviderOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for AssociateWebsiteAuthorizationProvider")
	}

	var r0 *worklink.AssociateWebsiteAuthorizationProviderOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *worklink.AssociateWebsiteAuthorizationProviderInput, ...func(*worklink.Options)) (*worklink.AssociateWebsiteAuthorizationProviderOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *worklink.AssociateWebsiteAuthorizationProviderInput, ...func(*worklink.Options)) *worklink.AssociateWebsiteAuthorizationProviderOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*worklink.AssociateWebsiteAuthorizationProviderOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *worklink.AssociateWebsiteAuthorizationProviderInput, ...func(*worklink.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AssociateWebsiteCertificateAuthority provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) AssociateWebsiteCertificateAuthority(ctx context.Context, params *worklink.AssociateWebsiteCertificateAuthorityInput, optFns ...func(*worklink.Options)) (*worklink.AssociateWebsiteCertificateAuthorityOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for AssociateWebsiteCertificateAuthority")
	}

	var r0 *worklink.AssociateWebsiteCertificateAuthorityOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *worklink.AssociateWebsiteCertificateAuthorityInput, ...func(*worklink.Options)) (*worklink.AssociateWebsiteCertificateAuthorityOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *worklink.AssociateWebsiteCertificateAuthorityInput, ...func(*worklink.Options)) *worklink.AssociateWebsiteCertificateAuthorityOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*worklink.AssociateWebsiteCertificateAuthorityOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *worklink.AssociateWebsiteCertificateAuthorityInput, ...func(*worklink.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateFleet provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CreateFleet(ctx context.Context, params *worklink.CreateFleetInput, optFns ...func(*worklink.Options)) (*worklink.CreateFleetOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateFleet")
	}

	var r0 *worklink.CreateFleetOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *worklink.CreateFleetInput, ...func(*worklink.Options)) (*worklink.CreateFleetOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *worklink.CreateFleetInput, ...func(*worklink.Options)) *worklink.CreateFleetOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*worklink.CreateFleetOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *worklink.CreateFleetInput, ...func(*worklink.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteFleet provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteFleet(ctx context.Context, params *worklink.DeleteFleetInput, optFns ...func(*worklink.Options)) (*worklink.DeleteFleetOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteFleet")
	}

	var r0 *worklink.DeleteFleetOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *worklink.DeleteFleetInput, ...func(*worklink.Options)) (*worklink.DeleteFleetOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *worklink.DeleteFleetInput, ...func(*worklink.Options)) *worklink.DeleteFleetOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*worklink.DeleteFleetOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *worklink.DeleteFleetInput, ...func(*worklink.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeAuditStreamConfiguration provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DescribeAuditStreamConfiguration(ctx context.Context, params *worklink.DescribeAuditStreamConfigurationInput, optFns ...func(*worklink.Options)) (*worklink.DescribeAuditStreamConfigurationOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DescribeAuditStreamConfiguration")
	}

	var r0 *worklink.DescribeAuditStreamConfigurationOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *worklink.DescribeAuditStreamConfigurationInput, ...func(*worklink.Options)) (*worklink.DescribeAuditStreamConfigurationOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *worklink.DescribeAuditStreamConfigurationInput, ...func(*worklink.Options)) *worklink.DescribeAuditStreamConfigurationOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*worklink.DescribeAuditStreamConfigurationOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *worklink.DescribeAuditStreamConfigurationInput, ...func(*worklink.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeCompanyNetworkConfiguration provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DescribeCompanyNetworkConfiguration(ctx context.Context, params *worklink.DescribeCompanyNetworkConfigurationInput, optFns ...func(*worklink.Options)) (*worklink.DescribeCompanyNetworkConfigurationOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DescribeCompanyNetworkConfiguration")
	}

	var r0 *worklink.DescribeCompanyNetworkConfigurationOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *worklink.DescribeCompanyNetworkConfigurationInput, ...func(*worklink.Options)) (*worklink.DescribeCompanyNetworkConfigurationOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *worklink.DescribeCompanyNetworkConfigurationInput, ...func(*worklink.Options)) *worklink.DescribeCompanyNetworkConfigurationOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*worklink.DescribeCompanyNetworkConfigurationOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *worklink.DescribeCompanyNetworkConfigurationInput, ...func(*worklink.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeDevice provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DescribeDevice(ctx context.Context, params *worklink.DescribeDeviceInput, optFns ...func(*worklink.Options)) (*worklink.DescribeDeviceOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DescribeDevice")
	}

	var r0 *worklink.DescribeDeviceOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *worklink.DescribeDeviceInput, ...func(*worklink.Options)) (*worklink.DescribeDeviceOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *worklink.DescribeDeviceInput, ...func(*worklink.Options)) *worklink.DescribeDeviceOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*worklink.DescribeDeviceOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *worklink.DescribeDeviceInput, ...func(*worklink.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeDevicePolicyConfiguration provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DescribeDevicePolicyConfiguration(ctx context.Context, params *worklink.DescribeDevicePolicyConfigurationInput, optFns ...func(*worklink.Options)) (*worklink.DescribeDevicePolicyConfigurationOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DescribeDevicePolicyConfiguration")
	}

	var r0 *worklink.DescribeDevicePolicyConfigurationOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *worklink.DescribeDevicePolicyConfigurationInput, ...func(*worklink.Options)) (*worklink.DescribeDevicePolicyConfigurationOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *worklink.DescribeDevicePolicyConfigurationInput, ...func(*worklink.Options)) *worklink.DescribeDevicePolicyConfigurationOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*worklink.DescribeDevicePolicyConfigurationOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *worklink.DescribeDevicePolicyConfigurationInput, ...func(*worklink.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeDomain provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DescribeDomain(ctx context.Context, params *worklink.DescribeDomainInput, optFns ...func(*worklink.Options)) (*worklink.DescribeDomainOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DescribeDomain")
	}

	var r0 *worklink.DescribeDomainOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *worklink.DescribeDomainInput, ...func(*worklink.Options)) (*worklink.DescribeDomainOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *worklink.DescribeDomainInput, ...func(*worklink.Options)) *worklink.DescribeDomainOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*worklink.DescribeDomainOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *worklink.DescribeDomainInput, ...func(*worklink.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeFleetMetadata provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DescribeFleetMetadata(ctx context.Context, params *worklink.DescribeFleetMetadataInput, optFns ...func(*worklink.Options)) (*worklink.DescribeFleetMetadataOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DescribeFleetMetadata")
	}

	var r0 *worklink.DescribeFleetMetadataOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *worklink.DescribeFleetMetadataInput, ...func(*worklink.Options)) (*worklink.DescribeFleetMetadataOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *worklink.DescribeFleetMetadataInput, ...func(*worklink.Options)) *worklink.DescribeFleetMetadataOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*worklink.DescribeFleetMetadataOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *worklink.DescribeFleetMetadataInput, ...func(*worklink.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeIdentityProviderConfiguration provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DescribeIdentityProviderConfiguration(ctx context.Context, params *worklink.DescribeIdentityProviderConfigurationInput, optFns ...func(*worklink.Options)) (*worklink.DescribeIdentityProviderConfigurationOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DescribeIdentityProviderConfiguration")
	}

	var r0 *worklink.DescribeIdentityProviderConfigurationOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *worklink.DescribeIdentityProviderConfigurationInput, ...func(*worklink.Options)) (*worklink.DescribeIdentityProviderConfigurationOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *worklink.DescribeIdentityProviderConfigurationInput, ...func(*worklink.Options)) *worklink.DescribeIdentityProviderConfigurationOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*worklink.DescribeIdentityProviderConfigurationOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *worklink.DescribeIdentityProviderConfigurationInput, ...func(*worklink.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeWebsiteCertificateAuthority provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DescribeWebsiteCertificateAuthority(ctx context.Context, params *worklink.DescribeWebsiteCertificateAuthorityInput, optFns ...func(*worklink.Options)) (*worklink.DescribeWebsiteCertificateAuthorityOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DescribeWebsiteCertificateAuthority")
	}

	var r0 *worklink.DescribeWebsiteCertificateAuthorityOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *worklink.DescribeWebsiteCertificateAuthorityInput, ...func(*worklink.Options)) (*worklink.DescribeWebsiteCertificateAuthorityOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *worklink.DescribeWebsiteCertificateAuthorityInput, ...func(*worklink.Options)) *worklink.DescribeWebsiteCertificateAuthorityOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*worklink.DescribeWebsiteCertificateAuthorityOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *worklink.DescribeWebsiteCertificateAuthorityInput, ...func(*worklink.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DisassociateDomain provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DisassociateDomain(ctx context.Context, params *worklink.DisassociateDomainInput, optFns ...func(*worklink.Options)) (*worklink.DisassociateDomainOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DisassociateDomain")
	}

	var r0 *worklink.DisassociateDomainOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *worklink.DisassociateDomainInput, ...func(*worklink.Options)) (*worklink.DisassociateDomainOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *worklink.DisassociateDomainInput, ...func(*worklink.Options)) *worklink.DisassociateDomainOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*worklink.DisassociateDomainOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *worklink.DisassociateDomainInput, ...func(*worklink.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DisassociateWebsiteAuthorizationProvider provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DisassociateWebsiteAuthorizationProvider(ctx context.Context, params *worklink.DisassociateWebsiteAuthorizationProviderInput, optFns ...func(*worklink.Options)) (*worklink.DisassociateWebsiteAuthorizationProviderOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DisassociateWebsiteAuthorizationProvider")
	}

	var r0 *worklink.DisassociateWebsiteAuthorizationProviderOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *worklink.DisassociateWebsiteAuthorizationProviderInput, ...func(*worklink.Options)) (*worklink.DisassociateWebsiteAuthorizationProviderOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *worklink.DisassociateWebsiteAuthorizationProviderInput, ...func(*worklink.Options)) *worklink.DisassociateWebsiteAuthorizationProviderOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*worklink.DisassociateWebsiteAuthorizationProviderOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *worklink.DisassociateWebsiteAuthorizationProviderInput, ...func(*worklink.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DisassociateWebsiteCertificateAuthority provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DisassociateWebsiteCertificateAuthority(ctx context.Context, params *worklink.DisassociateWebsiteCertificateAuthorityInput, optFns ...func(*worklink.Options)) (*worklink.DisassociateWebsiteCertificateAuthorityOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DisassociateWebsiteCertificateAuthority")
	}

	var r0 *worklink.DisassociateWebsiteCertificateAuthorityOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *worklink.DisassociateWebsiteCertificateAuthorityInput, ...func(*worklink.Options)) (*worklink.DisassociateWebsiteCertificateAuthorityOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *worklink.DisassociateWebsiteCertificateAuthorityInput, ...func(*worklink.Options)) *worklink.DisassociateWebsiteCertificateAuthorityOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*worklink.DisassociateWebsiteCertificateAuthorityOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *worklink.DisassociateWebsiteCertificateAuthorityInput, ...func(*worklink.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListDevices provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListDevices(ctx context.Context, params *worklink.ListDevicesInput, optFns ...func(*worklink.Options)) (*worklink.ListDevicesOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListDevices")
	}

	var r0 *worklink.ListDevicesOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *worklink.ListDevicesInput, ...func(*worklink.Options)) (*worklink.ListDevicesOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *worklink.ListDevicesInput, ...func(*worklink.Options)) *worklink.ListDevicesOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*worklink.ListDevicesOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *worklink.ListDevicesInput, ...func(*worklink.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListDomains provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListDomains(ctx context.Context, params *worklink.ListDomainsInput, optFns ...func(*worklink.Options)) (*worklink.ListDomainsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListDomains")
	}

	var r0 *worklink.ListDomainsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *worklink.ListDomainsInput, ...func(*worklink.Options)) (*worklink.ListDomainsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *worklink.ListDomainsInput, ...func(*worklink.Options)) *worklink.ListDomainsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*worklink.ListDomainsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *worklink.ListDomainsInput, ...func(*worklink.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListFleets provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListFleets(ctx context.Context, params *worklink.ListFleetsInput, optFns ...func(*worklink.Options)) (*worklink.ListFleetsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListFleets")
	}

	var r0 *worklink.ListFleetsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *worklink.ListFleetsInput, ...func(*worklink.Options)) (*worklink.ListFleetsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *worklink.ListFleetsInput, ...func(*worklink.Options)) *worklink.ListFleetsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*worklink.ListFleetsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *worklink.ListFleetsInput, ...func(*worklink.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListTagsForResource provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListTagsForResource(ctx context.Context, params *worklink.ListTagsForResourceInput, optFns ...func(*worklink.Options)) (*worklink.ListTagsForResourceOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListTagsForResource")
	}

	var r0 *worklink.ListTagsForResourceOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *worklink.ListTagsForResourceInput, ...func(*worklink.Options)) (*worklink.ListTagsForResourceOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *worklink.ListTagsForResourceInput, ...func(*worklink.Options)) *worklink.ListTagsForResourceOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*worklink.ListTagsForResourceOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *worklink.ListTagsForResourceInput, ...func(*worklink.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListWebsiteAuthorizationProviders provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListWebsiteAuthorizationProviders(ctx context.Context, params *worklink.ListWebsiteAuthorizationProvidersInput, optFns ...func(*worklink.Options)) (*worklink.ListWebsiteAuthorizationProvidersOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListWebsiteAuthorizationProviders")
	}

	var r0 *worklink.ListWebsiteAuthorizationProvidersOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *worklink.ListWebsiteAuthorizationProvidersInput, ...func(*worklink.Options)) (*worklink.ListWebsiteAuthorizationProvidersOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *worklink.ListWebsiteAuthorizationProvidersInput, ...func(*worklink.Options)) *worklink.ListWebsiteAuthorizationProvidersOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*worklink.ListWebsiteAuthorizationProvidersOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *worklink.ListWebsiteAuthorizationProvidersInput, ...func(*worklink.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListWebsiteCertificateAuthorities provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListWebsiteCertificateAuthorities(ctx context.Context, params *worklink.ListWebsiteCertificateAuthoritiesInput, optFns ...func(*worklink.Options)) (*worklink.ListWebsiteCertificateAuthoritiesOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListWebsiteCertificateAuthorities")
	}

	var r0 *worklink.ListWebsiteCertificateAuthoritiesOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *worklink.ListWebsiteCertificateAuthoritiesInput, ...func(*worklink.Options)) (*worklink.ListWebsiteCertificateAuthoritiesOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *worklink.ListWebsiteCertificateAuthoritiesInput, ...func(*worklink.Options)) *worklink.ListWebsiteCertificateAuthoritiesOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*worklink.ListWebsiteCertificateAuthoritiesOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *worklink.ListWebsiteCertificateAuthoritiesInput, ...func(*worklink.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Options provides a mock function with given fields:
func (_m *IClient) Options() worklink.Options {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Options")
	}

	var r0 worklink.Options
	if rf, ok := ret.Get(0).(func() worklink.Options); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(worklink.Options)
	}

	return r0
}

// RestoreDomainAccess provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) RestoreDomainAccess(ctx context.Context, params *worklink.RestoreDomainAccessInput, optFns ...func(*worklink.Options)) (*worklink.RestoreDomainAccessOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for RestoreDomainAccess")
	}

	var r0 *worklink.RestoreDomainAccessOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *worklink.RestoreDomainAccessInput, ...func(*worklink.Options)) (*worklink.RestoreDomainAccessOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *worklink.RestoreDomainAccessInput, ...func(*worklink.Options)) *worklink.RestoreDomainAccessOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*worklink.RestoreDomainAccessOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *worklink.RestoreDomainAccessInput, ...func(*worklink.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RevokeDomainAccess provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) RevokeDomainAccess(ctx context.Context, params *worklink.RevokeDomainAccessInput, optFns ...func(*worklink.Options)) (*worklink.RevokeDomainAccessOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for RevokeDomainAccess")
	}

	var r0 *worklink.RevokeDomainAccessOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *worklink.RevokeDomainAccessInput, ...func(*worklink.Options)) (*worklink.RevokeDomainAccessOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *worklink.RevokeDomainAccessInput, ...func(*worklink.Options)) *worklink.RevokeDomainAccessOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*worklink.RevokeDomainAccessOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *worklink.RevokeDomainAccessInput, ...func(*worklink.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SignOutUser provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) SignOutUser(ctx context.Context, params *worklink.SignOutUserInput, optFns ...func(*worklink.Options)) (*worklink.SignOutUserOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for SignOutUser")
	}

	var r0 *worklink.SignOutUserOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *worklink.SignOutUserInput, ...func(*worklink.Options)) (*worklink.SignOutUserOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *worklink.SignOutUserInput, ...func(*worklink.Options)) *worklink.SignOutUserOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*worklink.SignOutUserOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *worklink.SignOutUserInput, ...func(*worklink.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// TagResource provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) TagResource(ctx context.Context, params *worklink.TagResourceInput, optFns ...func(*worklink.Options)) (*worklink.TagResourceOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for TagResource")
	}

	var r0 *worklink.TagResourceOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *worklink.TagResourceInput, ...func(*worklink.Options)) (*worklink.TagResourceOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *worklink.TagResourceInput, ...func(*worklink.Options)) *worklink.TagResourceOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*worklink.TagResourceOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *worklink.TagResourceInput, ...func(*worklink.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UntagResource provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UntagResource(ctx context.Context, params *worklink.UntagResourceInput, optFns ...func(*worklink.Options)) (*worklink.UntagResourceOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UntagResource")
	}

	var r0 *worklink.UntagResourceOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *worklink.UntagResourceInput, ...func(*worklink.Options)) (*worklink.UntagResourceOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *worklink.UntagResourceInput, ...func(*worklink.Options)) *worklink.UntagResourceOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*worklink.UntagResourceOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *worklink.UntagResourceInput, ...func(*worklink.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateAuditStreamConfiguration provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UpdateAuditStreamConfiguration(ctx context.Context, params *worklink.UpdateAuditStreamConfigurationInput, optFns ...func(*worklink.Options)) (*worklink.UpdateAuditStreamConfigurationOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateAuditStreamConfiguration")
	}

	var r0 *worklink.UpdateAuditStreamConfigurationOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *worklink.UpdateAuditStreamConfigurationInput, ...func(*worklink.Options)) (*worklink.UpdateAuditStreamConfigurationOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *worklink.UpdateAuditStreamConfigurationInput, ...func(*worklink.Options)) *worklink.UpdateAuditStreamConfigurationOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*worklink.UpdateAuditStreamConfigurationOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *worklink.UpdateAuditStreamConfigurationInput, ...func(*worklink.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateCompanyNetworkConfiguration provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UpdateCompanyNetworkConfiguration(ctx context.Context, params *worklink.UpdateCompanyNetworkConfigurationInput, optFns ...func(*worklink.Options)) (*worklink.UpdateCompanyNetworkConfigurationOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateCompanyNetworkConfiguration")
	}

	var r0 *worklink.UpdateCompanyNetworkConfigurationOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *worklink.UpdateCompanyNetworkConfigurationInput, ...func(*worklink.Options)) (*worklink.UpdateCompanyNetworkConfigurationOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *worklink.UpdateCompanyNetworkConfigurationInput, ...func(*worklink.Options)) *worklink.UpdateCompanyNetworkConfigurationOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*worklink.UpdateCompanyNetworkConfigurationOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *worklink.UpdateCompanyNetworkConfigurationInput, ...func(*worklink.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateDevicePolicyConfiguration provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UpdateDevicePolicyConfiguration(ctx context.Context, params *worklink.UpdateDevicePolicyConfigurationInput, optFns ...func(*worklink.Options)) (*worklink.UpdateDevicePolicyConfigurationOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateDevicePolicyConfiguration")
	}

	var r0 *worklink.UpdateDevicePolicyConfigurationOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *worklink.UpdateDevicePolicyConfigurationInput, ...func(*worklink.Options)) (*worklink.UpdateDevicePolicyConfigurationOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *worklink.UpdateDevicePolicyConfigurationInput, ...func(*worklink.Options)) *worklink.UpdateDevicePolicyConfigurationOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*worklink.UpdateDevicePolicyConfigurationOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *worklink.UpdateDevicePolicyConfigurationInput, ...func(*worklink.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateDomainMetadata provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UpdateDomainMetadata(ctx context.Context, params *worklink.UpdateDomainMetadataInput, optFns ...func(*worklink.Options)) (*worklink.UpdateDomainMetadataOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateDomainMetadata")
	}

	var r0 *worklink.UpdateDomainMetadataOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *worklink.UpdateDomainMetadataInput, ...func(*worklink.Options)) (*worklink.UpdateDomainMetadataOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *worklink.UpdateDomainMetadataInput, ...func(*worklink.Options)) *worklink.UpdateDomainMetadataOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*worklink.UpdateDomainMetadataOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *worklink.UpdateDomainMetadataInput, ...func(*worklink.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateFleetMetadata provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UpdateFleetMetadata(ctx context.Context, params *worklink.UpdateFleetMetadataInput, optFns ...func(*worklink.Options)) (*worklink.UpdateFleetMetadataOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateFleetMetadata")
	}

	var r0 *worklink.UpdateFleetMetadataOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *worklink.UpdateFleetMetadataInput, ...func(*worklink.Options)) (*worklink.UpdateFleetMetadataOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *worklink.UpdateFleetMetadataInput, ...func(*worklink.Options)) *worklink.UpdateFleetMetadataOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*worklink.UpdateFleetMetadataOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *worklink.UpdateFleetMetadataInput, ...func(*worklink.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateIdentityProviderConfiguration provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UpdateIdentityProviderConfiguration(ctx context.Context, params *worklink.UpdateIdentityProviderConfigurationInput, optFns ...func(*worklink.Options)) (*worklink.UpdateIdentityProviderConfigurationOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateIdentityProviderConfiguration")
	}

	var r0 *worklink.UpdateIdentityProviderConfigurationOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *worklink.UpdateIdentityProviderConfigurationInput, ...func(*worklink.Options)) (*worklink.UpdateIdentityProviderConfigurationOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *worklink.UpdateIdentityProviderConfigurationInput, ...func(*worklink.Options)) *worklink.UpdateIdentityProviderConfigurationOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*worklink.UpdateIdentityProviderConfigurationOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *worklink.UpdateIdentityProviderConfigurationInput, ...func(*worklink.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewIClient creates a new instance of IClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewIClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *IClient {
	mock := &IClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
