// Code generated by mockery v2.43.2. DO NOT EDIT.

package mocks

import (
	context "context"

	geomaps "github.com/aws/aws-sdk-go-v2/service/geomaps"

	mock "github.com/stretchr/testify/mock"
)

// IClient is an autogenerated mock type for the IClient type
type IClient struct {
	mock.Mock
}

// GetGlyphs provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetGlyphs(ctx context.Context, params *geomaps.GetGlyphsInput, optFns ...func(*geomaps.Options)) (*geomaps.GetGlyphsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetGlyphs")
	}

	var r0 *geomaps.GetGlyphsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *geomaps.GetGlyphsInput, ...func(*geomaps.Options)) (*geomaps.GetGlyphsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *geomaps.GetGlyphsInput, ...func(*geomaps.Options)) *geomaps.GetGlyphsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*geomaps.GetGlyphsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *geomaps.GetGlyphsInput, ...func(*geomaps.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetSprites provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetSprites(ctx context.Context, params *geomaps.GetSpritesInput, optFns ...func(*geomaps.Options)) (*geomaps.GetSpritesOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetSprites")
	}

	var r0 *geomaps.GetSpritesOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *geomaps.GetSpritesInput, ...func(*geomaps.Options)) (*geomaps.GetSpritesOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *geomaps.GetSpritesInput, ...func(*geomaps.Options)) *geomaps.GetSpritesOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*geomaps.GetSpritesOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *geomaps.GetSpritesInput, ...func(*geomaps.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetStaticMap provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetStaticMap(ctx context.Context, params *geomaps.GetStaticMapInput, optFns ...func(*geomaps.Options)) (*geomaps.GetStaticMapOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetStaticMap")
	}

	var r0 *geomaps.GetStaticMapOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *geomaps.GetStaticMapInput, ...func(*geomaps.Options)) (*geomaps.GetStaticMapOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *geomaps.GetStaticMapInput, ...func(*geomaps.Options)) *geomaps.GetStaticMapOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*geomaps.GetStaticMapOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *geomaps.GetStaticMapInput, ...func(*geomaps.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetStyleDescriptor provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetStyleDescriptor(ctx context.Context, params *geomaps.GetStyleDescriptorInput, optFns ...func(*geomaps.Options)) (*geomaps.GetStyleDescriptorOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetStyleDescriptor")
	}

	var r0 *geomaps.GetStyleDescriptorOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *geomaps.GetStyleDescriptorInput, ...func(*geomaps.Options)) (*geomaps.GetStyleDescriptorOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *geomaps.GetStyleDescriptorInput, ...func(*geomaps.Options)) *geomaps.GetStyleDescriptorOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*geomaps.GetStyleDescriptorOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *geomaps.GetStyleDescriptorInput, ...func(*geomaps.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetTile provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetTile(ctx context.Context, params *geomaps.GetTileInput, optFns ...func(*geomaps.Options)) (*geomaps.GetTileOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetTile")
	}

	var r0 *geomaps.GetTileOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *geomaps.GetTileInput, ...func(*geomaps.Options)) (*geomaps.GetTileOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *geomaps.GetTileInput, ...func(*geomaps.Options)) *geomaps.GetTileOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*geomaps.GetTileOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *geomaps.GetTileInput, ...func(*geomaps.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Options provides a mock function with given fields:
func (_m *IClient) Options() geomaps.Options {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Options")
	}

	var r0 geomaps.Options
	if rf, ok := ret.Get(0).(func() geomaps.Options); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(geomaps.Options)
	}

	return r0
}

// NewIClient creates a new instance of IClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewIClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *IClient {
	mock := &IClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
