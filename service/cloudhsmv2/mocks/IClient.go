// Code generated by mockery v2.53.4. DO NOT EDIT.

package mocks

import (
	cloudhsmv2 "github.com/aws/aws-sdk-go-v2/service/cloudhsmv2"

	context "context"

	mock "github.com/stretchr/testify/mock"
)

// IClient is an autogenerated mock type for the IClient type
type IClient struct {
	mock.Mock
}

// CopyBackupToRegion provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CopyBackupToRegion(ctx context.Context, params *cloudhsmv2.CopyBackupToRegionInput, optFns ...func(*cloudhsmv2.Options)) (*cloudhsmv2.CopyBackupToRegionOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CopyBackupToRegion")
	}

	var r0 *cloudhsmv2.CopyBackupToRegionOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *cloudhsmv2.CopyBackupToRegionInput, ...func(*cloudhsmv2.Options)) (*cloudhsmv2.CopyBackupToRegionOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *cloudhsmv2.CopyBackupToRegionInput, ...func(*cloudhsmv2.Options)) *cloudhsmv2.CopyBackupToRegionOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cloudhsmv2.CopyBackupToRegionOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *cloudhsmv2.CopyBackupToRegionInput, ...func(*cloudhsmv2.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateCluster provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CreateCluster(ctx context.Context, params *cloudhsmv2.CreateClusterInput, optFns ...func(*cloudhsmv2.Options)) (*cloudhsmv2.CreateClusterOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateCluster")
	}

	var r0 *cloudhsmv2.CreateClusterOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *cloudhsmv2.CreateClusterInput, ...func(*cloudhsmv2.Options)) (*cloudhsmv2.CreateClusterOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *cloudhsmv2.CreateClusterInput, ...func(*cloudhsmv2.Options)) *cloudhsmv2.CreateClusterOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cloudhsmv2.CreateClusterOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *cloudhsmv2.CreateClusterInput, ...func(*cloudhsmv2.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateHsm provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CreateHsm(ctx context.Context, params *cloudhsmv2.CreateHsmInput, optFns ...func(*cloudhsmv2.Options)) (*cloudhsmv2.CreateHsmOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateHsm")
	}

	var r0 *cloudhsmv2.CreateHsmOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *cloudhsmv2.CreateHsmInput, ...func(*cloudhsmv2.Options)) (*cloudhsmv2.CreateHsmOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *cloudhsmv2.CreateHsmInput, ...func(*cloudhsmv2.Options)) *cloudhsmv2.CreateHsmOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cloudhsmv2.CreateHsmOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *cloudhsmv2.CreateHsmInput, ...func(*cloudhsmv2.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteBackup provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteBackup(ctx context.Context, params *cloudhsmv2.DeleteBackupInput, optFns ...func(*cloudhsmv2.Options)) (*cloudhsmv2.DeleteBackupOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteBackup")
	}

	var r0 *cloudhsmv2.DeleteBackupOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *cloudhsmv2.DeleteBackupInput, ...func(*cloudhsmv2.Options)) (*cloudhsmv2.DeleteBackupOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *cloudhsmv2.DeleteBackupInput, ...func(*cloudhsmv2.Options)) *cloudhsmv2.DeleteBackupOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cloudhsmv2.DeleteBackupOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *cloudhsmv2.DeleteBackupInput, ...func(*cloudhsmv2.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteCluster provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteCluster(ctx context.Context, params *cloudhsmv2.DeleteClusterInput, optFns ...func(*cloudhsmv2.Options)) (*cloudhsmv2.DeleteClusterOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteCluster")
	}

	var r0 *cloudhsmv2.DeleteClusterOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *cloudhsmv2.DeleteClusterInput, ...func(*cloudhsmv2.Options)) (*cloudhsmv2.DeleteClusterOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *cloudhsmv2.DeleteClusterInput, ...func(*cloudhsmv2.Options)) *cloudhsmv2.DeleteClusterOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cloudhsmv2.DeleteClusterOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *cloudhsmv2.DeleteClusterInput, ...func(*cloudhsmv2.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteHsm provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteHsm(ctx context.Context, params *cloudhsmv2.DeleteHsmInput, optFns ...func(*cloudhsmv2.Options)) (*cloudhsmv2.DeleteHsmOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteHsm")
	}

	var r0 *cloudhsmv2.DeleteHsmOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *cloudhsmv2.DeleteHsmInput, ...func(*cloudhsmv2.Options)) (*cloudhsmv2.DeleteHsmOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *cloudhsmv2.DeleteHsmInput, ...func(*cloudhsmv2.Options)) *cloudhsmv2.DeleteHsmOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cloudhsmv2.DeleteHsmOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *cloudhsmv2.DeleteHsmInput, ...func(*cloudhsmv2.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteResourcePolicy provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteResourcePolicy(ctx context.Context, params *cloudhsmv2.DeleteResourcePolicyInput, optFns ...func(*cloudhsmv2.Options)) (*cloudhsmv2.DeleteResourcePolicyOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteResourcePolicy")
	}

	var r0 *cloudhsmv2.DeleteResourcePolicyOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *cloudhsmv2.DeleteResourcePolicyInput, ...func(*cloudhsmv2.Options)) (*cloudhsmv2.DeleteResourcePolicyOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *cloudhsmv2.DeleteResourcePolicyInput, ...func(*cloudhsmv2.Options)) *cloudhsmv2.DeleteResourcePolicyOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cloudhsmv2.DeleteResourcePolicyOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *cloudhsmv2.DeleteResourcePolicyInput, ...func(*cloudhsmv2.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeBackups provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DescribeBackups(ctx context.Context, params *cloudhsmv2.DescribeBackupsInput, optFns ...func(*cloudhsmv2.Options)) (*cloudhsmv2.DescribeBackupsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DescribeBackups")
	}

	var r0 *cloudhsmv2.DescribeBackupsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *cloudhsmv2.DescribeBackupsInput, ...func(*cloudhsmv2.Options)) (*cloudhsmv2.DescribeBackupsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *cloudhsmv2.DescribeBackupsInput, ...func(*cloudhsmv2.Options)) *cloudhsmv2.DescribeBackupsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cloudhsmv2.DescribeBackupsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *cloudhsmv2.DescribeBackupsInput, ...func(*cloudhsmv2.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeClusters provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DescribeClusters(ctx context.Context, params *cloudhsmv2.DescribeClustersInput, optFns ...func(*cloudhsmv2.Options)) (*cloudhsmv2.DescribeClustersOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DescribeClusters")
	}

	var r0 *cloudhsmv2.DescribeClustersOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *cloudhsmv2.DescribeClustersInput, ...func(*cloudhsmv2.Options)) (*cloudhsmv2.DescribeClustersOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *cloudhsmv2.DescribeClustersInput, ...func(*cloudhsmv2.Options)) *cloudhsmv2.DescribeClustersOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cloudhsmv2.DescribeClustersOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *cloudhsmv2.DescribeClustersInput, ...func(*cloudhsmv2.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetResourcePolicy provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetResourcePolicy(ctx context.Context, params *cloudhsmv2.GetResourcePolicyInput, optFns ...func(*cloudhsmv2.Options)) (*cloudhsmv2.GetResourcePolicyOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetResourcePolicy")
	}

	var r0 *cloudhsmv2.GetResourcePolicyOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *cloudhsmv2.GetResourcePolicyInput, ...func(*cloudhsmv2.Options)) (*cloudhsmv2.GetResourcePolicyOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *cloudhsmv2.GetResourcePolicyInput, ...func(*cloudhsmv2.Options)) *cloudhsmv2.GetResourcePolicyOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cloudhsmv2.GetResourcePolicyOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *cloudhsmv2.GetResourcePolicyInput, ...func(*cloudhsmv2.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// InitializeCluster provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) InitializeCluster(ctx context.Context, params *cloudhsmv2.InitializeClusterInput, optFns ...func(*cloudhsmv2.Options)) (*cloudhsmv2.InitializeClusterOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for InitializeCluster")
	}

	var r0 *cloudhsmv2.InitializeClusterOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *cloudhsmv2.InitializeClusterInput, ...func(*cloudhsmv2.Options)) (*cloudhsmv2.InitializeClusterOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *cloudhsmv2.InitializeClusterInput, ...func(*cloudhsmv2.Options)) *cloudhsmv2.InitializeClusterOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cloudhsmv2.InitializeClusterOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *cloudhsmv2.InitializeClusterInput, ...func(*cloudhsmv2.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListTags provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListTags(ctx context.Context, params *cloudhsmv2.ListTagsInput, optFns ...func(*cloudhsmv2.Options)) (*cloudhsmv2.ListTagsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListTags")
	}

	var r0 *cloudhsmv2.ListTagsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *cloudhsmv2.ListTagsInput, ...func(*cloudhsmv2.Options)) (*cloudhsmv2.ListTagsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *cloudhsmv2.ListTagsInput, ...func(*cloudhsmv2.Options)) *cloudhsmv2.ListTagsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cloudhsmv2.ListTagsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *cloudhsmv2.ListTagsInput, ...func(*cloudhsmv2.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ModifyBackupAttributes provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ModifyBackupAttributes(ctx context.Context, params *cloudhsmv2.ModifyBackupAttributesInput, optFns ...func(*cloudhsmv2.Options)) (*cloudhsmv2.ModifyBackupAttributesOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ModifyBackupAttributes")
	}

	var r0 *cloudhsmv2.ModifyBackupAttributesOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *cloudhsmv2.ModifyBackupAttributesInput, ...func(*cloudhsmv2.Options)) (*cloudhsmv2.ModifyBackupAttributesOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *cloudhsmv2.ModifyBackupAttributesInput, ...func(*cloudhsmv2.Options)) *cloudhsmv2.ModifyBackupAttributesOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cloudhsmv2.ModifyBackupAttributesOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *cloudhsmv2.ModifyBackupAttributesInput, ...func(*cloudhsmv2.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ModifyCluster provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ModifyCluster(ctx context.Context, params *cloudhsmv2.ModifyClusterInput, optFns ...func(*cloudhsmv2.Options)) (*cloudhsmv2.ModifyClusterOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ModifyCluster")
	}

	var r0 *cloudhsmv2.ModifyClusterOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *cloudhsmv2.ModifyClusterInput, ...func(*cloudhsmv2.Options)) (*cloudhsmv2.ModifyClusterOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *cloudhsmv2.ModifyClusterInput, ...func(*cloudhsmv2.Options)) *cloudhsmv2.ModifyClusterOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cloudhsmv2.ModifyClusterOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *cloudhsmv2.ModifyClusterInput, ...func(*cloudhsmv2.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Options provides a mock function with no fields
func (_m *IClient) Options() cloudhsmv2.Options {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Options")
	}

	var r0 cloudhsmv2.Options
	if rf, ok := ret.Get(0).(func() cloudhsmv2.Options); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(cloudhsmv2.Options)
	}

	return r0
}

// PutResourcePolicy provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) PutResourcePolicy(ctx context.Context, params *cloudhsmv2.PutResourcePolicyInput, optFns ...func(*cloudhsmv2.Options)) (*cloudhsmv2.PutResourcePolicyOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for PutResourcePolicy")
	}

	var r0 *cloudhsmv2.PutResourcePolicyOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *cloudhsmv2.PutResourcePolicyInput, ...func(*cloudhsmv2.Options)) (*cloudhsmv2.PutResourcePolicyOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *cloudhsmv2.PutResourcePolicyInput, ...func(*cloudhsmv2.Options)) *cloudhsmv2.PutResourcePolicyOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cloudhsmv2.PutResourcePolicyOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *cloudhsmv2.PutResourcePolicyInput, ...func(*cloudhsmv2.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RestoreBackup provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) RestoreBackup(ctx context.Context, params *cloudhsmv2.RestoreBackupInput, optFns ...func(*cloudhsmv2.Options)) (*cloudhsmv2.RestoreBackupOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for RestoreBackup")
	}

	var r0 *cloudhsmv2.RestoreBackupOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *cloudhsmv2.RestoreBackupInput, ...func(*cloudhsmv2.Options)) (*cloudhsmv2.RestoreBackupOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *cloudhsmv2.RestoreBackupInput, ...func(*cloudhsmv2.Options)) *cloudhsmv2.RestoreBackupOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cloudhsmv2.RestoreBackupOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *cloudhsmv2.RestoreBackupInput, ...func(*cloudhsmv2.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// TagResource provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) TagResource(ctx context.Context, params *cloudhsmv2.TagResourceInput, optFns ...func(*cloudhsmv2.Options)) (*cloudhsmv2.TagResourceOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for TagResource")
	}

	var r0 *cloudhsmv2.TagResourceOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *cloudhsmv2.TagResourceInput, ...func(*cloudhsmv2.Options)) (*cloudhsmv2.TagResourceOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *cloudhsmv2.TagResourceInput, ...func(*cloudhsmv2.Options)) *cloudhsmv2.TagResourceOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cloudhsmv2.TagResourceOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *cloudhsmv2.TagResourceInput, ...func(*cloudhsmv2.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UntagResource provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UntagResource(ctx context.Context, params *cloudhsmv2.UntagResourceInput, optFns ...func(*cloudhsmv2.Options)) (*cloudhsmv2.UntagResourceOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UntagResource")
	}

	var r0 *cloudhsmv2.UntagResourceOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *cloudhsmv2.UntagResourceInput, ...func(*cloudhsmv2.Options)) (*cloudhsmv2.UntagResourceOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *cloudhsmv2.UntagResourceInput, ...func(*cloudhsmv2.Options)) *cloudhsmv2.UntagResourceOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cloudhsmv2.UntagResourceOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *cloudhsmv2.UntagResourceInput, ...func(*cloudhsmv2.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewIClient creates a new instance of IClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewIClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *IClient {
	mock := &IClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
