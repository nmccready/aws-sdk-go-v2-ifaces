// Code generated by mockery v2.53.4. DO NOT EDIT.

package mocks

import (
	context "context"

	supportapp "github.com/aws/aws-sdk-go-v2/service/supportapp"
	mock "github.com/stretchr/testify/mock"
)

// IClient is an autogenerated mock type for the IClient type
type IClient struct {
	mock.Mock
}

// CreateSlackChannelConfiguration provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CreateSlackChannelConfiguration(ctx context.Context, params *supportapp.CreateSlackChannelConfigurationInput, optFns ...func(*supportapp.Options)) (*supportapp.CreateSlackChannelConfigurationOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateSlackChannelConfiguration")
	}

	var r0 *supportapp.CreateSlackChannelConfigurationOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *supportapp.CreateSlackChannelConfigurationInput, ...func(*supportapp.Options)) (*supportapp.CreateSlackChannelConfigurationOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *supportapp.CreateSlackChannelConfigurationInput, ...func(*supportapp.Options)) *supportapp.CreateSlackChannelConfigurationOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*supportapp.CreateSlackChannelConfigurationOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *supportapp.CreateSlackChannelConfigurationInput, ...func(*supportapp.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteAccountAlias provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteAccountAlias(ctx context.Context, params *supportapp.DeleteAccountAliasInput, optFns ...func(*supportapp.Options)) (*supportapp.DeleteAccountAliasOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteAccountAlias")
	}

	var r0 *supportapp.DeleteAccountAliasOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *supportapp.DeleteAccountAliasInput, ...func(*supportapp.Options)) (*supportapp.DeleteAccountAliasOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *supportapp.DeleteAccountAliasInput, ...func(*supportapp.Options)) *supportapp.DeleteAccountAliasOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*supportapp.DeleteAccountAliasOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *supportapp.DeleteAccountAliasInput, ...func(*supportapp.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteSlackChannelConfiguration provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteSlackChannelConfiguration(ctx context.Context, params *supportapp.DeleteSlackChannelConfigurationInput, optFns ...func(*supportapp.Options)) (*supportapp.DeleteSlackChannelConfigurationOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteSlackChannelConfiguration")
	}

	var r0 *supportapp.DeleteSlackChannelConfigurationOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *supportapp.DeleteSlackChannelConfigurationInput, ...func(*supportapp.Options)) (*supportapp.DeleteSlackChannelConfigurationOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *supportapp.DeleteSlackChannelConfigurationInput, ...func(*supportapp.Options)) *supportapp.DeleteSlackChannelConfigurationOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*supportapp.DeleteSlackChannelConfigurationOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *supportapp.DeleteSlackChannelConfigurationInput, ...func(*supportapp.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteSlackWorkspaceConfiguration provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteSlackWorkspaceConfiguration(ctx context.Context, params *supportapp.DeleteSlackWorkspaceConfigurationInput, optFns ...func(*supportapp.Options)) (*supportapp.DeleteSlackWorkspaceConfigurationOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteSlackWorkspaceConfiguration")
	}

	var r0 *supportapp.DeleteSlackWorkspaceConfigurationOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *supportapp.DeleteSlackWorkspaceConfigurationInput, ...func(*supportapp.Options)) (*supportapp.DeleteSlackWorkspaceConfigurationOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *supportapp.DeleteSlackWorkspaceConfigurationInput, ...func(*supportapp.Options)) *supportapp.DeleteSlackWorkspaceConfigurationOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*supportapp.DeleteSlackWorkspaceConfigurationOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *supportapp.DeleteSlackWorkspaceConfigurationInput, ...func(*supportapp.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAccountAlias provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetAccountAlias(ctx context.Context, params *supportapp.GetAccountAliasInput, optFns ...func(*supportapp.Options)) (*supportapp.GetAccountAliasOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetAccountAlias")
	}

	var r0 *supportapp.GetAccountAliasOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *supportapp.GetAccountAliasInput, ...func(*supportapp.Options)) (*supportapp.GetAccountAliasOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *supportapp.GetAccountAliasInput, ...func(*supportapp.Options)) *supportapp.GetAccountAliasOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*supportapp.GetAccountAliasOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *supportapp.GetAccountAliasInput, ...func(*supportapp.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListSlackChannelConfigurations provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListSlackChannelConfigurations(ctx context.Context, params *supportapp.ListSlackChannelConfigurationsInput, optFns ...func(*supportapp.Options)) (*supportapp.ListSlackChannelConfigurationsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListSlackChannelConfigurations")
	}

	var r0 *supportapp.ListSlackChannelConfigurationsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *supportapp.ListSlackChannelConfigurationsInput, ...func(*supportapp.Options)) (*supportapp.ListSlackChannelConfigurationsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *supportapp.ListSlackChannelConfigurationsInput, ...func(*supportapp.Options)) *supportapp.ListSlackChannelConfigurationsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*supportapp.ListSlackChannelConfigurationsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *supportapp.ListSlackChannelConfigurationsInput, ...func(*supportapp.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListSlackWorkspaceConfigurations provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListSlackWorkspaceConfigurations(ctx context.Context, params *supportapp.ListSlackWorkspaceConfigurationsInput, optFns ...func(*supportapp.Options)) (*supportapp.ListSlackWorkspaceConfigurationsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListSlackWorkspaceConfigurations")
	}

	var r0 *supportapp.ListSlackWorkspaceConfigurationsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *supportapp.ListSlackWorkspaceConfigurationsInput, ...func(*supportapp.Options)) (*supportapp.ListSlackWorkspaceConfigurationsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *supportapp.ListSlackWorkspaceConfigurationsInput, ...func(*supportapp.Options)) *supportapp.ListSlackWorkspaceConfigurationsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*supportapp.ListSlackWorkspaceConfigurationsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *supportapp.ListSlackWorkspaceConfigurationsInput, ...func(*supportapp.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Options provides a mock function with no fields
func (_m *IClient) Options() supportapp.Options {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Options")
	}

	var r0 supportapp.Options
	if rf, ok := ret.Get(0).(func() supportapp.Options); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(supportapp.Options)
	}

	return r0
}

// PutAccountAlias provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) PutAccountAlias(ctx context.Context, params *supportapp.PutAccountAliasInput, optFns ...func(*supportapp.Options)) (*supportapp.PutAccountAliasOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for PutAccountAlias")
	}

	var r0 *supportapp.PutAccountAliasOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *supportapp.PutAccountAliasInput, ...func(*supportapp.Options)) (*supportapp.PutAccountAliasOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *supportapp.PutAccountAliasInput, ...func(*supportapp.Options)) *supportapp.PutAccountAliasOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*supportapp.PutAccountAliasOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *supportapp.PutAccountAliasInput, ...func(*supportapp.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RegisterSlackWorkspaceForOrganization provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) RegisterSlackWorkspaceForOrganization(ctx context.Context, params *supportapp.RegisterSlackWorkspaceForOrganizationInput, optFns ...func(*supportapp.Options)) (*supportapp.RegisterSlackWorkspaceForOrganizationOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for RegisterSlackWorkspaceForOrganization")
	}

	var r0 *supportapp.RegisterSlackWorkspaceForOrganizationOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *supportapp.RegisterSlackWorkspaceForOrganizationInput, ...func(*supportapp.Options)) (*supportapp.RegisterSlackWorkspaceForOrganizationOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *supportapp.RegisterSlackWorkspaceForOrganizationInput, ...func(*supportapp.Options)) *supportapp.RegisterSlackWorkspaceForOrganizationOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*supportapp.RegisterSlackWorkspaceForOrganizationOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *supportapp.RegisterSlackWorkspaceForOrganizationInput, ...func(*supportapp.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateSlackChannelConfiguration provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UpdateSlackChannelConfiguration(ctx context.Context, params *supportapp.UpdateSlackChannelConfigurationInput, optFns ...func(*supportapp.Options)) (*supportapp.UpdateSlackChannelConfigurationOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateSlackChannelConfiguration")
	}

	var r0 *supportapp.UpdateSlackChannelConfigurationOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *supportapp.UpdateSlackChannelConfigurationInput, ...func(*supportapp.Options)) (*supportapp.UpdateSlackChannelConfigurationOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *supportapp.UpdateSlackChannelConfigurationInput, ...func(*supportapp.Options)) *supportapp.UpdateSlackChannelConfigurationOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*supportapp.UpdateSlackChannelConfigurationOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *supportapp.UpdateSlackChannelConfigurationInput, ...func(*supportapp.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewIClient creates a new instance of IClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewIClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *IClient {
	mock := &IClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
