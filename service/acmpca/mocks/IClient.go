// Code generated by mockery v2.53.4. DO NOT EDIT.

package mocks

import (
	acmpca "github.com/aws/aws-sdk-go-v2/service/acmpca"

	context "context"

	mock "github.com/stretchr/testify/mock"
)

// IClient is an autogenerated mock type for the IClient type
type IClient struct {
	mock.Mock
}

// CreateCertificateAuthority provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CreateCertificateAuthority(ctx context.Context, params *acmpca.CreateCertificateAuthorityInput, optFns ...func(*acmpca.Options)) (*acmpca.CreateCertificateAuthorityOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateCertificateAuthority")
	}

	var r0 *acmpca.CreateCertificateAuthorityOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *acmpca.CreateCertificateAuthorityInput, ...func(*acmpca.Options)) (*acmpca.CreateCertificateAuthorityOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *acmpca.CreateCertificateAuthorityInput, ...func(*acmpca.Options)) *acmpca.CreateCertificateAuthorityOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*acmpca.CreateCertificateAuthorityOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *acmpca.CreateCertificateAuthorityInput, ...func(*acmpca.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateCertificateAuthorityAuditReport provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CreateCertificateAuthorityAuditReport(ctx context.Context, params *acmpca.CreateCertificateAuthorityAuditReportInput, optFns ...func(*acmpca.Options)) (*acmpca.CreateCertificateAuthorityAuditReportOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateCertificateAuthorityAuditReport")
	}

	var r0 *acmpca.CreateCertificateAuthorityAuditReportOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *acmpca.CreateCertificateAuthorityAuditReportInput, ...func(*acmpca.Options)) (*acmpca.CreateCertificateAuthorityAuditReportOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *acmpca.CreateCertificateAuthorityAuditReportInput, ...func(*acmpca.Options)) *acmpca.CreateCertificateAuthorityAuditReportOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*acmpca.CreateCertificateAuthorityAuditReportOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *acmpca.CreateCertificateAuthorityAuditReportInput, ...func(*acmpca.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreatePermission provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CreatePermission(ctx context.Context, params *acmpca.CreatePermissionInput, optFns ...func(*acmpca.Options)) (*acmpca.CreatePermissionOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreatePermission")
	}

	var r0 *acmpca.CreatePermissionOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *acmpca.CreatePermissionInput, ...func(*acmpca.Options)) (*acmpca.CreatePermissionOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *acmpca.CreatePermissionInput, ...func(*acmpca.Options)) *acmpca.CreatePermissionOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*acmpca.CreatePermissionOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *acmpca.CreatePermissionInput, ...func(*acmpca.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteCertificateAuthority provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteCertificateAuthority(ctx context.Context, params *acmpca.DeleteCertificateAuthorityInput, optFns ...func(*acmpca.Options)) (*acmpca.DeleteCertificateAuthorityOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteCertificateAuthority")
	}

	var r0 *acmpca.DeleteCertificateAuthorityOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *acmpca.DeleteCertificateAuthorityInput, ...func(*acmpca.Options)) (*acmpca.DeleteCertificateAuthorityOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *acmpca.DeleteCertificateAuthorityInput, ...func(*acmpca.Options)) *acmpca.DeleteCertificateAuthorityOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*acmpca.DeleteCertificateAuthorityOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *acmpca.DeleteCertificateAuthorityInput, ...func(*acmpca.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeletePermission provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeletePermission(ctx context.Context, params *acmpca.DeletePermissionInput, optFns ...func(*acmpca.Options)) (*acmpca.DeletePermissionOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeletePermission")
	}

	var r0 *acmpca.DeletePermissionOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *acmpca.DeletePermissionInput, ...func(*acmpca.Options)) (*acmpca.DeletePermissionOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *acmpca.DeletePermissionInput, ...func(*acmpca.Options)) *acmpca.DeletePermissionOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*acmpca.DeletePermissionOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *acmpca.DeletePermissionInput, ...func(*acmpca.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeletePolicy provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeletePolicy(ctx context.Context, params *acmpca.DeletePolicyInput, optFns ...func(*acmpca.Options)) (*acmpca.DeletePolicyOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeletePolicy")
	}

	var r0 *acmpca.DeletePolicyOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *acmpca.DeletePolicyInput, ...func(*acmpca.Options)) (*acmpca.DeletePolicyOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *acmpca.DeletePolicyInput, ...func(*acmpca.Options)) *acmpca.DeletePolicyOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*acmpca.DeletePolicyOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *acmpca.DeletePolicyInput, ...func(*acmpca.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeCertificateAuthority provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DescribeCertificateAuthority(ctx context.Context, params *acmpca.DescribeCertificateAuthorityInput, optFns ...func(*acmpca.Options)) (*acmpca.DescribeCertificateAuthorityOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DescribeCertificateAuthority")
	}

	var r0 *acmpca.DescribeCertificateAuthorityOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *acmpca.DescribeCertificateAuthorityInput, ...func(*acmpca.Options)) (*acmpca.DescribeCertificateAuthorityOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *acmpca.DescribeCertificateAuthorityInput, ...func(*acmpca.Options)) *acmpca.DescribeCertificateAuthorityOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*acmpca.DescribeCertificateAuthorityOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *acmpca.DescribeCertificateAuthorityInput, ...func(*acmpca.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeCertificateAuthorityAuditReport provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DescribeCertificateAuthorityAuditReport(ctx context.Context, params *acmpca.DescribeCertificateAuthorityAuditReportInput, optFns ...func(*acmpca.Options)) (*acmpca.DescribeCertificateAuthorityAuditReportOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DescribeCertificateAuthorityAuditReport")
	}

	var r0 *acmpca.DescribeCertificateAuthorityAuditReportOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *acmpca.DescribeCertificateAuthorityAuditReportInput, ...func(*acmpca.Options)) (*acmpca.DescribeCertificateAuthorityAuditReportOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *acmpca.DescribeCertificateAuthorityAuditReportInput, ...func(*acmpca.Options)) *acmpca.DescribeCertificateAuthorityAuditReportOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*acmpca.DescribeCertificateAuthorityAuditReportOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *acmpca.DescribeCertificateAuthorityAuditReportInput, ...func(*acmpca.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetCertificate provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetCertificate(ctx context.Context, params *acmpca.GetCertificateInput, optFns ...func(*acmpca.Options)) (*acmpca.GetCertificateOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetCertificate")
	}

	var r0 *acmpca.GetCertificateOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *acmpca.GetCertificateInput, ...func(*acmpca.Options)) (*acmpca.GetCertificateOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *acmpca.GetCertificateInput, ...func(*acmpca.Options)) *acmpca.GetCertificateOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*acmpca.GetCertificateOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *acmpca.GetCertificateInput, ...func(*acmpca.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetCertificateAuthorityCertificate provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetCertificateAuthorityCertificate(ctx context.Context, params *acmpca.GetCertificateAuthorityCertificateInput, optFns ...func(*acmpca.Options)) (*acmpca.GetCertificateAuthorityCertificateOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetCertificateAuthorityCertificate")
	}

	var r0 *acmpca.GetCertificateAuthorityCertificateOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *acmpca.GetCertificateAuthorityCertificateInput, ...func(*acmpca.Options)) (*acmpca.GetCertificateAuthorityCertificateOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *acmpca.GetCertificateAuthorityCertificateInput, ...func(*acmpca.Options)) *acmpca.GetCertificateAuthorityCertificateOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*acmpca.GetCertificateAuthorityCertificateOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *acmpca.GetCertificateAuthorityCertificateInput, ...func(*acmpca.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetCertificateAuthorityCsr provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetCertificateAuthorityCsr(ctx context.Context, params *acmpca.GetCertificateAuthorityCsrInput, optFns ...func(*acmpca.Options)) (*acmpca.GetCertificateAuthorityCsrOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetCertificateAuthorityCsr")
	}

	var r0 *acmpca.GetCertificateAuthorityCsrOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *acmpca.GetCertificateAuthorityCsrInput, ...func(*acmpca.Options)) (*acmpca.GetCertificateAuthorityCsrOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *acmpca.GetCertificateAuthorityCsrInput, ...func(*acmpca.Options)) *acmpca.GetCertificateAuthorityCsrOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*acmpca.GetCertificateAuthorityCsrOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *acmpca.GetCertificateAuthorityCsrInput, ...func(*acmpca.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetPolicy provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetPolicy(ctx context.Context, params *acmpca.GetPolicyInput, optFns ...func(*acmpca.Options)) (*acmpca.GetPolicyOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetPolicy")
	}

	var r0 *acmpca.GetPolicyOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *acmpca.GetPolicyInput, ...func(*acmpca.Options)) (*acmpca.GetPolicyOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *acmpca.GetPolicyInput, ...func(*acmpca.Options)) *acmpca.GetPolicyOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*acmpca.GetPolicyOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *acmpca.GetPolicyInput, ...func(*acmpca.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ImportCertificateAuthorityCertificate provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ImportCertificateAuthorityCertificate(ctx context.Context, params *acmpca.ImportCertificateAuthorityCertificateInput, optFns ...func(*acmpca.Options)) (*acmpca.ImportCertificateAuthorityCertificateOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ImportCertificateAuthorityCertificate")
	}

	var r0 *acmpca.ImportCertificateAuthorityCertificateOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *acmpca.ImportCertificateAuthorityCertificateInput, ...func(*acmpca.Options)) (*acmpca.ImportCertificateAuthorityCertificateOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *acmpca.ImportCertificateAuthorityCertificateInput, ...func(*acmpca.Options)) *acmpca.ImportCertificateAuthorityCertificateOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*acmpca.ImportCertificateAuthorityCertificateOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *acmpca.ImportCertificateAuthorityCertificateInput, ...func(*acmpca.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// IssueCertificate provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) IssueCertificate(ctx context.Context, params *acmpca.IssueCertificateInput, optFns ...func(*acmpca.Options)) (*acmpca.IssueCertificateOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for IssueCertificate")
	}

	var r0 *acmpca.IssueCertificateOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *acmpca.IssueCertificateInput, ...func(*acmpca.Options)) (*acmpca.IssueCertificateOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *acmpca.IssueCertificateInput, ...func(*acmpca.Options)) *acmpca.IssueCertificateOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*acmpca.IssueCertificateOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *acmpca.IssueCertificateInput, ...func(*acmpca.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListCertificateAuthorities provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListCertificateAuthorities(ctx context.Context, params *acmpca.ListCertificateAuthoritiesInput, optFns ...func(*acmpca.Options)) (*acmpca.ListCertificateAuthoritiesOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListCertificateAuthorities")
	}

	var r0 *acmpca.ListCertificateAuthoritiesOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *acmpca.ListCertificateAuthoritiesInput, ...func(*acmpca.Options)) (*acmpca.ListCertificateAuthoritiesOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *acmpca.ListCertificateAuthoritiesInput, ...func(*acmpca.Options)) *acmpca.ListCertificateAuthoritiesOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*acmpca.ListCertificateAuthoritiesOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *acmpca.ListCertificateAuthoritiesInput, ...func(*acmpca.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListPermissions provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListPermissions(ctx context.Context, params *acmpca.ListPermissionsInput, optFns ...func(*acmpca.Options)) (*acmpca.ListPermissionsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListPermissions")
	}

	var r0 *acmpca.ListPermissionsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *acmpca.ListPermissionsInput, ...func(*acmpca.Options)) (*acmpca.ListPermissionsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *acmpca.ListPermissionsInput, ...func(*acmpca.Options)) *acmpca.ListPermissionsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*acmpca.ListPermissionsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *acmpca.ListPermissionsInput, ...func(*acmpca.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListTags provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListTags(ctx context.Context, params *acmpca.ListTagsInput, optFns ...func(*acmpca.Options)) (*acmpca.ListTagsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListTags")
	}

	var r0 *acmpca.ListTagsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *acmpca.ListTagsInput, ...func(*acmpca.Options)) (*acmpca.ListTagsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *acmpca.ListTagsInput, ...func(*acmpca.Options)) *acmpca.ListTagsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*acmpca.ListTagsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *acmpca.ListTagsInput, ...func(*acmpca.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Options provides a mock function with no fields
func (_m *IClient) Options() acmpca.Options {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Options")
	}

	var r0 acmpca.Options
	if rf, ok := ret.Get(0).(func() acmpca.Options); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(acmpca.Options)
	}

	return r0
}

// PutPolicy provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) PutPolicy(ctx context.Context, params *acmpca.PutPolicyInput, optFns ...func(*acmpca.Options)) (*acmpca.PutPolicyOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for PutPolicy")
	}

	var r0 *acmpca.PutPolicyOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *acmpca.PutPolicyInput, ...func(*acmpca.Options)) (*acmpca.PutPolicyOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *acmpca.PutPolicyInput, ...func(*acmpca.Options)) *acmpca.PutPolicyOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*acmpca.PutPolicyOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *acmpca.PutPolicyInput, ...func(*acmpca.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RestoreCertificateAuthority provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) RestoreCertificateAuthority(ctx context.Context, params *acmpca.RestoreCertificateAuthorityInput, optFns ...func(*acmpca.Options)) (*acmpca.RestoreCertificateAuthorityOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for RestoreCertificateAuthority")
	}

	var r0 *acmpca.RestoreCertificateAuthorityOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *acmpca.RestoreCertificateAuthorityInput, ...func(*acmpca.Options)) (*acmpca.RestoreCertificateAuthorityOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *acmpca.RestoreCertificateAuthorityInput, ...func(*acmpca.Options)) *acmpca.RestoreCertificateAuthorityOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*acmpca.RestoreCertificateAuthorityOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *acmpca.RestoreCertificateAuthorityInput, ...func(*acmpca.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RevokeCertificate provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) RevokeCertificate(ctx context.Context, params *acmpca.RevokeCertificateInput, optFns ...func(*acmpca.Options)) (*acmpca.RevokeCertificateOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for RevokeCertificate")
	}

	var r0 *acmpca.RevokeCertificateOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *acmpca.RevokeCertificateInput, ...func(*acmpca.Options)) (*acmpca.RevokeCertificateOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *acmpca.RevokeCertificateInput, ...func(*acmpca.Options)) *acmpca.RevokeCertificateOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*acmpca.RevokeCertificateOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *acmpca.RevokeCertificateInput, ...func(*acmpca.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// TagCertificateAuthority provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) TagCertificateAuthority(ctx context.Context, params *acmpca.TagCertificateAuthorityInput, optFns ...func(*acmpca.Options)) (*acmpca.TagCertificateAuthorityOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for TagCertificateAuthority")
	}

	var r0 *acmpca.TagCertificateAuthorityOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *acmpca.TagCertificateAuthorityInput, ...func(*acmpca.Options)) (*acmpca.TagCertificateAuthorityOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *acmpca.TagCertificateAuthorityInput, ...func(*acmpca.Options)) *acmpca.TagCertificateAuthorityOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*acmpca.TagCertificateAuthorityOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *acmpca.TagCertificateAuthorityInput, ...func(*acmpca.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UntagCertificateAuthority provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UntagCertificateAuthority(ctx context.Context, params *acmpca.UntagCertificateAuthorityInput, optFns ...func(*acmpca.Options)) (*acmpca.UntagCertificateAuthorityOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UntagCertificateAuthority")
	}

	var r0 *acmpca.UntagCertificateAuthorityOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *acmpca.UntagCertificateAuthorityInput, ...func(*acmpca.Options)) (*acmpca.UntagCertificateAuthorityOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *acmpca.UntagCertificateAuthorityInput, ...func(*acmpca.Options)) *acmpca.UntagCertificateAuthorityOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*acmpca.UntagCertificateAuthorityOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *acmpca.UntagCertificateAuthorityInput, ...func(*acmpca.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateCertificateAuthority provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UpdateCertificateAuthority(ctx context.Context, params *acmpca.UpdateCertificateAuthorityInput, optFns ...func(*acmpca.Options)) (*acmpca.UpdateCertificateAuthorityOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateCertificateAuthority")
	}

	var r0 *acmpca.UpdateCertificateAuthorityOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *acmpca.UpdateCertificateAuthorityInput, ...func(*acmpca.Options)) (*acmpca.UpdateCertificateAuthorityOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *acmpca.UpdateCertificateAuthorityInput, ...func(*acmpca.Options)) *acmpca.UpdateCertificateAuthorityOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*acmpca.UpdateCertificateAuthorityOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *acmpca.UpdateCertificateAuthorityInput, ...func(*acmpca.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewIClient creates a new instance of IClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewIClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *IClient {
	mock := &IClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
