// Code generated by mockery v2.43.2. DO NOT EDIT.

package mocks

import (
	context "context"

	pinpointsmsvoicev2 "github.com/aws/aws-sdk-go-v2/service/pinpointsmsvoicev2"
	mock "github.com/stretchr/testify/mock"
)

// IClient is an autogenerated mock type for the IClient type
type IClient struct {
	mock.Mock
}

// AssociateOriginationIdentity provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) AssociateOriginationIdentity(ctx context.Context, params *pinpointsmsvoicev2.AssociateOriginationIdentityInput, optFns ...func(*pinpointsmsvoicev2.Options)) (*pinpointsmsvoicev2.AssociateOriginationIdentityOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for AssociateOriginationIdentity")
	}

	var r0 *pinpointsmsvoicev2.AssociateOriginationIdentityOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *pinpointsmsvoicev2.AssociateOriginationIdentityInput, ...func(*pinpointsmsvoicev2.Options)) (*pinpointsmsvoicev2.AssociateOriginationIdentityOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *pinpointsmsvoicev2.AssociateOriginationIdentityInput, ...func(*pinpointsmsvoicev2.Options)) *pinpointsmsvoicev2.AssociateOriginationIdentityOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*pinpointsmsvoicev2.AssociateOriginationIdentityOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *pinpointsmsvoicev2.AssociateOriginationIdentityInput, ...func(*pinpointsmsvoicev2.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AssociateProtectConfiguration provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) AssociateProtectConfiguration(ctx context.Context, params *pinpointsmsvoicev2.AssociateProtectConfigurationInput, optFns ...func(*pinpointsmsvoicev2.Options)) (*pinpointsmsvoicev2.AssociateProtectConfigurationOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for AssociateProtectConfiguration")
	}

	var r0 *pinpointsmsvoicev2.AssociateProtectConfigurationOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *pinpointsmsvoicev2.AssociateProtectConfigurationInput, ...func(*pinpointsmsvoicev2.Options)) (*pinpointsmsvoicev2.AssociateProtectConfigurationOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *pinpointsmsvoicev2.AssociateProtectConfigurationInput, ...func(*pinpointsmsvoicev2.Options)) *pinpointsmsvoicev2.AssociateProtectConfigurationOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*pinpointsmsvoicev2.AssociateProtectConfigurationOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *pinpointsmsvoicev2.AssociateProtectConfigurationInput, ...func(*pinpointsmsvoicev2.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateConfigurationSet provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CreateConfigurationSet(ctx context.Context, params *pinpointsmsvoicev2.CreateConfigurationSetInput, optFns ...func(*pinpointsmsvoicev2.Options)) (*pinpointsmsvoicev2.CreateConfigurationSetOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateConfigurationSet")
	}

	var r0 *pinpointsmsvoicev2.CreateConfigurationSetOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *pinpointsmsvoicev2.CreateConfigurationSetInput, ...func(*pinpointsmsvoicev2.Options)) (*pinpointsmsvoicev2.CreateConfigurationSetOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *pinpointsmsvoicev2.CreateConfigurationSetInput, ...func(*pinpointsmsvoicev2.Options)) *pinpointsmsvoicev2.CreateConfigurationSetOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*pinpointsmsvoicev2.CreateConfigurationSetOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *pinpointsmsvoicev2.CreateConfigurationSetInput, ...func(*pinpointsmsvoicev2.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateEventDestination provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CreateEventDestination(ctx context.Context, params *pinpointsmsvoicev2.CreateEventDestinationInput, optFns ...func(*pinpointsmsvoicev2.Options)) (*pinpointsmsvoicev2.CreateEventDestinationOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateEventDestination")
	}

	var r0 *pinpointsmsvoicev2.CreateEventDestinationOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *pinpointsmsvoicev2.CreateEventDestinationInput, ...func(*pinpointsmsvoicev2.Options)) (*pinpointsmsvoicev2.CreateEventDestinationOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *pinpointsmsvoicev2.CreateEventDestinationInput, ...func(*pinpointsmsvoicev2.Options)) *pinpointsmsvoicev2.CreateEventDestinationOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*pinpointsmsvoicev2.CreateEventDestinationOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *pinpointsmsvoicev2.CreateEventDestinationInput, ...func(*pinpointsmsvoicev2.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateOptOutList provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CreateOptOutList(ctx context.Context, params *pinpointsmsvoicev2.CreateOptOutListInput, optFns ...func(*pinpointsmsvoicev2.Options)) (*pinpointsmsvoicev2.CreateOptOutListOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateOptOutList")
	}

	var r0 *pinpointsmsvoicev2.CreateOptOutListOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *pinpointsmsvoicev2.CreateOptOutListInput, ...func(*pinpointsmsvoicev2.Options)) (*pinpointsmsvoicev2.CreateOptOutListOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *pinpointsmsvoicev2.CreateOptOutListInput, ...func(*pinpointsmsvoicev2.Options)) *pinpointsmsvoicev2.CreateOptOutListOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*pinpointsmsvoicev2.CreateOptOutListOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *pinpointsmsvoicev2.CreateOptOutListInput, ...func(*pinpointsmsvoicev2.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreatePool provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CreatePool(ctx context.Context, params *pinpointsmsvoicev2.CreatePoolInput, optFns ...func(*pinpointsmsvoicev2.Options)) (*pinpointsmsvoicev2.CreatePoolOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreatePool")
	}

	var r0 *pinpointsmsvoicev2.CreatePoolOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *pinpointsmsvoicev2.CreatePoolInput, ...func(*pinpointsmsvoicev2.Options)) (*pinpointsmsvoicev2.CreatePoolOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *pinpointsmsvoicev2.CreatePoolInput, ...func(*pinpointsmsvoicev2.Options)) *pinpointsmsvoicev2.CreatePoolOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*pinpointsmsvoicev2.CreatePoolOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *pinpointsmsvoicev2.CreatePoolInput, ...func(*pinpointsmsvoicev2.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateProtectConfiguration provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CreateProtectConfiguration(ctx context.Context, params *pinpointsmsvoicev2.CreateProtectConfigurationInput, optFns ...func(*pinpointsmsvoicev2.Options)) (*pinpointsmsvoicev2.CreateProtectConfigurationOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateProtectConfiguration")
	}

	var r0 *pinpointsmsvoicev2.CreateProtectConfigurationOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *pinpointsmsvoicev2.CreateProtectConfigurationInput, ...func(*pinpointsmsvoicev2.Options)) (*pinpointsmsvoicev2.CreateProtectConfigurationOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *pinpointsmsvoicev2.CreateProtectConfigurationInput, ...func(*pinpointsmsvoicev2.Options)) *pinpointsmsvoicev2.CreateProtectConfigurationOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*pinpointsmsvoicev2.CreateProtectConfigurationOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *pinpointsmsvoicev2.CreateProtectConfigurationInput, ...func(*pinpointsmsvoicev2.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateRegistration provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CreateRegistration(ctx context.Context, params *pinpointsmsvoicev2.CreateRegistrationInput, optFns ...func(*pinpointsmsvoicev2.Options)) (*pinpointsmsvoicev2.CreateRegistrationOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateRegistration")
	}

	var r0 *pinpointsmsvoicev2.CreateRegistrationOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *pinpointsmsvoicev2.CreateRegistrationInput, ...func(*pinpointsmsvoicev2.Options)) (*pinpointsmsvoicev2.CreateRegistrationOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *pinpointsmsvoicev2.CreateRegistrationInput, ...func(*pinpointsmsvoicev2.Options)) *pinpointsmsvoicev2.CreateRegistrationOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*pinpointsmsvoicev2.CreateRegistrationOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *pinpointsmsvoicev2.CreateRegistrationInput, ...func(*pinpointsmsvoicev2.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateRegistrationAssociation provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CreateRegistrationAssociation(ctx context.Context, params *pinpointsmsvoicev2.CreateRegistrationAssociationInput, optFns ...func(*pinpointsmsvoicev2.Options)) (*pinpointsmsvoicev2.CreateRegistrationAssociationOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateRegistrationAssociation")
	}

	var r0 *pinpointsmsvoicev2.CreateRegistrationAssociationOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *pinpointsmsvoicev2.CreateRegistrationAssociationInput, ...func(*pinpointsmsvoicev2.Options)) (*pinpointsmsvoicev2.CreateRegistrationAssociationOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *pinpointsmsvoicev2.CreateRegistrationAssociationInput, ...func(*pinpointsmsvoicev2.Options)) *pinpointsmsvoicev2.CreateRegistrationAssociationOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*pinpointsmsvoicev2.CreateRegistrationAssociationOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *pinpointsmsvoicev2.CreateRegistrationAssociationInput, ...func(*pinpointsmsvoicev2.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateRegistrationAttachment provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CreateRegistrationAttachment(ctx context.Context, params *pinpointsmsvoicev2.CreateRegistrationAttachmentInput, optFns ...func(*pinpointsmsvoicev2.Options)) (*pinpointsmsvoicev2.CreateRegistrationAttachmentOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateRegistrationAttachment")
	}

	var r0 *pinpointsmsvoicev2.CreateRegistrationAttachmentOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *pinpointsmsvoicev2.CreateRegistrationAttachmentInput, ...func(*pinpointsmsvoicev2.Options)) (*pinpointsmsvoicev2.CreateRegistrationAttachmentOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *pinpointsmsvoicev2.CreateRegistrationAttachmentInput, ...func(*pinpointsmsvoicev2.Options)) *pinpointsmsvoicev2.CreateRegistrationAttachmentOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*pinpointsmsvoicev2.CreateRegistrationAttachmentOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *pinpointsmsvoicev2.CreateRegistrationAttachmentInput, ...func(*pinpointsmsvoicev2.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateRegistrationVersion provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CreateRegistrationVersion(ctx context.Context, params *pinpointsmsvoicev2.CreateRegistrationVersionInput, optFns ...func(*pinpointsmsvoicev2.Options)) (*pinpointsmsvoicev2.CreateRegistrationVersionOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateRegistrationVersion")
	}

	var r0 *pinpointsmsvoicev2.CreateRegistrationVersionOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *pinpointsmsvoicev2.CreateRegistrationVersionInput, ...func(*pinpointsmsvoicev2.Options)) (*pinpointsmsvoicev2.CreateRegistrationVersionOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *pinpointsmsvoicev2.CreateRegistrationVersionInput, ...func(*pinpointsmsvoicev2.Options)) *pinpointsmsvoicev2.CreateRegistrationVersionOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*pinpointsmsvoicev2.CreateRegistrationVersionOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *pinpointsmsvoicev2.CreateRegistrationVersionInput, ...func(*pinpointsmsvoicev2.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateVerifiedDestinationNumber provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CreateVerifiedDestinationNumber(ctx context.Context, params *pinpointsmsvoicev2.CreateVerifiedDestinationNumberInput, optFns ...func(*pinpointsmsvoicev2.Options)) (*pinpointsmsvoicev2.CreateVerifiedDestinationNumberOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateVerifiedDestinationNumber")
	}

	var r0 *pinpointsmsvoicev2.CreateVerifiedDestinationNumberOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *pinpointsmsvoicev2.CreateVerifiedDestinationNumberInput, ...func(*pinpointsmsvoicev2.Options)) (*pinpointsmsvoicev2.CreateVerifiedDestinationNumberOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *pinpointsmsvoicev2.CreateVerifiedDestinationNumberInput, ...func(*pinpointsmsvoicev2.Options)) *pinpointsmsvoicev2.CreateVerifiedDestinationNumberOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*pinpointsmsvoicev2.CreateVerifiedDestinationNumberOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *pinpointsmsvoicev2.CreateVerifiedDestinationNumberInput, ...func(*pinpointsmsvoicev2.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteAccountDefaultProtectConfiguration provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteAccountDefaultProtectConfiguration(ctx context.Context, params *pinpointsmsvoicev2.DeleteAccountDefaultProtectConfigurationInput, optFns ...func(*pinpointsmsvoicev2.Options)) (*pinpointsmsvoicev2.DeleteAccountDefaultProtectConfigurationOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteAccountDefaultProtectConfiguration")
	}

	var r0 *pinpointsmsvoicev2.DeleteAccountDefaultProtectConfigurationOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *pinpointsmsvoicev2.DeleteAccountDefaultProtectConfigurationInput, ...func(*pinpointsmsvoicev2.Options)) (*pinpointsmsvoicev2.DeleteAccountDefaultProtectConfigurationOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *pinpointsmsvoicev2.DeleteAccountDefaultProtectConfigurationInput, ...func(*pinpointsmsvoicev2.Options)) *pinpointsmsvoicev2.DeleteAccountDefaultProtectConfigurationOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*pinpointsmsvoicev2.DeleteAccountDefaultProtectConfigurationOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *pinpointsmsvoicev2.DeleteAccountDefaultProtectConfigurationInput, ...func(*pinpointsmsvoicev2.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteConfigurationSet provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteConfigurationSet(ctx context.Context, params *pinpointsmsvoicev2.DeleteConfigurationSetInput, optFns ...func(*pinpointsmsvoicev2.Options)) (*pinpointsmsvoicev2.DeleteConfigurationSetOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteConfigurationSet")
	}

	var r0 *pinpointsmsvoicev2.DeleteConfigurationSetOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *pinpointsmsvoicev2.DeleteConfigurationSetInput, ...func(*pinpointsmsvoicev2.Options)) (*pinpointsmsvoicev2.DeleteConfigurationSetOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *pinpointsmsvoicev2.DeleteConfigurationSetInput, ...func(*pinpointsmsvoicev2.Options)) *pinpointsmsvoicev2.DeleteConfigurationSetOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*pinpointsmsvoicev2.DeleteConfigurationSetOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *pinpointsmsvoicev2.DeleteConfigurationSetInput, ...func(*pinpointsmsvoicev2.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteDefaultMessageType provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteDefaultMessageType(ctx context.Context, params *pinpointsmsvoicev2.DeleteDefaultMessageTypeInput, optFns ...func(*pinpointsmsvoicev2.Options)) (*pinpointsmsvoicev2.DeleteDefaultMessageTypeOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteDefaultMessageType")
	}

	var r0 *pinpointsmsvoicev2.DeleteDefaultMessageTypeOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *pinpointsmsvoicev2.DeleteDefaultMessageTypeInput, ...func(*pinpointsmsvoicev2.Options)) (*pinpointsmsvoicev2.DeleteDefaultMessageTypeOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *pinpointsmsvoicev2.DeleteDefaultMessageTypeInput, ...func(*pinpointsmsvoicev2.Options)) *pinpointsmsvoicev2.DeleteDefaultMessageTypeOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*pinpointsmsvoicev2.DeleteDefaultMessageTypeOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *pinpointsmsvoicev2.DeleteDefaultMessageTypeInput, ...func(*pinpointsmsvoicev2.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteDefaultSenderId provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteDefaultSenderId(ctx context.Context, params *pinpointsmsvoicev2.DeleteDefaultSenderIdInput, optFns ...func(*pinpointsmsvoicev2.Options)) (*pinpointsmsvoicev2.DeleteDefaultSenderIdOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteDefaultSenderId")
	}

	var r0 *pinpointsmsvoicev2.DeleteDefaultSenderIdOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *pinpointsmsvoicev2.DeleteDefaultSenderIdInput, ...func(*pinpointsmsvoicev2.Options)) (*pinpointsmsvoicev2.DeleteDefaultSenderIdOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *pinpointsmsvoicev2.DeleteDefaultSenderIdInput, ...func(*pinpointsmsvoicev2.Options)) *pinpointsmsvoicev2.DeleteDefaultSenderIdOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*pinpointsmsvoicev2.DeleteDefaultSenderIdOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *pinpointsmsvoicev2.DeleteDefaultSenderIdInput, ...func(*pinpointsmsvoicev2.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteEventDestination provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteEventDestination(ctx context.Context, params *pinpointsmsvoicev2.DeleteEventDestinationInput, optFns ...func(*pinpointsmsvoicev2.Options)) (*pinpointsmsvoicev2.DeleteEventDestinationOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteEventDestination")
	}

	var r0 *pinpointsmsvoicev2.DeleteEventDestinationOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *pinpointsmsvoicev2.DeleteEventDestinationInput, ...func(*pinpointsmsvoicev2.Options)) (*pinpointsmsvoicev2.DeleteEventDestinationOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *pinpointsmsvoicev2.DeleteEventDestinationInput, ...func(*pinpointsmsvoicev2.Options)) *pinpointsmsvoicev2.DeleteEventDestinationOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*pinpointsmsvoicev2.DeleteEventDestinationOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *pinpointsmsvoicev2.DeleteEventDestinationInput, ...func(*pinpointsmsvoicev2.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteKeyword provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteKeyword(ctx context.Context, params *pinpointsmsvoicev2.DeleteKeywordInput, optFns ...func(*pinpointsmsvoicev2.Options)) (*pinpointsmsvoicev2.DeleteKeywordOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteKeyword")
	}

	var r0 *pinpointsmsvoicev2.DeleteKeywordOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *pinpointsmsvoicev2.DeleteKeywordInput, ...func(*pinpointsmsvoicev2.Options)) (*pinpointsmsvoicev2.DeleteKeywordOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *pinpointsmsvoicev2.DeleteKeywordInput, ...func(*pinpointsmsvoicev2.Options)) *pinpointsmsvoicev2.DeleteKeywordOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*pinpointsmsvoicev2.DeleteKeywordOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *pinpointsmsvoicev2.DeleteKeywordInput, ...func(*pinpointsmsvoicev2.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteMediaMessageSpendLimitOverride provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteMediaMessageSpendLimitOverride(ctx context.Context, params *pinpointsmsvoicev2.DeleteMediaMessageSpendLimitOverrideInput, optFns ...func(*pinpointsmsvoicev2.Options)) (*pinpointsmsvoicev2.DeleteMediaMessageSpendLimitOverrideOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteMediaMessageSpendLimitOverride")
	}

	var r0 *pinpointsmsvoicev2.DeleteMediaMessageSpendLimitOverrideOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *pinpointsmsvoicev2.DeleteMediaMessageSpendLimitOverrideInput, ...func(*pinpointsmsvoicev2.Options)) (*pinpointsmsvoicev2.DeleteMediaMessageSpendLimitOverrideOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *pinpointsmsvoicev2.DeleteMediaMessageSpendLimitOverrideInput, ...func(*pinpointsmsvoicev2.Options)) *pinpointsmsvoicev2.DeleteMediaMessageSpendLimitOverrideOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*pinpointsmsvoicev2.DeleteMediaMessageSpendLimitOverrideOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *pinpointsmsvoicev2.DeleteMediaMessageSpendLimitOverrideInput, ...func(*pinpointsmsvoicev2.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteOptOutList provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteOptOutList(ctx context.Context, params *pinpointsmsvoicev2.DeleteOptOutListInput, optFns ...func(*pinpointsmsvoicev2.Options)) (*pinpointsmsvoicev2.DeleteOptOutListOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteOptOutList")
	}

	var r0 *pinpointsmsvoicev2.DeleteOptOutListOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *pinpointsmsvoicev2.DeleteOptOutListInput, ...func(*pinpointsmsvoicev2.Options)) (*pinpointsmsvoicev2.DeleteOptOutListOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *pinpointsmsvoicev2.DeleteOptOutListInput, ...func(*pinpointsmsvoicev2.Options)) *pinpointsmsvoicev2.DeleteOptOutListOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*pinpointsmsvoicev2.DeleteOptOutListOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *pinpointsmsvoicev2.DeleteOptOutListInput, ...func(*pinpointsmsvoicev2.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteOptedOutNumber provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteOptedOutNumber(ctx context.Context, params *pinpointsmsvoicev2.DeleteOptedOutNumberInput, optFns ...func(*pinpointsmsvoicev2.Options)) (*pinpointsmsvoicev2.DeleteOptedOutNumberOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteOptedOutNumber")
	}

	var r0 *pinpointsmsvoicev2.DeleteOptedOutNumberOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *pinpointsmsvoicev2.DeleteOptedOutNumberInput, ...func(*pinpointsmsvoicev2.Options)) (*pinpointsmsvoicev2.DeleteOptedOutNumberOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *pinpointsmsvoicev2.DeleteOptedOutNumberInput, ...func(*pinpointsmsvoicev2.Options)) *pinpointsmsvoicev2.DeleteOptedOutNumberOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*pinpointsmsvoicev2.DeleteOptedOutNumberOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *pinpointsmsvoicev2.DeleteOptedOutNumberInput, ...func(*pinpointsmsvoicev2.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeletePool provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeletePool(ctx context.Context, params *pinpointsmsvoicev2.DeletePoolInput, optFns ...func(*pinpointsmsvoicev2.Options)) (*pinpointsmsvoicev2.DeletePoolOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeletePool")
	}

	var r0 *pinpointsmsvoicev2.DeletePoolOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *pinpointsmsvoicev2.DeletePoolInput, ...func(*pinpointsmsvoicev2.Options)) (*pinpointsmsvoicev2.DeletePoolOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *pinpointsmsvoicev2.DeletePoolInput, ...func(*pinpointsmsvoicev2.Options)) *pinpointsmsvoicev2.DeletePoolOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*pinpointsmsvoicev2.DeletePoolOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *pinpointsmsvoicev2.DeletePoolInput, ...func(*pinpointsmsvoicev2.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteProtectConfiguration provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteProtectConfiguration(ctx context.Context, params *pinpointsmsvoicev2.DeleteProtectConfigurationInput, optFns ...func(*pinpointsmsvoicev2.Options)) (*pinpointsmsvoicev2.DeleteProtectConfigurationOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteProtectConfiguration")
	}

	var r0 *pinpointsmsvoicev2.DeleteProtectConfigurationOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *pinpointsmsvoicev2.DeleteProtectConfigurationInput, ...func(*pinpointsmsvoicev2.Options)) (*pinpointsmsvoicev2.DeleteProtectConfigurationOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *pinpointsmsvoicev2.DeleteProtectConfigurationInput, ...func(*pinpointsmsvoicev2.Options)) *pinpointsmsvoicev2.DeleteProtectConfigurationOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*pinpointsmsvoicev2.DeleteProtectConfigurationOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *pinpointsmsvoicev2.DeleteProtectConfigurationInput, ...func(*pinpointsmsvoicev2.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteProtectConfigurationRuleSetNumberOverride provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteProtectConfigurationRuleSetNumberOverride(ctx context.Context, params *pinpointsmsvoicev2.DeleteProtectConfigurationRuleSetNumberOverrideInput, optFns ...func(*pinpointsmsvoicev2.Options)) (*pinpointsmsvoicev2.DeleteProtectConfigurationRuleSetNumberOverrideOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteProtectConfigurationRuleSetNumberOverride")
	}

	var r0 *pinpointsmsvoicev2.DeleteProtectConfigurationRuleSetNumberOverrideOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *pinpointsmsvoicev2.DeleteProtectConfigurationRuleSetNumberOverrideInput, ...func(*pinpointsmsvoicev2.Options)) (*pinpointsmsvoicev2.DeleteProtectConfigurationRuleSetNumberOverrideOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *pinpointsmsvoicev2.DeleteProtectConfigurationRuleSetNumberOverrideInput, ...func(*pinpointsmsvoicev2.Options)) *pinpointsmsvoicev2.DeleteProtectConfigurationRuleSetNumberOverrideOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*pinpointsmsvoicev2.DeleteProtectConfigurationRuleSetNumberOverrideOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *pinpointsmsvoicev2.DeleteProtectConfigurationRuleSetNumberOverrideInput, ...func(*pinpointsmsvoicev2.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteRegistration provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteRegistration(ctx context.Context, params *pinpointsmsvoicev2.DeleteRegistrationInput, optFns ...func(*pinpointsmsvoicev2.Options)) (*pinpointsmsvoicev2.DeleteRegistrationOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteRegistration")
	}

	var r0 *pinpointsmsvoicev2.DeleteRegistrationOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *pinpointsmsvoicev2.DeleteRegistrationInput, ...func(*pinpointsmsvoicev2.Options)) (*pinpointsmsvoicev2.DeleteRegistrationOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *pinpointsmsvoicev2.DeleteRegistrationInput, ...func(*pinpointsmsvoicev2.Options)) *pinpointsmsvoicev2.DeleteRegistrationOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*pinpointsmsvoicev2.DeleteRegistrationOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *pinpointsmsvoicev2.DeleteRegistrationInput, ...func(*pinpointsmsvoicev2.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteRegistrationAttachment provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteRegistrationAttachment(ctx context.Context, params *pinpointsmsvoicev2.DeleteRegistrationAttachmentInput, optFns ...func(*pinpointsmsvoicev2.Options)) (*pinpointsmsvoicev2.DeleteRegistrationAttachmentOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteRegistrationAttachment")
	}

	var r0 *pinpointsmsvoicev2.DeleteRegistrationAttachmentOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *pinpointsmsvoicev2.DeleteRegistrationAttachmentInput, ...func(*pinpointsmsvoicev2.Options)) (*pinpointsmsvoicev2.DeleteRegistrationAttachmentOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *pinpointsmsvoicev2.DeleteRegistrationAttachmentInput, ...func(*pinpointsmsvoicev2.Options)) *pinpointsmsvoicev2.DeleteRegistrationAttachmentOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*pinpointsmsvoicev2.DeleteRegistrationAttachmentOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *pinpointsmsvoicev2.DeleteRegistrationAttachmentInput, ...func(*pinpointsmsvoicev2.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteRegistrationFieldValue provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteRegistrationFieldValue(ctx context.Context, params *pinpointsmsvoicev2.DeleteRegistrationFieldValueInput, optFns ...func(*pinpointsmsvoicev2.Options)) (*pinpointsmsvoicev2.DeleteRegistrationFieldValueOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteRegistrationFieldValue")
	}

	var r0 *pinpointsmsvoicev2.DeleteRegistrationFieldValueOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *pinpointsmsvoicev2.DeleteRegistrationFieldValueInput, ...func(*pinpointsmsvoicev2.Options)) (*pinpointsmsvoicev2.DeleteRegistrationFieldValueOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *pinpointsmsvoicev2.DeleteRegistrationFieldValueInput, ...func(*pinpointsmsvoicev2.Options)) *pinpointsmsvoicev2.DeleteRegistrationFieldValueOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*pinpointsmsvoicev2.DeleteRegistrationFieldValueOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *pinpointsmsvoicev2.DeleteRegistrationFieldValueInput, ...func(*pinpointsmsvoicev2.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteResourcePolicy provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteResourcePolicy(ctx context.Context, params *pinpointsmsvoicev2.DeleteResourcePolicyInput, optFns ...func(*pinpointsmsvoicev2.Options)) (*pinpointsmsvoicev2.DeleteResourcePolicyOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteResourcePolicy")
	}

	var r0 *pinpointsmsvoicev2.DeleteResourcePolicyOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *pinpointsmsvoicev2.DeleteResourcePolicyInput, ...func(*pinpointsmsvoicev2.Options)) (*pinpointsmsvoicev2.DeleteResourcePolicyOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *pinpointsmsvoicev2.DeleteResourcePolicyInput, ...func(*pinpointsmsvoicev2.Options)) *pinpointsmsvoicev2.DeleteResourcePolicyOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*pinpointsmsvoicev2.DeleteResourcePolicyOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *pinpointsmsvoicev2.DeleteResourcePolicyInput, ...func(*pinpointsmsvoicev2.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteTextMessageSpendLimitOverride provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteTextMessageSpendLimitOverride(ctx context.Context, params *pinpointsmsvoicev2.DeleteTextMessageSpendLimitOverrideInput, optFns ...func(*pinpointsmsvoicev2.Options)) (*pinpointsmsvoicev2.DeleteTextMessageSpendLimitOverrideOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteTextMessageSpendLimitOverride")
	}

	var r0 *pinpointsmsvoicev2.DeleteTextMessageSpendLimitOverrideOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *pinpointsmsvoicev2.DeleteTextMessageSpendLimitOverrideInput, ...func(*pinpointsmsvoicev2.Options)) (*pinpointsmsvoicev2.DeleteTextMessageSpendLimitOverrideOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *pinpointsmsvoicev2.DeleteTextMessageSpendLimitOverrideInput, ...func(*pinpointsmsvoicev2.Options)) *pinpointsmsvoicev2.DeleteTextMessageSpendLimitOverrideOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*pinpointsmsvoicev2.DeleteTextMessageSpendLimitOverrideOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *pinpointsmsvoicev2.DeleteTextMessageSpendLimitOverrideInput, ...func(*pinpointsmsvoicev2.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteVerifiedDestinationNumber provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteVerifiedDestinationNumber(ctx context.Context, params *pinpointsmsvoicev2.DeleteVerifiedDestinationNumberInput, optFns ...func(*pinpointsmsvoicev2.Options)) (*pinpointsmsvoicev2.DeleteVerifiedDestinationNumberOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteVerifiedDestinationNumber")
	}

	var r0 *pinpointsmsvoicev2.DeleteVerifiedDestinationNumberOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *pinpointsmsvoicev2.DeleteVerifiedDestinationNumberInput, ...func(*pinpointsmsvoicev2.Options)) (*pinpointsmsvoicev2.DeleteVerifiedDestinationNumberOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *pinpointsmsvoicev2.DeleteVerifiedDestinationNumberInput, ...func(*pinpointsmsvoicev2.Options)) *pinpointsmsvoicev2.DeleteVerifiedDestinationNumberOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*pinpointsmsvoicev2.DeleteVerifiedDestinationNumberOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *pinpointsmsvoicev2.DeleteVerifiedDestinationNumberInput, ...func(*pinpointsmsvoicev2.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteVoiceMessageSpendLimitOverride provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteVoiceMessageSpendLimitOverride(ctx context.Context, params *pinpointsmsvoicev2.DeleteVoiceMessageSpendLimitOverrideInput, optFns ...func(*pinpointsmsvoicev2.Options)) (*pinpointsmsvoicev2.DeleteVoiceMessageSpendLimitOverrideOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteVoiceMessageSpendLimitOverride")
	}

	var r0 *pinpointsmsvoicev2.DeleteVoiceMessageSpendLimitOverrideOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *pinpointsmsvoicev2.DeleteVoiceMessageSpendLimitOverrideInput, ...func(*pinpointsmsvoicev2.Options)) (*pinpointsmsvoicev2.DeleteVoiceMessageSpendLimitOverrideOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *pinpointsmsvoicev2.DeleteVoiceMessageSpendLimitOverrideInput, ...func(*pinpointsmsvoicev2.Options)) *pinpointsmsvoicev2.DeleteVoiceMessageSpendLimitOverrideOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*pinpointsmsvoicev2.DeleteVoiceMessageSpendLimitOverrideOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *pinpointsmsvoicev2.DeleteVoiceMessageSpendLimitOverrideInput, ...func(*pinpointsmsvoicev2.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeAccountAttributes provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DescribeAccountAttributes(ctx context.Context, params *pinpointsmsvoicev2.DescribeAccountAttributesInput, optFns ...func(*pinpointsmsvoicev2.Options)) (*pinpointsmsvoicev2.DescribeAccountAttributesOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DescribeAccountAttributes")
	}

	var r0 *pinpointsmsvoicev2.DescribeAccountAttributesOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *pinpointsmsvoicev2.DescribeAccountAttributesInput, ...func(*pinpointsmsvoicev2.Options)) (*pinpointsmsvoicev2.DescribeAccountAttributesOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *pinpointsmsvoicev2.DescribeAccountAttributesInput, ...func(*pinpointsmsvoicev2.Options)) *pinpointsmsvoicev2.DescribeAccountAttributesOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*pinpointsmsvoicev2.DescribeAccountAttributesOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *pinpointsmsvoicev2.DescribeAccountAttributesInput, ...func(*pinpointsmsvoicev2.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeAccountLimits provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DescribeAccountLimits(ctx context.Context, params *pinpointsmsvoicev2.DescribeAccountLimitsInput, optFns ...func(*pinpointsmsvoicev2.Options)) (*pinpointsmsvoicev2.DescribeAccountLimitsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DescribeAccountLimits")
	}

	var r0 *pinpointsmsvoicev2.DescribeAccountLimitsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *pinpointsmsvoicev2.DescribeAccountLimitsInput, ...func(*pinpointsmsvoicev2.Options)) (*pinpointsmsvoicev2.DescribeAccountLimitsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *pinpointsmsvoicev2.DescribeAccountLimitsInput, ...func(*pinpointsmsvoicev2.Options)) *pinpointsmsvoicev2.DescribeAccountLimitsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*pinpointsmsvoicev2.DescribeAccountLimitsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *pinpointsmsvoicev2.DescribeAccountLimitsInput, ...func(*pinpointsmsvoicev2.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeConfigurationSets provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DescribeConfigurationSets(ctx context.Context, params *pinpointsmsvoicev2.DescribeConfigurationSetsInput, optFns ...func(*pinpointsmsvoicev2.Options)) (*pinpointsmsvoicev2.DescribeConfigurationSetsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DescribeConfigurationSets")
	}

	var r0 *pinpointsmsvoicev2.DescribeConfigurationSetsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *pinpointsmsvoicev2.DescribeConfigurationSetsInput, ...func(*pinpointsmsvoicev2.Options)) (*pinpointsmsvoicev2.DescribeConfigurationSetsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *pinpointsmsvoicev2.DescribeConfigurationSetsInput, ...func(*pinpointsmsvoicev2.Options)) *pinpointsmsvoicev2.DescribeConfigurationSetsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*pinpointsmsvoicev2.DescribeConfigurationSetsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *pinpointsmsvoicev2.DescribeConfigurationSetsInput, ...func(*pinpointsmsvoicev2.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeKeywords provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DescribeKeywords(ctx context.Context, params *pinpointsmsvoicev2.DescribeKeywordsInput, optFns ...func(*pinpointsmsvoicev2.Options)) (*pinpointsmsvoicev2.DescribeKeywordsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DescribeKeywords")
	}

	var r0 *pinpointsmsvoicev2.DescribeKeywordsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *pinpointsmsvoicev2.DescribeKeywordsInput, ...func(*pinpointsmsvoicev2.Options)) (*pinpointsmsvoicev2.DescribeKeywordsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *pinpointsmsvoicev2.DescribeKeywordsInput, ...func(*pinpointsmsvoicev2.Options)) *pinpointsmsvoicev2.DescribeKeywordsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*pinpointsmsvoicev2.DescribeKeywordsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *pinpointsmsvoicev2.DescribeKeywordsInput, ...func(*pinpointsmsvoicev2.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeOptOutLists provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DescribeOptOutLists(ctx context.Context, params *pinpointsmsvoicev2.DescribeOptOutListsInput, optFns ...func(*pinpointsmsvoicev2.Options)) (*pinpointsmsvoicev2.DescribeOptOutListsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DescribeOptOutLists")
	}

	var r0 *pinpointsmsvoicev2.DescribeOptOutListsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *pinpointsmsvoicev2.DescribeOptOutListsInput, ...func(*pinpointsmsvoicev2.Options)) (*pinpointsmsvoicev2.DescribeOptOutListsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *pinpointsmsvoicev2.DescribeOptOutListsInput, ...func(*pinpointsmsvoicev2.Options)) *pinpointsmsvoicev2.DescribeOptOutListsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*pinpointsmsvoicev2.DescribeOptOutListsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *pinpointsmsvoicev2.DescribeOptOutListsInput, ...func(*pinpointsmsvoicev2.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeOptedOutNumbers provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DescribeOptedOutNumbers(ctx context.Context, params *pinpointsmsvoicev2.DescribeOptedOutNumbersInput, optFns ...func(*pinpointsmsvoicev2.Options)) (*pinpointsmsvoicev2.DescribeOptedOutNumbersOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DescribeOptedOutNumbers")
	}

	var r0 *pinpointsmsvoicev2.DescribeOptedOutNumbersOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *pinpointsmsvoicev2.DescribeOptedOutNumbersInput, ...func(*pinpointsmsvoicev2.Options)) (*pinpointsmsvoicev2.DescribeOptedOutNumbersOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *pinpointsmsvoicev2.DescribeOptedOutNumbersInput, ...func(*pinpointsmsvoicev2.Options)) *pinpointsmsvoicev2.DescribeOptedOutNumbersOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*pinpointsmsvoicev2.DescribeOptedOutNumbersOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *pinpointsmsvoicev2.DescribeOptedOutNumbersInput, ...func(*pinpointsmsvoicev2.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribePhoneNumbers provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DescribePhoneNumbers(ctx context.Context, params *pinpointsmsvoicev2.DescribePhoneNumbersInput, optFns ...func(*pinpointsmsvoicev2.Options)) (*pinpointsmsvoicev2.DescribePhoneNumbersOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DescribePhoneNumbers")
	}

	var r0 *pinpointsmsvoicev2.DescribePhoneNumbersOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *pinpointsmsvoicev2.DescribePhoneNumbersInput, ...func(*pinpointsmsvoicev2.Options)) (*pinpointsmsvoicev2.DescribePhoneNumbersOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *pinpointsmsvoicev2.DescribePhoneNumbersInput, ...func(*pinpointsmsvoicev2.Options)) *pinpointsmsvoicev2.DescribePhoneNumbersOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*pinpointsmsvoicev2.DescribePhoneNumbersOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *pinpointsmsvoicev2.DescribePhoneNumbersInput, ...func(*pinpointsmsvoicev2.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribePools provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DescribePools(ctx context.Context, params *pinpointsmsvoicev2.DescribePoolsInput, optFns ...func(*pinpointsmsvoicev2.Options)) (*pinpointsmsvoicev2.DescribePoolsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DescribePools")
	}

	var r0 *pinpointsmsvoicev2.DescribePoolsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *pinpointsmsvoicev2.DescribePoolsInput, ...func(*pinpointsmsvoicev2.Options)) (*pinpointsmsvoicev2.DescribePoolsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *pinpointsmsvoicev2.DescribePoolsInput, ...func(*pinpointsmsvoicev2.Options)) *pinpointsmsvoicev2.DescribePoolsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*pinpointsmsvoicev2.DescribePoolsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *pinpointsmsvoicev2.DescribePoolsInput, ...func(*pinpointsmsvoicev2.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeProtectConfigurations provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DescribeProtectConfigurations(ctx context.Context, params *pinpointsmsvoicev2.DescribeProtectConfigurationsInput, optFns ...func(*pinpointsmsvoicev2.Options)) (*pinpointsmsvoicev2.DescribeProtectConfigurationsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DescribeProtectConfigurations")
	}

	var r0 *pinpointsmsvoicev2.DescribeProtectConfigurationsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *pinpointsmsvoicev2.DescribeProtectConfigurationsInput, ...func(*pinpointsmsvoicev2.Options)) (*pinpointsmsvoicev2.DescribeProtectConfigurationsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *pinpointsmsvoicev2.DescribeProtectConfigurationsInput, ...func(*pinpointsmsvoicev2.Options)) *pinpointsmsvoicev2.DescribeProtectConfigurationsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*pinpointsmsvoicev2.DescribeProtectConfigurationsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *pinpointsmsvoicev2.DescribeProtectConfigurationsInput, ...func(*pinpointsmsvoicev2.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeRegistrationAttachments provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DescribeRegistrationAttachments(ctx context.Context, params *pinpointsmsvoicev2.DescribeRegistrationAttachmentsInput, optFns ...func(*pinpointsmsvoicev2.Options)) (*pinpointsmsvoicev2.DescribeRegistrationAttachmentsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DescribeRegistrationAttachments")
	}

	var r0 *pinpointsmsvoicev2.DescribeRegistrationAttachmentsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *pinpointsmsvoicev2.DescribeRegistrationAttachmentsInput, ...func(*pinpointsmsvoicev2.Options)) (*pinpointsmsvoicev2.DescribeRegistrationAttachmentsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *pinpointsmsvoicev2.DescribeRegistrationAttachmentsInput, ...func(*pinpointsmsvoicev2.Options)) *pinpointsmsvoicev2.DescribeRegistrationAttachmentsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*pinpointsmsvoicev2.DescribeRegistrationAttachmentsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *pinpointsmsvoicev2.DescribeRegistrationAttachmentsInput, ...func(*pinpointsmsvoicev2.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeRegistrationFieldDefinitions provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DescribeRegistrationFieldDefinitions(ctx context.Context, params *pinpointsmsvoicev2.DescribeRegistrationFieldDefinitionsInput, optFns ...func(*pinpointsmsvoicev2.Options)) (*pinpointsmsvoicev2.DescribeRegistrationFieldDefinitionsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DescribeRegistrationFieldDefinitions")
	}

	var r0 *pinpointsmsvoicev2.DescribeRegistrationFieldDefinitionsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *pinpointsmsvoicev2.DescribeRegistrationFieldDefinitionsInput, ...func(*pinpointsmsvoicev2.Options)) (*pinpointsmsvoicev2.DescribeRegistrationFieldDefinitionsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *pinpointsmsvoicev2.DescribeRegistrationFieldDefinitionsInput, ...func(*pinpointsmsvoicev2.Options)) *pinpointsmsvoicev2.DescribeRegistrationFieldDefinitionsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*pinpointsmsvoicev2.DescribeRegistrationFieldDefinitionsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *pinpointsmsvoicev2.DescribeRegistrationFieldDefinitionsInput, ...func(*pinpointsmsvoicev2.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeRegistrationFieldValues provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DescribeRegistrationFieldValues(ctx context.Context, params *pinpointsmsvoicev2.DescribeRegistrationFieldValuesInput, optFns ...func(*pinpointsmsvoicev2.Options)) (*pinpointsmsvoicev2.DescribeRegistrationFieldValuesOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DescribeRegistrationFieldValues")
	}

	var r0 *pinpointsmsvoicev2.DescribeRegistrationFieldValuesOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *pinpointsmsvoicev2.DescribeRegistrationFieldValuesInput, ...func(*pinpointsmsvoicev2.Options)) (*pinpointsmsvoicev2.DescribeRegistrationFieldValuesOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *pinpointsmsvoicev2.DescribeRegistrationFieldValuesInput, ...func(*pinpointsmsvoicev2.Options)) *pinpointsmsvoicev2.DescribeRegistrationFieldValuesOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*pinpointsmsvoicev2.DescribeRegistrationFieldValuesOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *pinpointsmsvoicev2.DescribeRegistrationFieldValuesInput, ...func(*pinpointsmsvoicev2.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeRegistrationSectionDefinitions provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DescribeRegistrationSectionDefinitions(ctx context.Context, params *pinpointsmsvoicev2.DescribeRegistrationSectionDefinitionsInput, optFns ...func(*pinpointsmsvoicev2.Options)) (*pinpointsmsvoicev2.DescribeRegistrationSectionDefinitionsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DescribeRegistrationSectionDefinitions")
	}

	var r0 *pinpointsmsvoicev2.DescribeRegistrationSectionDefinitionsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *pinpointsmsvoicev2.DescribeRegistrationSectionDefinitionsInput, ...func(*pinpointsmsvoicev2.Options)) (*pinpointsmsvoicev2.DescribeRegistrationSectionDefinitionsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *pinpointsmsvoicev2.DescribeRegistrationSectionDefinitionsInput, ...func(*pinpointsmsvoicev2.Options)) *pinpointsmsvoicev2.DescribeRegistrationSectionDefinitionsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*pinpointsmsvoicev2.DescribeRegistrationSectionDefinitionsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *pinpointsmsvoicev2.DescribeRegistrationSectionDefinitionsInput, ...func(*pinpointsmsvoicev2.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeRegistrationTypeDefinitions provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DescribeRegistrationTypeDefinitions(ctx context.Context, params *pinpointsmsvoicev2.DescribeRegistrationTypeDefinitionsInput, optFns ...func(*pinpointsmsvoicev2.Options)) (*pinpointsmsvoicev2.DescribeRegistrationTypeDefinitionsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DescribeRegistrationTypeDefinitions")
	}

	var r0 *pinpointsmsvoicev2.DescribeRegistrationTypeDefinitionsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *pinpointsmsvoicev2.DescribeRegistrationTypeDefinitionsInput, ...func(*pinpointsmsvoicev2.Options)) (*pinpointsmsvoicev2.DescribeRegistrationTypeDefinitionsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *pinpointsmsvoicev2.DescribeRegistrationTypeDefinitionsInput, ...func(*pinpointsmsvoicev2.Options)) *pinpointsmsvoicev2.DescribeRegistrationTypeDefinitionsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*pinpointsmsvoicev2.DescribeRegistrationTypeDefinitionsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *pinpointsmsvoicev2.DescribeRegistrationTypeDefinitionsInput, ...func(*pinpointsmsvoicev2.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeRegistrationVersions provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DescribeRegistrationVersions(ctx context.Context, params *pinpointsmsvoicev2.DescribeRegistrationVersionsInput, optFns ...func(*pinpointsmsvoicev2.Options)) (*pinpointsmsvoicev2.DescribeRegistrationVersionsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DescribeRegistrationVersions")
	}

	var r0 *pinpointsmsvoicev2.DescribeRegistrationVersionsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *pinpointsmsvoicev2.DescribeRegistrationVersionsInput, ...func(*pinpointsmsvoicev2.Options)) (*pinpointsmsvoicev2.DescribeRegistrationVersionsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *pinpointsmsvoicev2.DescribeRegistrationVersionsInput, ...func(*pinpointsmsvoicev2.Options)) *pinpointsmsvoicev2.DescribeRegistrationVersionsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*pinpointsmsvoicev2.DescribeRegistrationVersionsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *pinpointsmsvoicev2.DescribeRegistrationVersionsInput, ...func(*pinpointsmsvoicev2.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeRegistrations provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DescribeRegistrations(ctx context.Context, params *pinpointsmsvoicev2.DescribeRegistrationsInput, optFns ...func(*pinpointsmsvoicev2.Options)) (*pinpointsmsvoicev2.DescribeRegistrationsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DescribeRegistrations")
	}

	var r0 *pinpointsmsvoicev2.DescribeRegistrationsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *pinpointsmsvoicev2.DescribeRegistrationsInput, ...func(*pinpointsmsvoicev2.Options)) (*pinpointsmsvoicev2.DescribeRegistrationsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *pinpointsmsvoicev2.DescribeRegistrationsInput, ...func(*pinpointsmsvoicev2.Options)) *pinpointsmsvoicev2.DescribeRegistrationsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*pinpointsmsvoicev2.DescribeRegistrationsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *pinpointsmsvoicev2.DescribeRegistrationsInput, ...func(*pinpointsmsvoicev2.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeSenderIds provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DescribeSenderIds(ctx context.Context, params *pinpointsmsvoicev2.DescribeSenderIdsInput, optFns ...func(*pinpointsmsvoicev2.Options)) (*pinpointsmsvoicev2.DescribeSenderIdsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DescribeSenderIds")
	}

	var r0 *pinpointsmsvoicev2.DescribeSenderIdsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *pinpointsmsvoicev2.DescribeSenderIdsInput, ...func(*pinpointsmsvoicev2.Options)) (*pinpointsmsvoicev2.DescribeSenderIdsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *pinpointsmsvoicev2.DescribeSenderIdsInput, ...func(*pinpointsmsvoicev2.Options)) *pinpointsmsvoicev2.DescribeSenderIdsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*pinpointsmsvoicev2.DescribeSenderIdsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *pinpointsmsvoicev2.DescribeSenderIdsInput, ...func(*pinpointsmsvoicev2.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeSpendLimits provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DescribeSpendLimits(ctx context.Context, params *pinpointsmsvoicev2.DescribeSpendLimitsInput, optFns ...func(*pinpointsmsvoicev2.Options)) (*pinpointsmsvoicev2.DescribeSpendLimitsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DescribeSpendLimits")
	}

	var r0 *pinpointsmsvoicev2.DescribeSpendLimitsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *pinpointsmsvoicev2.DescribeSpendLimitsInput, ...func(*pinpointsmsvoicev2.Options)) (*pinpointsmsvoicev2.DescribeSpendLimitsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *pinpointsmsvoicev2.DescribeSpendLimitsInput, ...func(*pinpointsmsvoicev2.Options)) *pinpointsmsvoicev2.DescribeSpendLimitsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*pinpointsmsvoicev2.DescribeSpendLimitsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *pinpointsmsvoicev2.DescribeSpendLimitsInput, ...func(*pinpointsmsvoicev2.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeVerifiedDestinationNumbers provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DescribeVerifiedDestinationNumbers(ctx context.Context, params *pinpointsmsvoicev2.DescribeVerifiedDestinationNumbersInput, optFns ...func(*pinpointsmsvoicev2.Options)) (*pinpointsmsvoicev2.DescribeVerifiedDestinationNumbersOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DescribeVerifiedDestinationNumbers")
	}

	var r0 *pinpointsmsvoicev2.DescribeVerifiedDestinationNumbersOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *pinpointsmsvoicev2.DescribeVerifiedDestinationNumbersInput, ...func(*pinpointsmsvoicev2.Options)) (*pinpointsmsvoicev2.DescribeVerifiedDestinationNumbersOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *pinpointsmsvoicev2.DescribeVerifiedDestinationNumbersInput, ...func(*pinpointsmsvoicev2.Options)) *pinpointsmsvoicev2.DescribeVerifiedDestinationNumbersOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*pinpointsmsvoicev2.DescribeVerifiedDestinationNumbersOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *pinpointsmsvoicev2.DescribeVerifiedDestinationNumbersInput, ...func(*pinpointsmsvoicev2.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DisassociateOriginationIdentity provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DisassociateOriginationIdentity(ctx context.Context, params *pinpointsmsvoicev2.DisassociateOriginationIdentityInput, optFns ...func(*pinpointsmsvoicev2.Options)) (*pinpointsmsvoicev2.DisassociateOriginationIdentityOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DisassociateOriginationIdentity")
	}

	var r0 *pinpointsmsvoicev2.DisassociateOriginationIdentityOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *pinpointsmsvoicev2.DisassociateOriginationIdentityInput, ...func(*pinpointsmsvoicev2.Options)) (*pinpointsmsvoicev2.DisassociateOriginationIdentityOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *pinpointsmsvoicev2.DisassociateOriginationIdentityInput, ...func(*pinpointsmsvoicev2.Options)) *pinpointsmsvoicev2.DisassociateOriginationIdentityOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*pinpointsmsvoicev2.DisassociateOriginationIdentityOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *pinpointsmsvoicev2.DisassociateOriginationIdentityInput, ...func(*pinpointsmsvoicev2.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DisassociateProtectConfiguration provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DisassociateProtectConfiguration(ctx context.Context, params *pinpointsmsvoicev2.DisassociateProtectConfigurationInput, optFns ...func(*pinpointsmsvoicev2.Options)) (*pinpointsmsvoicev2.DisassociateProtectConfigurationOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DisassociateProtectConfiguration")
	}

	var r0 *pinpointsmsvoicev2.DisassociateProtectConfigurationOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *pinpointsmsvoicev2.DisassociateProtectConfigurationInput, ...func(*pinpointsmsvoicev2.Options)) (*pinpointsmsvoicev2.DisassociateProtectConfigurationOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *pinpointsmsvoicev2.DisassociateProtectConfigurationInput, ...func(*pinpointsmsvoicev2.Options)) *pinpointsmsvoicev2.DisassociateProtectConfigurationOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*pinpointsmsvoicev2.DisassociateProtectConfigurationOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *pinpointsmsvoicev2.DisassociateProtectConfigurationInput, ...func(*pinpointsmsvoicev2.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DiscardRegistrationVersion provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DiscardRegistrationVersion(ctx context.Context, params *pinpointsmsvoicev2.DiscardRegistrationVersionInput, optFns ...func(*pinpointsmsvoicev2.Options)) (*pinpointsmsvoicev2.DiscardRegistrationVersionOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DiscardRegistrationVersion")
	}

	var r0 *pinpointsmsvoicev2.DiscardRegistrationVersionOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *pinpointsmsvoicev2.DiscardRegistrationVersionInput, ...func(*pinpointsmsvoicev2.Options)) (*pinpointsmsvoicev2.DiscardRegistrationVersionOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *pinpointsmsvoicev2.DiscardRegistrationVersionInput, ...func(*pinpointsmsvoicev2.Options)) *pinpointsmsvoicev2.DiscardRegistrationVersionOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*pinpointsmsvoicev2.DiscardRegistrationVersionOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *pinpointsmsvoicev2.DiscardRegistrationVersionInput, ...func(*pinpointsmsvoicev2.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetProtectConfigurationCountryRuleSet provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetProtectConfigurationCountryRuleSet(ctx context.Context, params *pinpointsmsvoicev2.GetProtectConfigurationCountryRuleSetInput, optFns ...func(*pinpointsmsvoicev2.Options)) (*pinpointsmsvoicev2.GetProtectConfigurationCountryRuleSetOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetProtectConfigurationCountryRuleSet")
	}

	var r0 *pinpointsmsvoicev2.GetProtectConfigurationCountryRuleSetOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *pinpointsmsvoicev2.GetProtectConfigurationCountryRuleSetInput, ...func(*pinpointsmsvoicev2.Options)) (*pinpointsmsvoicev2.GetProtectConfigurationCountryRuleSetOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *pinpointsmsvoicev2.GetProtectConfigurationCountryRuleSetInput, ...func(*pinpointsmsvoicev2.Options)) *pinpointsmsvoicev2.GetProtectConfigurationCountryRuleSetOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*pinpointsmsvoicev2.GetProtectConfigurationCountryRuleSetOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *pinpointsmsvoicev2.GetProtectConfigurationCountryRuleSetInput, ...func(*pinpointsmsvoicev2.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetResourcePolicy provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetResourcePolicy(ctx context.Context, params *pinpointsmsvoicev2.GetResourcePolicyInput, optFns ...func(*pinpointsmsvoicev2.Options)) (*pinpointsmsvoicev2.GetResourcePolicyOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetResourcePolicy")
	}

	var r0 *pinpointsmsvoicev2.GetResourcePolicyOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *pinpointsmsvoicev2.GetResourcePolicyInput, ...func(*pinpointsmsvoicev2.Options)) (*pinpointsmsvoicev2.GetResourcePolicyOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *pinpointsmsvoicev2.GetResourcePolicyInput, ...func(*pinpointsmsvoicev2.Options)) *pinpointsmsvoicev2.GetResourcePolicyOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*pinpointsmsvoicev2.GetResourcePolicyOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *pinpointsmsvoicev2.GetResourcePolicyInput, ...func(*pinpointsmsvoicev2.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListPoolOriginationIdentities provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListPoolOriginationIdentities(ctx context.Context, params *pinpointsmsvoicev2.ListPoolOriginationIdentitiesInput, optFns ...func(*pinpointsmsvoicev2.Options)) (*pinpointsmsvoicev2.ListPoolOriginationIdentitiesOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListPoolOriginationIdentities")
	}

	var r0 *pinpointsmsvoicev2.ListPoolOriginationIdentitiesOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *pinpointsmsvoicev2.ListPoolOriginationIdentitiesInput, ...func(*pinpointsmsvoicev2.Options)) (*pinpointsmsvoicev2.ListPoolOriginationIdentitiesOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *pinpointsmsvoicev2.ListPoolOriginationIdentitiesInput, ...func(*pinpointsmsvoicev2.Options)) *pinpointsmsvoicev2.ListPoolOriginationIdentitiesOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*pinpointsmsvoicev2.ListPoolOriginationIdentitiesOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *pinpointsmsvoicev2.ListPoolOriginationIdentitiesInput, ...func(*pinpointsmsvoicev2.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListProtectConfigurationRuleSetNumberOverrides provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListProtectConfigurationRuleSetNumberOverrides(ctx context.Context, params *pinpointsmsvoicev2.ListProtectConfigurationRuleSetNumberOverridesInput, optFns ...func(*pinpointsmsvoicev2.Options)) (*pinpointsmsvoicev2.ListProtectConfigurationRuleSetNumberOverridesOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListProtectConfigurationRuleSetNumberOverrides")
	}

	var r0 *pinpointsmsvoicev2.ListProtectConfigurationRuleSetNumberOverridesOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *pinpointsmsvoicev2.ListProtectConfigurationRuleSetNumberOverridesInput, ...func(*pinpointsmsvoicev2.Options)) (*pinpointsmsvoicev2.ListProtectConfigurationRuleSetNumberOverridesOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *pinpointsmsvoicev2.ListProtectConfigurationRuleSetNumberOverridesInput, ...func(*pinpointsmsvoicev2.Options)) *pinpointsmsvoicev2.ListProtectConfigurationRuleSetNumberOverridesOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*pinpointsmsvoicev2.ListProtectConfigurationRuleSetNumberOverridesOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *pinpointsmsvoicev2.ListProtectConfigurationRuleSetNumberOverridesInput, ...func(*pinpointsmsvoicev2.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListRegistrationAssociations provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListRegistrationAssociations(ctx context.Context, params *pinpointsmsvoicev2.ListRegistrationAssociationsInput, optFns ...func(*pinpointsmsvoicev2.Options)) (*pinpointsmsvoicev2.ListRegistrationAssociationsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListRegistrationAssociations")
	}

	var r0 *pinpointsmsvoicev2.ListRegistrationAssociationsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *pinpointsmsvoicev2.ListRegistrationAssociationsInput, ...func(*pinpointsmsvoicev2.Options)) (*pinpointsmsvoicev2.ListRegistrationAssociationsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *pinpointsmsvoicev2.ListRegistrationAssociationsInput, ...func(*pinpointsmsvoicev2.Options)) *pinpointsmsvoicev2.ListRegistrationAssociationsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*pinpointsmsvoicev2.ListRegistrationAssociationsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *pinpointsmsvoicev2.ListRegistrationAssociationsInput, ...func(*pinpointsmsvoicev2.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListTagsForResource provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListTagsForResource(ctx context.Context, params *pinpointsmsvoicev2.ListTagsForResourceInput, optFns ...func(*pinpointsmsvoicev2.Options)) (*pinpointsmsvoicev2.ListTagsForResourceOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListTagsForResource")
	}

	var r0 *pinpointsmsvoicev2.ListTagsForResourceOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *pinpointsmsvoicev2.ListTagsForResourceInput, ...func(*pinpointsmsvoicev2.Options)) (*pinpointsmsvoicev2.ListTagsForResourceOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *pinpointsmsvoicev2.ListTagsForResourceInput, ...func(*pinpointsmsvoicev2.Options)) *pinpointsmsvoicev2.ListTagsForResourceOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*pinpointsmsvoicev2.ListTagsForResourceOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *pinpointsmsvoicev2.ListTagsForResourceInput, ...func(*pinpointsmsvoicev2.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Options provides a mock function with given fields:
func (_m *IClient) Options() pinpointsmsvoicev2.Options {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Options")
	}

	var r0 pinpointsmsvoicev2.Options
	if rf, ok := ret.Get(0).(func() pinpointsmsvoicev2.Options); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(pinpointsmsvoicev2.Options)
	}

	return r0
}

// PutKeyword provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) PutKeyword(ctx context.Context, params *pinpointsmsvoicev2.PutKeywordInput, optFns ...func(*pinpointsmsvoicev2.Options)) (*pinpointsmsvoicev2.PutKeywordOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for PutKeyword")
	}

	var r0 *pinpointsmsvoicev2.PutKeywordOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *pinpointsmsvoicev2.PutKeywordInput, ...func(*pinpointsmsvoicev2.Options)) (*pinpointsmsvoicev2.PutKeywordOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *pinpointsmsvoicev2.PutKeywordInput, ...func(*pinpointsmsvoicev2.Options)) *pinpointsmsvoicev2.PutKeywordOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*pinpointsmsvoicev2.PutKeywordOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *pinpointsmsvoicev2.PutKeywordInput, ...func(*pinpointsmsvoicev2.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PutMessageFeedback provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) PutMessageFeedback(ctx context.Context, params *pinpointsmsvoicev2.PutMessageFeedbackInput, optFns ...func(*pinpointsmsvoicev2.Options)) (*pinpointsmsvoicev2.PutMessageFeedbackOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for PutMessageFeedback")
	}

	var r0 *pinpointsmsvoicev2.PutMessageFeedbackOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *pinpointsmsvoicev2.PutMessageFeedbackInput, ...func(*pinpointsmsvoicev2.Options)) (*pinpointsmsvoicev2.PutMessageFeedbackOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *pinpointsmsvoicev2.PutMessageFeedbackInput, ...func(*pinpointsmsvoicev2.Options)) *pinpointsmsvoicev2.PutMessageFeedbackOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*pinpointsmsvoicev2.PutMessageFeedbackOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *pinpointsmsvoicev2.PutMessageFeedbackInput, ...func(*pinpointsmsvoicev2.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PutOptedOutNumber provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) PutOptedOutNumber(ctx context.Context, params *pinpointsmsvoicev2.PutOptedOutNumberInput, optFns ...func(*pinpointsmsvoicev2.Options)) (*pinpointsmsvoicev2.PutOptedOutNumberOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for PutOptedOutNumber")
	}

	var r0 *pinpointsmsvoicev2.PutOptedOutNumberOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *pinpointsmsvoicev2.PutOptedOutNumberInput, ...func(*pinpointsmsvoicev2.Options)) (*pinpointsmsvoicev2.PutOptedOutNumberOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *pinpointsmsvoicev2.PutOptedOutNumberInput, ...func(*pinpointsmsvoicev2.Options)) *pinpointsmsvoicev2.PutOptedOutNumberOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*pinpointsmsvoicev2.PutOptedOutNumberOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *pinpointsmsvoicev2.PutOptedOutNumberInput, ...func(*pinpointsmsvoicev2.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PutProtectConfigurationRuleSetNumberOverride provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) PutProtectConfigurationRuleSetNumberOverride(ctx context.Context, params *pinpointsmsvoicev2.PutProtectConfigurationRuleSetNumberOverrideInput, optFns ...func(*pinpointsmsvoicev2.Options)) (*pinpointsmsvoicev2.PutProtectConfigurationRuleSetNumberOverrideOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for PutProtectConfigurationRuleSetNumberOverride")
	}

	var r0 *pinpointsmsvoicev2.PutProtectConfigurationRuleSetNumberOverrideOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *pinpointsmsvoicev2.PutProtectConfigurationRuleSetNumberOverrideInput, ...func(*pinpointsmsvoicev2.Options)) (*pinpointsmsvoicev2.PutProtectConfigurationRuleSetNumberOverrideOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *pinpointsmsvoicev2.PutProtectConfigurationRuleSetNumberOverrideInput, ...func(*pinpointsmsvoicev2.Options)) *pinpointsmsvoicev2.PutProtectConfigurationRuleSetNumberOverrideOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*pinpointsmsvoicev2.PutProtectConfigurationRuleSetNumberOverrideOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *pinpointsmsvoicev2.PutProtectConfigurationRuleSetNumberOverrideInput, ...func(*pinpointsmsvoicev2.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PutRegistrationFieldValue provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) PutRegistrationFieldValue(ctx context.Context, params *pinpointsmsvoicev2.PutRegistrationFieldValueInput, optFns ...func(*pinpointsmsvoicev2.Options)) (*pinpointsmsvoicev2.PutRegistrationFieldValueOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for PutRegistrationFieldValue")
	}

	var r0 *pinpointsmsvoicev2.PutRegistrationFieldValueOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *pinpointsmsvoicev2.PutRegistrationFieldValueInput, ...func(*pinpointsmsvoicev2.Options)) (*pinpointsmsvoicev2.PutRegistrationFieldValueOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *pinpointsmsvoicev2.PutRegistrationFieldValueInput, ...func(*pinpointsmsvoicev2.Options)) *pinpointsmsvoicev2.PutRegistrationFieldValueOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*pinpointsmsvoicev2.PutRegistrationFieldValueOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *pinpointsmsvoicev2.PutRegistrationFieldValueInput, ...func(*pinpointsmsvoicev2.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PutResourcePolicy provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) PutResourcePolicy(ctx context.Context, params *pinpointsmsvoicev2.PutResourcePolicyInput, optFns ...func(*pinpointsmsvoicev2.Options)) (*pinpointsmsvoicev2.PutResourcePolicyOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for PutResourcePolicy")
	}

	var r0 *pinpointsmsvoicev2.PutResourcePolicyOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *pinpointsmsvoicev2.PutResourcePolicyInput, ...func(*pinpointsmsvoicev2.Options)) (*pinpointsmsvoicev2.PutResourcePolicyOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *pinpointsmsvoicev2.PutResourcePolicyInput, ...func(*pinpointsmsvoicev2.Options)) *pinpointsmsvoicev2.PutResourcePolicyOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*pinpointsmsvoicev2.PutResourcePolicyOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *pinpointsmsvoicev2.PutResourcePolicyInput, ...func(*pinpointsmsvoicev2.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ReleasePhoneNumber provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ReleasePhoneNumber(ctx context.Context, params *pinpointsmsvoicev2.ReleasePhoneNumberInput, optFns ...func(*pinpointsmsvoicev2.Options)) (*pinpointsmsvoicev2.ReleasePhoneNumberOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ReleasePhoneNumber")
	}

	var r0 *pinpointsmsvoicev2.ReleasePhoneNumberOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *pinpointsmsvoicev2.ReleasePhoneNumberInput, ...func(*pinpointsmsvoicev2.Options)) (*pinpointsmsvoicev2.ReleasePhoneNumberOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *pinpointsmsvoicev2.ReleasePhoneNumberInput, ...func(*pinpointsmsvoicev2.Options)) *pinpointsmsvoicev2.ReleasePhoneNumberOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*pinpointsmsvoicev2.ReleasePhoneNumberOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *pinpointsmsvoicev2.ReleasePhoneNumberInput, ...func(*pinpointsmsvoicev2.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ReleaseSenderId provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ReleaseSenderId(ctx context.Context, params *pinpointsmsvoicev2.ReleaseSenderIdInput, optFns ...func(*pinpointsmsvoicev2.Options)) (*pinpointsmsvoicev2.ReleaseSenderIdOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ReleaseSenderId")
	}

	var r0 *pinpointsmsvoicev2.ReleaseSenderIdOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *pinpointsmsvoicev2.ReleaseSenderIdInput, ...func(*pinpointsmsvoicev2.Options)) (*pinpointsmsvoicev2.ReleaseSenderIdOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *pinpointsmsvoicev2.ReleaseSenderIdInput, ...func(*pinpointsmsvoicev2.Options)) *pinpointsmsvoicev2.ReleaseSenderIdOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*pinpointsmsvoicev2.ReleaseSenderIdOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *pinpointsmsvoicev2.ReleaseSenderIdInput, ...func(*pinpointsmsvoicev2.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RequestPhoneNumber provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) RequestPhoneNumber(ctx context.Context, params *pinpointsmsvoicev2.RequestPhoneNumberInput, optFns ...func(*pinpointsmsvoicev2.Options)) (*pinpointsmsvoicev2.RequestPhoneNumberOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for RequestPhoneNumber")
	}

	var r0 *pinpointsmsvoicev2.RequestPhoneNumberOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *pinpointsmsvoicev2.RequestPhoneNumberInput, ...func(*pinpointsmsvoicev2.Options)) (*pinpointsmsvoicev2.RequestPhoneNumberOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *pinpointsmsvoicev2.RequestPhoneNumberInput, ...func(*pinpointsmsvoicev2.Options)) *pinpointsmsvoicev2.RequestPhoneNumberOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*pinpointsmsvoicev2.RequestPhoneNumberOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *pinpointsmsvoicev2.RequestPhoneNumberInput, ...func(*pinpointsmsvoicev2.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RequestSenderId provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) RequestSenderId(ctx context.Context, params *pinpointsmsvoicev2.RequestSenderIdInput, optFns ...func(*pinpointsmsvoicev2.Options)) (*pinpointsmsvoicev2.RequestSenderIdOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for RequestSenderId")
	}

	var r0 *pinpointsmsvoicev2.RequestSenderIdOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *pinpointsmsvoicev2.RequestSenderIdInput, ...func(*pinpointsmsvoicev2.Options)) (*pinpointsmsvoicev2.RequestSenderIdOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *pinpointsmsvoicev2.RequestSenderIdInput, ...func(*pinpointsmsvoicev2.Options)) *pinpointsmsvoicev2.RequestSenderIdOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*pinpointsmsvoicev2.RequestSenderIdOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *pinpointsmsvoicev2.RequestSenderIdInput, ...func(*pinpointsmsvoicev2.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SendDestinationNumberVerificationCode provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) SendDestinationNumberVerificationCode(ctx context.Context, params *pinpointsmsvoicev2.SendDestinationNumberVerificationCodeInput, optFns ...func(*pinpointsmsvoicev2.Options)) (*pinpointsmsvoicev2.SendDestinationNumberVerificationCodeOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for SendDestinationNumberVerificationCode")
	}

	var r0 *pinpointsmsvoicev2.SendDestinationNumberVerificationCodeOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *pinpointsmsvoicev2.SendDestinationNumberVerificationCodeInput, ...func(*pinpointsmsvoicev2.Options)) (*pinpointsmsvoicev2.SendDestinationNumberVerificationCodeOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *pinpointsmsvoicev2.SendDestinationNumberVerificationCodeInput, ...func(*pinpointsmsvoicev2.Options)) *pinpointsmsvoicev2.SendDestinationNumberVerificationCodeOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*pinpointsmsvoicev2.SendDestinationNumberVerificationCodeOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *pinpointsmsvoicev2.SendDestinationNumberVerificationCodeInput, ...func(*pinpointsmsvoicev2.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SendMediaMessage provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) SendMediaMessage(ctx context.Context, params *pinpointsmsvoicev2.SendMediaMessageInput, optFns ...func(*pinpointsmsvoicev2.Options)) (*pinpointsmsvoicev2.SendMediaMessageOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for SendMediaMessage")
	}

	var r0 *pinpointsmsvoicev2.SendMediaMessageOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *pinpointsmsvoicev2.SendMediaMessageInput, ...func(*pinpointsmsvoicev2.Options)) (*pinpointsmsvoicev2.SendMediaMessageOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *pinpointsmsvoicev2.SendMediaMessageInput, ...func(*pinpointsmsvoicev2.Options)) *pinpointsmsvoicev2.SendMediaMessageOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*pinpointsmsvoicev2.SendMediaMessageOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *pinpointsmsvoicev2.SendMediaMessageInput, ...func(*pinpointsmsvoicev2.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SendTextMessage provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) SendTextMessage(ctx context.Context, params *pinpointsmsvoicev2.SendTextMessageInput, optFns ...func(*pinpointsmsvoicev2.Options)) (*pinpointsmsvoicev2.SendTextMessageOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for SendTextMessage")
	}

	var r0 *pinpointsmsvoicev2.SendTextMessageOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *pinpointsmsvoicev2.SendTextMessageInput, ...func(*pinpointsmsvoicev2.Options)) (*pinpointsmsvoicev2.SendTextMessageOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *pinpointsmsvoicev2.SendTextMessageInput, ...func(*pinpointsmsvoicev2.Options)) *pinpointsmsvoicev2.SendTextMessageOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*pinpointsmsvoicev2.SendTextMessageOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *pinpointsmsvoicev2.SendTextMessageInput, ...func(*pinpointsmsvoicev2.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SendVoiceMessage provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) SendVoiceMessage(ctx context.Context, params *pinpointsmsvoicev2.SendVoiceMessageInput, optFns ...func(*pinpointsmsvoicev2.Options)) (*pinpointsmsvoicev2.SendVoiceMessageOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for SendVoiceMessage")
	}

	var r0 *pinpointsmsvoicev2.SendVoiceMessageOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *pinpointsmsvoicev2.SendVoiceMessageInput, ...func(*pinpointsmsvoicev2.Options)) (*pinpointsmsvoicev2.SendVoiceMessageOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *pinpointsmsvoicev2.SendVoiceMessageInput, ...func(*pinpointsmsvoicev2.Options)) *pinpointsmsvoicev2.SendVoiceMessageOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*pinpointsmsvoicev2.SendVoiceMessageOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *pinpointsmsvoicev2.SendVoiceMessageInput, ...func(*pinpointsmsvoicev2.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SetAccountDefaultProtectConfiguration provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) SetAccountDefaultProtectConfiguration(ctx context.Context, params *pinpointsmsvoicev2.SetAccountDefaultProtectConfigurationInput, optFns ...func(*pinpointsmsvoicev2.Options)) (*pinpointsmsvoicev2.SetAccountDefaultProtectConfigurationOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for SetAccountDefaultProtectConfiguration")
	}

	var r0 *pinpointsmsvoicev2.SetAccountDefaultProtectConfigurationOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *pinpointsmsvoicev2.SetAccountDefaultProtectConfigurationInput, ...func(*pinpointsmsvoicev2.Options)) (*pinpointsmsvoicev2.SetAccountDefaultProtectConfigurationOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *pinpointsmsvoicev2.SetAccountDefaultProtectConfigurationInput, ...func(*pinpointsmsvoicev2.Options)) *pinpointsmsvoicev2.SetAccountDefaultProtectConfigurationOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*pinpointsmsvoicev2.SetAccountDefaultProtectConfigurationOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *pinpointsmsvoicev2.SetAccountDefaultProtectConfigurationInput, ...func(*pinpointsmsvoicev2.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SetDefaultMessageFeedbackEnabled provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) SetDefaultMessageFeedbackEnabled(ctx context.Context, params *pinpointsmsvoicev2.SetDefaultMessageFeedbackEnabledInput, optFns ...func(*pinpointsmsvoicev2.Options)) (*pinpointsmsvoicev2.SetDefaultMessageFeedbackEnabledOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for SetDefaultMessageFeedbackEnabled")
	}

	var r0 *pinpointsmsvoicev2.SetDefaultMessageFeedbackEnabledOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *pinpointsmsvoicev2.SetDefaultMessageFeedbackEnabledInput, ...func(*pinpointsmsvoicev2.Options)) (*pinpointsmsvoicev2.SetDefaultMessageFeedbackEnabledOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *pinpointsmsvoicev2.SetDefaultMessageFeedbackEnabledInput, ...func(*pinpointsmsvoicev2.Options)) *pinpointsmsvoicev2.SetDefaultMessageFeedbackEnabledOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*pinpointsmsvoicev2.SetDefaultMessageFeedbackEnabledOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *pinpointsmsvoicev2.SetDefaultMessageFeedbackEnabledInput, ...func(*pinpointsmsvoicev2.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SetDefaultMessageType provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) SetDefaultMessageType(ctx context.Context, params *pinpointsmsvoicev2.SetDefaultMessageTypeInput, optFns ...func(*pinpointsmsvoicev2.Options)) (*pinpointsmsvoicev2.SetDefaultMessageTypeOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for SetDefaultMessageType")
	}

	var r0 *pinpointsmsvoicev2.SetDefaultMessageTypeOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *pinpointsmsvoicev2.SetDefaultMessageTypeInput, ...func(*pinpointsmsvoicev2.Options)) (*pinpointsmsvoicev2.SetDefaultMessageTypeOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *pinpointsmsvoicev2.SetDefaultMessageTypeInput, ...func(*pinpointsmsvoicev2.Options)) *pinpointsmsvoicev2.SetDefaultMessageTypeOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*pinpointsmsvoicev2.SetDefaultMessageTypeOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *pinpointsmsvoicev2.SetDefaultMessageTypeInput, ...func(*pinpointsmsvoicev2.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SetDefaultSenderId provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) SetDefaultSenderId(ctx context.Context, params *pinpointsmsvoicev2.SetDefaultSenderIdInput, optFns ...func(*pinpointsmsvoicev2.Options)) (*pinpointsmsvoicev2.SetDefaultSenderIdOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for SetDefaultSenderId")
	}

	var r0 *pinpointsmsvoicev2.SetDefaultSenderIdOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *pinpointsmsvoicev2.SetDefaultSenderIdInput, ...func(*pinpointsmsvoicev2.Options)) (*pinpointsmsvoicev2.SetDefaultSenderIdOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *pinpointsmsvoicev2.SetDefaultSenderIdInput, ...func(*pinpointsmsvoicev2.Options)) *pinpointsmsvoicev2.SetDefaultSenderIdOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*pinpointsmsvoicev2.SetDefaultSenderIdOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *pinpointsmsvoicev2.SetDefaultSenderIdInput, ...func(*pinpointsmsvoicev2.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SetMediaMessageSpendLimitOverride provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) SetMediaMessageSpendLimitOverride(ctx context.Context, params *pinpointsmsvoicev2.SetMediaMessageSpendLimitOverrideInput, optFns ...func(*pinpointsmsvoicev2.Options)) (*pinpointsmsvoicev2.SetMediaMessageSpendLimitOverrideOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for SetMediaMessageSpendLimitOverride")
	}

	var r0 *pinpointsmsvoicev2.SetMediaMessageSpendLimitOverrideOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *pinpointsmsvoicev2.SetMediaMessageSpendLimitOverrideInput, ...func(*pinpointsmsvoicev2.Options)) (*pinpointsmsvoicev2.SetMediaMessageSpendLimitOverrideOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *pinpointsmsvoicev2.SetMediaMessageSpendLimitOverrideInput, ...func(*pinpointsmsvoicev2.Options)) *pinpointsmsvoicev2.SetMediaMessageSpendLimitOverrideOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*pinpointsmsvoicev2.SetMediaMessageSpendLimitOverrideOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *pinpointsmsvoicev2.SetMediaMessageSpendLimitOverrideInput, ...func(*pinpointsmsvoicev2.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SetTextMessageSpendLimitOverride provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) SetTextMessageSpendLimitOverride(ctx context.Context, params *pinpointsmsvoicev2.SetTextMessageSpendLimitOverrideInput, optFns ...func(*pinpointsmsvoicev2.Options)) (*pinpointsmsvoicev2.SetTextMessageSpendLimitOverrideOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for SetTextMessageSpendLimitOverride")
	}

	var r0 *pinpointsmsvoicev2.SetTextMessageSpendLimitOverrideOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *pinpointsmsvoicev2.SetTextMessageSpendLimitOverrideInput, ...func(*pinpointsmsvoicev2.Options)) (*pinpointsmsvoicev2.SetTextMessageSpendLimitOverrideOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *pinpointsmsvoicev2.SetTextMessageSpendLimitOverrideInput, ...func(*pinpointsmsvoicev2.Options)) *pinpointsmsvoicev2.SetTextMessageSpendLimitOverrideOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*pinpointsmsvoicev2.SetTextMessageSpendLimitOverrideOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *pinpointsmsvoicev2.SetTextMessageSpendLimitOverrideInput, ...func(*pinpointsmsvoicev2.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SetVoiceMessageSpendLimitOverride provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) SetVoiceMessageSpendLimitOverride(ctx context.Context, params *pinpointsmsvoicev2.SetVoiceMessageSpendLimitOverrideInput, optFns ...func(*pinpointsmsvoicev2.Options)) (*pinpointsmsvoicev2.SetVoiceMessageSpendLimitOverrideOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for SetVoiceMessageSpendLimitOverride")
	}

	var r0 *pinpointsmsvoicev2.SetVoiceMessageSpendLimitOverrideOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *pinpointsmsvoicev2.SetVoiceMessageSpendLimitOverrideInput, ...func(*pinpointsmsvoicev2.Options)) (*pinpointsmsvoicev2.SetVoiceMessageSpendLimitOverrideOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *pinpointsmsvoicev2.SetVoiceMessageSpendLimitOverrideInput, ...func(*pinpointsmsvoicev2.Options)) *pinpointsmsvoicev2.SetVoiceMessageSpendLimitOverrideOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*pinpointsmsvoicev2.SetVoiceMessageSpendLimitOverrideOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *pinpointsmsvoicev2.SetVoiceMessageSpendLimitOverrideInput, ...func(*pinpointsmsvoicev2.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SubmitRegistrationVersion provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) SubmitRegistrationVersion(ctx context.Context, params *pinpointsmsvoicev2.SubmitRegistrationVersionInput, optFns ...func(*pinpointsmsvoicev2.Options)) (*pinpointsmsvoicev2.SubmitRegistrationVersionOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for SubmitRegistrationVersion")
	}

	var r0 *pinpointsmsvoicev2.SubmitRegistrationVersionOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *pinpointsmsvoicev2.SubmitRegistrationVersionInput, ...func(*pinpointsmsvoicev2.Options)) (*pinpointsmsvoicev2.SubmitRegistrationVersionOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *pinpointsmsvoicev2.SubmitRegistrationVersionInput, ...func(*pinpointsmsvoicev2.Options)) *pinpointsmsvoicev2.SubmitRegistrationVersionOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*pinpointsmsvoicev2.SubmitRegistrationVersionOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *pinpointsmsvoicev2.SubmitRegistrationVersionInput, ...func(*pinpointsmsvoicev2.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// TagResource provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) TagResource(ctx context.Context, params *pinpointsmsvoicev2.TagResourceInput, optFns ...func(*pinpointsmsvoicev2.Options)) (*pinpointsmsvoicev2.TagResourceOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for TagResource")
	}

	var r0 *pinpointsmsvoicev2.TagResourceOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *pinpointsmsvoicev2.TagResourceInput, ...func(*pinpointsmsvoicev2.Options)) (*pinpointsmsvoicev2.TagResourceOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *pinpointsmsvoicev2.TagResourceInput, ...func(*pinpointsmsvoicev2.Options)) *pinpointsmsvoicev2.TagResourceOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*pinpointsmsvoicev2.TagResourceOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *pinpointsmsvoicev2.TagResourceInput, ...func(*pinpointsmsvoicev2.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UntagResource provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UntagResource(ctx context.Context, params *pinpointsmsvoicev2.UntagResourceInput, optFns ...func(*pinpointsmsvoicev2.Options)) (*pinpointsmsvoicev2.UntagResourceOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UntagResource")
	}

	var r0 *pinpointsmsvoicev2.UntagResourceOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *pinpointsmsvoicev2.UntagResourceInput, ...func(*pinpointsmsvoicev2.Options)) (*pinpointsmsvoicev2.UntagResourceOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *pinpointsmsvoicev2.UntagResourceInput, ...func(*pinpointsmsvoicev2.Options)) *pinpointsmsvoicev2.UntagResourceOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*pinpointsmsvoicev2.UntagResourceOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *pinpointsmsvoicev2.UntagResourceInput, ...func(*pinpointsmsvoicev2.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateEventDestination provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UpdateEventDestination(ctx context.Context, params *pinpointsmsvoicev2.UpdateEventDestinationInput, optFns ...func(*pinpointsmsvoicev2.Options)) (*pinpointsmsvoicev2.UpdateEventDestinationOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateEventDestination")
	}

	var r0 *pinpointsmsvoicev2.UpdateEventDestinationOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *pinpointsmsvoicev2.UpdateEventDestinationInput, ...func(*pinpointsmsvoicev2.Options)) (*pinpointsmsvoicev2.UpdateEventDestinationOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *pinpointsmsvoicev2.UpdateEventDestinationInput, ...func(*pinpointsmsvoicev2.Options)) *pinpointsmsvoicev2.UpdateEventDestinationOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*pinpointsmsvoicev2.UpdateEventDestinationOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *pinpointsmsvoicev2.UpdateEventDestinationInput, ...func(*pinpointsmsvoicev2.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdatePhoneNumber provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UpdatePhoneNumber(ctx context.Context, params *pinpointsmsvoicev2.UpdatePhoneNumberInput, optFns ...func(*pinpointsmsvoicev2.Options)) (*pinpointsmsvoicev2.UpdatePhoneNumberOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdatePhoneNumber")
	}

	var r0 *pinpointsmsvoicev2.UpdatePhoneNumberOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *pinpointsmsvoicev2.UpdatePhoneNumberInput, ...func(*pinpointsmsvoicev2.Options)) (*pinpointsmsvoicev2.UpdatePhoneNumberOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *pinpointsmsvoicev2.UpdatePhoneNumberInput, ...func(*pinpointsmsvoicev2.Options)) *pinpointsmsvoicev2.UpdatePhoneNumberOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*pinpointsmsvoicev2.UpdatePhoneNumberOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *pinpointsmsvoicev2.UpdatePhoneNumberInput, ...func(*pinpointsmsvoicev2.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdatePool provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UpdatePool(ctx context.Context, params *pinpointsmsvoicev2.UpdatePoolInput, optFns ...func(*pinpointsmsvoicev2.Options)) (*pinpointsmsvoicev2.UpdatePoolOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdatePool")
	}

	var r0 *pinpointsmsvoicev2.UpdatePoolOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *pinpointsmsvoicev2.UpdatePoolInput, ...func(*pinpointsmsvoicev2.Options)) (*pinpointsmsvoicev2.UpdatePoolOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *pinpointsmsvoicev2.UpdatePoolInput, ...func(*pinpointsmsvoicev2.Options)) *pinpointsmsvoicev2.UpdatePoolOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*pinpointsmsvoicev2.UpdatePoolOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *pinpointsmsvoicev2.UpdatePoolInput, ...func(*pinpointsmsvoicev2.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateProtectConfiguration provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UpdateProtectConfiguration(ctx context.Context, params *pinpointsmsvoicev2.UpdateProtectConfigurationInput, optFns ...func(*pinpointsmsvoicev2.Options)) (*pinpointsmsvoicev2.UpdateProtectConfigurationOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateProtectConfiguration")
	}

	var r0 *pinpointsmsvoicev2.UpdateProtectConfigurationOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *pinpointsmsvoicev2.UpdateProtectConfigurationInput, ...func(*pinpointsmsvoicev2.Options)) (*pinpointsmsvoicev2.UpdateProtectConfigurationOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *pinpointsmsvoicev2.UpdateProtectConfigurationInput, ...func(*pinpointsmsvoicev2.Options)) *pinpointsmsvoicev2.UpdateProtectConfigurationOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*pinpointsmsvoicev2.UpdateProtectConfigurationOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *pinpointsmsvoicev2.UpdateProtectConfigurationInput, ...func(*pinpointsmsvoicev2.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateProtectConfigurationCountryRuleSet provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UpdateProtectConfigurationCountryRuleSet(ctx context.Context, params *pinpointsmsvoicev2.UpdateProtectConfigurationCountryRuleSetInput, optFns ...func(*pinpointsmsvoicev2.Options)) (*pinpointsmsvoicev2.UpdateProtectConfigurationCountryRuleSetOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateProtectConfigurationCountryRuleSet")
	}

	var r0 *pinpointsmsvoicev2.UpdateProtectConfigurationCountryRuleSetOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *pinpointsmsvoicev2.UpdateProtectConfigurationCountryRuleSetInput, ...func(*pinpointsmsvoicev2.Options)) (*pinpointsmsvoicev2.UpdateProtectConfigurationCountryRuleSetOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *pinpointsmsvoicev2.UpdateProtectConfigurationCountryRuleSetInput, ...func(*pinpointsmsvoicev2.Options)) *pinpointsmsvoicev2.UpdateProtectConfigurationCountryRuleSetOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*pinpointsmsvoicev2.UpdateProtectConfigurationCountryRuleSetOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *pinpointsmsvoicev2.UpdateProtectConfigurationCountryRuleSetInput, ...func(*pinpointsmsvoicev2.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateSenderId provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UpdateSenderId(ctx context.Context, params *pinpointsmsvoicev2.UpdateSenderIdInput, optFns ...func(*pinpointsmsvoicev2.Options)) (*pinpointsmsvoicev2.UpdateSenderIdOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateSenderId")
	}

	var r0 *pinpointsmsvoicev2.UpdateSenderIdOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *pinpointsmsvoicev2.UpdateSenderIdInput, ...func(*pinpointsmsvoicev2.Options)) (*pinpointsmsvoicev2.UpdateSenderIdOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *pinpointsmsvoicev2.UpdateSenderIdInput, ...func(*pinpointsmsvoicev2.Options)) *pinpointsmsvoicev2.UpdateSenderIdOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*pinpointsmsvoicev2.UpdateSenderIdOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *pinpointsmsvoicev2.UpdateSenderIdInput, ...func(*pinpointsmsvoicev2.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// VerifyDestinationNumber provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) VerifyDestinationNumber(ctx context.Context, params *pinpointsmsvoicev2.VerifyDestinationNumberInput, optFns ...func(*pinpointsmsvoicev2.Options)) (*pinpointsmsvoicev2.VerifyDestinationNumberOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for VerifyDestinationNumber")
	}

	var r0 *pinpointsmsvoicev2.VerifyDestinationNumberOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *pinpointsmsvoicev2.VerifyDestinationNumberInput, ...func(*pinpointsmsvoicev2.Options)) (*pinpointsmsvoicev2.VerifyDestinationNumberOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *pinpointsmsvoicev2.VerifyDestinationNumberInput, ...func(*pinpointsmsvoicev2.Options)) *pinpointsmsvoicev2.VerifyDestinationNumberOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*pinpointsmsvoicev2.VerifyDestinationNumberOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *pinpointsmsvoicev2.VerifyDestinationNumberInput, ...func(*pinpointsmsvoicev2.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewIClient creates a new instance of IClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewIClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *IClient {
	mock := &IClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
