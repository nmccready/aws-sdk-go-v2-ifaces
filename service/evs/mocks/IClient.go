// Code generated by mockery v2.53.4. DO NOT EDIT.

package mocks

import (
	context "context"

	evs "github.com/aws/aws-sdk-go-v2/service/evs"

	mock "github.com/stretchr/testify/mock"
)

// IClient is an autogenerated mock type for the IClient type
type IClient struct {
	mock.Mock
}

// CreateEnvironment provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CreateEnvironment(ctx context.Context, params *evs.CreateEnvironmentInput, optFns ...func(*evs.Options)) (*evs.CreateEnvironmentOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateEnvironment")
	}

	var r0 *evs.CreateEnvironmentOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *evs.CreateEnvironmentInput, ...func(*evs.Options)) (*evs.CreateEnvironmentOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *evs.CreateEnvironmentInput, ...func(*evs.Options)) *evs.CreateEnvironmentOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*evs.CreateEnvironmentOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *evs.CreateEnvironmentInput, ...func(*evs.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateEnvironmentHost provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CreateEnvironmentHost(ctx context.Context, params *evs.CreateEnvironmentHostInput, optFns ...func(*evs.Options)) (*evs.CreateEnvironmentHostOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateEnvironmentHost")
	}

	var r0 *evs.CreateEnvironmentHostOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *evs.CreateEnvironmentHostInput, ...func(*evs.Options)) (*evs.CreateEnvironmentHostOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *evs.CreateEnvironmentHostInput, ...func(*evs.Options)) *evs.CreateEnvironmentHostOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*evs.CreateEnvironmentHostOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *evs.CreateEnvironmentHostInput, ...func(*evs.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteEnvironment provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteEnvironment(ctx context.Context, params *evs.DeleteEnvironmentInput, optFns ...func(*evs.Options)) (*evs.DeleteEnvironmentOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteEnvironment")
	}

	var r0 *evs.DeleteEnvironmentOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *evs.DeleteEnvironmentInput, ...func(*evs.Options)) (*evs.DeleteEnvironmentOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *evs.DeleteEnvironmentInput, ...func(*evs.Options)) *evs.DeleteEnvironmentOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*evs.DeleteEnvironmentOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *evs.DeleteEnvironmentInput, ...func(*evs.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteEnvironmentHost provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteEnvironmentHost(ctx context.Context, params *evs.DeleteEnvironmentHostInput, optFns ...func(*evs.Options)) (*evs.DeleteEnvironmentHostOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteEnvironmentHost")
	}

	var r0 *evs.DeleteEnvironmentHostOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *evs.DeleteEnvironmentHostInput, ...func(*evs.Options)) (*evs.DeleteEnvironmentHostOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *evs.DeleteEnvironmentHostInput, ...func(*evs.Options)) *evs.DeleteEnvironmentHostOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*evs.DeleteEnvironmentHostOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *evs.DeleteEnvironmentHostInput, ...func(*evs.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetEnvironment provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetEnvironment(ctx context.Context, params *evs.GetEnvironmentInput, optFns ...func(*evs.Options)) (*evs.GetEnvironmentOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetEnvironment")
	}

	var r0 *evs.GetEnvironmentOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *evs.GetEnvironmentInput, ...func(*evs.Options)) (*evs.GetEnvironmentOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *evs.GetEnvironmentInput, ...func(*evs.Options)) *evs.GetEnvironmentOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*evs.GetEnvironmentOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *evs.GetEnvironmentInput, ...func(*evs.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListEnvironmentHosts provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListEnvironmentHosts(ctx context.Context, params *evs.ListEnvironmentHostsInput, optFns ...func(*evs.Options)) (*evs.ListEnvironmentHostsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListEnvironmentHosts")
	}

	var r0 *evs.ListEnvironmentHostsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *evs.ListEnvironmentHostsInput, ...func(*evs.Options)) (*evs.ListEnvironmentHostsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *evs.ListEnvironmentHostsInput, ...func(*evs.Options)) *evs.ListEnvironmentHostsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*evs.ListEnvironmentHostsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *evs.ListEnvironmentHostsInput, ...func(*evs.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListEnvironmentVlans provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListEnvironmentVlans(ctx context.Context, params *evs.ListEnvironmentVlansInput, optFns ...func(*evs.Options)) (*evs.ListEnvironmentVlansOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListEnvironmentVlans")
	}

	var r0 *evs.ListEnvironmentVlansOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *evs.ListEnvironmentVlansInput, ...func(*evs.Options)) (*evs.ListEnvironmentVlansOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *evs.ListEnvironmentVlansInput, ...func(*evs.Options)) *evs.ListEnvironmentVlansOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*evs.ListEnvironmentVlansOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *evs.ListEnvironmentVlansInput, ...func(*evs.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListEnvironments provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListEnvironments(ctx context.Context, params *evs.ListEnvironmentsInput, optFns ...func(*evs.Options)) (*evs.ListEnvironmentsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListEnvironments")
	}

	var r0 *evs.ListEnvironmentsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *evs.ListEnvironmentsInput, ...func(*evs.Options)) (*evs.ListEnvironmentsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *evs.ListEnvironmentsInput, ...func(*evs.Options)) *evs.ListEnvironmentsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*evs.ListEnvironmentsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *evs.ListEnvironmentsInput, ...func(*evs.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListTagsForResource provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListTagsForResource(ctx context.Context, params *evs.ListTagsForResourceInput, optFns ...func(*evs.Options)) (*evs.ListTagsForResourceOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListTagsForResource")
	}

	var r0 *evs.ListTagsForResourceOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *evs.ListTagsForResourceInput, ...func(*evs.Options)) (*evs.ListTagsForResourceOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *evs.ListTagsForResourceInput, ...func(*evs.Options)) *evs.ListTagsForResourceOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*evs.ListTagsForResourceOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *evs.ListTagsForResourceInput, ...func(*evs.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Options provides a mock function with no fields
func (_m *IClient) Options() evs.Options {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Options")
	}

	var r0 evs.Options
	if rf, ok := ret.Get(0).(func() evs.Options); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(evs.Options)
	}

	return r0
}

// TagResource provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) TagResource(ctx context.Context, params *evs.TagResourceInput, optFns ...func(*evs.Options)) (*evs.TagResourceOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for TagResource")
	}

	var r0 *evs.TagResourceOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *evs.TagResourceInput, ...func(*evs.Options)) (*evs.TagResourceOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *evs.TagResourceInput, ...func(*evs.Options)) *evs.TagResourceOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*evs.TagResourceOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *evs.TagResourceInput, ...func(*evs.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UntagResource provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UntagResource(ctx context.Context, params *evs.UntagResourceInput, optFns ...func(*evs.Options)) (*evs.UntagResourceOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UntagResource")
	}

	var r0 *evs.UntagResourceOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *evs.UntagResourceInput, ...func(*evs.Options)) (*evs.UntagResourceOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *evs.UntagResourceInput, ...func(*evs.Options)) *evs.UntagResourceOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*evs.UntagResourceOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *evs.UntagResourceInput, ...func(*evs.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewIClient creates a new instance of IClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewIClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *IClient {
	mock := &IClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
