// Code generated by mockery v2.39.2. DO NOT EDIT.

package mocks

import (
	chimesdkvoice "github.com/aws/aws-sdk-go-v2/service/chimesdkvoice"

	context "context"

	mock "github.com/stretchr/testify/mock"
)

// IClient is an autogenerated mock type for the IClient type
type IClient struct {
	mock.Mock
}

// AssociatePhoneNumbersWithVoiceConnector provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) AssociatePhoneNumbersWithVoiceConnector(ctx context.Context, params *chimesdkvoice.AssociatePhoneNumbersWithVoiceConnectorInput, optFns ...func(*chimesdkvoice.Options)) (*chimesdkvoice.AssociatePhoneNumbersWithVoiceConnectorOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for AssociatePhoneNumbersWithVoiceConnector")
	}

	var r0 *chimesdkvoice.AssociatePhoneNumbersWithVoiceConnectorOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *chimesdkvoice.AssociatePhoneNumbersWithVoiceConnectorInput, ...func(*chimesdkvoice.Options)) (*chimesdkvoice.AssociatePhoneNumbersWithVoiceConnectorOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *chimesdkvoice.AssociatePhoneNumbersWithVoiceConnectorInput, ...func(*chimesdkvoice.Options)) *chimesdkvoice.AssociatePhoneNumbersWithVoiceConnectorOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*chimesdkvoice.AssociatePhoneNumbersWithVoiceConnectorOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *chimesdkvoice.AssociatePhoneNumbersWithVoiceConnectorInput, ...func(*chimesdkvoice.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AssociatePhoneNumbersWithVoiceConnectorGroup provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) AssociatePhoneNumbersWithVoiceConnectorGroup(ctx context.Context, params *chimesdkvoice.AssociatePhoneNumbersWithVoiceConnectorGroupInput, optFns ...func(*chimesdkvoice.Options)) (*chimesdkvoice.AssociatePhoneNumbersWithVoiceConnectorGroupOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for AssociatePhoneNumbersWithVoiceConnectorGroup")
	}

	var r0 *chimesdkvoice.AssociatePhoneNumbersWithVoiceConnectorGroupOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *chimesdkvoice.AssociatePhoneNumbersWithVoiceConnectorGroupInput, ...func(*chimesdkvoice.Options)) (*chimesdkvoice.AssociatePhoneNumbersWithVoiceConnectorGroupOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *chimesdkvoice.AssociatePhoneNumbersWithVoiceConnectorGroupInput, ...func(*chimesdkvoice.Options)) *chimesdkvoice.AssociatePhoneNumbersWithVoiceConnectorGroupOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*chimesdkvoice.AssociatePhoneNumbersWithVoiceConnectorGroupOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *chimesdkvoice.AssociatePhoneNumbersWithVoiceConnectorGroupInput, ...func(*chimesdkvoice.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// BatchDeletePhoneNumber provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) BatchDeletePhoneNumber(ctx context.Context, params *chimesdkvoice.BatchDeletePhoneNumberInput, optFns ...func(*chimesdkvoice.Options)) (*chimesdkvoice.BatchDeletePhoneNumberOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for BatchDeletePhoneNumber")
	}

	var r0 *chimesdkvoice.BatchDeletePhoneNumberOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *chimesdkvoice.BatchDeletePhoneNumberInput, ...func(*chimesdkvoice.Options)) (*chimesdkvoice.BatchDeletePhoneNumberOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *chimesdkvoice.BatchDeletePhoneNumberInput, ...func(*chimesdkvoice.Options)) *chimesdkvoice.BatchDeletePhoneNumberOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*chimesdkvoice.BatchDeletePhoneNumberOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *chimesdkvoice.BatchDeletePhoneNumberInput, ...func(*chimesdkvoice.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// BatchUpdatePhoneNumber provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) BatchUpdatePhoneNumber(ctx context.Context, params *chimesdkvoice.BatchUpdatePhoneNumberInput, optFns ...func(*chimesdkvoice.Options)) (*chimesdkvoice.BatchUpdatePhoneNumberOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for BatchUpdatePhoneNumber")
	}

	var r0 *chimesdkvoice.BatchUpdatePhoneNumberOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *chimesdkvoice.BatchUpdatePhoneNumberInput, ...func(*chimesdkvoice.Options)) (*chimesdkvoice.BatchUpdatePhoneNumberOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *chimesdkvoice.BatchUpdatePhoneNumberInput, ...func(*chimesdkvoice.Options)) *chimesdkvoice.BatchUpdatePhoneNumberOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*chimesdkvoice.BatchUpdatePhoneNumberOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *chimesdkvoice.BatchUpdatePhoneNumberInput, ...func(*chimesdkvoice.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreatePhoneNumberOrder provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CreatePhoneNumberOrder(ctx context.Context, params *chimesdkvoice.CreatePhoneNumberOrderInput, optFns ...func(*chimesdkvoice.Options)) (*chimesdkvoice.CreatePhoneNumberOrderOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreatePhoneNumberOrder")
	}

	var r0 *chimesdkvoice.CreatePhoneNumberOrderOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *chimesdkvoice.CreatePhoneNumberOrderInput, ...func(*chimesdkvoice.Options)) (*chimesdkvoice.CreatePhoneNumberOrderOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *chimesdkvoice.CreatePhoneNumberOrderInput, ...func(*chimesdkvoice.Options)) *chimesdkvoice.CreatePhoneNumberOrderOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*chimesdkvoice.CreatePhoneNumberOrderOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *chimesdkvoice.CreatePhoneNumberOrderInput, ...func(*chimesdkvoice.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateProxySession provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CreateProxySession(ctx context.Context, params *chimesdkvoice.CreateProxySessionInput, optFns ...func(*chimesdkvoice.Options)) (*chimesdkvoice.CreateProxySessionOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateProxySession")
	}

	var r0 *chimesdkvoice.CreateProxySessionOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *chimesdkvoice.CreateProxySessionInput, ...func(*chimesdkvoice.Options)) (*chimesdkvoice.CreateProxySessionOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *chimesdkvoice.CreateProxySessionInput, ...func(*chimesdkvoice.Options)) *chimesdkvoice.CreateProxySessionOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*chimesdkvoice.CreateProxySessionOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *chimesdkvoice.CreateProxySessionInput, ...func(*chimesdkvoice.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateSipMediaApplication provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CreateSipMediaApplication(ctx context.Context, params *chimesdkvoice.CreateSipMediaApplicationInput, optFns ...func(*chimesdkvoice.Options)) (*chimesdkvoice.CreateSipMediaApplicationOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateSipMediaApplication")
	}

	var r0 *chimesdkvoice.CreateSipMediaApplicationOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *chimesdkvoice.CreateSipMediaApplicationInput, ...func(*chimesdkvoice.Options)) (*chimesdkvoice.CreateSipMediaApplicationOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *chimesdkvoice.CreateSipMediaApplicationInput, ...func(*chimesdkvoice.Options)) *chimesdkvoice.CreateSipMediaApplicationOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*chimesdkvoice.CreateSipMediaApplicationOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *chimesdkvoice.CreateSipMediaApplicationInput, ...func(*chimesdkvoice.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateSipMediaApplicationCall provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CreateSipMediaApplicationCall(ctx context.Context, params *chimesdkvoice.CreateSipMediaApplicationCallInput, optFns ...func(*chimesdkvoice.Options)) (*chimesdkvoice.CreateSipMediaApplicationCallOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateSipMediaApplicationCall")
	}

	var r0 *chimesdkvoice.CreateSipMediaApplicationCallOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *chimesdkvoice.CreateSipMediaApplicationCallInput, ...func(*chimesdkvoice.Options)) (*chimesdkvoice.CreateSipMediaApplicationCallOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *chimesdkvoice.CreateSipMediaApplicationCallInput, ...func(*chimesdkvoice.Options)) *chimesdkvoice.CreateSipMediaApplicationCallOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*chimesdkvoice.CreateSipMediaApplicationCallOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *chimesdkvoice.CreateSipMediaApplicationCallInput, ...func(*chimesdkvoice.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateSipRule provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CreateSipRule(ctx context.Context, params *chimesdkvoice.CreateSipRuleInput, optFns ...func(*chimesdkvoice.Options)) (*chimesdkvoice.CreateSipRuleOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateSipRule")
	}

	var r0 *chimesdkvoice.CreateSipRuleOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *chimesdkvoice.CreateSipRuleInput, ...func(*chimesdkvoice.Options)) (*chimesdkvoice.CreateSipRuleOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *chimesdkvoice.CreateSipRuleInput, ...func(*chimesdkvoice.Options)) *chimesdkvoice.CreateSipRuleOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*chimesdkvoice.CreateSipRuleOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *chimesdkvoice.CreateSipRuleInput, ...func(*chimesdkvoice.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateVoiceConnector provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CreateVoiceConnector(ctx context.Context, params *chimesdkvoice.CreateVoiceConnectorInput, optFns ...func(*chimesdkvoice.Options)) (*chimesdkvoice.CreateVoiceConnectorOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateVoiceConnector")
	}

	var r0 *chimesdkvoice.CreateVoiceConnectorOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *chimesdkvoice.CreateVoiceConnectorInput, ...func(*chimesdkvoice.Options)) (*chimesdkvoice.CreateVoiceConnectorOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *chimesdkvoice.CreateVoiceConnectorInput, ...func(*chimesdkvoice.Options)) *chimesdkvoice.CreateVoiceConnectorOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*chimesdkvoice.CreateVoiceConnectorOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *chimesdkvoice.CreateVoiceConnectorInput, ...func(*chimesdkvoice.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateVoiceConnectorGroup provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CreateVoiceConnectorGroup(ctx context.Context, params *chimesdkvoice.CreateVoiceConnectorGroupInput, optFns ...func(*chimesdkvoice.Options)) (*chimesdkvoice.CreateVoiceConnectorGroupOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateVoiceConnectorGroup")
	}

	var r0 *chimesdkvoice.CreateVoiceConnectorGroupOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *chimesdkvoice.CreateVoiceConnectorGroupInput, ...func(*chimesdkvoice.Options)) (*chimesdkvoice.CreateVoiceConnectorGroupOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *chimesdkvoice.CreateVoiceConnectorGroupInput, ...func(*chimesdkvoice.Options)) *chimesdkvoice.CreateVoiceConnectorGroupOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*chimesdkvoice.CreateVoiceConnectorGroupOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *chimesdkvoice.CreateVoiceConnectorGroupInput, ...func(*chimesdkvoice.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateVoiceProfile provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CreateVoiceProfile(ctx context.Context, params *chimesdkvoice.CreateVoiceProfileInput, optFns ...func(*chimesdkvoice.Options)) (*chimesdkvoice.CreateVoiceProfileOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateVoiceProfile")
	}

	var r0 *chimesdkvoice.CreateVoiceProfileOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *chimesdkvoice.CreateVoiceProfileInput, ...func(*chimesdkvoice.Options)) (*chimesdkvoice.CreateVoiceProfileOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *chimesdkvoice.CreateVoiceProfileInput, ...func(*chimesdkvoice.Options)) *chimesdkvoice.CreateVoiceProfileOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*chimesdkvoice.CreateVoiceProfileOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *chimesdkvoice.CreateVoiceProfileInput, ...func(*chimesdkvoice.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateVoiceProfileDomain provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CreateVoiceProfileDomain(ctx context.Context, params *chimesdkvoice.CreateVoiceProfileDomainInput, optFns ...func(*chimesdkvoice.Options)) (*chimesdkvoice.CreateVoiceProfileDomainOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateVoiceProfileDomain")
	}

	var r0 *chimesdkvoice.CreateVoiceProfileDomainOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *chimesdkvoice.CreateVoiceProfileDomainInput, ...func(*chimesdkvoice.Options)) (*chimesdkvoice.CreateVoiceProfileDomainOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *chimesdkvoice.CreateVoiceProfileDomainInput, ...func(*chimesdkvoice.Options)) *chimesdkvoice.CreateVoiceProfileDomainOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*chimesdkvoice.CreateVoiceProfileDomainOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *chimesdkvoice.CreateVoiceProfileDomainInput, ...func(*chimesdkvoice.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeletePhoneNumber provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeletePhoneNumber(ctx context.Context, params *chimesdkvoice.DeletePhoneNumberInput, optFns ...func(*chimesdkvoice.Options)) (*chimesdkvoice.DeletePhoneNumberOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeletePhoneNumber")
	}

	var r0 *chimesdkvoice.DeletePhoneNumberOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *chimesdkvoice.DeletePhoneNumberInput, ...func(*chimesdkvoice.Options)) (*chimesdkvoice.DeletePhoneNumberOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *chimesdkvoice.DeletePhoneNumberInput, ...func(*chimesdkvoice.Options)) *chimesdkvoice.DeletePhoneNumberOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*chimesdkvoice.DeletePhoneNumberOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *chimesdkvoice.DeletePhoneNumberInput, ...func(*chimesdkvoice.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteProxySession provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteProxySession(ctx context.Context, params *chimesdkvoice.DeleteProxySessionInput, optFns ...func(*chimesdkvoice.Options)) (*chimesdkvoice.DeleteProxySessionOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteProxySession")
	}

	var r0 *chimesdkvoice.DeleteProxySessionOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *chimesdkvoice.DeleteProxySessionInput, ...func(*chimesdkvoice.Options)) (*chimesdkvoice.DeleteProxySessionOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *chimesdkvoice.DeleteProxySessionInput, ...func(*chimesdkvoice.Options)) *chimesdkvoice.DeleteProxySessionOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*chimesdkvoice.DeleteProxySessionOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *chimesdkvoice.DeleteProxySessionInput, ...func(*chimesdkvoice.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteSipMediaApplication provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteSipMediaApplication(ctx context.Context, params *chimesdkvoice.DeleteSipMediaApplicationInput, optFns ...func(*chimesdkvoice.Options)) (*chimesdkvoice.DeleteSipMediaApplicationOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteSipMediaApplication")
	}

	var r0 *chimesdkvoice.DeleteSipMediaApplicationOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *chimesdkvoice.DeleteSipMediaApplicationInput, ...func(*chimesdkvoice.Options)) (*chimesdkvoice.DeleteSipMediaApplicationOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *chimesdkvoice.DeleteSipMediaApplicationInput, ...func(*chimesdkvoice.Options)) *chimesdkvoice.DeleteSipMediaApplicationOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*chimesdkvoice.DeleteSipMediaApplicationOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *chimesdkvoice.DeleteSipMediaApplicationInput, ...func(*chimesdkvoice.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteSipRule provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteSipRule(ctx context.Context, params *chimesdkvoice.DeleteSipRuleInput, optFns ...func(*chimesdkvoice.Options)) (*chimesdkvoice.DeleteSipRuleOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteSipRule")
	}

	var r0 *chimesdkvoice.DeleteSipRuleOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *chimesdkvoice.DeleteSipRuleInput, ...func(*chimesdkvoice.Options)) (*chimesdkvoice.DeleteSipRuleOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *chimesdkvoice.DeleteSipRuleInput, ...func(*chimesdkvoice.Options)) *chimesdkvoice.DeleteSipRuleOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*chimesdkvoice.DeleteSipRuleOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *chimesdkvoice.DeleteSipRuleInput, ...func(*chimesdkvoice.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteVoiceConnector provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteVoiceConnector(ctx context.Context, params *chimesdkvoice.DeleteVoiceConnectorInput, optFns ...func(*chimesdkvoice.Options)) (*chimesdkvoice.DeleteVoiceConnectorOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteVoiceConnector")
	}

	var r0 *chimesdkvoice.DeleteVoiceConnectorOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *chimesdkvoice.DeleteVoiceConnectorInput, ...func(*chimesdkvoice.Options)) (*chimesdkvoice.DeleteVoiceConnectorOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *chimesdkvoice.DeleteVoiceConnectorInput, ...func(*chimesdkvoice.Options)) *chimesdkvoice.DeleteVoiceConnectorOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*chimesdkvoice.DeleteVoiceConnectorOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *chimesdkvoice.DeleteVoiceConnectorInput, ...func(*chimesdkvoice.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteVoiceConnectorEmergencyCallingConfiguration provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteVoiceConnectorEmergencyCallingConfiguration(ctx context.Context, params *chimesdkvoice.DeleteVoiceConnectorEmergencyCallingConfigurationInput, optFns ...func(*chimesdkvoice.Options)) (*chimesdkvoice.DeleteVoiceConnectorEmergencyCallingConfigurationOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteVoiceConnectorEmergencyCallingConfiguration")
	}

	var r0 *chimesdkvoice.DeleteVoiceConnectorEmergencyCallingConfigurationOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *chimesdkvoice.DeleteVoiceConnectorEmergencyCallingConfigurationInput, ...func(*chimesdkvoice.Options)) (*chimesdkvoice.DeleteVoiceConnectorEmergencyCallingConfigurationOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *chimesdkvoice.DeleteVoiceConnectorEmergencyCallingConfigurationInput, ...func(*chimesdkvoice.Options)) *chimesdkvoice.DeleteVoiceConnectorEmergencyCallingConfigurationOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*chimesdkvoice.DeleteVoiceConnectorEmergencyCallingConfigurationOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *chimesdkvoice.DeleteVoiceConnectorEmergencyCallingConfigurationInput, ...func(*chimesdkvoice.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteVoiceConnectorGroup provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteVoiceConnectorGroup(ctx context.Context, params *chimesdkvoice.DeleteVoiceConnectorGroupInput, optFns ...func(*chimesdkvoice.Options)) (*chimesdkvoice.DeleteVoiceConnectorGroupOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteVoiceConnectorGroup")
	}

	var r0 *chimesdkvoice.DeleteVoiceConnectorGroupOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *chimesdkvoice.DeleteVoiceConnectorGroupInput, ...func(*chimesdkvoice.Options)) (*chimesdkvoice.DeleteVoiceConnectorGroupOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *chimesdkvoice.DeleteVoiceConnectorGroupInput, ...func(*chimesdkvoice.Options)) *chimesdkvoice.DeleteVoiceConnectorGroupOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*chimesdkvoice.DeleteVoiceConnectorGroupOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *chimesdkvoice.DeleteVoiceConnectorGroupInput, ...func(*chimesdkvoice.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteVoiceConnectorOrigination provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteVoiceConnectorOrigination(ctx context.Context, params *chimesdkvoice.DeleteVoiceConnectorOriginationInput, optFns ...func(*chimesdkvoice.Options)) (*chimesdkvoice.DeleteVoiceConnectorOriginationOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteVoiceConnectorOrigination")
	}

	var r0 *chimesdkvoice.DeleteVoiceConnectorOriginationOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *chimesdkvoice.DeleteVoiceConnectorOriginationInput, ...func(*chimesdkvoice.Options)) (*chimesdkvoice.DeleteVoiceConnectorOriginationOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *chimesdkvoice.DeleteVoiceConnectorOriginationInput, ...func(*chimesdkvoice.Options)) *chimesdkvoice.DeleteVoiceConnectorOriginationOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*chimesdkvoice.DeleteVoiceConnectorOriginationOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *chimesdkvoice.DeleteVoiceConnectorOriginationInput, ...func(*chimesdkvoice.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteVoiceConnectorProxy provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteVoiceConnectorProxy(ctx context.Context, params *chimesdkvoice.DeleteVoiceConnectorProxyInput, optFns ...func(*chimesdkvoice.Options)) (*chimesdkvoice.DeleteVoiceConnectorProxyOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteVoiceConnectorProxy")
	}

	var r0 *chimesdkvoice.DeleteVoiceConnectorProxyOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *chimesdkvoice.DeleteVoiceConnectorProxyInput, ...func(*chimesdkvoice.Options)) (*chimesdkvoice.DeleteVoiceConnectorProxyOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *chimesdkvoice.DeleteVoiceConnectorProxyInput, ...func(*chimesdkvoice.Options)) *chimesdkvoice.DeleteVoiceConnectorProxyOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*chimesdkvoice.DeleteVoiceConnectorProxyOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *chimesdkvoice.DeleteVoiceConnectorProxyInput, ...func(*chimesdkvoice.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteVoiceConnectorStreamingConfiguration provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteVoiceConnectorStreamingConfiguration(ctx context.Context, params *chimesdkvoice.DeleteVoiceConnectorStreamingConfigurationInput, optFns ...func(*chimesdkvoice.Options)) (*chimesdkvoice.DeleteVoiceConnectorStreamingConfigurationOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteVoiceConnectorStreamingConfiguration")
	}

	var r0 *chimesdkvoice.DeleteVoiceConnectorStreamingConfigurationOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *chimesdkvoice.DeleteVoiceConnectorStreamingConfigurationInput, ...func(*chimesdkvoice.Options)) (*chimesdkvoice.DeleteVoiceConnectorStreamingConfigurationOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *chimesdkvoice.DeleteVoiceConnectorStreamingConfigurationInput, ...func(*chimesdkvoice.Options)) *chimesdkvoice.DeleteVoiceConnectorStreamingConfigurationOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*chimesdkvoice.DeleteVoiceConnectorStreamingConfigurationOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *chimesdkvoice.DeleteVoiceConnectorStreamingConfigurationInput, ...func(*chimesdkvoice.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteVoiceConnectorTermination provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteVoiceConnectorTermination(ctx context.Context, params *chimesdkvoice.DeleteVoiceConnectorTerminationInput, optFns ...func(*chimesdkvoice.Options)) (*chimesdkvoice.DeleteVoiceConnectorTerminationOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteVoiceConnectorTermination")
	}

	var r0 *chimesdkvoice.DeleteVoiceConnectorTerminationOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *chimesdkvoice.DeleteVoiceConnectorTerminationInput, ...func(*chimesdkvoice.Options)) (*chimesdkvoice.DeleteVoiceConnectorTerminationOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *chimesdkvoice.DeleteVoiceConnectorTerminationInput, ...func(*chimesdkvoice.Options)) *chimesdkvoice.DeleteVoiceConnectorTerminationOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*chimesdkvoice.DeleteVoiceConnectorTerminationOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *chimesdkvoice.DeleteVoiceConnectorTerminationInput, ...func(*chimesdkvoice.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteVoiceConnectorTerminationCredentials provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteVoiceConnectorTerminationCredentials(ctx context.Context, params *chimesdkvoice.DeleteVoiceConnectorTerminationCredentialsInput, optFns ...func(*chimesdkvoice.Options)) (*chimesdkvoice.DeleteVoiceConnectorTerminationCredentialsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteVoiceConnectorTerminationCredentials")
	}

	var r0 *chimesdkvoice.DeleteVoiceConnectorTerminationCredentialsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *chimesdkvoice.DeleteVoiceConnectorTerminationCredentialsInput, ...func(*chimesdkvoice.Options)) (*chimesdkvoice.DeleteVoiceConnectorTerminationCredentialsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *chimesdkvoice.DeleteVoiceConnectorTerminationCredentialsInput, ...func(*chimesdkvoice.Options)) *chimesdkvoice.DeleteVoiceConnectorTerminationCredentialsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*chimesdkvoice.DeleteVoiceConnectorTerminationCredentialsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *chimesdkvoice.DeleteVoiceConnectorTerminationCredentialsInput, ...func(*chimesdkvoice.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteVoiceProfile provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteVoiceProfile(ctx context.Context, params *chimesdkvoice.DeleteVoiceProfileInput, optFns ...func(*chimesdkvoice.Options)) (*chimesdkvoice.DeleteVoiceProfileOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteVoiceProfile")
	}

	var r0 *chimesdkvoice.DeleteVoiceProfileOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *chimesdkvoice.DeleteVoiceProfileInput, ...func(*chimesdkvoice.Options)) (*chimesdkvoice.DeleteVoiceProfileOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *chimesdkvoice.DeleteVoiceProfileInput, ...func(*chimesdkvoice.Options)) *chimesdkvoice.DeleteVoiceProfileOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*chimesdkvoice.DeleteVoiceProfileOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *chimesdkvoice.DeleteVoiceProfileInput, ...func(*chimesdkvoice.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteVoiceProfileDomain provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteVoiceProfileDomain(ctx context.Context, params *chimesdkvoice.DeleteVoiceProfileDomainInput, optFns ...func(*chimesdkvoice.Options)) (*chimesdkvoice.DeleteVoiceProfileDomainOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteVoiceProfileDomain")
	}

	var r0 *chimesdkvoice.DeleteVoiceProfileDomainOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *chimesdkvoice.DeleteVoiceProfileDomainInput, ...func(*chimesdkvoice.Options)) (*chimesdkvoice.DeleteVoiceProfileDomainOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *chimesdkvoice.DeleteVoiceProfileDomainInput, ...func(*chimesdkvoice.Options)) *chimesdkvoice.DeleteVoiceProfileDomainOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*chimesdkvoice.DeleteVoiceProfileDomainOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *chimesdkvoice.DeleteVoiceProfileDomainInput, ...func(*chimesdkvoice.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DisassociatePhoneNumbersFromVoiceConnector provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DisassociatePhoneNumbersFromVoiceConnector(ctx context.Context, params *chimesdkvoice.DisassociatePhoneNumbersFromVoiceConnectorInput, optFns ...func(*chimesdkvoice.Options)) (*chimesdkvoice.DisassociatePhoneNumbersFromVoiceConnectorOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DisassociatePhoneNumbersFromVoiceConnector")
	}

	var r0 *chimesdkvoice.DisassociatePhoneNumbersFromVoiceConnectorOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *chimesdkvoice.DisassociatePhoneNumbersFromVoiceConnectorInput, ...func(*chimesdkvoice.Options)) (*chimesdkvoice.DisassociatePhoneNumbersFromVoiceConnectorOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *chimesdkvoice.DisassociatePhoneNumbersFromVoiceConnectorInput, ...func(*chimesdkvoice.Options)) *chimesdkvoice.DisassociatePhoneNumbersFromVoiceConnectorOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*chimesdkvoice.DisassociatePhoneNumbersFromVoiceConnectorOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *chimesdkvoice.DisassociatePhoneNumbersFromVoiceConnectorInput, ...func(*chimesdkvoice.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DisassociatePhoneNumbersFromVoiceConnectorGroup provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DisassociatePhoneNumbersFromVoiceConnectorGroup(ctx context.Context, params *chimesdkvoice.DisassociatePhoneNumbersFromVoiceConnectorGroupInput, optFns ...func(*chimesdkvoice.Options)) (*chimesdkvoice.DisassociatePhoneNumbersFromVoiceConnectorGroupOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DisassociatePhoneNumbersFromVoiceConnectorGroup")
	}

	var r0 *chimesdkvoice.DisassociatePhoneNumbersFromVoiceConnectorGroupOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *chimesdkvoice.DisassociatePhoneNumbersFromVoiceConnectorGroupInput, ...func(*chimesdkvoice.Options)) (*chimesdkvoice.DisassociatePhoneNumbersFromVoiceConnectorGroupOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *chimesdkvoice.DisassociatePhoneNumbersFromVoiceConnectorGroupInput, ...func(*chimesdkvoice.Options)) *chimesdkvoice.DisassociatePhoneNumbersFromVoiceConnectorGroupOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*chimesdkvoice.DisassociatePhoneNumbersFromVoiceConnectorGroupOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *chimesdkvoice.DisassociatePhoneNumbersFromVoiceConnectorGroupInput, ...func(*chimesdkvoice.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetGlobalSettings provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetGlobalSettings(ctx context.Context, params *chimesdkvoice.GetGlobalSettingsInput, optFns ...func(*chimesdkvoice.Options)) (*chimesdkvoice.GetGlobalSettingsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetGlobalSettings")
	}

	var r0 *chimesdkvoice.GetGlobalSettingsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *chimesdkvoice.GetGlobalSettingsInput, ...func(*chimesdkvoice.Options)) (*chimesdkvoice.GetGlobalSettingsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *chimesdkvoice.GetGlobalSettingsInput, ...func(*chimesdkvoice.Options)) *chimesdkvoice.GetGlobalSettingsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*chimesdkvoice.GetGlobalSettingsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *chimesdkvoice.GetGlobalSettingsInput, ...func(*chimesdkvoice.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetPhoneNumber provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetPhoneNumber(ctx context.Context, params *chimesdkvoice.GetPhoneNumberInput, optFns ...func(*chimesdkvoice.Options)) (*chimesdkvoice.GetPhoneNumberOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetPhoneNumber")
	}

	var r0 *chimesdkvoice.GetPhoneNumberOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *chimesdkvoice.GetPhoneNumberInput, ...func(*chimesdkvoice.Options)) (*chimesdkvoice.GetPhoneNumberOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *chimesdkvoice.GetPhoneNumberInput, ...func(*chimesdkvoice.Options)) *chimesdkvoice.GetPhoneNumberOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*chimesdkvoice.GetPhoneNumberOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *chimesdkvoice.GetPhoneNumberInput, ...func(*chimesdkvoice.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetPhoneNumberOrder provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetPhoneNumberOrder(ctx context.Context, params *chimesdkvoice.GetPhoneNumberOrderInput, optFns ...func(*chimesdkvoice.Options)) (*chimesdkvoice.GetPhoneNumberOrderOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetPhoneNumberOrder")
	}

	var r0 *chimesdkvoice.GetPhoneNumberOrderOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *chimesdkvoice.GetPhoneNumberOrderInput, ...func(*chimesdkvoice.Options)) (*chimesdkvoice.GetPhoneNumberOrderOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *chimesdkvoice.GetPhoneNumberOrderInput, ...func(*chimesdkvoice.Options)) *chimesdkvoice.GetPhoneNumberOrderOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*chimesdkvoice.GetPhoneNumberOrderOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *chimesdkvoice.GetPhoneNumberOrderInput, ...func(*chimesdkvoice.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetPhoneNumberSettings provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetPhoneNumberSettings(ctx context.Context, params *chimesdkvoice.GetPhoneNumberSettingsInput, optFns ...func(*chimesdkvoice.Options)) (*chimesdkvoice.GetPhoneNumberSettingsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetPhoneNumberSettings")
	}

	var r0 *chimesdkvoice.GetPhoneNumberSettingsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *chimesdkvoice.GetPhoneNumberSettingsInput, ...func(*chimesdkvoice.Options)) (*chimesdkvoice.GetPhoneNumberSettingsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *chimesdkvoice.GetPhoneNumberSettingsInput, ...func(*chimesdkvoice.Options)) *chimesdkvoice.GetPhoneNumberSettingsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*chimesdkvoice.GetPhoneNumberSettingsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *chimesdkvoice.GetPhoneNumberSettingsInput, ...func(*chimesdkvoice.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetProxySession provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetProxySession(ctx context.Context, params *chimesdkvoice.GetProxySessionInput, optFns ...func(*chimesdkvoice.Options)) (*chimesdkvoice.GetProxySessionOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetProxySession")
	}

	var r0 *chimesdkvoice.GetProxySessionOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *chimesdkvoice.GetProxySessionInput, ...func(*chimesdkvoice.Options)) (*chimesdkvoice.GetProxySessionOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *chimesdkvoice.GetProxySessionInput, ...func(*chimesdkvoice.Options)) *chimesdkvoice.GetProxySessionOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*chimesdkvoice.GetProxySessionOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *chimesdkvoice.GetProxySessionInput, ...func(*chimesdkvoice.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetSipMediaApplication provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetSipMediaApplication(ctx context.Context, params *chimesdkvoice.GetSipMediaApplicationInput, optFns ...func(*chimesdkvoice.Options)) (*chimesdkvoice.GetSipMediaApplicationOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetSipMediaApplication")
	}

	var r0 *chimesdkvoice.GetSipMediaApplicationOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *chimesdkvoice.GetSipMediaApplicationInput, ...func(*chimesdkvoice.Options)) (*chimesdkvoice.GetSipMediaApplicationOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *chimesdkvoice.GetSipMediaApplicationInput, ...func(*chimesdkvoice.Options)) *chimesdkvoice.GetSipMediaApplicationOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*chimesdkvoice.GetSipMediaApplicationOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *chimesdkvoice.GetSipMediaApplicationInput, ...func(*chimesdkvoice.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetSipMediaApplicationAlexaSkillConfiguration provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetSipMediaApplicationAlexaSkillConfiguration(ctx context.Context, params *chimesdkvoice.GetSipMediaApplicationAlexaSkillConfigurationInput, optFns ...func(*chimesdkvoice.Options)) (*chimesdkvoice.GetSipMediaApplicationAlexaSkillConfigurationOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetSipMediaApplicationAlexaSkillConfiguration")
	}

	var r0 *chimesdkvoice.GetSipMediaApplicationAlexaSkillConfigurationOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *chimesdkvoice.GetSipMediaApplicationAlexaSkillConfigurationInput, ...func(*chimesdkvoice.Options)) (*chimesdkvoice.GetSipMediaApplicationAlexaSkillConfigurationOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *chimesdkvoice.GetSipMediaApplicationAlexaSkillConfigurationInput, ...func(*chimesdkvoice.Options)) *chimesdkvoice.GetSipMediaApplicationAlexaSkillConfigurationOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*chimesdkvoice.GetSipMediaApplicationAlexaSkillConfigurationOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *chimesdkvoice.GetSipMediaApplicationAlexaSkillConfigurationInput, ...func(*chimesdkvoice.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetSipMediaApplicationLoggingConfiguration provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetSipMediaApplicationLoggingConfiguration(ctx context.Context, params *chimesdkvoice.GetSipMediaApplicationLoggingConfigurationInput, optFns ...func(*chimesdkvoice.Options)) (*chimesdkvoice.GetSipMediaApplicationLoggingConfigurationOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetSipMediaApplicationLoggingConfiguration")
	}

	var r0 *chimesdkvoice.GetSipMediaApplicationLoggingConfigurationOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *chimesdkvoice.GetSipMediaApplicationLoggingConfigurationInput, ...func(*chimesdkvoice.Options)) (*chimesdkvoice.GetSipMediaApplicationLoggingConfigurationOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *chimesdkvoice.GetSipMediaApplicationLoggingConfigurationInput, ...func(*chimesdkvoice.Options)) *chimesdkvoice.GetSipMediaApplicationLoggingConfigurationOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*chimesdkvoice.GetSipMediaApplicationLoggingConfigurationOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *chimesdkvoice.GetSipMediaApplicationLoggingConfigurationInput, ...func(*chimesdkvoice.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetSipRule provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetSipRule(ctx context.Context, params *chimesdkvoice.GetSipRuleInput, optFns ...func(*chimesdkvoice.Options)) (*chimesdkvoice.GetSipRuleOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetSipRule")
	}

	var r0 *chimesdkvoice.GetSipRuleOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *chimesdkvoice.GetSipRuleInput, ...func(*chimesdkvoice.Options)) (*chimesdkvoice.GetSipRuleOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *chimesdkvoice.GetSipRuleInput, ...func(*chimesdkvoice.Options)) *chimesdkvoice.GetSipRuleOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*chimesdkvoice.GetSipRuleOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *chimesdkvoice.GetSipRuleInput, ...func(*chimesdkvoice.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetSpeakerSearchTask provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetSpeakerSearchTask(ctx context.Context, params *chimesdkvoice.GetSpeakerSearchTaskInput, optFns ...func(*chimesdkvoice.Options)) (*chimesdkvoice.GetSpeakerSearchTaskOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetSpeakerSearchTask")
	}

	var r0 *chimesdkvoice.GetSpeakerSearchTaskOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *chimesdkvoice.GetSpeakerSearchTaskInput, ...func(*chimesdkvoice.Options)) (*chimesdkvoice.GetSpeakerSearchTaskOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *chimesdkvoice.GetSpeakerSearchTaskInput, ...func(*chimesdkvoice.Options)) *chimesdkvoice.GetSpeakerSearchTaskOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*chimesdkvoice.GetSpeakerSearchTaskOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *chimesdkvoice.GetSpeakerSearchTaskInput, ...func(*chimesdkvoice.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetVoiceConnector provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetVoiceConnector(ctx context.Context, params *chimesdkvoice.GetVoiceConnectorInput, optFns ...func(*chimesdkvoice.Options)) (*chimesdkvoice.GetVoiceConnectorOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetVoiceConnector")
	}

	var r0 *chimesdkvoice.GetVoiceConnectorOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *chimesdkvoice.GetVoiceConnectorInput, ...func(*chimesdkvoice.Options)) (*chimesdkvoice.GetVoiceConnectorOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *chimesdkvoice.GetVoiceConnectorInput, ...func(*chimesdkvoice.Options)) *chimesdkvoice.GetVoiceConnectorOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*chimesdkvoice.GetVoiceConnectorOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *chimesdkvoice.GetVoiceConnectorInput, ...func(*chimesdkvoice.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetVoiceConnectorEmergencyCallingConfiguration provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetVoiceConnectorEmergencyCallingConfiguration(ctx context.Context, params *chimesdkvoice.GetVoiceConnectorEmergencyCallingConfigurationInput, optFns ...func(*chimesdkvoice.Options)) (*chimesdkvoice.GetVoiceConnectorEmergencyCallingConfigurationOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetVoiceConnectorEmergencyCallingConfiguration")
	}

	var r0 *chimesdkvoice.GetVoiceConnectorEmergencyCallingConfigurationOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *chimesdkvoice.GetVoiceConnectorEmergencyCallingConfigurationInput, ...func(*chimesdkvoice.Options)) (*chimesdkvoice.GetVoiceConnectorEmergencyCallingConfigurationOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *chimesdkvoice.GetVoiceConnectorEmergencyCallingConfigurationInput, ...func(*chimesdkvoice.Options)) *chimesdkvoice.GetVoiceConnectorEmergencyCallingConfigurationOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*chimesdkvoice.GetVoiceConnectorEmergencyCallingConfigurationOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *chimesdkvoice.GetVoiceConnectorEmergencyCallingConfigurationInput, ...func(*chimesdkvoice.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetVoiceConnectorGroup provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetVoiceConnectorGroup(ctx context.Context, params *chimesdkvoice.GetVoiceConnectorGroupInput, optFns ...func(*chimesdkvoice.Options)) (*chimesdkvoice.GetVoiceConnectorGroupOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetVoiceConnectorGroup")
	}

	var r0 *chimesdkvoice.GetVoiceConnectorGroupOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *chimesdkvoice.GetVoiceConnectorGroupInput, ...func(*chimesdkvoice.Options)) (*chimesdkvoice.GetVoiceConnectorGroupOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *chimesdkvoice.GetVoiceConnectorGroupInput, ...func(*chimesdkvoice.Options)) *chimesdkvoice.GetVoiceConnectorGroupOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*chimesdkvoice.GetVoiceConnectorGroupOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *chimesdkvoice.GetVoiceConnectorGroupInput, ...func(*chimesdkvoice.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetVoiceConnectorLoggingConfiguration provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetVoiceConnectorLoggingConfiguration(ctx context.Context, params *chimesdkvoice.GetVoiceConnectorLoggingConfigurationInput, optFns ...func(*chimesdkvoice.Options)) (*chimesdkvoice.GetVoiceConnectorLoggingConfigurationOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetVoiceConnectorLoggingConfiguration")
	}

	var r0 *chimesdkvoice.GetVoiceConnectorLoggingConfigurationOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *chimesdkvoice.GetVoiceConnectorLoggingConfigurationInput, ...func(*chimesdkvoice.Options)) (*chimesdkvoice.GetVoiceConnectorLoggingConfigurationOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *chimesdkvoice.GetVoiceConnectorLoggingConfigurationInput, ...func(*chimesdkvoice.Options)) *chimesdkvoice.GetVoiceConnectorLoggingConfigurationOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*chimesdkvoice.GetVoiceConnectorLoggingConfigurationOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *chimesdkvoice.GetVoiceConnectorLoggingConfigurationInput, ...func(*chimesdkvoice.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetVoiceConnectorOrigination provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetVoiceConnectorOrigination(ctx context.Context, params *chimesdkvoice.GetVoiceConnectorOriginationInput, optFns ...func(*chimesdkvoice.Options)) (*chimesdkvoice.GetVoiceConnectorOriginationOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetVoiceConnectorOrigination")
	}

	var r0 *chimesdkvoice.GetVoiceConnectorOriginationOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *chimesdkvoice.GetVoiceConnectorOriginationInput, ...func(*chimesdkvoice.Options)) (*chimesdkvoice.GetVoiceConnectorOriginationOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *chimesdkvoice.GetVoiceConnectorOriginationInput, ...func(*chimesdkvoice.Options)) *chimesdkvoice.GetVoiceConnectorOriginationOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*chimesdkvoice.GetVoiceConnectorOriginationOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *chimesdkvoice.GetVoiceConnectorOriginationInput, ...func(*chimesdkvoice.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetVoiceConnectorProxy provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetVoiceConnectorProxy(ctx context.Context, params *chimesdkvoice.GetVoiceConnectorProxyInput, optFns ...func(*chimesdkvoice.Options)) (*chimesdkvoice.GetVoiceConnectorProxyOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetVoiceConnectorProxy")
	}

	var r0 *chimesdkvoice.GetVoiceConnectorProxyOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *chimesdkvoice.GetVoiceConnectorProxyInput, ...func(*chimesdkvoice.Options)) (*chimesdkvoice.GetVoiceConnectorProxyOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *chimesdkvoice.GetVoiceConnectorProxyInput, ...func(*chimesdkvoice.Options)) *chimesdkvoice.GetVoiceConnectorProxyOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*chimesdkvoice.GetVoiceConnectorProxyOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *chimesdkvoice.GetVoiceConnectorProxyInput, ...func(*chimesdkvoice.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetVoiceConnectorStreamingConfiguration provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetVoiceConnectorStreamingConfiguration(ctx context.Context, params *chimesdkvoice.GetVoiceConnectorStreamingConfigurationInput, optFns ...func(*chimesdkvoice.Options)) (*chimesdkvoice.GetVoiceConnectorStreamingConfigurationOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetVoiceConnectorStreamingConfiguration")
	}

	var r0 *chimesdkvoice.GetVoiceConnectorStreamingConfigurationOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *chimesdkvoice.GetVoiceConnectorStreamingConfigurationInput, ...func(*chimesdkvoice.Options)) (*chimesdkvoice.GetVoiceConnectorStreamingConfigurationOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *chimesdkvoice.GetVoiceConnectorStreamingConfigurationInput, ...func(*chimesdkvoice.Options)) *chimesdkvoice.GetVoiceConnectorStreamingConfigurationOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*chimesdkvoice.GetVoiceConnectorStreamingConfigurationOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *chimesdkvoice.GetVoiceConnectorStreamingConfigurationInput, ...func(*chimesdkvoice.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetVoiceConnectorTermination provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetVoiceConnectorTermination(ctx context.Context, params *chimesdkvoice.GetVoiceConnectorTerminationInput, optFns ...func(*chimesdkvoice.Options)) (*chimesdkvoice.GetVoiceConnectorTerminationOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetVoiceConnectorTermination")
	}

	var r0 *chimesdkvoice.GetVoiceConnectorTerminationOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *chimesdkvoice.GetVoiceConnectorTerminationInput, ...func(*chimesdkvoice.Options)) (*chimesdkvoice.GetVoiceConnectorTerminationOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *chimesdkvoice.GetVoiceConnectorTerminationInput, ...func(*chimesdkvoice.Options)) *chimesdkvoice.GetVoiceConnectorTerminationOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*chimesdkvoice.GetVoiceConnectorTerminationOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *chimesdkvoice.GetVoiceConnectorTerminationInput, ...func(*chimesdkvoice.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetVoiceConnectorTerminationHealth provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetVoiceConnectorTerminationHealth(ctx context.Context, params *chimesdkvoice.GetVoiceConnectorTerminationHealthInput, optFns ...func(*chimesdkvoice.Options)) (*chimesdkvoice.GetVoiceConnectorTerminationHealthOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetVoiceConnectorTerminationHealth")
	}

	var r0 *chimesdkvoice.GetVoiceConnectorTerminationHealthOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *chimesdkvoice.GetVoiceConnectorTerminationHealthInput, ...func(*chimesdkvoice.Options)) (*chimesdkvoice.GetVoiceConnectorTerminationHealthOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *chimesdkvoice.GetVoiceConnectorTerminationHealthInput, ...func(*chimesdkvoice.Options)) *chimesdkvoice.GetVoiceConnectorTerminationHealthOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*chimesdkvoice.GetVoiceConnectorTerminationHealthOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *chimesdkvoice.GetVoiceConnectorTerminationHealthInput, ...func(*chimesdkvoice.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetVoiceProfile provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetVoiceProfile(ctx context.Context, params *chimesdkvoice.GetVoiceProfileInput, optFns ...func(*chimesdkvoice.Options)) (*chimesdkvoice.GetVoiceProfileOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetVoiceProfile")
	}

	var r0 *chimesdkvoice.GetVoiceProfileOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *chimesdkvoice.GetVoiceProfileInput, ...func(*chimesdkvoice.Options)) (*chimesdkvoice.GetVoiceProfileOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *chimesdkvoice.GetVoiceProfileInput, ...func(*chimesdkvoice.Options)) *chimesdkvoice.GetVoiceProfileOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*chimesdkvoice.GetVoiceProfileOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *chimesdkvoice.GetVoiceProfileInput, ...func(*chimesdkvoice.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetVoiceProfileDomain provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetVoiceProfileDomain(ctx context.Context, params *chimesdkvoice.GetVoiceProfileDomainInput, optFns ...func(*chimesdkvoice.Options)) (*chimesdkvoice.GetVoiceProfileDomainOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetVoiceProfileDomain")
	}

	var r0 *chimesdkvoice.GetVoiceProfileDomainOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *chimesdkvoice.GetVoiceProfileDomainInput, ...func(*chimesdkvoice.Options)) (*chimesdkvoice.GetVoiceProfileDomainOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *chimesdkvoice.GetVoiceProfileDomainInput, ...func(*chimesdkvoice.Options)) *chimesdkvoice.GetVoiceProfileDomainOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*chimesdkvoice.GetVoiceProfileDomainOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *chimesdkvoice.GetVoiceProfileDomainInput, ...func(*chimesdkvoice.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetVoiceToneAnalysisTask provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetVoiceToneAnalysisTask(ctx context.Context, params *chimesdkvoice.GetVoiceToneAnalysisTaskInput, optFns ...func(*chimesdkvoice.Options)) (*chimesdkvoice.GetVoiceToneAnalysisTaskOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetVoiceToneAnalysisTask")
	}

	var r0 *chimesdkvoice.GetVoiceToneAnalysisTaskOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *chimesdkvoice.GetVoiceToneAnalysisTaskInput, ...func(*chimesdkvoice.Options)) (*chimesdkvoice.GetVoiceToneAnalysisTaskOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *chimesdkvoice.GetVoiceToneAnalysisTaskInput, ...func(*chimesdkvoice.Options)) *chimesdkvoice.GetVoiceToneAnalysisTaskOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*chimesdkvoice.GetVoiceToneAnalysisTaskOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *chimesdkvoice.GetVoiceToneAnalysisTaskInput, ...func(*chimesdkvoice.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListAvailableVoiceConnectorRegions provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListAvailableVoiceConnectorRegions(ctx context.Context, params *chimesdkvoice.ListAvailableVoiceConnectorRegionsInput, optFns ...func(*chimesdkvoice.Options)) (*chimesdkvoice.ListAvailableVoiceConnectorRegionsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListAvailableVoiceConnectorRegions")
	}

	var r0 *chimesdkvoice.ListAvailableVoiceConnectorRegionsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *chimesdkvoice.ListAvailableVoiceConnectorRegionsInput, ...func(*chimesdkvoice.Options)) (*chimesdkvoice.ListAvailableVoiceConnectorRegionsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *chimesdkvoice.ListAvailableVoiceConnectorRegionsInput, ...func(*chimesdkvoice.Options)) *chimesdkvoice.ListAvailableVoiceConnectorRegionsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*chimesdkvoice.ListAvailableVoiceConnectorRegionsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *chimesdkvoice.ListAvailableVoiceConnectorRegionsInput, ...func(*chimesdkvoice.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListPhoneNumberOrders provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListPhoneNumberOrders(ctx context.Context, params *chimesdkvoice.ListPhoneNumberOrdersInput, optFns ...func(*chimesdkvoice.Options)) (*chimesdkvoice.ListPhoneNumberOrdersOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListPhoneNumberOrders")
	}

	var r0 *chimesdkvoice.ListPhoneNumberOrdersOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *chimesdkvoice.ListPhoneNumberOrdersInput, ...func(*chimesdkvoice.Options)) (*chimesdkvoice.ListPhoneNumberOrdersOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *chimesdkvoice.ListPhoneNumberOrdersInput, ...func(*chimesdkvoice.Options)) *chimesdkvoice.ListPhoneNumberOrdersOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*chimesdkvoice.ListPhoneNumberOrdersOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *chimesdkvoice.ListPhoneNumberOrdersInput, ...func(*chimesdkvoice.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListPhoneNumbers provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListPhoneNumbers(ctx context.Context, params *chimesdkvoice.ListPhoneNumbersInput, optFns ...func(*chimesdkvoice.Options)) (*chimesdkvoice.ListPhoneNumbersOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListPhoneNumbers")
	}

	var r0 *chimesdkvoice.ListPhoneNumbersOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *chimesdkvoice.ListPhoneNumbersInput, ...func(*chimesdkvoice.Options)) (*chimesdkvoice.ListPhoneNumbersOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *chimesdkvoice.ListPhoneNumbersInput, ...func(*chimesdkvoice.Options)) *chimesdkvoice.ListPhoneNumbersOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*chimesdkvoice.ListPhoneNumbersOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *chimesdkvoice.ListPhoneNumbersInput, ...func(*chimesdkvoice.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListProxySessions provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListProxySessions(ctx context.Context, params *chimesdkvoice.ListProxySessionsInput, optFns ...func(*chimesdkvoice.Options)) (*chimesdkvoice.ListProxySessionsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListProxySessions")
	}

	var r0 *chimesdkvoice.ListProxySessionsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *chimesdkvoice.ListProxySessionsInput, ...func(*chimesdkvoice.Options)) (*chimesdkvoice.ListProxySessionsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *chimesdkvoice.ListProxySessionsInput, ...func(*chimesdkvoice.Options)) *chimesdkvoice.ListProxySessionsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*chimesdkvoice.ListProxySessionsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *chimesdkvoice.ListProxySessionsInput, ...func(*chimesdkvoice.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListSipMediaApplications provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListSipMediaApplications(ctx context.Context, params *chimesdkvoice.ListSipMediaApplicationsInput, optFns ...func(*chimesdkvoice.Options)) (*chimesdkvoice.ListSipMediaApplicationsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListSipMediaApplications")
	}

	var r0 *chimesdkvoice.ListSipMediaApplicationsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *chimesdkvoice.ListSipMediaApplicationsInput, ...func(*chimesdkvoice.Options)) (*chimesdkvoice.ListSipMediaApplicationsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *chimesdkvoice.ListSipMediaApplicationsInput, ...func(*chimesdkvoice.Options)) *chimesdkvoice.ListSipMediaApplicationsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*chimesdkvoice.ListSipMediaApplicationsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *chimesdkvoice.ListSipMediaApplicationsInput, ...func(*chimesdkvoice.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListSipRules provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListSipRules(ctx context.Context, params *chimesdkvoice.ListSipRulesInput, optFns ...func(*chimesdkvoice.Options)) (*chimesdkvoice.ListSipRulesOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListSipRules")
	}

	var r0 *chimesdkvoice.ListSipRulesOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *chimesdkvoice.ListSipRulesInput, ...func(*chimesdkvoice.Options)) (*chimesdkvoice.ListSipRulesOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *chimesdkvoice.ListSipRulesInput, ...func(*chimesdkvoice.Options)) *chimesdkvoice.ListSipRulesOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*chimesdkvoice.ListSipRulesOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *chimesdkvoice.ListSipRulesInput, ...func(*chimesdkvoice.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListSupportedPhoneNumberCountries provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListSupportedPhoneNumberCountries(ctx context.Context, params *chimesdkvoice.ListSupportedPhoneNumberCountriesInput, optFns ...func(*chimesdkvoice.Options)) (*chimesdkvoice.ListSupportedPhoneNumberCountriesOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListSupportedPhoneNumberCountries")
	}

	var r0 *chimesdkvoice.ListSupportedPhoneNumberCountriesOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *chimesdkvoice.ListSupportedPhoneNumberCountriesInput, ...func(*chimesdkvoice.Options)) (*chimesdkvoice.ListSupportedPhoneNumberCountriesOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *chimesdkvoice.ListSupportedPhoneNumberCountriesInput, ...func(*chimesdkvoice.Options)) *chimesdkvoice.ListSupportedPhoneNumberCountriesOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*chimesdkvoice.ListSupportedPhoneNumberCountriesOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *chimesdkvoice.ListSupportedPhoneNumberCountriesInput, ...func(*chimesdkvoice.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListTagsForResource provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListTagsForResource(ctx context.Context, params *chimesdkvoice.ListTagsForResourceInput, optFns ...func(*chimesdkvoice.Options)) (*chimesdkvoice.ListTagsForResourceOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListTagsForResource")
	}

	var r0 *chimesdkvoice.ListTagsForResourceOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *chimesdkvoice.ListTagsForResourceInput, ...func(*chimesdkvoice.Options)) (*chimesdkvoice.ListTagsForResourceOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *chimesdkvoice.ListTagsForResourceInput, ...func(*chimesdkvoice.Options)) *chimesdkvoice.ListTagsForResourceOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*chimesdkvoice.ListTagsForResourceOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *chimesdkvoice.ListTagsForResourceInput, ...func(*chimesdkvoice.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListVoiceConnectorGroups provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListVoiceConnectorGroups(ctx context.Context, params *chimesdkvoice.ListVoiceConnectorGroupsInput, optFns ...func(*chimesdkvoice.Options)) (*chimesdkvoice.ListVoiceConnectorGroupsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListVoiceConnectorGroups")
	}

	var r0 *chimesdkvoice.ListVoiceConnectorGroupsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *chimesdkvoice.ListVoiceConnectorGroupsInput, ...func(*chimesdkvoice.Options)) (*chimesdkvoice.ListVoiceConnectorGroupsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *chimesdkvoice.ListVoiceConnectorGroupsInput, ...func(*chimesdkvoice.Options)) *chimesdkvoice.ListVoiceConnectorGroupsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*chimesdkvoice.ListVoiceConnectorGroupsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *chimesdkvoice.ListVoiceConnectorGroupsInput, ...func(*chimesdkvoice.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListVoiceConnectorTerminationCredentials provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListVoiceConnectorTerminationCredentials(ctx context.Context, params *chimesdkvoice.ListVoiceConnectorTerminationCredentialsInput, optFns ...func(*chimesdkvoice.Options)) (*chimesdkvoice.ListVoiceConnectorTerminationCredentialsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListVoiceConnectorTerminationCredentials")
	}

	var r0 *chimesdkvoice.ListVoiceConnectorTerminationCredentialsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *chimesdkvoice.ListVoiceConnectorTerminationCredentialsInput, ...func(*chimesdkvoice.Options)) (*chimesdkvoice.ListVoiceConnectorTerminationCredentialsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *chimesdkvoice.ListVoiceConnectorTerminationCredentialsInput, ...func(*chimesdkvoice.Options)) *chimesdkvoice.ListVoiceConnectorTerminationCredentialsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*chimesdkvoice.ListVoiceConnectorTerminationCredentialsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *chimesdkvoice.ListVoiceConnectorTerminationCredentialsInput, ...func(*chimesdkvoice.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListVoiceConnectors provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListVoiceConnectors(ctx context.Context, params *chimesdkvoice.ListVoiceConnectorsInput, optFns ...func(*chimesdkvoice.Options)) (*chimesdkvoice.ListVoiceConnectorsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListVoiceConnectors")
	}

	var r0 *chimesdkvoice.ListVoiceConnectorsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *chimesdkvoice.ListVoiceConnectorsInput, ...func(*chimesdkvoice.Options)) (*chimesdkvoice.ListVoiceConnectorsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *chimesdkvoice.ListVoiceConnectorsInput, ...func(*chimesdkvoice.Options)) *chimesdkvoice.ListVoiceConnectorsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*chimesdkvoice.ListVoiceConnectorsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *chimesdkvoice.ListVoiceConnectorsInput, ...func(*chimesdkvoice.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListVoiceProfileDomains provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListVoiceProfileDomains(ctx context.Context, params *chimesdkvoice.ListVoiceProfileDomainsInput, optFns ...func(*chimesdkvoice.Options)) (*chimesdkvoice.ListVoiceProfileDomainsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListVoiceProfileDomains")
	}

	var r0 *chimesdkvoice.ListVoiceProfileDomainsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *chimesdkvoice.ListVoiceProfileDomainsInput, ...func(*chimesdkvoice.Options)) (*chimesdkvoice.ListVoiceProfileDomainsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *chimesdkvoice.ListVoiceProfileDomainsInput, ...func(*chimesdkvoice.Options)) *chimesdkvoice.ListVoiceProfileDomainsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*chimesdkvoice.ListVoiceProfileDomainsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *chimesdkvoice.ListVoiceProfileDomainsInput, ...func(*chimesdkvoice.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListVoiceProfiles provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListVoiceProfiles(ctx context.Context, params *chimesdkvoice.ListVoiceProfilesInput, optFns ...func(*chimesdkvoice.Options)) (*chimesdkvoice.ListVoiceProfilesOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListVoiceProfiles")
	}

	var r0 *chimesdkvoice.ListVoiceProfilesOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *chimesdkvoice.ListVoiceProfilesInput, ...func(*chimesdkvoice.Options)) (*chimesdkvoice.ListVoiceProfilesOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *chimesdkvoice.ListVoiceProfilesInput, ...func(*chimesdkvoice.Options)) *chimesdkvoice.ListVoiceProfilesOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*chimesdkvoice.ListVoiceProfilesOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *chimesdkvoice.ListVoiceProfilesInput, ...func(*chimesdkvoice.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Options provides a mock function with given fields:
func (_m *IClient) Options() chimesdkvoice.Options {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Options")
	}

	var r0 chimesdkvoice.Options
	if rf, ok := ret.Get(0).(func() chimesdkvoice.Options); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(chimesdkvoice.Options)
	}

	return r0
}

// PutSipMediaApplicationAlexaSkillConfiguration provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) PutSipMediaApplicationAlexaSkillConfiguration(ctx context.Context, params *chimesdkvoice.PutSipMediaApplicationAlexaSkillConfigurationInput, optFns ...func(*chimesdkvoice.Options)) (*chimesdkvoice.PutSipMediaApplicationAlexaSkillConfigurationOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for PutSipMediaApplicationAlexaSkillConfiguration")
	}

	var r0 *chimesdkvoice.PutSipMediaApplicationAlexaSkillConfigurationOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *chimesdkvoice.PutSipMediaApplicationAlexaSkillConfigurationInput, ...func(*chimesdkvoice.Options)) (*chimesdkvoice.PutSipMediaApplicationAlexaSkillConfigurationOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *chimesdkvoice.PutSipMediaApplicationAlexaSkillConfigurationInput, ...func(*chimesdkvoice.Options)) *chimesdkvoice.PutSipMediaApplicationAlexaSkillConfigurationOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*chimesdkvoice.PutSipMediaApplicationAlexaSkillConfigurationOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *chimesdkvoice.PutSipMediaApplicationAlexaSkillConfigurationInput, ...func(*chimesdkvoice.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PutSipMediaApplicationLoggingConfiguration provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) PutSipMediaApplicationLoggingConfiguration(ctx context.Context, params *chimesdkvoice.PutSipMediaApplicationLoggingConfigurationInput, optFns ...func(*chimesdkvoice.Options)) (*chimesdkvoice.PutSipMediaApplicationLoggingConfigurationOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for PutSipMediaApplicationLoggingConfiguration")
	}

	var r0 *chimesdkvoice.PutSipMediaApplicationLoggingConfigurationOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *chimesdkvoice.PutSipMediaApplicationLoggingConfigurationInput, ...func(*chimesdkvoice.Options)) (*chimesdkvoice.PutSipMediaApplicationLoggingConfigurationOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *chimesdkvoice.PutSipMediaApplicationLoggingConfigurationInput, ...func(*chimesdkvoice.Options)) *chimesdkvoice.PutSipMediaApplicationLoggingConfigurationOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*chimesdkvoice.PutSipMediaApplicationLoggingConfigurationOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *chimesdkvoice.PutSipMediaApplicationLoggingConfigurationInput, ...func(*chimesdkvoice.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PutVoiceConnectorEmergencyCallingConfiguration provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) PutVoiceConnectorEmergencyCallingConfiguration(ctx context.Context, params *chimesdkvoice.PutVoiceConnectorEmergencyCallingConfigurationInput, optFns ...func(*chimesdkvoice.Options)) (*chimesdkvoice.PutVoiceConnectorEmergencyCallingConfigurationOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for PutVoiceConnectorEmergencyCallingConfiguration")
	}

	var r0 *chimesdkvoice.PutVoiceConnectorEmergencyCallingConfigurationOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *chimesdkvoice.PutVoiceConnectorEmergencyCallingConfigurationInput, ...func(*chimesdkvoice.Options)) (*chimesdkvoice.PutVoiceConnectorEmergencyCallingConfigurationOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *chimesdkvoice.PutVoiceConnectorEmergencyCallingConfigurationInput, ...func(*chimesdkvoice.Options)) *chimesdkvoice.PutVoiceConnectorEmergencyCallingConfigurationOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*chimesdkvoice.PutVoiceConnectorEmergencyCallingConfigurationOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *chimesdkvoice.PutVoiceConnectorEmergencyCallingConfigurationInput, ...func(*chimesdkvoice.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PutVoiceConnectorLoggingConfiguration provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) PutVoiceConnectorLoggingConfiguration(ctx context.Context, params *chimesdkvoice.PutVoiceConnectorLoggingConfigurationInput, optFns ...func(*chimesdkvoice.Options)) (*chimesdkvoice.PutVoiceConnectorLoggingConfigurationOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for PutVoiceConnectorLoggingConfiguration")
	}

	var r0 *chimesdkvoice.PutVoiceConnectorLoggingConfigurationOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *chimesdkvoice.PutVoiceConnectorLoggingConfigurationInput, ...func(*chimesdkvoice.Options)) (*chimesdkvoice.PutVoiceConnectorLoggingConfigurationOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *chimesdkvoice.PutVoiceConnectorLoggingConfigurationInput, ...func(*chimesdkvoice.Options)) *chimesdkvoice.PutVoiceConnectorLoggingConfigurationOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*chimesdkvoice.PutVoiceConnectorLoggingConfigurationOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *chimesdkvoice.PutVoiceConnectorLoggingConfigurationInput, ...func(*chimesdkvoice.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PutVoiceConnectorOrigination provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) PutVoiceConnectorOrigination(ctx context.Context, params *chimesdkvoice.PutVoiceConnectorOriginationInput, optFns ...func(*chimesdkvoice.Options)) (*chimesdkvoice.PutVoiceConnectorOriginationOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for PutVoiceConnectorOrigination")
	}

	var r0 *chimesdkvoice.PutVoiceConnectorOriginationOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *chimesdkvoice.PutVoiceConnectorOriginationInput, ...func(*chimesdkvoice.Options)) (*chimesdkvoice.PutVoiceConnectorOriginationOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *chimesdkvoice.PutVoiceConnectorOriginationInput, ...func(*chimesdkvoice.Options)) *chimesdkvoice.PutVoiceConnectorOriginationOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*chimesdkvoice.PutVoiceConnectorOriginationOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *chimesdkvoice.PutVoiceConnectorOriginationInput, ...func(*chimesdkvoice.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PutVoiceConnectorProxy provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) PutVoiceConnectorProxy(ctx context.Context, params *chimesdkvoice.PutVoiceConnectorProxyInput, optFns ...func(*chimesdkvoice.Options)) (*chimesdkvoice.PutVoiceConnectorProxyOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for PutVoiceConnectorProxy")
	}

	var r0 *chimesdkvoice.PutVoiceConnectorProxyOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *chimesdkvoice.PutVoiceConnectorProxyInput, ...func(*chimesdkvoice.Options)) (*chimesdkvoice.PutVoiceConnectorProxyOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *chimesdkvoice.PutVoiceConnectorProxyInput, ...func(*chimesdkvoice.Options)) *chimesdkvoice.PutVoiceConnectorProxyOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*chimesdkvoice.PutVoiceConnectorProxyOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *chimesdkvoice.PutVoiceConnectorProxyInput, ...func(*chimesdkvoice.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PutVoiceConnectorStreamingConfiguration provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) PutVoiceConnectorStreamingConfiguration(ctx context.Context, params *chimesdkvoice.PutVoiceConnectorStreamingConfigurationInput, optFns ...func(*chimesdkvoice.Options)) (*chimesdkvoice.PutVoiceConnectorStreamingConfigurationOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for PutVoiceConnectorStreamingConfiguration")
	}

	var r0 *chimesdkvoice.PutVoiceConnectorStreamingConfigurationOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *chimesdkvoice.PutVoiceConnectorStreamingConfigurationInput, ...func(*chimesdkvoice.Options)) (*chimesdkvoice.PutVoiceConnectorStreamingConfigurationOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *chimesdkvoice.PutVoiceConnectorStreamingConfigurationInput, ...func(*chimesdkvoice.Options)) *chimesdkvoice.PutVoiceConnectorStreamingConfigurationOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*chimesdkvoice.PutVoiceConnectorStreamingConfigurationOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *chimesdkvoice.PutVoiceConnectorStreamingConfigurationInput, ...func(*chimesdkvoice.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PutVoiceConnectorTermination provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) PutVoiceConnectorTermination(ctx context.Context, params *chimesdkvoice.PutVoiceConnectorTerminationInput, optFns ...func(*chimesdkvoice.Options)) (*chimesdkvoice.PutVoiceConnectorTerminationOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for PutVoiceConnectorTermination")
	}

	var r0 *chimesdkvoice.PutVoiceConnectorTerminationOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *chimesdkvoice.PutVoiceConnectorTerminationInput, ...func(*chimesdkvoice.Options)) (*chimesdkvoice.PutVoiceConnectorTerminationOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *chimesdkvoice.PutVoiceConnectorTerminationInput, ...func(*chimesdkvoice.Options)) *chimesdkvoice.PutVoiceConnectorTerminationOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*chimesdkvoice.PutVoiceConnectorTerminationOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *chimesdkvoice.PutVoiceConnectorTerminationInput, ...func(*chimesdkvoice.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PutVoiceConnectorTerminationCredentials provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) PutVoiceConnectorTerminationCredentials(ctx context.Context, params *chimesdkvoice.PutVoiceConnectorTerminationCredentialsInput, optFns ...func(*chimesdkvoice.Options)) (*chimesdkvoice.PutVoiceConnectorTerminationCredentialsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for PutVoiceConnectorTerminationCredentials")
	}

	var r0 *chimesdkvoice.PutVoiceConnectorTerminationCredentialsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *chimesdkvoice.PutVoiceConnectorTerminationCredentialsInput, ...func(*chimesdkvoice.Options)) (*chimesdkvoice.PutVoiceConnectorTerminationCredentialsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *chimesdkvoice.PutVoiceConnectorTerminationCredentialsInput, ...func(*chimesdkvoice.Options)) *chimesdkvoice.PutVoiceConnectorTerminationCredentialsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*chimesdkvoice.PutVoiceConnectorTerminationCredentialsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *chimesdkvoice.PutVoiceConnectorTerminationCredentialsInput, ...func(*chimesdkvoice.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RestorePhoneNumber provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) RestorePhoneNumber(ctx context.Context, params *chimesdkvoice.RestorePhoneNumberInput, optFns ...func(*chimesdkvoice.Options)) (*chimesdkvoice.RestorePhoneNumberOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for RestorePhoneNumber")
	}

	var r0 *chimesdkvoice.RestorePhoneNumberOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *chimesdkvoice.RestorePhoneNumberInput, ...func(*chimesdkvoice.Options)) (*chimesdkvoice.RestorePhoneNumberOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *chimesdkvoice.RestorePhoneNumberInput, ...func(*chimesdkvoice.Options)) *chimesdkvoice.RestorePhoneNumberOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*chimesdkvoice.RestorePhoneNumberOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *chimesdkvoice.RestorePhoneNumberInput, ...func(*chimesdkvoice.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SearchAvailablePhoneNumbers provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) SearchAvailablePhoneNumbers(ctx context.Context, params *chimesdkvoice.SearchAvailablePhoneNumbersInput, optFns ...func(*chimesdkvoice.Options)) (*chimesdkvoice.SearchAvailablePhoneNumbersOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for SearchAvailablePhoneNumbers")
	}

	var r0 *chimesdkvoice.SearchAvailablePhoneNumbersOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *chimesdkvoice.SearchAvailablePhoneNumbersInput, ...func(*chimesdkvoice.Options)) (*chimesdkvoice.SearchAvailablePhoneNumbersOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *chimesdkvoice.SearchAvailablePhoneNumbersInput, ...func(*chimesdkvoice.Options)) *chimesdkvoice.SearchAvailablePhoneNumbersOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*chimesdkvoice.SearchAvailablePhoneNumbersOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *chimesdkvoice.SearchAvailablePhoneNumbersInput, ...func(*chimesdkvoice.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// StartSpeakerSearchTask provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) StartSpeakerSearchTask(ctx context.Context, params *chimesdkvoice.StartSpeakerSearchTaskInput, optFns ...func(*chimesdkvoice.Options)) (*chimesdkvoice.StartSpeakerSearchTaskOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for StartSpeakerSearchTask")
	}

	var r0 *chimesdkvoice.StartSpeakerSearchTaskOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *chimesdkvoice.StartSpeakerSearchTaskInput, ...func(*chimesdkvoice.Options)) (*chimesdkvoice.StartSpeakerSearchTaskOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *chimesdkvoice.StartSpeakerSearchTaskInput, ...func(*chimesdkvoice.Options)) *chimesdkvoice.StartSpeakerSearchTaskOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*chimesdkvoice.StartSpeakerSearchTaskOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *chimesdkvoice.StartSpeakerSearchTaskInput, ...func(*chimesdkvoice.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// StartVoiceToneAnalysisTask provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) StartVoiceToneAnalysisTask(ctx context.Context, params *chimesdkvoice.StartVoiceToneAnalysisTaskInput, optFns ...func(*chimesdkvoice.Options)) (*chimesdkvoice.StartVoiceToneAnalysisTaskOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for StartVoiceToneAnalysisTask")
	}

	var r0 *chimesdkvoice.StartVoiceToneAnalysisTaskOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *chimesdkvoice.StartVoiceToneAnalysisTaskInput, ...func(*chimesdkvoice.Options)) (*chimesdkvoice.StartVoiceToneAnalysisTaskOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *chimesdkvoice.StartVoiceToneAnalysisTaskInput, ...func(*chimesdkvoice.Options)) *chimesdkvoice.StartVoiceToneAnalysisTaskOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*chimesdkvoice.StartVoiceToneAnalysisTaskOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *chimesdkvoice.StartVoiceToneAnalysisTaskInput, ...func(*chimesdkvoice.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// StopSpeakerSearchTask provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) StopSpeakerSearchTask(ctx context.Context, params *chimesdkvoice.StopSpeakerSearchTaskInput, optFns ...func(*chimesdkvoice.Options)) (*chimesdkvoice.StopSpeakerSearchTaskOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for StopSpeakerSearchTask")
	}

	var r0 *chimesdkvoice.StopSpeakerSearchTaskOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *chimesdkvoice.StopSpeakerSearchTaskInput, ...func(*chimesdkvoice.Options)) (*chimesdkvoice.StopSpeakerSearchTaskOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *chimesdkvoice.StopSpeakerSearchTaskInput, ...func(*chimesdkvoice.Options)) *chimesdkvoice.StopSpeakerSearchTaskOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*chimesdkvoice.StopSpeakerSearchTaskOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *chimesdkvoice.StopSpeakerSearchTaskInput, ...func(*chimesdkvoice.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// StopVoiceToneAnalysisTask provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) StopVoiceToneAnalysisTask(ctx context.Context, params *chimesdkvoice.StopVoiceToneAnalysisTaskInput, optFns ...func(*chimesdkvoice.Options)) (*chimesdkvoice.StopVoiceToneAnalysisTaskOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for StopVoiceToneAnalysisTask")
	}

	var r0 *chimesdkvoice.StopVoiceToneAnalysisTaskOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *chimesdkvoice.StopVoiceToneAnalysisTaskInput, ...func(*chimesdkvoice.Options)) (*chimesdkvoice.StopVoiceToneAnalysisTaskOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *chimesdkvoice.StopVoiceToneAnalysisTaskInput, ...func(*chimesdkvoice.Options)) *chimesdkvoice.StopVoiceToneAnalysisTaskOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*chimesdkvoice.StopVoiceToneAnalysisTaskOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *chimesdkvoice.StopVoiceToneAnalysisTaskInput, ...func(*chimesdkvoice.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// TagResource provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) TagResource(ctx context.Context, params *chimesdkvoice.TagResourceInput, optFns ...func(*chimesdkvoice.Options)) (*chimesdkvoice.TagResourceOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for TagResource")
	}

	var r0 *chimesdkvoice.TagResourceOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *chimesdkvoice.TagResourceInput, ...func(*chimesdkvoice.Options)) (*chimesdkvoice.TagResourceOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *chimesdkvoice.TagResourceInput, ...func(*chimesdkvoice.Options)) *chimesdkvoice.TagResourceOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*chimesdkvoice.TagResourceOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *chimesdkvoice.TagResourceInput, ...func(*chimesdkvoice.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UntagResource provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UntagResource(ctx context.Context, params *chimesdkvoice.UntagResourceInput, optFns ...func(*chimesdkvoice.Options)) (*chimesdkvoice.UntagResourceOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UntagResource")
	}

	var r0 *chimesdkvoice.UntagResourceOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *chimesdkvoice.UntagResourceInput, ...func(*chimesdkvoice.Options)) (*chimesdkvoice.UntagResourceOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *chimesdkvoice.UntagResourceInput, ...func(*chimesdkvoice.Options)) *chimesdkvoice.UntagResourceOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*chimesdkvoice.UntagResourceOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *chimesdkvoice.UntagResourceInput, ...func(*chimesdkvoice.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateGlobalSettings provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UpdateGlobalSettings(ctx context.Context, params *chimesdkvoice.UpdateGlobalSettingsInput, optFns ...func(*chimesdkvoice.Options)) (*chimesdkvoice.UpdateGlobalSettingsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateGlobalSettings")
	}

	var r0 *chimesdkvoice.UpdateGlobalSettingsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *chimesdkvoice.UpdateGlobalSettingsInput, ...func(*chimesdkvoice.Options)) (*chimesdkvoice.UpdateGlobalSettingsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *chimesdkvoice.UpdateGlobalSettingsInput, ...func(*chimesdkvoice.Options)) *chimesdkvoice.UpdateGlobalSettingsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*chimesdkvoice.UpdateGlobalSettingsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *chimesdkvoice.UpdateGlobalSettingsInput, ...func(*chimesdkvoice.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdatePhoneNumber provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UpdatePhoneNumber(ctx context.Context, params *chimesdkvoice.UpdatePhoneNumberInput, optFns ...func(*chimesdkvoice.Options)) (*chimesdkvoice.UpdatePhoneNumberOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdatePhoneNumber")
	}

	var r0 *chimesdkvoice.UpdatePhoneNumberOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *chimesdkvoice.UpdatePhoneNumberInput, ...func(*chimesdkvoice.Options)) (*chimesdkvoice.UpdatePhoneNumberOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *chimesdkvoice.UpdatePhoneNumberInput, ...func(*chimesdkvoice.Options)) *chimesdkvoice.UpdatePhoneNumberOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*chimesdkvoice.UpdatePhoneNumberOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *chimesdkvoice.UpdatePhoneNumberInput, ...func(*chimesdkvoice.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdatePhoneNumberSettings provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UpdatePhoneNumberSettings(ctx context.Context, params *chimesdkvoice.UpdatePhoneNumberSettingsInput, optFns ...func(*chimesdkvoice.Options)) (*chimesdkvoice.UpdatePhoneNumberSettingsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdatePhoneNumberSettings")
	}

	var r0 *chimesdkvoice.UpdatePhoneNumberSettingsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *chimesdkvoice.UpdatePhoneNumberSettingsInput, ...func(*chimesdkvoice.Options)) (*chimesdkvoice.UpdatePhoneNumberSettingsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *chimesdkvoice.UpdatePhoneNumberSettingsInput, ...func(*chimesdkvoice.Options)) *chimesdkvoice.UpdatePhoneNumberSettingsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*chimesdkvoice.UpdatePhoneNumberSettingsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *chimesdkvoice.UpdatePhoneNumberSettingsInput, ...func(*chimesdkvoice.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateProxySession provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UpdateProxySession(ctx context.Context, params *chimesdkvoice.UpdateProxySessionInput, optFns ...func(*chimesdkvoice.Options)) (*chimesdkvoice.UpdateProxySessionOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateProxySession")
	}

	var r0 *chimesdkvoice.UpdateProxySessionOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *chimesdkvoice.UpdateProxySessionInput, ...func(*chimesdkvoice.Options)) (*chimesdkvoice.UpdateProxySessionOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *chimesdkvoice.UpdateProxySessionInput, ...func(*chimesdkvoice.Options)) *chimesdkvoice.UpdateProxySessionOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*chimesdkvoice.UpdateProxySessionOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *chimesdkvoice.UpdateProxySessionInput, ...func(*chimesdkvoice.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateSipMediaApplication provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UpdateSipMediaApplication(ctx context.Context, params *chimesdkvoice.UpdateSipMediaApplicationInput, optFns ...func(*chimesdkvoice.Options)) (*chimesdkvoice.UpdateSipMediaApplicationOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateSipMediaApplication")
	}

	var r0 *chimesdkvoice.UpdateSipMediaApplicationOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *chimesdkvoice.UpdateSipMediaApplicationInput, ...func(*chimesdkvoice.Options)) (*chimesdkvoice.UpdateSipMediaApplicationOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *chimesdkvoice.UpdateSipMediaApplicationInput, ...func(*chimesdkvoice.Options)) *chimesdkvoice.UpdateSipMediaApplicationOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*chimesdkvoice.UpdateSipMediaApplicationOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *chimesdkvoice.UpdateSipMediaApplicationInput, ...func(*chimesdkvoice.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateSipMediaApplicationCall provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UpdateSipMediaApplicationCall(ctx context.Context, params *chimesdkvoice.UpdateSipMediaApplicationCallInput, optFns ...func(*chimesdkvoice.Options)) (*chimesdkvoice.UpdateSipMediaApplicationCallOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateSipMediaApplicationCall")
	}

	var r0 *chimesdkvoice.UpdateSipMediaApplicationCallOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *chimesdkvoice.UpdateSipMediaApplicationCallInput, ...func(*chimesdkvoice.Options)) (*chimesdkvoice.UpdateSipMediaApplicationCallOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *chimesdkvoice.UpdateSipMediaApplicationCallInput, ...func(*chimesdkvoice.Options)) *chimesdkvoice.UpdateSipMediaApplicationCallOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*chimesdkvoice.UpdateSipMediaApplicationCallOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *chimesdkvoice.UpdateSipMediaApplicationCallInput, ...func(*chimesdkvoice.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateSipRule provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UpdateSipRule(ctx context.Context, params *chimesdkvoice.UpdateSipRuleInput, optFns ...func(*chimesdkvoice.Options)) (*chimesdkvoice.UpdateSipRuleOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateSipRule")
	}

	var r0 *chimesdkvoice.UpdateSipRuleOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *chimesdkvoice.UpdateSipRuleInput, ...func(*chimesdkvoice.Options)) (*chimesdkvoice.UpdateSipRuleOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *chimesdkvoice.UpdateSipRuleInput, ...func(*chimesdkvoice.Options)) *chimesdkvoice.UpdateSipRuleOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*chimesdkvoice.UpdateSipRuleOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *chimesdkvoice.UpdateSipRuleInput, ...func(*chimesdkvoice.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateVoiceConnector provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UpdateVoiceConnector(ctx context.Context, params *chimesdkvoice.UpdateVoiceConnectorInput, optFns ...func(*chimesdkvoice.Options)) (*chimesdkvoice.UpdateVoiceConnectorOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateVoiceConnector")
	}

	var r0 *chimesdkvoice.UpdateVoiceConnectorOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *chimesdkvoice.UpdateVoiceConnectorInput, ...func(*chimesdkvoice.Options)) (*chimesdkvoice.UpdateVoiceConnectorOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *chimesdkvoice.UpdateVoiceConnectorInput, ...func(*chimesdkvoice.Options)) *chimesdkvoice.UpdateVoiceConnectorOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*chimesdkvoice.UpdateVoiceConnectorOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *chimesdkvoice.UpdateVoiceConnectorInput, ...func(*chimesdkvoice.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateVoiceConnectorGroup provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UpdateVoiceConnectorGroup(ctx context.Context, params *chimesdkvoice.UpdateVoiceConnectorGroupInput, optFns ...func(*chimesdkvoice.Options)) (*chimesdkvoice.UpdateVoiceConnectorGroupOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateVoiceConnectorGroup")
	}

	var r0 *chimesdkvoice.UpdateVoiceConnectorGroupOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *chimesdkvoice.UpdateVoiceConnectorGroupInput, ...func(*chimesdkvoice.Options)) (*chimesdkvoice.UpdateVoiceConnectorGroupOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *chimesdkvoice.UpdateVoiceConnectorGroupInput, ...func(*chimesdkvoice.Options)) *chimesdkvoice.UpdateVoiceConnectorGroupOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*chimesdkvoice.UpdateVoiceConnectorGroupOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *chimesdkvoice.UpdateVoiceConnectorGroupInput, ...func(*chimesdkvoice.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateVoiceProfile provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UpdateVoiceProfile(ctx context.Context, params *chimesdkvoice.UpdateVoiceProfileInput, optFns ...func(*chimesdkvoice.Options)) (*chimesdkvoice.UpdateVoiceProfileOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateVoiceProfile")
	}

	var r0 *chimesdkvoice.UpdateVoiceProfileOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *chimesdkvoice.UpdateVoiceProfileInput, ...func(*chimesdkvoice.Options)) (*chimesdkvoice.UpdateVoiceProfileOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *chimesdkvoice.UpdateVoiceProfileInput, ...func(*chimesdkvoice.Options)) *chimesdkvoice.UpdateVoiceProfileOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*chimesdkvoice.UpdateVoiceProfileOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *chimesdkvoice.UpdateVoiceProfileInput, ...func(*chimesdkvoice.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateVoiceProfileDomain provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UpdateVoiceProfileDomain(ctx context.Context, params *chimesdkvoice.UpdateVoiceProfileDomainInput, optFns ...func(*chimesdkvoice.Options)) (*chimesdkvoice.UpdateVoiceProfileDomainOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateVoiceProfileDomain")
	}

	var r0 *chimesdkvoice.UpdateVoiceProfileDomainOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *chimesdkvoice.UpdateVoiceProfileDomainInput, ...func(*chimesdkvoice.Options)) (*chimesdkvoice.UpdateVoiceProfileDomainOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *chimesdkvoice.UpdateVoiceProfileDomainInput, ...func(*chimesdkvoice.Options)) *chimesdkvoice.UpdateVoiceProfileDomainOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*chimesdkvoice.UpdateVoiceProfileDomainOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *chimesdkvoice.UpdateVoiceProfileDomainInput, ...func(*chimesdkvoice.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ValidateE911Address provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ValidateE911Address(ctx context.Context, params *chimesdkvoice.ValidateE911AddressInput, optFns ...func(*chimesdkvoice.Options)) (*chimesdkvoice.ValidateE911AddressOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ValidateE911Address")
	}

	var r0 *chimesdkvoice.ValidateE911AddressOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *chimesdkvoice.ValidateE911AddressInput, ...func(*chimesdkvoice.Options)) (*chimesdkvoice.ValidateE911AddressOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *chimesdkvoice.ValidateE911AddressInput, ...func(*chimesdkvoice.Options)) *chimesdkvoice.ValidateE911AddressOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*chimesdkvoice.ValidateE911AddressOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *chimesdkvoice.ValidateE911AddressInput, ...func(*chimesdkvoice.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewIClient creates a new instance of IClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewIClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *IClient {
	mock := &IClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
