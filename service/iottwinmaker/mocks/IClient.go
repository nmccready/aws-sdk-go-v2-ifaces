// Code generated by mockery v2.39.2. DO NOT EDIT.

package mocks

import (
	context "context"

	iottwinmaker "github.com/aws/aws-sdk-go-v2/service/iottwinmaker"

	mock "github.com/stretchr/testify/mock"
)

// IClient is an autogenerated mock type for the IClient type
type IClient struct {
	mock.Mock
}

// BatchPutPropertyValues provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) BatchPutPropertyValues(ctx context.Context, params *iottwinmaker.BatchPutPropertyValuesInput, optFns ...func(*iottwinmaker.Options)) (*iottwinmaker.BatchPutPropertyValuesOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for BatchPutPropertyValues")
	}

	var r0 *iottwinmaker.BatchPutPropertyValuesOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *iottwinmaker.BatchPutPropertyValuesInput, ...func(*iottwinmaker.Options)) (*iottwinmaker.BatchPutPropertyValuesOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *iottwinmaker.BatchPutPropertyValuesInput, ...func(*iottwinmaker.Options)) *iottwinmaker.BatchPutPropertyValuesOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*iottwinmaker.BatchPutPropertyValuesOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *iottwinmaker.BatchPutPropertyValuesInput, ...func(*iottwinmaker.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CancelMetadataTransferJob provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CancelMetadataTransferJob(ctx context.Context, params *iottwinmaker.CancelMetadataTransferJobInput, optFns ...func(*iottwinmaker.Options)) (*iottwinmaker.CancelMetadataTransferJobOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CancelMetadataTransferJob")
	}

	var r0 *iottwinmaker.CancelMetadataTransferJobOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *iottwinmaker.CancelMetadataTransferJobInput, ...func(*iottwinmaker.Options)) (*iottwinmaker.CancelMetadataTransferJobOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *iottwinmaker.CancelMetadataTransferJobInput, ...func(*iottwinmaker.Options)) *iottwinmaker.CancelMetadataTransferJobOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*iottwinmaker.CancelMetadataTransferJobOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *iottwinmaker.CancelMetadataTransferJobInput, ...func(*iottwinmaker.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateComponentType provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CreateComponentType(ctx context.Context, params *iottwinmaker.CreateComponentTypeInput, optFns ...func(*iottwinmaker.Options)) (*iottwinmaker.CreateComponentTypeOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateComponentType")
	}

	var r0 *iottwinmaker.CreateComponentTypeOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *iottwinmaker.CreateComponentTypeInput, ...func(*iottwinmaker.Options)) (*iottwinmaker.CreateComponentTypeOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *iottwinmaker.CreateComponentTypeInput, ...func(*iottwinmaker.Options)) *iottwinmaker.CreateComponentTypeOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*iottwinmaker.CreateComponentTypeOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *iottwinmaker.CreateComponentTypeInput, ...func(*iottwinmaker.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateEntity provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CreateEntity(ctx context.Context, params *iottwinmaker.CreateEntityInput, optFns ...func(*iottwinmaker.Options)) (*iottwinmaker.CreateEntityOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateEntity")
	}

	var r0 *iottwinmaker.CreateEntityOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *iottwinmaker.CreateEntityInput, ...func(*iottwinmaker.Options)) (*iottwinmaker.CreateEntityOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *iottwinmaker.CreateEntityInput, ...func(*iottwinmaker.Options)) *iottwinmaker.CreateEntityOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*iottwinmaker.CreateEntityOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *iottwinmaker.CreateEntityInput, ...func(*iottwinmaker.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateMetadataTransferJob provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CreateMetadataTransferJob(ctx context.Context, params *iottwinmaker.CreateMetadataTransferJobInput, optFns ...func(*iottwinmaker.Options)) (*iottwinmaker.CreateMetadataTransferJobOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateMetadataTransferJob")
	}

	var r0 *iottwinmaker.CreateMetadataTransferJobOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *iottwinmaker.CreateMetadataTransferJobInput, ...func(*iottwinmaker.Options)) (*iottwinmaker.CreateMetadataTransferJobOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *iottwinmaker.CreateMetadataTransferJobInput, ...func(*iottwinmaker.Options)) *iottwinmaker.CreateMetadataTransferJobOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*iottwinmaker.CreateMetadataTransferJobOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *iottwinmaker.CreateMetadataTransferJobInput, ...func(*iottwinmaker.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateScene provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CreateScene(ctx context.Context, params *iottwinmaker.CreateSceneInput, optFns ...func(*iottwinmaker.Options)) (*iottwinmaker.CreateSceneOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateScene")
	}

	var r0 *iottwinmaker.CreateSceneOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *iottwinmaker.CreateSceneInput, ...func(*iottwinmaker.Options)) (*iottwinmaker.CreateSceneOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *iottwinmaker.CreateSceneInput, ...func(*iottwinmaker.Options)) *iottwinmaker.CreateSceneOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*iottwinmaker.CreateSceneOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *iottwinmaker.CreateSceneInput, ...func(*iottwinmaker.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateSyncJob provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CreateSyncJob(ctx context.Context, params *iottwinmaker.CreateSyncJobInput, optFns ...func(*iottwinmaker.Options)) (*iottwinmaker.CreateSyncJobOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateSyncJob")
	}

	var r0 *iottwinmaker.CreateSyncJobOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *iottwinmaker.CreateSyncJobInput, ...func(*iottwinmaker.Options)) (*iottwinmaker.CreateSyncJobOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *iottwinmaker.CreateSyncJobInput, ...func(*iottwinmaker.Options)) *iottwinmaker.CreateSyncJobOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*iottwinmaker.CreateSyncJobOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *iottwinmaker.CreateSyncJobInput, ...func(*iottwinmaker.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateWorkspace provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CreateWorkspace(ctx context.Context, params *iottwinmaker.CreateWorkspaceInput, optFns ...func(*iottwinmaker.Options)) (*iottwinmaker.CreateWorkspaceOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateWorkspace")
	}

	var r0 *iottwinmaker.CreateWorkspaceOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *iottwinmaker.CreateWorkspaceInput, ...func(*iottwinmaker.Options)) (*iottwinmaker.CreateWorkspaceOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *iottwinmaker.CreateWorkspaceInput, ...func(*iottwinmaker.Options)) *iottwinmaker.CreateWorkspaceOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*iottwinmaker.CreateWorkspaceOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *iottwinmaker.CreateWorkspaceInput, ...func(*iottwinmaker.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteComponentType provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteComponentType(ctx context.Context, params *iottwinmaker.DeleteComponentTypeInput, optFns ...func(*iottwinmaker.Options)) (*iottwinmaker.DeleteComponentTypeOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteComponentType")
	}

	var r0 *iottwinmaker.DeleteComponentTypeOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *iottwinmaker.DeleteComponentTypeInput, ...func(*iottwinmaker.Options)) (*iottwinmaker.DeleteComponentTypeOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *iottwinmaker.DeleteComponentTypeInput, ...func(*iottwinmaker.Options)) *iottwinmaker.DeleteComponentTypeOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*iottwinmaker.DeleteComponentTypeOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *iottwinmaker.DeleteComponentTypeInput, ...func(*iottwinmaker.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteEntity provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteEntity(ctx context.Context, params *iottwinmaker.DeleteEntityInput, optFns ...func(*iottwinmaker.Options)) (*iottwinmaker.DeleteEntityOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteEntity")
	}

	var r0 *iottwinmaker.DeleteEntityOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *iottwinmaker.DeleteEntityInput, ...func(*iottwinmaker.Options)) (*iottwinmaker.DeleteEntityOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *iottwinmaker.DeleteEntityInput, ...func(*iottwinmaker.Options)) *iottwinmaker.DeleteEntityOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*iottwinmaker.DeleteEntityOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *iottwinmaker.DeleteEntityInput, ...func(*iottwinmaker.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteScene provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteScene(ctx context.Context, params *iottwinmaker.DeleteSceneInput, optFns ...func(*iottwinmaker.Options)) (*iottwinmaker.DeleteSceneOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteScene")
	}

	var r0 *iottwinmaker.DeleteSceneOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *iottwinmaker.DeleteSceneInput, ...func(*iottwinmaker.Options)) (*iottwinmaker.DeleteSceneOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *iottwinmaker.DeleteSceneInput, ...func(*iottwinmaker.Options)) *iottwinmaker.DeleteSceneOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*iottwinmaker.DeleteSceneOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *iottwinmaker.DeleteSceneInput, ...func(*iottwinmaker.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteSyncJob provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteSyncJob(ctx context.Context, params *iottwinmaker.DeleteSyncJobInput, optFns ...func(*iottwinmaker.Options)) (*iottwinmaker.DeleteSyncJobOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteSyncJob")
	}

	var r0 *iottwinmaker.DeleteSyncJobOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *iottwinmaker.DeleteSyncJobInput, ...func(*iottwinmaker.Options)) (*iottwinmaker.DeleteSyncJobOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *iottwinmaker.DeleteSyncJobInput, ...func(*iottwinmaker.Options)) *iottwinmaker.DeleteSyncJobOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*iottwinmaker.DeleteSyncJobOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *iottwinmaker.DeleteSyncJobInput, ...func(*iottwinmaker.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteWorkspace provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteWorkspace(ctx context.Context, params *iottwinmaker.DeleteWorkspaceInput, optFns ...func(*iottwinmaker.Options)) (*iottwinmaker.DeleteWorkspaceOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteWorkspace")
	}

	var r0 *iottwinmaker.DeleteWorkspaceOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *iottwinmaker.DeleteWorkspaceInput, ...func(*iottwinmaker.Options)) (*iottwinmaker.DeleteWorkspaceOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *iottwinmaker.DeleteWorkspaceInput, ...func(*iottwinmaker.Options)) *iottwinmaker.DeleteWorkspaceOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*iottwinmaker.DeleteWorkspaceOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *iottwinmaker.DeleteWorkspaceInput, ...func(*iottwinmaker.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ExecuteQuery provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ExecuteQuery(ctx context.Context, params *iottwinmaker.ExecuteQueryInput, optFns ...func(*iottwinmaker.Options)) (*iottwinmaker.ExecuteQueryOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ExecuteQuery")
	}

	var r0 *iottwinmaker.ExecuteQueryOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *iottwinmaker.ExecuteQueryInput, ...func(*iottwinmaker.Options)) (*iottwinmaker.ExecuteQueryOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *iottwinmaker.ExecuteQueryInput, ...func(*iottwinmaker.Options)) *iottwinmaker.ExecuteQueryOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*iottwinmaker.ExecuteQueryOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *iottwinmaker.ExecuteQueryInput, ...func(*iottwinmaker.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetComponentType provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetComponentType(ctx context.Context, params *iottwinmaker.GetComponentTypeInput, optFns ...func(*iottwinmaker.Options)) (*iottwinmaker.GetComponentTypeOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetComponentType")
	}

	var r0 *iottwinmaker.GetComponentTypeOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *iottwinmaker.GetComponentTypeInput, ...func(*iottwinmaker.Options)) (*iottwinmaker.GetComponentTypeOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *iottwinmaker.GetComponentTypeInput, ...func(*iottwinmaker.Options)) *iottwinmaker.GetComponentTypeOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*iottwinmaker.GetComponentTypeOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *iottwinmaker.GetComponentTypeInput, ...func(*iottwinmaker.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetEntity provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetEntity(ctx context.Context, params *iottwinmaker.GetEntityInput, optFns ...func(*iottwinmaker.Options)) (*iottwinmaker.GetEntityOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetEntity")
	}

	var r0 *iottwinmaker.GetEntityOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *iottwinmaker.GetEntityInput, ...func(*iottwinmaker.Options)) (*iottwinmaker.GetEntityOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *iottwinmaker.GetEntityInput, ...func(*iottwinmaker.Options)) *iottwinmaker.GetEntityOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*iottwinmaker.GetEntityOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *iottwinmaker.GetEntityInput, ...func(*iottwinmaker.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetMetadataTransferJob provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetMetadataTransferJob(ctx context.Context, params *iottwinmaker.GetMetadataTransferJobInput, optFns ...func(*iottwinmaker.Options)) (*iottwinmaker.GetMetadataTransferJobOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetMetadataTransferJob")
	}

	var r0 *iottwinmaker.GetMetadataTransferJobOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *iottwinmaker.GetMetadataTransferJobInput, ...func(*iottwinmaker.Options)) (*iottwinmaker.GetMetadataTransferJobOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *iottwinmaker.GetMetadataTransferJobInput, ...func(*iottwinmaker.Options)) *iottwinmaker.GetMetadataTransferJobOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*iottwinmaker.GetMetadataTransferJobOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *iottwinmaker.GetMetadataTransferJobInput, ...func(*iottwinmaker.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetPricingPlan provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetPricingPlan(ctx context.Context, params *iottwinmaker.GetPricingPlanInput, optFns ...func(*iottwinmaker.Options)) (*iottwinmaker.GetPricingPlanOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetPricingPlan")
	}

	var r0 *iottwinmaker.GetPricingPlanOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *iottwinmaker.GetPricingPlanInput, ...func(*iottwinmaker.Options)) (*iottwinmaker.GetPricingPlanOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *iottwinmaker.GetPricingPlanInput, ...func(*iottwinmaker.Options)) *iottwinmaker.GetPricingPlanOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*iottwinmaker.GetPricingPlanOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *iottwinmaker.GetPricingPlanInput, ...func(*iottwinmaker.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetPropertyValue provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetPropertyValue(ctx context.Context, params *iottwinmaker.GetPropertyValueInput, optFns ...func(*iottwinmaker.Options)) (*iottwinmaker.GetPropertyValueOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetPropertyValue")
	}

	var r0 *iottwinmaker.GetPropertyValueOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *iottwinmaker.GetPropertyValueInput, ...func(*iottwinmaker.Options)) (*iottwinmaker.GetPropertyValueOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *iottwinmaker.GetPropertyValueInput, ...func(*iottwinmaker.Options)) *iottwinmaker.GetPropertyValueOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*iottwinmaker.GetPropertyValueOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *iottwinmaker.GetPropertyValueInput, ...func(*iottwinmaker.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetPropertyValueHistory provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetPropertyValueHistory(ctx context.Context, params *iottwinmaker.GetPropertyValueHistoryInput, optFns ...func(*iottwinmaker.Options)) (*iottwinmaker.GetPropertyValueHistoryOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetPropertyValueHistory")
	}

	var r0 *iottwinmaker.GetPropertyValueHistoryOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *iottwinmaker.GetPropertyValueHistoryInput, ...func(*iottwinmaker.Options)) (*iottwinmaker.GetPropertyValueHistoryOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *iottwinmaker.GetPropertyValueHistoryInput, ...func(*iottwinmaker.Options)) *iottwinmaker.GetPropertyValueHistoryOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*iottwinmaker.GetPropertyValueHistoryOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *iottwinmaker.GetPropertyValueHistoryInput, ...func(*iottwinmaker.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetScene provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetScene(ctx context.Context, params *iottwinmaker.GetSceneInput, optFns ...func(*iottwinmaker.Options)) (*iottwinmaker.GetSceneOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetScene")
	}

	var r0 *iottwinmaker.GetSceneOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *iottwinmaker.GetSceneInput, ...func(*iottwinmaker.Options)) (*iottwinmaker.GetSceneOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *iottwinmaker.GetSceneInput, ...func(*iottwinmaker.Options)) *iottwinmaker.GetSceneOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*iottwinmaker.GetSceneOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *iottwinmaker.GetSceneInput, ...func(*iottwinmaker.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetSyncJob provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetSyncJob(ctx context.Context, params *iottwinmaker.GetSyncJobInput, optFns ...func(*iottwinmaker.Options)) (*iottwinmaker.GetSyncJobOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetSyncJob")
	}

	var r0 *iottwinmaker.GetSyncJobOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *iottwinmaker.GetSyncJobInput, ...func(*iottwinmaker.Options)) (*iottwinmaker.GetSyncJobOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *iottwinmaker.GetSyncJobInput, ...func(*iottwinmaker.Options)) *iottwinmaker.GetSyncJobOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*iottwinmaker.GetSyncJobOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *iottwinmaker.GetSyncJobInput, ...func(*iottwinmaker.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetWorkspace provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetWorkspace(ctx context.Context, params *iottwinmaker.GetWorkspaceInput, optFns ...func(*iottwinmaker.Options)) (*iottwinmaker.GetWorkspaceOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetWorkspace")
	}

	var r0 *iottwinmaker.GetWorkspaceOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *iottwinmaker.GetWorkspaceInput, ...func(*iottwinmaker.Options)) (*iottwinmaker.GetWorkspaceOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *iottwinmaker.GetWorkspaceInput, ...func(*iottwinmaker.Options)) *iottwinmaker.GetWorkspaceOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*iottwinmaker.GetWorkspaceOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *iottwinmaker.GetWorkspaceInput, ...func(*iottwinmaker.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListComponentTypes provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListComponentTypes(ctx context.Context, params *iottwinmaker.ListComponentTypesInput, optFns ...func(*iottwinmaker.Options)) (*iottwinmaker.ListComponentTypesOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListComponentTypes")
	}

	var r0 *iottwinmaker.ListComponentTypesOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *iottwinmaker.ListComponentTypesInput, ...func(*iottwinmaker.Options)) (*iottwinmaker.ListComponentTypesOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *iottwinmaker.ListComponentTypesInput, ...func(*iottwinmaker.Options)) *iottwinmaker.ListComponentTypesOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*iottwinmaker.ListComponentTypesOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *iottwinmaker.ListComponentTypesInput, ...func(*iottwinmaker.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListComponents provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListComponents(ctx context.Context, params *iottwinmaker.ListComponentsInput, optFns ...func(*iottwinmaker.Options)) (*iottwinmaker.ListComponentsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListComponents")
	}

	var r0 *iottwinmaker.ListComponentsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *iottwinmaker.ListComponentsInput, ...func(*iottwinmaker.Options)) (*iottwinmaker.ListComponentsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *iottwinmaker.ListComponentsInput, ...func(*iottwinmaker.Options)) *iottwinmaker.ListComponentsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*iottwinmaker.ListComponentsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *iottwinmaker.ListComponentsInput, ...func(*iottwinmaker.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListEntities provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListEntities(ctx context.Context, params *iottwinmaker.ListEntitiesInput, optFns ...func(*iottwinmaker.Options)) (*iottwinmaker.ListEntitiesOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListEntities")
	}

	var r0 *iottwinmaker.ListEntitiesOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *iottwinmaker.ListEntitiesInput, ...func(*iottwinmaker.Options)) (*iottwinmaker.ListEntitiesOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *iottwinmaker.ListEntitiesInput, ...func(*iottwinmaker.Options)) *iottwinmaker.ListEntitiesOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*iottwinmaker.ListEntitiesOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *iottwinmaker.ListEntitiesInput, ...func(*iottwinmaker.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListMetadataTransferJobs provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListMetadataTransferJobs(ctx context.Context, params *iottwinmaker.ListMetadataTransferJobsInput, optFns ...func(*iottwinmaker.Options)) (*iottwinmaker.ListMetadataTransferJobsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListMetadataTransferJobs")
	}

	var r0 *iottwinmaker.ListMetadataTransferJobsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *iottwinmaker.ListMetadataTransferJobsInput, ...func(*iottwinmaker.Options)) (*iottwinmaker.ListMetadataTransferJobsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *iottwinmaker.ListMetadataTransferJobsInput, ...func(*iottwinmaker.Options)) *iottwinmaker.ListMetadataTransferJobsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*iottwinmaker.ListMetadataTransferJobsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *iottwinmaker.ListMetadataTransferJobsInput, ...func(*iottwinmaker.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListProperties provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListProperties(ctx context.Context, params *iottwinmaker.ListPropertiesInput, optFns ...func(*iottwinmaker.Options)) (*iottwinmaker.ListPropertiesOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListProperties")
	}

	var r0 *iottwinmaker.ListPropertiesOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *iottwinmaker.ListPropertiesInput, ...func(*iottwinmaker.Options)) (*iottwinmaker.ListPropertiesOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *iottwinmaker.ListPropertiesInput, ...func(*iottwinmaker.Options)) *iottwinmaker.ListPropertiesOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*iottwinmaker.ListPropertiesOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *iottwinmaker.ListPropertiesInput, ...func(*iottwinmaker.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListScenes provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListScenes(ctx context.Context, params *iottwinmaker.ListScenesInput, optFns ...func(*iottwinmaker.Options)) (*iottwinmaker.ListScenesOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListScenes")
	}

	var r0 *iottwinmaker.ListScenesOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *iottwinmaker.ListScenesInput, ...func(*iottwinmaker.Options)) (*iottwinmaker.ListScenesOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *iottwinmaker.ListScenesInput, ...func(*iottwinmaker.Options)) *iottwinmaker.ListScenesOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*iottwinmaker.ListScenesOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *iottwinmaker.ListScenesInput, ...func(*iottwinmaker.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListSyncJobs provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListSyncJobs(ctx context.Context, params *iottwinmaker.ListSyncJobsInput, optFns ...func(*iottwinmaker.Options)) (*iottwinmaker.ListSyncJobsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListSyncJobs")
	}

	var r0 *iottwinmaker.ListSyncJobsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *iottwinmaker.ListSyncJobsInput, ...func(*iottwinmaker.Options)) (*iottwinmaker.ListSyncJobsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *iottwinmaker.ListSyncJobsInput, ...func(*iottwinmaker.Options)) *iottwinmaker.ListSyncJobsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*iottwinmaker.ListSyncJobsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *iottwinmaker.ListSyncJobsInput, ...func(*iottwinmaker.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListSyncResources provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListSyncResources(ctx context.Context, params *iottwinmaker.ListSyncResourcesInput, optFns ...func(*iottwinmaker.Options)) (*iottwinmaker.ListSyncResourcesOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListSyncResources")
	}

	var r0 *iottwinmaker.ListSyncResourcesOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *iottwinmaker.ListSyncResourcesInput, ...func(*iottwinmaker.Options)) (*iottwinmaker.ListSyncResourcesOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *iottwinmaker.ListSyncResourcesInput, ...func(*iottwinmaker.Options)) *iottwinmaker.ListSyncResourcesOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*iottwinmaker.ListSyncResourcesOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *iottwinmaker.ListSyncResourcesInput, ...func(*iottwinmaker.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListTagsForResource provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListTagsForResource(ctx context.Context, params *iottwinmaker.ListTagsForResourceInput, optFns ...func(*iottwinmaker.Options)) (*iottwinmaker.ListTagsForResourceOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListTagsForResource")
	}

	var r0 *iottwinmaker.ListTagsForResourceOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *iottwinmaker.ListTagsForResourceInput, ...func(*iottwinmaker.Options)) (*iottwinmaker.ListTagsForResourceOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *iottwinmaker.ListTagsForResourceInput, ...func(*iottwinmaker.Options)) *iottwinmaker.ListTagsForResourceOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*iottwinmaker.ListTagsForResourceOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *iottwinmaker.ListTagsForResourceInput, ...func(*iottwinmaker.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListWorkspaces provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListWorkspaces(ctx context.Context, params *iottwinmaker.ListWorkspacesInput, optFns ...func(*iottwinmaker.Options)) (*iottwinmaker.ListWorkspacesOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListWorkspaces")
	}

	var r0 *iottwinmaker.ListWorkspacesOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *iottwinmaker.ListWorkspacesInput, ...func(*iottwinmaker.Options)) (*iottwinmaker.ListWorkspacesOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *iottwinmaker.ListWorkspacesInput, ...func(*iottwinmaker.Options)) *iottwinmaker.ListWorkspacesOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*iottwinmaker.ListWorkspacesOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *iottwinmaker.ListWorkspacesInput, ...func(*iottwinmaker.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Options provides a mock function with given fields:
func (_m *IClient) Options() iottwinmaker.Options {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Options")
	}

	var r0 iottwinmaker.Options
	if rf, ok := ret.Get(0).(func() iottwinmaker.Options); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(iottwinmaker.Options)
	}

	return r0
}

// TagResource provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) TagResource(ctx context.Context, params *iottwinmaker.TagResourceInput, optFns ...func(*iottwinmaker.Options)) (*iottwinmaker.TagResourceOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for TagResource")
	}

	var r0 *iottwinmaker.TagResourceOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *iottwinmaker.TagResourceInput, ...func(*iottwinmaker.Options)) (*iottwinmaker.TagResourceOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *iottwinmaker.TagResourceInput, ...func(*iottwinmaker.Options)) *iottwinmaker.TagResourceOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*iottwinmaker.TagResourceOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *iottwinmaker.TagResourceInput, ...func(*iottwinmaker.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UntagResource provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UntagResource(ctx context.Context, params *iottwinmaker.UntagResourceInput, optFns ...func(*iottwinmaker.Options)) (*iottwinmaker.UntagResourceOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UntagResource")
	}

	var r0 *iottwinmaker.UntagResourceOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *iottwinmaker.UntagResourceInput, ...func(*iottwinmaker.Options)) (*iottwinmaker.UntagResourceOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *iottwinmaker.UntagResourceInput, ...func(*iottwinmaker.Options)) *iottwinmaker.UntagResourceOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*iottwinmaker.UntagResourceOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *iottwinmaker.UntagResourceInput, ...func(*iottwinmaker.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateComponentType provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UpdateComponentType(ctx context.Context, params *iottwinmaker.UpdateComponentTypeInput, optFns ...func(*iottwinmaker.Options)) (*iottwinmaker.UpdateComponentTypeOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateComponentType")
	}

	var r0 *iottwinmaker.UpdateComponentTypeOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *iottwinmaker.UpdateComponentTypeInput, ...func(*iottwinmaker.Options)) (*iottwinmaker.UpdateComponentTypeOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *iottwinmaker.UpdateComponentTypeInput, ...func(*iottwinmaker.Options)) *iottwinmaker.UpdateComponentTypeOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*iottwinmaker.UpdateComponentTypeOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *iottwinmaker.UpdateComponentTypeInput, ...func(*iottwinmaker.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateEntity provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UpdateEntity(ctx context.Context, params *iottwinmaker.UpdateEntityInput, optFns ...func(*iottwinmaker.Options)) (*iottwinmaker.UpdateEntityOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateEntity")
	}

	var r0 *iottwinmaker.UpdateEntityOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *iottwinmaker.UpdateEntityInput, ...func(*iottwinmaker.Options)) (*iottwinmaker.UpdateEntityOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *iottwinmaker.UpdateEntityInput, ...func(*iottwinmaker.Options)) *iottwinmaker.UpdateEntityOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*iottwinmaker.UpdateEntityOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *iottwinmaker.UpdateEntityInput, ...func(*iottwinmaker.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdatePricingPlan provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UpdatePricingPlan(ctx context.Context, params *iottwinmaker.UpdatePricingPlanInput, optFns ...func(*iottwinmaker.Options)) (*iottwinmaker.UpdatePricingPlanOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdatePricingPlan")
	}

	var r0 *iottwinmaker.UpdatePricingPlanOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *iottwinmaker.UpdatePricingPlanInput, ...func(*iottwinmaker.Options)) (*iottwinmaker.UpdatePricingPlanOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *iottwinmaker.UpdatePricingPlanInput, ...func(*iottwinmaker.Options)) *iottwinmaker.UpdatePricingPlanOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*iottwinmaker.UpdatePricingPlanOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *iottwinmaker.UpdatePricingPlanInput, ...func(*iottwinmaker.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateScene provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UpdateScene(ctx context.Context, params *iottwinmaker.UpdateSceneInput, optFns ...func(*iottwinmaker.Options)) (*iottwinmaker.UpdateSceneOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateScene")
	}

	var r0 *iottwinmaker.UpdateSceneOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *iottwinmaker.UpdateSceneInput, ...func(*iottwinmaker.Options)) (*iottwinmaker.UpdateSceneOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *iottwinmaker.UpdateSceneInput, ...func(*iottwinmaker.Options)) *iottwinmaker.UpdateSceneOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*iottwinmaker.UpdateSceneOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *iottwinmaker.UpdateSceneInput, ...func(*iottwinmaker.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateWorkspace provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UpdateWorkspace(ctx context.Context, params *iottwinmaker.UpdateWorkspaceInput, optFns ...func(*iottwinmaker.Options)) (*iottwinmaker.UpdateWorkspaceOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateWorkspace")
	}

	var r0 *iottwinmaker.UpdateWorkspaceOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *iottwinmaker.UpdateWorkspaceInput, ...func(*iottwinmaker.Options)) (*iottwinmaker.UpdateWorkspaceOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *iottwinmaker.UpdateWorkspaceInput, ...func(*iottwinmaker.Options)) *iottwinmaker.UpdateWorkspaceOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*iottwinmaker.UpdateWorkspaceOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *iottwinmaker.UpdateWorkspaceInput, ...func(*iottwinmaker.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewIClient creates a new instance of IClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewIClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *IClient {
	mock := &IClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
