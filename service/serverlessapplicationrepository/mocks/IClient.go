// Code generated by mockery v2.53.4. DO NOT EDIT.

package mocks

import (
	context "context"

	serverlessapplicationrepository "github.com/aws/aws-sdk-go-v2/service/serverlessapplicationrepository"
	mock "github.com/stretchr/testify/mock"
)

// IClient is an autogenerated mock type for the IClient type
type IClient struct {
	mock.Mock
}

// CreateApplication provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CreateApplication(ctx context.Context, params *serverlessapplicationrepository.CreateApplicationInput, optFns ...func(*serverlessapplicationrepository.Options)) (*serverlessapplicationrepository.CreateApplicationOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateApplication")
	}

	var r0 *serverlessapplicationrepository.CreateApplicationOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *serverlessapplicationrepository.CreateApplicationInput, ...func(*serverlessapplicationrepository.Options)) (*serverlessapplicationrepository.CreateApplicationOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *serverlessapplicationrepository.CreateApplicationInput, ...func(*serverlessapplicationrepository.Options)) *serverlessapplicationrepository.CreateApplicationOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*serverlessapplicationrepository.CreateApplicationOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *serverlessapplicationrepository.CreateApplicationInput, ...func(*serverlessapplicationrepository.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateApplicationVersion provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CreateApplicationVersion(ctx context.Context, params *serverlessapplicationrepository.CreateApplicationVersionInput, optFns ...func(*serverlessapplicationrepository.Options)) (*serverlessapplicationrepository.CreateApplicationVersionOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateApplicationVersion")
	}

	var r0 *serverlessapplicationrepository.CreateApplicationVersionOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *serverlessapplicationrepository.CreateApplicationVersionInput, ...func(*serverlessapplicationrepository.Options)) (*serverlessapplicationrepository.CreateApplicationVersionOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *serverlessapplicationrepository.CreateApplicationVersionInput, ...func(*serverlessapplicationrepository.Options)) *serverlessapplicationrepository.CreateApplicationVersionOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*serverlessapplicationrepository.CreateApplicationVersionOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *serverlessapplicationrepository.CreateApplicationVersionInput, ...func(*serverlessapplicationrepository.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateCloudFormationChangeSet provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CreateCloudFormationChangeSet(ctx context.Context, params *serverlessapplicationrepository.CreateCloudFormationChangeSetInput, optFns ...func(*serverlessapplicationrepository.Options)) (*serverlessapplicationrepository.CreateCloudFormationChangeSetOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateCloudFormationChangeSet")
	}

	var r0 *serverlessapplicationrepository.CreateCloudFormationChangeSetOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *serverlessapplicationrepository.CreateCloudFormationChangeSetInput, ...func(*serverlessapplicationrepository.Options)) (*serverlessapplicationrepository.CreateCloudFormationChangeSetOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *serverlessapplicationrepository.CreateCloudFormationChangeSetInput, ...func(*serverlessapplicationrepository.Options)) *serverlessapplicationrepository.CreateCloudFormationChangeSetOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*serverlessapplicationrepository.CreateCloudFormationChangeSetOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *serverlessapplicationrepository.CreateCloudFormationChangeSetInput, ...func(*serverlessapplicationrepository.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateCloudFormationTemplate provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CreateCloudFormationTemplate(ctx context.Context, params *serverlessapplicationrepository.CreateCloudFormationTemplateInput, optFns ...func(*serverlessapplicationrepository.Options)) (*serverlessapplicationrepository.CreateCloudFormationTemplateOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateCloudFormationTemplate")
	}

	var r0 *serverlessapplicationrepository.CreateCloudFormationTemplateOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *serverlessapplicationrepository.CreateCloudFormationTemplateInput, ...func(*serverlessapplicationrepository.Options)) (*serverlessapplicationrepository.CreateCloudFormationTemplateOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *serverlessapplicationrepository.CreateCloudFormationTemplateInput, ...func(*serverlessapplicationrepository.Options)) *serverlessapplicationrepository.CreateCloudFormationTemplateOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*serverlessapplicationrepository.CreateCloudFormationTemplateOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *serverlessapplicationrepository.CreateCloudFormationTemplateInput, ...func(*serverlessapplicationrepository.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteApplication provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteApplication(ctx context.Context, params *serverlessapplicationrepository.DeleteApplicationInput, optFns ...func(*serverlessapplicationrepository.Options)) (*serverlessapplicationrepository.DeleteApplicationOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteApplication")
	}

	var r0 *serverlessapplicationrepository.DeleteApplicationOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *serverlessapplicationrepository.DeleteApplicationInput, ...func(*serverlessapplicationrepository.Options)) (*serverlessapplicationrepository.DeleteApplicationOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *serverlessapplicationrepository.DeleteApplicationInput, ...func(*serverlessapplicationrepository.Options)) *serverlessapplicationrepository.DeleteApplicationOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*serverlessapplicationrepository.DeleteApplicationOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *serverlessapplicationrepository.DeleteApplicationInput, ...func(*serverlessapplicationrepository.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetApplication provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetApplication(ctx context.Context, params *serverlessapplicationrepository.GetApplicationInput, optFns ...func(*serverlessapplicationrepository.Options)) (*serverlessapplicationrepository.GetApplicationOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetApplication")
	}

	var r0 *serverlessapplicationrepository.GetApplicationOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *serverlessapplicationrepository.GetApplicationInput, ...func(*serverlessapplicationrepository.Options)) (*serverlessapplicationrepository.GetApplicationOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *serverlessapplicationrepository.GetApplicationInput, ...func(*serverlessapplicationrepository.Options)) *serverlessapplicationrepository.GetApplicationOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*serverlessapplicationrepository.GetApplicationOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *serverlessapplicationrepository.GetApplicationInput, ...func(*serverlessapplicationrepository.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetApplicationPolicy provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetApplicationPolicy(ctx context.Context, params *serverlessapplicationrepository.GetApplicationPolicyInput, optFns ...func(*serverlessapplicationrepository.Options)) (*serverlessapplicationrepository.GetApplicationPolicyOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetApplicationPolicy")
	}

	var r0 *serverlessapplicationrepository.GetApplicationPolicyOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *serverlessapplicationrepository.GetApplicationPolicyInput, ...func(*serverlessapplicationrepository.Options)) (*serverlessapplicationrepository.GetApplicationPolicyOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *serverlessapplicationrepository.GetApplicationPolicyInput, ...func(*serverlessapplicationrepository.Options)) *serverlessapplicationrepository.GetApplicationPolicyOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*serverlessapplicationrepository.GetApplicationPolicyOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *serverlessapplicationrepository.GetApplicationPolicyInput, ...func(*serverlessapplicationrepository.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetCloudFormationTemplate provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetCloudFormationTemplate(ctx context.Context, params *serverlessapplicationrepository.GetCloudFormationTemplateInput, optFns ...func(*serverlessapplicationrepository.Options)) (*serverlessapplicationrepository.GetCloudFormationTemplateOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetCloudFormationTemplate")
	}

	var r0 *serverlessapplicationrepository.GetCloudFormationTemplateOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *serverlessapplicationrepository.GetCloudFormationTemplateInput, ...func(*serverlessapplicationrepository.Options)) (*serverlessapplicationrepository.GetCloudFormationTemplateOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *serverlessapplicationrepository.GetCloudFormationTemplateInput, ...func(*serverlessapplicationrepository.Options)) *serverlessapplicationrepository.GetCloudFormationTemplateOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*serverlessapplicationrepository.GetCloudFormationTemplateOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *serverlessapplicationrepository.GetCloudFormationTemplateInput, ...func(*serverlessapplicationrepository.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListApplicationDependencies provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListApplicationDependencies(ctx context.Context, params *serverlessapplicationrepository.ListApplicationDependenciesInput, optFns ...func(*serverlessapplicationrepository.Options)) (*serverlessapplicationrepository.ListApplicationDependenciesOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListApplicationDependencies")
	}

	var r0 *serverlessapplicationrepository.ListApplicationDependenciesOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *serverlessapplicationrepository.ListApplicationDependenciesInput, ...func(*serverlessapplicationrepository.Options)) (*serverlessapplicationrepository.ListApplicationDependenciesOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *serverlessapplicationrepository.ListApplicationDependenciesInput, ...func(*serverlessapplicationrepository.Options)) *serverlessapplicationrepository.ListApplicationDependenciesOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*serverlessapplicationrepository.ListApplicationDependenciesOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *serverlessapplicationrepository.ListApplicationDependenciesInput, ...func(*serverlessapplicationrepository.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListApplicationVersions provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListApplicationVersions(ctx context.Context, params *serverlessapplicationrepository.ListApplicationVersionsInput, optFns ...func(*serverlessapplicationrepository.Options)) (*serverlessapplicationrepository.ListApplicationVersionsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListApplicationVersions")
	}

	var r0 *serverlessapplicationrepository.ListApplicationVersionsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *serverlessapplicationrepository.ListApplicationVersionsInput, ...func(*serverlessapplicationrepository.Options)) (*serverlessapplicationrepository.ListApplicationVersionsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *serverlessapplicationrepository.ListApplicationVersionsInput, ...func(*serverlessapplicationrepository.Options)) *serverlessapplicationrepository.ListApplicationVersionsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*serverlessapplicationrepository.ListApplicationVersionsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *serverlessapplicationrepository.ListApplicationVersionsInput, ...func(*serverlessapplicationrepository.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListApplications provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListApplications(ctx context.Context, params *serverlessapplicationrepository.ListApplicationsInput, optFns ...func(*serverlessapplicationrepository.Options)) (*serverlessapplicationrepository.ListApplicationsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListApplications")
	}

	var r0 *serverlessapplicationrepository.ListApplicationsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *serverlessapplicationrepository.ListApplicationsInput, ...func(*serverlessapplicationrepository.Options)) (*serverlessapplicationrepository.ListApplicationsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *serverlessapplicationrepository.ListApplicationsInput, ...func(*serverlessapplicationrepository.Options)) *serverlessapplicationrepository.ListApplicationsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*serverlessapplicationrepository.ListApplicationsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *serverlessapplicationrepository.ListApplicationsInput, ...func(*serverlessapplicationrepository.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Options provides a mock function with no fields
func (_m *IClient) Options() serverlessapplicationrepository.Options {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Options")
	}

	var r0 serverlessapplicationrepository.Options
	if rf, ok := ret.Get(0).(func() serverlessapplicationrepository.Options); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(serverlessapplicationrepository.Options)
	}

	return r0
}

// PutApplicationPolicy provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) PutApplicationPolicy(ctx context.Context, params *serverlessapplicationrepository.PutApplicationPolicyInput, optFns ...func(*serverlessapplicationrepository.Options)) (*serverlessapplicationrepository.PutApplicationPolicyOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for PutApplicationPolicy")
	}

	var r0 *serverlessapplicationrepository.PutApplicationPolicyOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *serverlessapplicationrepository.PutApplicationPolicyInput, ...func(*serverlessapplicationrepository.Options)) (*serverlessapplicationrepository.PutApplicationPolicyOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *serverlessapplicationrepository.PutApplicationPolicyInput, ...func(*serverlessapplicationrepository.Options)) *serverlessapplicationrepository.PutApplicationPolicyOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*serverlessapplicationrepository.PutApplicationPolicyOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *serverlessapplicationrepository.PutApplicationPolicyInput, ...func(*serverlessapplicationrepository.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UnshareApplication provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UnshareApplication(ctx context.Context, params *serverlessapplicationrepository.UnshareApplicationInput, optFns ...func(*serverlessapplicationrepository.Options)) (*serverlessapplicationrepository.UnshareApplicationOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UnshareApplication")
	}

	var r0 *serverlessapplicationrepository.UnshareApplicationOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *serverlessapplicationrepository.UnshareApplicationInput, ...func(*serverlessapplicationrepository.Options)) (*serverlessapplicationrepository.UnshareApplicationOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *serverlessapplicationrepository.UnshareApplicationInput, ...func(*serverlessapplicationrepository.Options)) *serverlessapplicationrepository.UnshareApplicationOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*serverlessapplicationrepository.UnshareApplicationOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *serverlessapplicationrepository.UnshareApplicationInput, ...func(*serverlessapplicationrepository.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateApplication provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UpdateApplication(ctx context.Context, params *serverlessapplicationrepository.UpdateApplicationInput, optFns ...func(*serverlessapplicationrepository.Options)) (*serverlessapplicationrepository.UpdateApplicationOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateApplication")
	}

	var r0 *serverlessapplicationrepository.UpdateApplicationOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *serverlessapplicationrepository.UpdateApplicationInput, ...func(*serverlessapplicationrepository.Options)) (*serverlessapplicationrepository.UpdateApplicationOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *serverlessapplicationrepository.UpdateApplicationInput, ...func(*serverlessapplicationrepository.Options)) *serverlessapplicationrepository.UpdateApplicationOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*serverlessapplicationrepository.UpdateApplicationOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *serverlessapplicationrepository.UpdateApplicationInput, ...func(*serverlessapplicationrepository.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewIClient creates a new instance of IClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewIClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *IClient {
	mock := &IClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
