// Code generated by mockery v2.39.2. DO NOT EDIT.

package mocks

import (
	cognitoidentityprovider "github.com/aws/aws-sdk-go-v2/service/cognitoidentityprovider"

	context "context"

	mock "github.com/stretchr/testify/mock"
)

// IClient is an autogenerated mock type for the IClient type
type IClient struct {
	mock.Mock
}

// AddCustomAttributes provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) AddCustomAttributes(ctx context.Context, params *cognitoidentityprovider.AddCustomAttributesInput, optFns ...func(*cognitoidentityprovider.Options)) (*cognitoidentityprovider.AddCustomAttributesOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for AddCustomAttributes")
	}

	var r0 *cognitoidentityprovider.AddCustomAttributesOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *cognitoidentityprovider.AddCustomAttributesInput, ...func(*cognitoidentityprovider.Options)) (*cognitoidentityprovider.AddCustomAttributesOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *cognitoidentityprovider.AddCustomAttributesInput, ...func(*cognitoidentityprovider.Options)) *cognitoidentityprovider.AddCustomAttributesOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cognitoidentityprovider.AddCustomAttributesOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *cognitoidentityprovider.AddCustomAttributesInput, ...func(*cognitoidentityprovider.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AdminAddUserToGroup provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) AdminAddUserToGroup(ctx context.Context, params *cognitoidentityprovider.AdminAddUserToGroupInput, optFns ...func(*cognitoidentityprovider.Options)) (*cognitoidentityprovider.AdminAddUserToGroupOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for AdminAddUserToGroup")
	}

	var r0 *cognitoidentityprovider.AdminAddUserToGroupOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *cognitoidentityprovider.AdminAddUserToGroupInput, ...func(*cognitoidentityprovider.Options)) (*cognitoidentityprovider.AdminAddUserToGroupOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *cognitoidentityprovider.AdminAddUserToGroupInput, ...func(*cognitoidentityprovider.Options)) *cognitoidentityprovider.AdminAddUserToGroupOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cognitoidentityprovider.AdminAddUserToGroupOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *cognitoidentityprovider.AdminAddUserToGroupInput, ...func(*cognitoidentityprovider.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AdminConfirmSignUp provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) AdminConfirmSignUp(ctx context.Context, params *cognitoidentityprovider.AdminConfirmSignUpInput, optFns ...func(*cognitoidentityprovider.Options)) (*cognitoidentityprovider.AdminConfirmSignUpOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for AdminConfirmSignUp")
	}

	var r0 *cognitoidentityprovider.AdminConfirmSignUpOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *cognitoidentityprovider.AdminConfirmSignUpInput, ...func(*cognitoidentityprovider.Options)) (*cognitoidentityprovider.AdminConfirmSignUpOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *cognitoidentityprovider.AdminConfirmSignUpInput, ...func(*cognitoidentityprovider.Options)) *cognitoidentityprovider.AdminConfirmSignUpOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cognitoidentityprovider.AdminConfirmSignUpOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *cognitoidentityprovider.AdminConfirmSignUpInput, ...func(*cognitoidentityprovider.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AdminCreateUser provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) AdminCreateUser(ctx context.Context, params *cognitoidentityprovider.AdminCreateUserInput, optFns ...func(*cognitoidentityprovider.Options)) (*cognitoidentityprovider.AdminCreateUserOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for AdminCreateUser")
	}

	var r0 *cognitoidentityprovider.AdminCreateUserOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *cognitoidentityprovider.AdminCreateUserInput, ...func(*cognitoidentityprovider.Options)) (*cognitoidentityprovider.AdminCreateUserOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *cognitoidentityprovider.AdminCreateUserInput, ...func(*cognitoidentityprovider.Options)) *cognitoidentityprovider.AdminCreateUserOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cognitoidentityprovider.AdminCreateUserOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *cognitoidentityprovider.AdminCreateUserInput, ...func(*cognitoidentityprovider.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AdminDeleteUser provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) AdminDeleteUser(ctx context.Context, params *cognitoidentityprovider.AdminDeleteUserInput, optFns ...func(*cognitoidentityprovider.Options)) (*cognitoidentityprovider.AdminDeleteUserOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for AdminDeleteUser")
	}

	var r0 *cognitoidentityprovider.AdminDeleteUserOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *cognitoidentityprovider.AdminDeleteUserInput, ...func(*cognitoidentityprovider.Options)) (*cognitoidentityprovider.AdminDeleteUserOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *cognitoidentityprovider.AdminDeleteUserInput, ...func(*cognitoidentityprovider.Options)) *cognitoidentityprovider.AdminDeleteUserOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cognitoidentityprovider.AdminDeleteUserOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *cognitoidentityprovider.AdminDeleteUserInput, ...func(*cognitoidentityprovider.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AdminDeleteUserAttributes provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) AdminDeleteUserAttributes(ctx context.Context, params *cognitoidentityprovider.AdminDeleteUserAttributesInput, optFns ...func(*cognitoidentityprovider.Options)) (*cognitoidentityprovider.AdminDeleteUserAttributesOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for AdminDeleteUserAttributes")
	}

	var r0 *cognitoidentityprovider.AdminDeleteUserAttributesOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *cognitoidentityprovider.AdminDeleteUserAttributesInput, ...func(*cognitoidentityprovider.Options)) (*cognitoidentityprovider.AdminDeleteUserAttributesOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *cognitoidentityprovider.AdminDeleteUserAttributesInput, ...func(*cognitoidentityprovider.Options)) *cognitoidentityprovider.AdminDeleteUserAttributesOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cognitoidentityprovider.AdminDeleteUserAttributesOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *cognitoidentityprovider.AdminDeleteUserAttributesInput, ...func(*cognitoidentityprovider.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AdminDisableProviderForUser provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) AdminDisableProviderForUser(ctx context.Context, params *cognitoidentityprovider.AdminDisableProviderForUserInput, optFns ...func(*cognitoidentityprovider.Options)) (*cognitoidentityprovider.AdminDisableProviderForUserOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for AdminDisableProviderForUser")
	}

	var r0 *cognitoidentityprovider.AdminDisableProviderForUserOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *cognitoidentityprovider.AdminDisableProviderForUserInput, ...func(*cognitoidentityprovider.Options)) (*cognitoidentityprovider.AdminDisableProviderForUserOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *cognitoidentityprovider.AdminDisableProviderForUserInput, ...func(*cognitoidentityprovider.Options)) *cognitoidentityprovider.AdminDisableProviderForUserOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cognitoidentityprovider.AdminDisableProviderForUserOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *cognitoidentityprovider.AdminDisableProviderForUserInput, ...func(*cognitoidentityprovider.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AdminDisableUser provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) AdminDisableUser(ctx context.Context, params *cognitoidentityprovider.AdminDisableUserInput, optFns ...func(*cognitoidentityprovider.Options)) (*cognitoidentityprovider.AdminDisableUserOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for AdminDisableUser")
	}

	var r0 *cognitoidentityprovider.AdminDisableUserOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *cognitoidentityprovider.AdminDisableUserInput, ...func(*cognitoidentityprovider.Options)) (*cognitoidentityprovider.AdminDisableUserOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *cognitoidentityprovider.AdminDisableUserInput, ...func(*cognitoidentityprovider.Options)) *cognitoidentityprovider.AdminDisableUserOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cognitoidentityprovider.AdminDisableUserOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *cognitoidentityprovider.AdminDisableUserInput, ...func(*cognitoidentityprovider.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AdminEnableUser provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) AdminEnableUser(ctx context.Context, params *cognitoidentityprovider.AdminEnableUserInput, optFns ...func(*cognitoidentityprovider.Options)) (*cognitoidentityprovider.AdminEnableUserOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for AdminEnableUser")
	}

	var r0 *cognitoidentityprovider.AdminEnableUserOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *cognitoidentityprovider.AdminEnableUserInput, ...func(*cognitoidentityprovider.Options)) (*cognitoidentityprovider.AdminEnableUserOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *cognitoidentityprovider.AdminEnableUserInput, ...func(*cognitoidentityprovider.Options)) *cognitoidentityprovider.AdminEnableUserOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cognitoidentityprovider.AdminEnableUserOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *cognitoidentityprovider.AdminEnableUserInput, ...func(*cognitoidentityprovider.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AdminForgetDevice provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) AdminForgetDevice(ctx context.Context, params *cognitoidentityprovider.AdminForgetDeviceInput, optFns ...func(*cognitoidentityprovider.Options)) (*cognitoidentityprovider.AdminForgetDeviceOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for AdminForgetDevice")
	}

	var r0 *cognitoidentityprovider.AdminForgetDeviceOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *cognitoidentityprovider.AdminForgetDeviceInput, ...func(*cognitoidentityprovider.Options)) (*cognitoidentityprovider.AdminForgetDeviceOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *cognitoidentityprovider.AdminForgetDeviceInput, ...func(*cognitoidentityprovider.Options)) *cognitoidentityprovider.AdminForgetDeviceOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cognitoidentityprovider.AdminForgetDeviceOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *cognitoidentityprovider.AdminForgetDeviceInput, ...func(*cognitoidentityprovider.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AdminGetDevice provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) AdminGetDevice(ctx context.Context, params *cognitoidentityprovider.AdminGetDeviceInput, optFns ...func(*cognitoidentityprovider.Options)) (*cognitoidentityprovider.AdminGetDeviceOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for AdminGetDevice")
	}

	var r0 *cognitoidentityprovider.AdminGetDeviceOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *cognitoidentityprovider.AdminGetDeviceInput, ...func(*cognitoidentityprovider.Options)) (*cognitoidentityprovider.AdminGetDeviceOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *cognitoidentityprovider.AdminGetDeviceInput, ...func(*cognitoidentityprovider.Options)) *cognitoidentityprovider.AdminGetDeviceOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cognitoidentityprovider.AdminGetDeviceOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *cognitoidentityprovider.AdminGetDeviceInput, ...func(*cognitoidentityprovider.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AdminGetUser provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) AdminGetUser(ctx context.Context, params *cognitoidentityprovider.AdminGetUserInput, optFns ...func(*cognitoidentityprovider.Options)) (*cognitoidentityprovider.AdminGetUserOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for AdminGetUser")
	}

	var r0 *cognitoidentityprovider.AdminGetUserOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *cognitoidentityprovider.AdminGetUserInput, ...func(*cognitoidentityprovider.Options)) (*cognitoidentityprovider.AdminGetUserOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *cognitoidentityprovider.AdminGetUserInput, ...func(*cognitoidentityprovider.Options)) *cognitoidentityprovider.AdminGetUserOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cognitoidentityprovider.AdminGetUserOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *cognitoidentityprovider.AdminGetUserInput, ...func(*cognitoidentityprovider.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AdminInitiateAuth provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) AdminInitiateAuth(ctx context.Context, params *cognitoidentityprovider.AdminInitiateAuthInput, optFns ...func(*cognitoidentityprovider.Options)) (*cognitoidentityprovider.AdminInitiateAuthOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for AdminInitiateAuth")
	}

	var r0 *cognitoidentityprovider.AdminInitiateAuthOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *cognitoidentityprovider.AdminInitiateAuthInput, ...func(*cognitoidentityprovider.Options)) (*cognitoidentityprovider.AdminInitiateAuthOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *cognitoidentityprovider.AdminInitiateAuthInput, ...func(*cognitoidentityprovider.Options)) *cognitoidentityprovider.AdminInitiateAuthOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cognitoidentityprovider.AdminInitiateAuthOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *cognitoidentityprovider.AdminInitiateAuthInput, ...func(*cognitoidentityprovider.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AdminLinkProviderForUser provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) AdminLinkProviderForUser(ctx context.Context, params *cognitoidentityprovider.AdminLinkProviderForUserInput, optFns ...func(*cognitoidentityprovider.Options)) (*cognitoidentityprovider.AdminLinkProviderForUserOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for AdminLinkProviderForUser")
	}

	var r0 *cognitoidentityprovider.AdminLinkProviderForUserOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *cognitoidentityprovider.AdminLinkProviderForUserInput, ...func(*cognitoidentityprovider.Options)) (*cognitoidentityprovider.AdminLinkProviderForUserOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *cognitoidentityprovider.AdminLinkProviderForUserInput, ...func(*cognitoidentityprovider.Options)) *cognitoidentityprovider.AdminLinkProviderForUserOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cognitoidentityprovider.AdminLinkProviderForUserOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *cognitoidentityprovider.AdminLinkProviderForUserInput, ...func(*cognitoidentityprovider.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AdminListDevices provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) AdminListDevices(ctx context.Context, params *cognitoidentityprovider.AdminListDevicesInput, optFns ...func(*cognitoidentityprovider.Options)) (*cognitoidentityprovider.AdminListDevicesOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for AdminListDevices")
	}

	var r0 *cognitoidentityprovider.AdminListDevicesOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *cognitoidentityprovider.AdminListDevicesInput, ...func(*cognitoidentityprovider.Options)) (*cognitoidentityprovider.AdminListDevicesOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *cognitoidentityprovider.AdminListDevicesInput, ...func(*cognitoidentityprovider.Options)) *cognitoidentityprovider.AdminListDevicesOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cognitoidentityprovider.AdminListDevicesOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *cognitoidentityprovider.AdminListDevicesInput, ...func(*cognitoidentityprovider.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AdminListGroupsForUser provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) AdminListGroupsForUser(ctx context.Context, params *cognitoidentityprovider.AdminListGroupsForUserInput, optFns ...func(*cognitoidentityprovider.Options)) (*cognitoidentityprovider.AdminListGroupsForUserOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for AdminListGroupsForUser")
	}

	var r0 *cognitoidentityprovider.AdminListGroupsForUserOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *cognitoidentityprovider.AdminListGroupsForUserInput, ...func(*cognitoidentityprovider.Options)) (*cognitoidentityprovider.AdminListGroupsForUserOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *cognitoidentityprovider.AdminListGroupsForUserInput, ...func(*cognitoidentityprovider.Options)) *cognitoidentityprovider.AdminListGroupsForUserOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cognitoidentityprovider.AdminListGroupsForUserOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *cognitoidentityprovider.AdminListGroupsForUserInput, ...func(*cognitoidentityprovider.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AdminListUserAuthEvents provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) AdminListUserAuthEvents(ctx context.Context, params *cognitoidentityprovider.AdminListUserAuthEventsInput, optFns ...func(*cognitoidentityprovider.Options)) (*cognitoidentityprovider.AdminListUserAuthEventsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for AdminListUserAuthEvents")
	}

	var r0 *cognitoidentityprovider.AdminListUserAuthEventsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *cognitoidentityprovider.AdminListUserAuthEventsInput, ...func(*cognitoidentityprovider.Options)) (*cognitoidentityprovider.AdminListUserAuthEventsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *cognitoidentityprovider.AdminListUserAuthEventsInput, ...func(*cognitoidentityprovider.Options)) *cognitoidentityprovider.AdminListUserAuthEventsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cognitoidentityprovider.AdminListUserAuthEventsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *cognitoidentityprovider.AdminListUserAuthEventsInput, ...func(*cognitoidentityprovider.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AdminRemoveUserFromGroup provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) AdminRemoveUserFromGroup(ctx context.Context, params *cognitoidentityprovider.AdminRemoveUserFromGroupInput, optFns ...func(*cognitoidentityprovider.Options)) (*cognitoidentityprovider.AdminRemoveUserFromGroupOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for AdminRemoveUserFromGroup")
	}

	var r0 *cognitoidentityprovider.AdminRemoveUserFromGroupOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *cognitoidentityprovider.AdminRemoveUserFromGroupInput, ...func(*cognitoidentityprovider.Options)) (*cognitoidentityprovider.AdminRemoveUserFromGroupOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *cognitoidentityprovider.AdminRemoveUserFromGroupInput, ...func(*cognitoidentityprovider.Options)) *cognitoidentityprovider.AdminRemoveUserFromGroupOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cognitoidentityprovider.AdminRemoveUserFromGroupOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *cognitoidentityprovider.AdminRemoveUserFromGroupInput, ...func(*cognitoidentityprovider.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AdminResetUserPassword provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) AdminResetUserPassword(ctx context.Context, params *cognitoidentityprovider.AdminResetUserPasswordInput, optFns ...func(*cognitoidentityprovider.Options)) (*cognitoidentityprovider.AdminResetUserPasswordOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for AdminResetUserPassword")
	}

	var r0 *cognitoidentityprovider.AdminResetUserPasswordOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *cognitoidentityprovider.AdminResetUserPasswordInput, ...func(*cognitoidentityprovider.Options)) (*cognitoidentityprovider.AdminResetUserPasswordOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *cognitoidentityprovider.AdminResetUserPasswordInput, ...func(*cognitoidentityprovider.Options)) *cognitoidentityprovider.AdminResetUserPasswordOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cognitoidentityprovider.AdminResetUserPasswordOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *cognitoidentityprovider.AdminResetUserPasswordInput, ...func(*cognitoidentityprovider.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AdminRespondToAuthChallenge provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) AdminRespondToAuthChallenge(ctx context.Context, params *cognitoidentityprovider.AdminRespondToAuthChallengeInput, optFns ...func(*cognitoidentityprovider.Options)) (*cognitoidentityprovider.AdminRespondToAuthChallengeOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for AdminRespondToAuthChallenge")
	}

	var r0 *cognitoidentityprovider.AdminRespondToAuthChallengeOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *cognitoidentityprovider.AdminRespondToAuthChallengeInput, ...func(*cognitoidentityprovider.Options)) (*cognitoidentityprovider.AdminRespondToAuthChallengeOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *cognitoidentityprovider.AdminRespondToAuthChallengeInput, ...func(*cognitoidentityprovider.Options)) *cognitoidentityprovider.AdminRespondToAuthChallengeOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cognitoidentityprovider.AdminRespondToAuthChallengeOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *cognitoidentityprovider.AdminRespondToAuthChallengeInput, ...func(*cognitoidentityprovider.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AdminSetUserMFAPreference provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) AdminSetUserMFAPreference(ctx context.Context, params *cognitoidentityprovider.AdminSetUserMFAPreferenceInput, optFns ...func(*cognitoidentityprovider.Options)) (*cognitoidentityprovider.AdminSetUserMFAPreferenceOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for AdminSetUserMFAPreference")
	}

	var r0 *cognitoidentityprovider.AdminSetUserMFAPreferenceOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *cognitoidentityprovider.AdminSetUserMFAPreferenceInput, ...func(*cognitoidentityprovider.Options)) (*cognitoidentityprovider.AdminSetUserMFAPreferenceOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *cognitoidentityprovider.AdminSetUserMFAPreferenceInput, ...func(*cognitoidentityprovider.Options)) *cognitoidentityprovider.AdminSetUserMFAPreferenceOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cognitoidentityprovider.AdminSetUserMFAPreferenceOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *cognitoidentityprovider.AdminSetUserMFAPreferenceInput, ...func(*cognitoidentityprovider.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AdminSetUserPassword provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) AdminSetUserPassword(ctx context.Context, params *cognitoidentityprovider.AdminSetUserPasswordInput, optFns ...func(*cognitoidentityprovider.Options)) (*cognitoidentityprovider.AdminSetUserPasswordOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for AdminSetUserPassword")
	}

	var r0 *cognitoidentityprovider.AdminSetUserPasswordOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *cognitoidentityprovider.AdminSetUserPasswordInput, ...func(*cognitoidentityprovider.Options)) (*cognitoidentityprovider.AdminSetUserPasswordOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *cognitoidentityprovider.AdminSetUserPasswordInput, ...func(*cognitoidentityprovider.Options)) *cognitoidentityprovider.AdminSetUserPasswordOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cognitoidentityprovider.AdminSetUserPasswordOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *cognitoidentityprovider.AdminSetUserPasswordInput, ...func(*cognitoidentityprovider.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AdminSetUserSettings provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) AdminSetUserSettings(ctx context.Context, params *cognitoidentityprovider.AdminSetUserSettingsInput, optFns ...func(*cognitoidentityprovider.Options)) (*cognitoidentityprovider.AdminSetUserSettingsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for AdminSetUserSettings")
	}

	var r0 *cognitoidentityprovider.AdminSetUserSettingsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *cognitoidentityprovider.AdminSetUserSettingsInput, ...func(*cognitoidentityprovider.Options)) (*cognitoidentityprovider.AdminSetUserSettingsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *cognitoidentityprovider.AdminSetUserSettingsInput, ...func(*cognitoidentityprovider.Options)) *cognitoidentityprovider.AdminSetUserSettingsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cognitoidentityprovider.AdminSetUserSettingsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *cognitoidentityprovider.AdminSetUserSettingsInput, ...func(*cognitoidentityprovider.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AdminUpdateAuthEventFeedback provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) AdminUpdateAuthEventFeedback(ctx context.Context, params *cognitoidentityprovider.AdminUpdateAuthEventFeedbackInput, optFns ...func(*cognitoidentityprovider.Options)) (*cognitoidentityprovider.AdminUpdateAuthEventFeedbackOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for AdminUpdateAuthEventFeedback")
	}

	var r0 *cognitoidentityprovider.AdminUpdateAuthEventFeedbackOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *cognitoidentityprovider.AdminUpdateAuthEventFeedbackInput, ...func(*cognitoidentityprovider.Options)) (*cognitoidentityprovider.AdminUpdateAuthEventFeedbackOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *cognitoidentityprovider.AdminUpdateAuthEventFeedbackInput, ...func(*cognitoidentityprovider.Options)) *cognitoidentityprovider.AdminUpdateAuthEventFeedbackOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cognitoidentityprovider.AdminUpdateAuthEventFeedbackOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *cognitoidentityprovider.AdminUpdateAuthEventFeedbackInput, ...func(*cognitoidentityprovider.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AdminUpdateDeviceStatus provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) AdminUpdateDeviceStatus(ctx context.Context, params *cognitoidentityprovider.AdminUpdateDeviceStatusInput, optFns ...func(*cognitoidentityprovider.Options)) (*cognitoidentityprovider.AdminUpdateDeviceStatusOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for AdminUpdateDeviceStatus")
	}

	var r0 *cognitoidentityprovider.AdminUpdateDeviceStatusOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *cognitoidentityprovider.AdminUpdateDeviceStatusInput, ...func(*cognitoidentityprovider.Options)) (*cognitoidentityprovider.AdminUpdateDeviceStatusOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *cognitoidentityprovider.AdminUpdateDeviceStatusInput, ...func(*cognitoidentityprovider.Options)) *cognitoidentityprovider.AdminUpdateDeviceStatusOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cognitoidentityprovider.AdminUpdateDeviceStatusOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *cognitoidentityprovider.AdminUpdateDeviceStatusInput, ...func(*cognitoidentityprovider.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AdminUpdateUserAttributes provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) AdminUpdateUserAttributes(ctx context.Context, params *cognitoidentityprovider.AdminUpdateUserAttributesInput, optFns ...func(*cognitoidentityprovider.Options)) (*cognitoidentityprovider.AdminUpdateUserAttributesOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for AdminUpdateUserAttributes")
	}

	var r0 *cognitoidentityprovider.AdminUpdateUserAttributesOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *cognitoidentityprovider.AdminUpdateUserAttributesInput, ...func(*cognitoidentityprovider.Options)) (*cognitoidentityprovider.AdminUpdateUserAttributesOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *cognitoidentityprovider.AdminUpdateUserAttributesInput, ...func(*cognitoidentityprovider.Options)) *cognitoidentityprovider.AdminUpdateUserAttributesOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cognitoidentityprovider.AdminUpdateUserAttributesOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *cognitoidentityprovider.AdminUpdateUserAttributesInput, ...func(*cognitoidentityprovider.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AdminUserGlobalSignOut provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) AdminUserGlobalSignOut(ctx context.Context, params *cognitoidentityprovider.AdminUserGlobalSignOutInput, optFns ...func(*cognitoidentityprovider.Options)) (*cognitoidentityprovider.AdminUserGlobalSignOutOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for AdminUserGlobalSignOut")
	}

	var r0 *cognitoidentityprovider.AdminUserGlobalSignOutOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *cognitoidentityprovider.AdminUserGlobalSignOutInput, ...func(*cognitoidentityprovider.Options)) (*cognitoidentityprovider.AdminUserGlobalSignOutOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *cognitoidentityprovider.AdminUserGlobalSignOutInput, ...func(*cognitoidentityprovider.Options)) *cognitoidentityprovider.AdminUserGlobalSignOutOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cognitoidentityprovider.AdminUserGlobalSignOutOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *cognitoidentityprovider.AdminUserGlobalSignOutInput, ...func(*cognitoidentityprovider.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AssociateSoftwareToken provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) AssociateSoftwareToken(ctx context.Context, params *cognitoidentityprovider.AssociateSoftwareTokenInput, optFns ...func(*cognitoidentityprovider.Options)) (*cognitoidentityprovider.AssociateSoftwareTokenOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for AssociateSoftwareToken")
	}

	var r0 *cognitoidentityprovider.AssociateSoftwareTokenOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *cognitoidentityprovider.AssociateSoftwareTokenInput, ...func(*cognitoidentityprovider.Options)) (*cognitoidentityprovider.AssociateSoftwareTokenOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *cognitoidentityprovider.AssociateSoftwareTokenInput, ...func(*cognitoidentityprovider.Options)) *cognitoidentityprovider.AssociateSoftwareTokenOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cognitoidentityprovider.AssociateSoftwareTokenOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *cognitoidentityprovider.AssociateSoftwareTokenInput, ...func(*cognitoidentityprovider.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ChangePassword provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ChangePassword(ctx context.Context, params *cognitoidentityprovider.ChangePasswordInput, optFns ...func(*cognitoidentityprovider.Options)) (*cognitoidentityprovider.ChangePasswordOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ChangePassword")
	}

	var r0 *cognitoidentityprovider.ChangePasswordOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *cognitoidentityprovider.ChangePasswordInput, ...func(*cognitoidentityprovider.Options)) (*cognitoidentityprovider.ChangePasswordOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *cognitoidentityprovider.ChangePasswordInput, ...func(*cognitoidentityprovider.Options)) *cognitoidentityprovider.ChangePasswordOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cognitoidentityprovider.ChangePasswordOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *cognitoidentityprovider.ChangePasswordInput, ...func(*cognitoidentityprovider.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ConfirmDevice provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ConfirmDevice(ctx context.Context, params *cognitoidentityprovider.ConfirmDeviceInput, optFns ...func(*cognitoidentityprovider.Options)) (*cognitoidentityprovider.ConfirmDeviceOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ConfirmDevice")
	}

	var r0 *cognitoidentityprovider.ConfirmDeviceOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *cognitoidentityprovider.ConfirmDeviceInput, ...func(*cognitoidentityprovider.Options)) (*cognitoidentityprovider.ConfirmDeviceOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *cognitoidentityprovider.ConfirmDeviceInput, ...func(*cognitoidentityprovider.Options)) *cognitoidentityprovider.ConfirmDeviceOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cognitoidentityprovider.ConfirmDeviceOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *cognitoidentityprovider.ConfirmDeviceInput, ...func(*cognitoidentityprovider.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ConfirmForgotPassword provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ConfirmForgotPassword(ctx context.Context, params *cognitoidentityprovider.ConfirmForgotPasswordInput, optFns ...func(*cognitoidentityprovider.Options)) (*cognitoidentityprovider.ConfirmForgotPasswordOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ConfirmForgotPassword")
	}

	var r0 *cognitoidentityprovider.ConfirmForgotPasswordOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *cognitoidentityprovider.ConfirmForgotPasswordInput, ...func(*cognitoidentityprovider.Options)) (*cognitoidentityprovider.ConfirmForgotPasswordOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *cognitoidentityprovider.ConfirmForgotPasswordInput, ...func(*cognitoidentityprovider.Options)) *cognitoidentityprovider.ConfirmForgotPasswordOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cognitoidentityprovider.ConfirmForgotPasswordOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *cognitoidentityprovider.ConfirmForgotPasswordInput, ...func(*cognitoidentityprovider.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ConfirmSignUp provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ConfirmSignUp(ctx context.Context, params *cognitoidentityprovider.ConfirmSignUpInput, optFns ...func(*cognitoidentityprovider.Options)) (*cognitoidentityprovider.ConfirmSignUpOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ConfirmSignUp")
	}

	var r0 *cognitoidentityprovider.ConfirmSignUpOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *cognitoidentityprovider.ConfirmSignUpInput, ...func(*cognitoidentityprovider.Options)) (*cognitoidentityprovider.ConfirmSignUpOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *cognitoidentityprovider.ConfirmSignUpInput, ...func(*cognitoidentityprovider.Options)) *cognitoidentityprovider.ConfirmSignUpOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cognitoidentityprovider.ConfirmSignUpOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *cognitoidentityprovider.ConfirmSignUpInput, ...func(*cognitoidentityprovider.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateGroup provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CreateGroup(ctx context.Context, params *cognitoidentityprovider.CreateGroupInput, optFns ...func(*cognitoidentityprovider.Options)) (*cognitoidentityprovider.CreateGroupOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateGroup")
	}

	var r0 *cognitoidentityprovider.CreateGroupOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *cognitoidentityprovider.CreateGroupInput, ...func(*cognitoidentityprovider.Options)) (*cognitoidentityprovider.CreateGroupOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *cognitoidentityprovider.CreateGroupInput, ...func(*cognitoidentityprovider.Options)) *cognitoidentityprovider.CreateGroupOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cognitoidentityprovider.CreateGroupOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *cognitoidentityprovider.CreateGroupInput, ...func(*cognitoidentityprovider.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateIdentityProvider provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CreateIdentityProvider(ctx context.Context, params *cognitoidentityprovider.CreateIdentityProviderInput, optFns ...func(*cognitoidentityprovider.Options)) (*cognitoidentityprovider.CreateIdentityProviderOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateIdentityProvider")
	}

	var r0 *cognitoidentityprovider.CreateIdentityProviderOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *cognitoidentityprovider.CreateIdentityProviderInput, ...func(*cognitoidentityprovider.Options)) (*cognitoidentityprovider.CreateIdentityProviderOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *cognitoidentityprovider.CreateIdentityProviderInput, ...func(*cognitoidentityprovider.Options)) *cognitoidentityprovider.CreateIdentityProviderOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cognitoidentityprovider.CreateIdentityProviderOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *cognitoidentityprovider.CreateIdentityProviderInput, ...func(*cognitoidentityprovider.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateResourceServer provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CreateResourceServer(ctx context.Context, params *cognitoidentityprovider.CreateResourceServerInput, optFns ...func(*cognitoidentityprovider.Options)) (*cognitoidentityprovider.CreateResourceServerOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateResourceServer")
	}

	var r0 *cognitoidentityprovider.CreateResourceServerOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *cognitoidentityprovider.CreateResourceServerInput, ...func(*cognitoidentityprovider.Options)) (*cognitoidentityprovider.CreateResourceServerOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *cognitoidentityprovider.CreateResourceServerInput, ...func(*cognitoidentityprovider.Options)) *cognitoidentityprovider.CreateResourceServerOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cognitoidentityprovider.CreateResourceServerOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *cognitoidentityprovider.CreateResourceServerInput, ...func(*cognitoidentityprovider.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateUserImportJob provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CreateUserImportJob(ctx context.Context, params *cognitoidentityprovider.CreateUserImportJobInput, optFns ...func(*cognitoidentityprovider.Options)) (*cognitoidentityprovider.CreateUserImportJobOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateUserImportJob")
	}

	var r0 *cognitoidentityprovider.CreateUserImportJobOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *cognitoidentityprovider.CreateUserImportJobInput, ...func(*cognitoidentityprovider.Options)) (*cognitoidentityprovider.CreateUserImportJobOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *cognitoidentityprovider.CreateUserImportJobInput, ...func(*cognitoidentityprovider.Options)) *cognitoidentityprovider.CreateUserImportJobOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cognitoidentityprovider.CreateUserImportJobOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *cognitoidentityprovider.CreateUserImportJobInput, ...func(*cognitoidentityprovider.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateUserPool provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CreateUserPool(ctx context.Context, params *cognitoidentityprovider.CreateUserPoolInput, optFns ...func(*cognitoidentityprovider.Options)) (*cognitoidentityprovider.CreateUserPoolOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateUserPool")
	}

	var r0 *cognitoidentityprovider.CreateUserPoolOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *cognitoidentityprovider.CreateUserPoolInput, ...func(*cognitoidentityprovider.Options)) (*cognitoidentityprovider.CreateUserPoolOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *cognitoidentityprovider.CreateUserPoolInput, ...func(*cognitoidentityprovider.Options)) *cognitoidentityprovider.CreateUserPoolOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cognitoidentityprovider.CreateUserPoolOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *cognitoidentityprovider.CreateUserPoolInput, ...func(*cognitoidentityprovider.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateUserPoolClient provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CreateUserPoolClient(ctx context.Context, params *cognitoidentityprovider.CreateUserPoolClientInput, optFns ...func(*cognitoidentityprovider.Options)) (*cognitoidentityprovider.CreateUserPoolClientOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateUserPoolClient")
	}

	var r0 *cognitoidentityprovider.CreateUserPoolClientOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *cognitoidentityprovider.CreateUserPoolClientInput, ...func(*cognitoidentityprovider.Options)) (*cognitoidentityprovider.CreateUserPoolClientOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *cognitoidentityprovider.CreateUserPoolClientInput, ...func(*cognitoidentityprovider.Options)) *cognitoidentityprovider.CreateUserPoolClientOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cognitoidentityprovider.CreateUserPoolClientOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *cognitoidentityprovider.CreateUserPoolClientInput, ...func(*cognitoidentityprovider.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateUserPoolDomain provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CreateUserPoolDomain(ctx context.Context, params *cognitoidentityprovider.CreateUserPoolDomainInput, optFns ...func(*cognitoidentityprovider.Options)) (*cognitoidentityprovider.CreateUserPoolDomainOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateUserPoolDomain")
	}

	var r0 *cognitoidentityprovider.CreateUserPoolDomainOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *cognitoidentityprovider.CreateUserPoolDomainInput, ...func(*cognitoidentityprovider.Options)) (*cognitoidentityprovider.CreateUserPoolDomainOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *cognitoidentityprovider.CreateUserPoolDomainInput, ...func(*cognitoidentityprovider.Options)) *cognitoidentityprovider.CreateUserPoolDomainOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cognitoidentityprovider.CreateUserPoolDomainOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *cognitoidentityprovider.CreateUserPoolDomainInput, ...func(*cognitoidentityprovider.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteGroup provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteGroup(ctx context.Context, params *cognitoidentityprovider.DeleteGroupInput, optFns ...func(*cognitoidentityprovider.Options)) (*cognitoidentityprovider.DeleteGroupOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteGroup")
	}

	var r0 *cognitoidentityprovider.DeleteGroupOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *cognitoidentityprovider.DeleteGroupInput, ...func(*cognitoidentityprovider.Options)) (*cognitoidentityprovider.DeleteGroupOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *cognitoidentityprovider.DeleteGroupInput, ...func(*cognitoidentityprovider.Options)) *cognitoidentityprovider.DeleteGroupOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cognitoidentityprovider.DeleteGroupOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *cognitoidentityprovider.DeleteGroupInput, ...func(*cognitoidentityprovider.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteIdentityProvider provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteIdentityProvider(ctx context.Context, params *cognitoidentityprovider.DeleteIdentityProviderInput, optFns ...func(*cognitoidentityprovider.Options)) (*cognitoidentityprovider.DeleteIdentityProviderOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteIdentityProvider")
	}

	var r0 *cognitoidentityprovider.DeleteIdentityProviderOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *cognitoidentityprovider.DeleteIdentityProviderInput, ...func(*cognitoidentityprovider.Options)) (*cognitoidentityprovider.DeleteIdentityProviderOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *cognitoidentityprovider.DeleteIdentityProviderInput, ...func(*cognitoidentityprovider.Options)) *cognitoidentityprovider.DeleteIdentityProviderOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cognitoidentityprovider.DeleteIdentityProviderOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *cognitoidentityprovider.DeleteIdentityProviderInput, ...func(*cognitoidentityprovider.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteResourceServer provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteResourceServer(ctx context.Context, params *cognitoidentityprovider.DeleteResourceServerInput, optFns ...func(*cognitoidentityprovider.Options)) (*cognitoidentityprovider.DeleteResourceServerOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteResourceServer")
	}

	var r0 *cognitoidentityprovider.DeleteResourceServerOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *cognitoidentityprovider.DeleteResourceServerInput, ...func(*cognitoidentityprovider.Options)) (*cognitoidentityprovider.DeleteResourceServerOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *cognitoidentityprovider.DeleteResourceServerInput, ...func(*cognitoidentityprovider.Options)) *cognitoidentityprovider.DeleteResourceServerOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cognitoidentityprovider.DeleteResourceServerOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *cognitoidentityprovider.DeleteResourceServerInput, ...func(*cognitoidentityprovider.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteUser provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteUser(ctx context.Context, params *cognitoidentityprovider.DeleteUserInput, optFns ...func(*cognitoidentityprovider.Options)) (*cognitoidentityprovider.DeleteUserOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteUser")
	}

	var r0 *cognitoidentityprovider.DeleteUserOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *cognitoidentityprovider.DeleteUserInput, ...func(*cognitoidentityprovider.Options)) (*cognitoidentityprovider.DeleteUserOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *cognitoidentityprovider.DeleteUserInput, ...func(*cognitoidentityprovider.Options)) *cognitoidentityprovider.DeleteUserOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cognitoidentityprovider.DeleteUserOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *cognitoidentityprovider.DeleteUserInput, ...func(*cognitoidentityprovider.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteUserAttributes provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteUserAttributes(ctx context.Context, params *cognitoidentityprovider.DeleteUserAttributesInput, optFns ...func(*cognitoidentityprovider.Options)) (*cognitoidentityprovider.DeleteUserAttributesOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteUserAttributes")
	}

	var r0 *cognitoidentityprovider.DeleteUserAttributesOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *cognitoidentityprovider.DeleteUserAttributesInput, ...func(*cognitoidentityprovider.Options)) (*cognitoidentityprovider.DeleteUserAttributesOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *cognitoidentityprovider.DeleteUserAttributesInput, ...func(*cognitoidentityprovider.Options)) *cognitoidentityprovider.DeleteUserAttributesOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cognitoidentityprovider.DeleteUserAttributesOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *cognitoidentityprovider.DeleteUserAttributesInput, ...func(*cognitoidentityprovider.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteUserPool provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteUserPool(ctx context.Context, params *cognitoidentityprovider.DeleteUserPoolInput, optFns ...func(*cognitoidentityprovider.Options)) (*cognitoidentityprovider.DeleteUserPoolOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteUserPool")
	}

	var r0 *cognitoidentityprovider.DeleteUserPoolOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *cognitoidentityprovider.DeleteUserPoolInput, ...func(*cognitoidentityprovider.Options)) (*cognitoidentityprovider.DeleteUserPoolOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *cognitoidentityprovider.DeleteUserPoolInput, ...func(*cognitoidentityprovider.Options)) *cognitoidentityprovider.DeleteUserPoolOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cognitoidentityprovider.DeleteUserPoolOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *cognitoidentityprovider.DeleteUserPoolInput, ...func(*cognitoidentityprovider.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteUserPoolClient provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteUserPoolClient(ctx context.Context, params *cognitoidentityprovider.DeleteUserPoolClientInput, optFns ...func(*cognitoidentityprovider.Options)) (*cognitoidentityprovider.DeleteUserPoolClientOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteUserPoolClient")
	}

	var r0 *cognitoidentityprovider.DeleteUserPoolClientOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *cognitoidentityprovider.DeleteUserPoolClientInput, ...func(*cognitoidentityprovider.Options)) (*cognitoidentityprovider.DeleteUserPoolClientOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *cognitoidentityprovider.DeleteUserPoolClientInput, ...func(*cognitoidentityprovider.Options)) *cognitoidentityprovider.DeleteUserPoolClientOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cognitoidentityprovider.DeleteUserPoolClientOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *cognitoidentityprovider.DeleteUserPoolClientInput, ...func(*cognitoidentityprovider.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteUserPoolDomain provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteUserPoolDomain(ctx context.Context, params *cognitoidentityprovider.DeleteUserPoolDomainInput, optFns ...func(*cognitoidentityprovider.Options)) (*cognitoidentityprovider.DeleteUserPoolDomainOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteUserPoolDomain")
	}

	var r0 *cognitoidentityprovider.DeleteUserPoolDomainOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *cognitoidentityprovider.DeleteUserPoolDomainInput, ...func(*cognitoidentityprovider.Options)) (*cognitoidentityprovider.DeleteUserPoolDomainOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *cognitoidentityprovider.DeleteUserPoolDomainInput, ...func(*cognitoidentityprovider.Options)) *cognitoidentityprovider.DeleteUserPoolDomainOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cognitoidentityprovider.DeleteUserPoolDomainOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *cognitoidentityprovider.DeleteUserPoolDomainInput, ...func(*cognitoidentityprovider.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeIdentityProvider provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DescribeIdentityProvider(ctx context.Context, params *cognitoidentityprovider.DescribeIdentityProviderInput, optFns ...func(*cognitoidentityprovider.Options)) (*cognitoidentityprovider.DescribeIdentityProviderOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DescribeIdentityProvider")
	}

	var r0 *cognitoidentityprovider.DescribeIdentityProviderOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *cognitoidentityprovider.DescribeIdentityProviderInput, ...func(*cognitoidentityprovider.Options)) (*cognitoidentityprovider.DescribeIdentityProviderOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *cognitoidentityprovider.DescribeIdentityProviderInput, ...func(*cognitoidentityprovider.Options)) *cognitoidentityprovider.DescribeIdentityProviderOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cognitoidentityprovider.DescribeIdentityProviderOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *cognitoidentityprovider.DescribeIdentityProviderInput, ...func(*cognitoidentityprovider.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeResourceServer provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DescribeResourceServer(ctx context.Context, params *cognitoidentityprovider.DescribeResourceServerInput, optFns ...func(*cognitoidentityprovider.Options)) (*cognitoidentityprovider.DescribeResourceServerOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DescribeResourceServer")
	}

	var r0 *cognitoidentityprovider.DescribeResourceServerOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *cognitoidentityprovider.DescribeResourceServerInput, ...func(*cognitoidentityprovider.Options)) (*cognitoidentityprovider.DescribeResourceServerOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *cognitoidentityprovider.DescribeResourceServerInput, ...func(*cognitoidentityprovider.Options)) *cognitoidentityprovider.DescribeResourceServerOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cognitoidentityprovider.DescribeResourceServerOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *cognitoidentityprovider.DescribeResourceServerInput, ...func(*cognitoidentityprovider.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeRiskConfiguration provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DescribeRiskConfiguration(ctx context.Context, params *cognitoidentityprovider.DescribeRiskConfigurationInput, optFns ...func(*cognitoidentityprovider.Options)) (*cognitoidentityprovider.DescribeRiskConfigurationOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DescribeRiskConfiguration")
	}

	var r0 *cognitoidentityprovider.DescribeRiskConfigurationOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *cognitoidentityprovider.DescribeRiskConfigurationInput, ...func(*cognitoidentityprovider.Options)) (*cognitoidentityprovider.DescribeRiskConfigurationOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *cognitoidentityprovider.DescribeRiskConfigurationInput, ...func(*cognitoidentityprovider.Options)) *cognitoidentityprovider.DescribeRiskConfigurationOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cognitoidentityprovider.DescribeRiskConfigurationOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *cognitoidentityprovider.DescribeRiskConfigurationInput, ...func(*cognitoidentityprovider.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeUserImportJob provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DescribeUserImportJob(ctx context.Context, params *cognitoidentityprovider.DescribeUserImportJobInput, optFns ...func(*cognitoidentityprovider.Options)) (*cognitoidentityprovider.DescribeUserImportJobOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DescribeUserImportJob")
	}

	var r0 *cognitoidentityprovider.DescribeUserImportJobOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *cognitoidentityprovider.DescribeUserImportJobInput, ...func(*cognitoidentityprovider.Options)) (*cognitoidentityprovider.DescribeUserImportJobOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *cognitoidentityprovider.DescribeUserImportJobInput, ...func(*cognitoidentityprovider.Options)) *cognitoidentityprovider.DescribeUserImportJobOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cognitoidentityprovider.DescribeUserImportJobOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *cognitoidentityprovider.DescribeUserImportJobInput, ...func(*cognitoidentityprovider.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeUserPool provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DescribeUserPool(ctx context.Context, params *cognitoidentityprovider.DescribeUserPoolInput, optFns ...func(*cognitoidentityprovider.Options)) (*cognitoidentityprovider.DescribeUserPoolOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DescribeUserPool")
	}

	var r0 *cognitoidentityprovider.DescribeUserPoolOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *cognitoidentityprovider.DescribeUserPoolInput, ...func(*cognitoidentityprovider.Options)) (*cognitoidentityprovider.DescribeUserPoolOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *cognitoidentityprovider.DescribeUserPoolInput, ...func(*cognitoidentityprovider.Options)) *cognitoidentityprovider.DescribeUserPoolOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cognitoidentityprovider.DescribeUserPoolOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *cognitoidentityprovider.DescribeUserPoolInput, ...func(*cognitoidentityprovider.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeUserPoolClient provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DescribeUserPoolClient(ctx context.Context, params *cognitoidentityprovider.DescribeUserPoolClientInput, optFns ...func(*cognitoidentityprovider.Options)) (*cognitoidentityprovider.DescribeUserPoolClientOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DescribeUserPoolClient")
	}

	var r0 *cognitoidentityprovider.DescribeUserPoolClientOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *cognitoidentityprovider.DescribeUserPoolClientInput, ...func(*cognitoidentityprovider.Options)) (*cognitoidentityprovider.DescribeUserPoolClientOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *cognitoidentityprovider.DescribeUserPoolClientInput, ...func(*cognitoidentityprovider.Options)) *cognitoidentityprovider.DescribeUserPoolClientOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cognitoidentityprovider.DescribeUserPoolClientOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *cognitoidentityprovider.DescribeUserPoolClientInput, ...func(*cognitoidentityprovider.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeUserPoolDomain provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DescribeUserPoolDomain(ctx context.Context, params *cognitoidentityprovider.DescribeUserPoolDomainInput, optFns ...func(*cognitoidentityprovider.Options)) (*cognitoidentityprovider.DescribeUserPoolDomainOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DescribeUserPoolDomain")
	}

	var r0 *cognitoidentityprovider.DescribeUserPoolDomainOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *cognitoidentityprovider.DescribeUserPoolDomainInput, ...func(*cognitoidentityprovider.Options)) (*cognitoidentityprovider.DescribeUserPoolDomainOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *cognitoidentityprovider.DescribeUserPoolDomainInput, ...func(*cognitoidentityprovider.Options)) *cognitoidentityprovider.DescribeUserPoolDomainOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cognitoidentityprovider.DescribeUserPoolDomainOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *cognitoidentityprovider.DescribeUserPoolDomainInput, ...func(*cognitoidentityprovider.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ForgetDevice provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ForgetDevice(ctx context.Context, params *cognitoidentityprovider.ForgetDeviceInput, optFns ...func(*cognitoidentityprovider.Options)) (*cognitoidentityprovider.ForgetDeviceOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ForgetDevice")
	}

	var r0 *cognitoidentityprovider.ForgetDeviceOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *cognitoidentityprovider.ForgetDeviceInput, ...func(*cognitoidentityprovider.Options)) (*cognitoidentityprovider.ForgetDeviceOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *cognitoidentityprovider.ForgetDeviceInput, ...func(*cognitoidentityprovider.Options)) *cognitoidentityprovider.ForgetDeviceOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cognitoidentityprovider.ForgetDeviceOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *cognitoidentityprovider.ForgetDeviceInput, ...func(*cognitoidentityprovider.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ForgotPassword provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ForgotPassword(ctx context.Context, params *cognitoidentityprovider.ForgotPasswordInput, optFns ...func(*cognitoidentityprovider.Options)) (*cognitoidentityprovider.ForgotPasswordOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ForgotPassword")
	}

	var r0 *cognitoidentityprovider.ForgotPasswordOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *cognitoidentityprovider.ForgotPasswordInput, ...func(*cognitoidentityprovider.Options)) (*cognitoidentityprovider.ForgotPasswordOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *cognitoidentityprovider.ForgotPasswordInput, ...func(*cognitoidentityprovider.Options)) *cognitoidentityprovider.ForgotPasswordOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cognitoidentityprovider.ForgotPasswordOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *cognitoidentityprovider.ForgotPasswordInput, ...func(*cognitoidentityprovider.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetCSVHeader provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetCSVHeader(ctx context.Context, params *cognitoidentityprovider.GetCSVHeaderInput, optFns ...func(*cognitoidentityprovider.Options)) (*cognitoidentityprovider.GetCSVHeaderOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetCSVHeader")
	}

	var r0 *cognitoidentityprovider.GetCSVHeaderOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *cognitoidentityprovider.GetCSVHeaderInput, ...func(*cognitoidentityprovider.Options)) (*cognitoidentityprovider.GetCSVHeaderOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *cognitoidentityprovider.GetCSVHeaderInput, ...func(*cognitoidentityprovider.Options)) *cognitoidentityprovider.GetCSVHeaderOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cognitoidentityprovider.GetCSVHeaderOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *cognitoidentityprovider.GetCSVHeaderInput, ...func(*cognitoidentityprovider.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetDevice provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetDevice(ctx context.Context, params *cognitoidentityprovider.GetDeviceInput, optFns ...func(*cognitoidentityprovider.Options)) (*cognitoidentityprovider.GetDeviceOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetDevice")
	}

	var r0 *cognitoidentityprovider.GetDeviceOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *cognitoidentityprovider.GetDeviceInput, ...func(*cognitoidentityprovider.Options)) (*cognitoidentityprovider.GetDeviceOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *cognitoidentityprovider.GetDeviceInput, ...func(*cognitoidentityprovider.Options)) *cognitoidentityprovider.GetDeviceOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cognitoidentityprovider.GetDeviceOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *cognitoidentityprovider.GetDeviceInput, ...func(*cognitoidentityprovider.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetGroup provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetGroup(ctx context.Context, params *cognitoidentityprovider.GetGroupInput, optFns ...func(*cognitoidentityprovider.Options)) (*cognitoidentityprovider.GetGroupOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetGroup")
	}

	var r0 *cognitoidentityprovider.GetGroupOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *cognitoidentityprovider.GetGroupInput, ...func(*cognitoidentityprovider.Options)) (*cognitoidentityprovider.GetGroupOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *cognitoidentityprovider.GetGroupInput, ...func(*cognitoidentityprovider.Options)) *cognitoidentityprovider.GetGroupOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cognitoidentityprovider.GetGroupOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *cognitoidentityprovider.GetGroupInput, ...func(*cognitoidentityprovider.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetIdentityProviderByIdentifier provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetIdentityProviderByIdentifier(ctx context.Context, params *cognitoidentityprovider.GetIdentityProviderByIdentifierInput, optFns ...func(*cognitoidentityprovider.Options)) (*cognitoidentityprovider.GetIdentityProviderByIdentifierOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetIdentityProviderByIdentifier")
	}

	var r0 *cognitoidentityprovider.GetIdentityProviderByIdentifierOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *cognitoidentityprovider.GetIdentityProviderByIdentifierInput, ...func(*cognitoidentityprovider.Options)) (*cognitoidentityprovider.GetIdentityProviderByIdentifierOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *cognitoidentityprovider.GetIdentityProviderByIdentifierInput, ...func(*cognitoidentityprovider.Options)) *cognitoidentityprovider.GetIdentityProviderByIdentifierOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cognitoidentityprovider.GetIdentityProviderByIdentifierOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *cognitoidentityprovider.GetIdentityProviderByIdentifierInput, ...func(*cognitoidentityprovider.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetLogDeliveryConfiguration provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetLogDeliveryConfiguration(ctx context.Context, params *cognitoidentityprovider.GetLogDeliveryConfigurationInput, optFns ...func(*cognitoidentityprovider.Options)) (*cognitoidentityprovider.GetLogDeliveryConfigurationOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetLogDeliveryConfiguration")
	}

	var r0 *cognitoidentityprovider.GetLogDeliveryConfigurationOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *cognitoidentityprovider.GetLogDeliveryConfigurationInput, ...func(*cognitoidentityprovider.Options)) (*cognitoidentityprovider.GetLogDeliveryConfigurationOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *cognitoidentityprovider.GetLogDeliveryConfigurationInput, ...func(*cognitoidentityprovider.Options)) *cognitoidentityprovider.GetLogDeliveryConfigurationOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cognitoidentityprovider.GetLogDeliveryConfigurationOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *cognitoidentityprovider.GetLogDeliveryConfigurationInput, ...func(*cognitoidentityprovider.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetSigningCertificate provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetSigningCertificate(ctx context.Context, params *cognitoidentityprovider.GetSigningCertificateInput, optFns ...func(*cognitoidentityprovider.Options)) (*cognitoidentityprovider.GetSigningCertificateOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetSigningCertificate")
	}

	var r0 *cognitoidentityprovider.GetSigningCertificateOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *cognitoidentityprovider.GetSigningCertificateInput, ...func(*cognitoidentityprovider.Options)) (*cognitoidentityprovider.GetSigningCertificateOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *cognitoidentityprovider.GetSigningCertificateInput, ...func(*cognitoidentityprovider.Options)) *cognitoidentityprovider.GetSigningCertificateOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cognitoidentityprovider.GetSigningCertificateOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *cognitoidentityprovider.GetSigningCertificateInput, ...func(*cognitoidentityprovider.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetUICustomization provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetUICustomization(ctx context.Context, params *cognitoidentityprovider.GetUICustomizationInput, optFns ...func(*cognitoidentityprovider.Options)) (*cognitoidentityprovider.GetUICustomizationOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetUICustomization")
	}

	var r0 *cognitoidentityprovider.GetUICustomizationOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *cognitoidentityprovider.GetUICustomizationInput, ...func(*cognitoidentityprovider.Options)) (*cognitoidentityprovider.GetUICustomizationOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *cognitoidentityprovider.GetUICustomizationInput, ...func(*cognitoidentityprovider.Options)) *cognitoidentityprovider.GetUICustomizationOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cognitoidentityprovider.GetUICustomizationOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *cognitoidentityprovider.GetUICustomizationInput, ...func(*cognitoidentityprovider.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetUser provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetUser(ctx context.Context, params *cognitoidentityprovider.GetUserInput, optFns ...func(*cognitoidentityprovider.Options)) (*cognitoidentityprovider.GetUserOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetUser")
	}

	var r0 *cognitoidentityprovider.GetUserOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *cognitoidentityprovider.GetUserInput, ...func(*cognitoidentityprovider.Options)) (*cognitoidentityprovider.GetUserOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *cognitoidentityprovider.GetUserInput, ...func(*cognitoidentityprovider.Options)) *cognitoidentityprovider.GetUserOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cognitoidentityprovider.GetUserOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *cognitoidentityprovider.GetUserInput, ...func(*cognitoidentityprovider.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetUserAttributeVerificationCode provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetUserAttributeVerificationCode(ctx context.Context, params *cognitoidentityprovider.GetUserAttributeVerificationCodeInput, optFns ...func(*cognitoidentityprovider.Options)) (*cognitoidentityprovider.GetUserAttributeVerificationCodeOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetUserAttributeVerificationCode")
	}

	var r0 *cognitoidentityprovider.GetUserAttributeVerificationCodeOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *cognitoidentityprovider.GetUserAttributeVerificationCodeInput, ...func(*cognitoidentityprovider.Options)) (*cognitoidentityprovider.GetUserAttributeVerificationCodeOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *cognitoidentityprovider.GetUserAttributeVerificationCodeInput, ...func(*cognitoidentityprovider.Options)) *cognitoidentityprovider.GetUserAttributeVerificationCodeOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cognitoidentityprovider.GetUserAttributeVerificationCodeOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *cognitoidentityprovider.GetUserAttributeVerificationCodeInput, ...func(*cognitoidentityprovider.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetUserPoolMfaConfig provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetUserPoolMfaConfig(ctx context.Context, params *cognitoidentityprovider.GetUserPoolMfaConfigInput, optFns ...func(*cognitoidentityprovider.Options)) (*cognitoidentityprovider.GetUserPoolMfaConfigOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetUserPoolMfaConfig")
	}

	var r0 *cognitoidentityprovider.GetUserPoolMfaConfigOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *cognitoidentityprovider.GetUserPoolMfaConfigInput, ...func(*cognitoidentityprovider.Options)) (*cognitoidentityprovider.GetUserPoolMfaConfigOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *cognitoidentityprovider.GetUserPoolMfaConfigInput, ...func(*cognitoidentityprovider.Options)) *cognitoidentityprovider.GetUserPoolMfaConfigOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cognitoidentityprovider.GetUserPoolMfaConfigOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *cognitoidentityprovider.GetUserPoolMfaConfigInput, ...func(*cognitoidentityprovider.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GlobalSignOut provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GlobalSignOut(ctx context.Context, params *cognitoidentityprovider.GlobalSignOutInput, optFns ...func(*cognitoidentityprovider.Options)) (*cognitoidentityprovider.GlobalSignOutOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GlobalSignOut")
	}

	var r0 *cognitoidentityprovider.GlobalSignOutOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *cognitoidentityprovider.GlobalSignOutInput, ...func(*cognitoidentityprovider.Options)) (*cognitoidentityprovider.GlobalSignOutOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *cognitoidentityprovider.GlobalSignOutInput, ...func(*cognitoidentityprovider.Options)) *cognitoidentityprovider.GlobalSignOutOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cognitoidentityprovider.GlobalSignOutOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *cognitoidentityprovider.GlobalSignOutInput, ...func(*cognitoidentityprovider.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// InitiateAuth provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) InitiateAuth(ctx context.Context, params *cognitoidentityprovider.InitiateAuthInput, optFns ...func(*cognitoidentityprovider.Options)) (*cognitoidentityprovider.InitiateAuthOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for InitiateAuth")
	}

	var r0 *cognitoidentityprovider.InitiateAuthOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *cognitoidentityprovider.InitiateAuthInput, ...func(*cognitoidentityprovider.Options)) (*cognitoidentityprovider.InitiateAuthOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *cognitoidentityprovider.InitiateAuthInput, ...func(*cognitoidentityprovider.Options)) *cognitoidentityprovider.InitiateAuthOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cognitoidentityprovider.InitiateAuthOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *cognitoidentityprovider.InitiateAuthInput, ...func(*cognitoidentityprovider.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListDevices provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListDevices(ctx context.Context, params *cognitoidentityprovider.ListDevicesInput, optFns ...func(*cognitoidentityprovider.Options)) (*cognitoidentityprovider.ListDevicesOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListDevices")
	}

	var r0 *cognitoidentityprovider.ListDevicesOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *cognitoidentityprovider.ListDevicesInput, ...func(*cognitoidentityprovider.Options)) (*cognitoidentityprovider.ListDevicesOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *cognitoidentityprovider.ListDevicesInput, ...func(*cognitoidentityprovider.Options)) *cognitoidentityprovider.ListDevicesOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cognitoidentityprovider.ListDevicesOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *cognitoidentityprovider.ListDevicesInput, ...func(*cognitoidentityprovider.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListGroups provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListGroups(ctx context.Context, params *cognitoidentityprovider.ListGroupsInput, optFns ...func(*cognitoidentityprovider.Options)) (*cognitoidentityprovider.ListGroupsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListGroups")
	}

	var r0 *cognitoidentityprovider.ListGroupsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *cognitoidentityprovider.ListGroupsInput, ...func(*cognitoidentityprovider.Options)) (*cognitoidentityprovider.ListGroupsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *cognitoidentityprovider.ListGroupsInput, ...func(*cognitoidentityprovider.Options)) *cognitoidentityprovider.ListGroupsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cognitoidentityprovider.ListGroupsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *cognitoidentityprovider.ListGroupsInput, ...func(*cognitoidentityprovider.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListIdentityProviders provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListIdentityProviders(ctx context.Context, params *cognitoidentityprovider.ListIdentityProvidersInput, optFns ...func(*cognitoidentityprovider.Options)) (*cognitoidentityprovider.ListIdentityProvidersOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListIdentityProviders")
	}

	var r0 *cognitoidentityprovider.ListIdentityProvidersOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *cognitoidentityprovider.ListIdentityProvidersInput, ...func(*cognitoidentityprovider.Options)) (*cognitoidentityprovider.ListIdentityProvidersOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *cognitoidentityprovider.ListIdentityProvidersInput, ...func(*cognitoidentityprovider.Options)) *cognitoidentityprovider.ListIdentityProvidersOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cognitoidentityprovider.ListIdentityProvidersOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *cognitoidentityprovider.ListIdentityProvidersInput, ...func(*cognitoidentityprovider.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListResourceServers provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListResourceServers(ctx context.Context, params *cognitoidentityprovider.ListResourceServersInput, optFns ...func(*cognitoidentityprovider.Options)) (*cognitoidentityprovider.ListResourceServersOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListResourceServers")
	}

	var r0 *cognitoidentityprovider.ListResourceServersOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *cognitoidentityprovider.ListResourceServersInput, ...func(*cognitoidentityprovider.Options)) (*cognitoidentityprovider.ListResourceServersOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *cognitoidentityprovider.ListResourceServersInput, ...func(*cognitoidentityprovider.Options)) *cognitoidentityprovider.ListResourceServersOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cognitoidentityprovider.ListResourceServersOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *cognitoidentityprovider.ListResourceServersInput, ...func(*cognitoidentityprovider.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListTagsForResource provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListTagsForResource(ctx context.Context, params *cognitoidentityprovider.ListTagsForResourceInput, optFns ...func(*cognitoidentityprovider.Options)) (*cognitoidentityprovider.ListTagsForResourceOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListTagsForResource")
	}

	var r0 *cognitoidentityprovider.ListTagsForResourceOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *cognitoidentityprovider.ListTagsForResourceInput, ...func(*cognitoidentityprovider.Options)) (*cognitoidentityprovider.ListTagsForResourceOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *cognitoidentityprovider.ListTagsForResourceInput, ...func(*cognitoidentityprovider.Options)) *cognitoidentityprovider.ListTagsForResourceOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cognitoidentityprovider.ListTagsForResourceOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *cognitoidentityprovider.ListTagsForResourceInput, ...func(*cognitoidentityprovider.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListUserImportJobs provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListUserImportJobs(ctx context.Context, params *cognitoidentityprovider.ListUserImportJobsInput, optFns ...func(*cognitoidentityprovider.Options)) (*cognitoidentityprovider.ListUserImportJobsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListUserImportJobs")
	}

	var r0 *cognitoidentityprovider.ListUserImportJobsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *cognitoidentityprovider.ListUserImportJobsInput, ...func(*cognitoidentityprovider.Options)) (*cognitoidentityprovider.ListUserImportJobsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *cognitoidentityprovider.ListUserImportJobsInput, ...func(*cognitoidentityprovider.Options)) *cognitoidentityprovider.ListUserImportJobsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cognitoidentityprovider.ListUserImportJobsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *cognitoidentityprovider.ListUserImportJobsInput, ...func(*cognitoidentityprovider.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListUserPoolClients provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListUserPoolClients(ctx context.Context, params *cognitoidentityprovider.ListUserPoolClientsInput, optFns ...func(*cognitoidentityprovider.Options)) (*cognitoidentityprovider.ListUserPoolClientsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListUserPoolClients")
	}

	var r0 *cognitoidentityprovider.ListUserPoolClientsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *cognitoidentityprovider.ListUserPoolClientsInput, ...func(*cognitoidentityprovider.Options)) (*cognitoidentityprovider.ListUserPoolClientsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *cognitoidentityprovider.ListUserPoolClientsInput, ...func(*cognitoidentityprovider.Options)) *cognitoidentityprovider.ListUserPoolClientsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cognitoidentityprovider.ListUserPoolClientsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *cognitoidentityprovider.ListUserPoolClientsInput, ...func(*cognitoidentityprovider.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListUserPools provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListUserPools(ctx context.Context, params *cognitoidentityprovider.ListUserPoolsInput, optFns ...func(*cognitoidentityprovider.Options)) (*cognitoidentityprovider.ListUserPoolsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListUserPools")
	}

	var r0 *cognitoidentityprovider.ListUserPoolsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *cognitoidentityprovider.ListUserPoolsInput, ...func(*cognitoidentityprovider.Options)) (*cognitoidentityprovider.ListUserPoolsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *cognitoidentityprovider.ListUserPoolsInput, ...func(*cognitoidentityprovider.Options)) *cognitoidentityprovider.ListUserPoolsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cognitoidentityprovider.ListUserPoolsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *cognitoidentityprovider.ListUserPoolsInput, ...func(*cognitoidentityprovider.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListUsers provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListUsers(ctx context.Context, params *cognitoidentityprovider.ListUsersInput, optFns ...func(*cognitoidentityprovider.Options)) (*cognitoidentityprovider.ListUsersOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListUsers")
	}

	var r0 *cognitoidentityprovider.ListUsersOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *cognitoidentityprovider.ListUsersInput, ...func(*cognitoidentityprovider.Options)) (*cognitoidentityprovider.ListUsersOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *cognitoidentityprovider.ListUsersInput, ...func(*cognitoidentityprovider.Options)) *cognitoidentityprovider.ListUsersOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cognitoidentityprovider.ListUsersOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *cognitoidentityprovider.ListUsersInput, ...func(*cognitoidentityprovider.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListUsersInGroup provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListUsersInGroup(ctx context.Context, params *cognitoidentityprovider.ListUsersInGroupInput, optFns ...func(*cognitoidentityprovider.Options)) (*cognitoidentityprovider.ListUsersInGroupOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListUsersInGroup")
	}

	var r0 *cognitoidentityprovider.ListUsersInGroupOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *cognitoidentityprovider.ListUsersInGroupInput, ...func(*cognitoidentityprovider.Options)) (*cognitoidentityprovider.ListUsersInGroupOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *cognitoidentityprovider.ListUsersInGroupInput, ...func(*cognitoidentityprovider.Options)) *cognitoidentityprovider.ListUsersInGroupOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cognitoidentityprovider.ListUsersInGroupOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *cognitoidentityprovider.ListUsersInGroupInput, ...func(*cognitoidentityprovider.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Options provides a mock function with given fields:
func (_m *IClient) Options() cognitoidentityprovider.Options {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Options")
	}

	var r0 cognitoidentityprovider.Options
	if rf, ok := ret.Get(0).(func() cognitoidentityprovider.Options); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(cognitoidentityprovider.Options)
	}

	return r0
}

// ResendConfirmationCode provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ResendConfirmationCode(ctx context.Context, params *cognitoidentityprovider.ResendConfirmationCodeInput, optFns ...func(*cognitoidentityprovider.Options)) (*cognitoidentityprovider.ResendConfirmationCodeOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ResendConfirmationCode")
	}

	var r0 *cognitoidentityprovider.ResendConfirmationCodeOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *cognitoidentityprovider.ResendConfirmationCodeInput, ...func(*cognitoidentityprovider.Options)) (*cognitoidentityprovider.ResendConfirmationCodeOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *cognitoidentityprovider.ResendConfirmationCodeInput, ...func(*cognitoidentityprovider.Options)) *cognitoidentityprovider.ResendConfirmationCodeOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cognitoidentityprovider.ResendConfirmationCodeOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *cognitoidentityprovider.ResendConfirmationCodeInput, ...func(*cognitoidentityprovider.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RespondToAuthChallenge provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) RespondToAuthChallenge(ctx context.Context, params *cognitoidentityprovider.RespondToAuthChallengeInput, optFns ...func(*cognitoidentityprovider.Options)) (*cognitoidentityprovider.RespondToAuthChallengeOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for RespondToAuthChallenge")
	}

	var r0 *cognitoidentityprovider.RespondToAuthChallengeOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *cognitoidentityprovider.RespondToAuthChallengeInput, ...func(*cognitoidentityprovider.Options)) (*cognitoidentityprovider.RespondToAuthChallengeOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *cognitoidentityprovider.RespondToAuthChallengeInput, ...func(*cognitoidentityprovider.Options)) *cognitoidentityprovider.RespondToAuthChallengeOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cognitoidentityprovider.RespondToAuthChallengeOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *cognitoidentityprovider.RespondToAuthChallengeInput, ...func(*cognitoidentityprovider.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RevokeToken provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) RevokeToken(ctx context.Context, params *cognitoidentityprovider.RevokeTokenInput, optFns ...func(*cognitoidentityprovider.Options)) (*cognitoidentityprovider.RevokeTokenOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for RevokeToken")
	}

	var r0 *cognitoidentityprovider.RevokeTokenOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *cognitoidentityprovider.RevokeTokenInput, ...func(*cognitoidentityprovider.Options)) (*cognitoidentityprovider.RevokeTokenOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *cognitoidentityprovider.RevokeTokenInput, ...func(*cognitoidentityprovider.Options)) *cognitoidentityprovider.RevokeTokenOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cognitoidentityprovider.RevokeTokenOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *cognitoidentityprovider.RevokeTokenInput, ...func(*cognitoidentityprovider.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SetLogDeliveryConfiguration provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) SetLogDeliveryConfiguration(ctx context.Context, params *cognitoidentityprovider.SetLogDeliveryConfigurationInput, optFns ...func(*cognitoidentityprovider.Options)) (*cognitoidentityprovider.SetLogDeliveryConfigurationOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for SetLogDeliveryConfiguration")
	}

	var r0 *cognitoidentityprovider.SetLogDeliveryConfigurationOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *cognitoidentityprovider.SetLogDeliveryConfigurationInput, ...func(*cognitoidentityprovider.Options)) (*cognitoidentityprovider.SetLogDeliveryConfigurationOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *cognitoidentityprovider.SetLogDeliveryConfigurationInput, ...func(*cognitoidentityprovider.Options)) *cognitoidentityprovider.SetLogDeliveryConfigurationOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cognitoidentityprovider.SetLogDeliveryConfigurationOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *cognitoidentityprovider.SetLogDeliveryConfigurationInput, ...func(*cognitoidentityprovider.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SetRiskConfiguration provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) SetRiskConfiguration(ctx context.Context, params *cognitoidentityprovider.SetRiskConfigurationInput, optFns ...func(*cognitoidentityprovider.Options)) (*cognitoidentityprovider.SetRiskConfigurationOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for SetRiskConfiguration")
	}

	var r0 *cognitoidentityprovider.SetRiskConfigurationOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *cognitoidentityprovider.SetRiskConfigurationInput, ...func(*cognitoidentityprovider.Options)) (*cognitoidentityprovider.SetRiskConfigurationOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *cognitoidentityprovider.SetRiskConfigurationInput, ...func(*cognitoidentityprovider.Options)) *cognitoidentityprovider.SetRiskConfigurationOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cognitoidentityprovider.SetRiskConfigurationOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *cognitoidentityprovider.SetRiskConfigurationInput, ...func(*cognitoidentityprovider.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SetUICustomization provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) SetUICustomization(ctx context.Context, params *cognitoidentityprovider.SetUICustomizationInput, optFns ...func(*cognitoidentityprovider.Options)) (*cognitoidentityprovider.SetUICustomizationOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for SetUICustomization")
	}

	var r0 *cognitoidentityprovider.SetUICustomizationOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *cognitoidentityprovider.SetUICustomizationInput, ...func(*cognitoidentityprovider.Options)) (*cognitoidentityprovider.SetUICustomizationOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *cognitoidentityprovider.SetUICustomizationInput, ...func(*cognitoidentityprovider.Options)) *cognitoidentityprovider.SetUICustomizationOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cognitoidentityprovider.SetUICustomizationOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *cognitoidentityprovider.SetUICustomizationInput, ...func(*cognitoidentityprovider.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SetUserMFAPreference provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) SetUserMFAPreference(ctx context.Context, params *cognitoidentityprovider.SetUserMFAPreferenceInput, optFns ...func(*cognitoidentityprovider.Options)) (*cognitoidentityprovider.SetUserMFAPreferenceOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for SetUserMFAPreference")
	}

	var r0 *cognitoidentityprovider.SetUserMFAPreferenceOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *cognitoidentityprovider.SetUserMFAPreferenceInput, ...func(*cognitoidentityprovider.Options)) (*cognitoidentityprovider.SetUserMFAPreferenceOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *cognitoidentityprovider.SetUserMFAPreferenceInput, ...func(*cognitoidentityprovider.Options)) *cognitoidentityprovider.SetUserMFAPreferenceOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cognitoidentityprovider.SetUserMFAPreferenceOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *cognitoidentityprovider.SetUserMFAPreferenceInput, ...func(*cognitoidentityprovider.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SetUserPoolMfaConfig provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) SetUserPoolMfaConfig(ctx context.Context, params *cognitoidentityprovider.SetUserPoolMfaConfigInput, optFns ...func(*cognitoidentityprovider.Options)) (*cognitoidentityprovider.SetUserPoolMfaConfigOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for SetUserPoolMfaConfig")
	}

	var r0 *cognitoidentityprovider.SetUserPoolMfaConfigOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *cognitoidentityprovider.SetUserPoolMfaConfigInput, ...func(*cognitoidentityprovider.Options)) (*cognitoidentityprovider.SetUserPoolMfaConfigOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *cognitoidentityprovider.SetUserPoolMfaConfigInput, ...func(*cognitoidentityprovider.Options)) *cognitoidentityprovider.SetUserPoolMfaConfigOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cognitoidentityprovider.SetUserPoolMfaConfigOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *cognitoidentityprovider.SetUserPoolMfaConfigInput, ...func(*cognitoidentityprovider.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SetUserSettings provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) SetUserSettings(ctx context.Context, params *cognitoidentityprovider.SetUserSettingsInput, optFns ...func(*cognitoidentityprovider.Options)) (*cognitoidentityprovider.SetUserSettingsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for SetUserSettings")
	}

	var r0 *cognitoidentityprovider.SetUserSettingsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *cognitoidentityprovider.SetUserSettingsInput, ...func(*cognitoidentityprovider.Options)) (*cognitoidentityprovider.SetUserSettingsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *cognitoidentityprovider.SetUserSettingsInput, ...func(*cognitoidentityprovider.Options)) *cognitoidentityprovider.SetUserSettingsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cognitoidentityprovider.SetUserSettingsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *cognitoidentityprovider.SetUserSettingsInput, ...func(*cognitoidentityprovider.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SignUp provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) SignUp(ctx context.Context, params *cognitoidentityprovider.SignUpInput, optFns ...func(*cognitoidentityprovider.Options)) (*cognitoidentityprovider.SignUpOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for SignUp")
	}

	var r0 *cognitoidentityprovider.SignUpOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *cognitoidentityprovider.SignUpInput, ...func(*cognitoidentityprovider.Options)) (*cognitoidentityprovider.SignUpOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *cognitoidentityprovider.SignUpInput, ...func(*cognitoidentityprovider.Options)) *cognitoidentityprovider.SignUpOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cognitoidentityprovider.SignUpOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *cognitoidentityprovider.SignUpInput, ...func(*cognitoidentityprovider.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// StartUserImportJob provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) StartUserImportJob(ctx context.Context, params *cognitoidentityprovider.StartUserImportJobInput, optFns ...func(*cognitoidentityprovider.Options)) (*cognitoidentityprovider.StartUserImportJobOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for StartUserImportJob")
	}

	var r0 *cognitoidentityprovider.StartUserImportJobOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *cognitoidentityprovider.StartUserImportJobInput, ...func(*cognitoidentityprovider.Options)) (*cognitoidentityprovider.StartUserImportJobOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *cognitoidentityprovider.StartUserImportJobInput, ...func(*cognitoidentityprovider.Options)) *cognitoidentityprovider.StartUserImportJobOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cognitoidentityprovider.StartUserImportJobOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *cognitoidentityprovider.StartUserImportJobInput, ...func(*cognitoidentityprovider.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// StopUserImportJob provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) StopUserImportJob(ctx context.Context, params *cognitoidentityprovider.StopUserImportJobInput, optFns ...func(*cognitoidentityprovider.Options)) (*cognitoidentityprovider.StopUserImportJobOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for StopUserImportJob")
	}

	var r0 *cognitoidentityprovider.StopUserImportJobOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *cognitoidentityprovider.StopUserImportJobInput, ...func(*cognitoidentityprovider.Options)) (*cognitoidentityprovider.StopUserImportJobOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *cognitoidentityprovider.StopUserImportJobInput, ...func(*cognitoidentityprovider.Options)) *cognitoidentityprovider.StopUserImportJobOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cognitoidentityprovider.StopUserImportJobOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *cognitoidentityprovider.StopUserImportJobInput, ...func(*cognitoidentityprovider.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// TagResource provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) TagResource(ctx context.Context, params *cognitoidentityprovider.TagResourceInput, optFns ...func(*cognitoidentityprovider.Options)) (*cognitoidentityprovider.TagResourceOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for TagResource")
	}

	var r0 *cognitoidentityprovider.TagResourceOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *cognitoidentityprovider.TagResourceInput, ...func(*cognitoidentityprovider.Options)) (*cognitoidentityprovider.TagResourceOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *cognitoidentityprovider.TagResourceInput, ...func(*cognitoidentityprovider.Options)) *cognitoidentityprovider.TagResourceOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cognitoidentityprovider.TagResourceOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *cognitoidentityprovider.TagResourceInput, ...func(*cognitoidentityprovider.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UntagResource provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UntagResource(ctx context.Context, params *cognitoidentityprovider.UntagResourceInput, optFns ...func(*cognitoidentityprovider.Options)) (*cognitoidentityprovider.UntagResourceOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UntagResource")
	}

	var r0 *cognitoidentityprovider.UntagResourceOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *cognitoidentityprovider.UntagResourceInput, ...func(*cognitoidentityprovider.Options)) (*cognitoidentityprovider.UntagResourceOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *cognitoidentityprovider.UntagResourceInput, ...func(*cognitoidentityprovider.Options)) *cognitoidentityprovider.UntagResourceOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cognitoidentityprovider.UntagResourceOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *cognitoidentityprovider.UntagResourceInput, ...func(*cognitoidentityprovider.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateAuthEventFeedback provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UpdateAuthEventFeedback(ctx context.Context, params *cognitoidentityprovider.UpdateAuthEventFeedbackInput, optFns ...func(*cognitoidentityprovider.Options)) (*cognitoidentityprovider.UpdateAuthEventFeedbackOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateAuthEventFeedback")
	}

	var r0 *cognitoidentityprovider.UpdateAuthEventFeedbackOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *cognitoidentityprovider.UpdateAuthEventFeedbackInput, ...func(*cognitoidentityprovider.Options)) (*cognitoidentityprovider.UpdateAuthEventFeedbackOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *cognitoidentityprovider.UpdateAuthEventFeedbackInput, ...func(*cognitoidentityprovider.Options)) *cognitoidentityprovider.UpdateAuthEventFeedbackOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cognitoidentityprovider.UpdateAuthEventFeedbackOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *cognitoidentityprovider.UpdateAuthEventFeedbackInput, ...func(*cognitoidentityprovider.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateDeviceStatus provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UpdateDeviceStatus(ctx context.Context, params *cognitoidentityprovider.UpdateDeviceStatusInput, optFns ...func(*cognitoidentityprovider.Options)) (*cognitoidentityprovider.UpdateDeviceStatusOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateDeviceStatus")
	}

	var r0 *cognitoidentityprovider.UpdateDeviceStatusOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *cognitoidentityprovider.UpdateDeviceStatusInput, ...func(*cognitoidentityprovider.Options)) (*cognitoidentityprovider.UpdateDeviceStatusOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *cognitoidentityprovider.UpdateDeviceStatusInput, ...func(*cognitoidentityprovider.Options)) *cognitoidentityprovider.UpdateDeviceStatusOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cognitoidentityprovider.UpdateDeviceStatusOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *cognitoidentityprovider.UpdateDeviceStatusInput, ...func(*cognitoidentityprovider.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateGroup provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UpdateGroup(ctx context.Context, params *cognitoidentityprovider.UpdateGroupInput, optFns ...func(*cognitoidentityprovider.Options)) (*cognitoidentityprovider.UpdateGroupOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateGroup")
	}

	var r0 *cognitoidentityprovider.UpdateGroupOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *cognitoidentityprovider.UpdateGroupInput, ...func(*cognitoidentityprovider.Options)) (*cognitoidentityprovider.UpdateGroupOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *cognitoidentityprovider.UpdateGroupInput, ...func(*cognitoidentityprovider.Options)) *cognitoidentityprovider.UpdateGroupOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cognitoidentityprovider.UpdateGroupOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *cognitoidentityprovider.UpdateGroupInput, ...func(*cognitoidentityprovider.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateIdentityProvider provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UpdateIdentityProvider(ctx context.Context, params *cognitoidentityprovider.UpdateIdentityProviderInput, optFns ...func(*cognitoidentityprovider.Options)) (*cognitoidentityprovider.UpdateIdentityProviderOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateIdentityProvider")
	}

	var r0 *cognitoidentityprovider.UpdateIdentityProviderOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *cognitoidentityprovider.UpdateIdentityProviderInput, ...func(*cognitoidentityprovider.Options)) (*cognitoidentityprovider.UpdateIdentityProviderOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *cognitoidentityprovider.UpdateIdentityProviderInput, ...func(*cognitoidentityprovider.Options)) *cognitoidentityprovider.UpdateIdentityProviderOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cognitoidentityprovider.UpdateIdentityProviderOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *cognitoidentityprovider.UpdateIdentityProviderInput, ...func(*cognitoidentityprovider.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateResourceServer provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UpdateResourceServer(ctx context.Context, params *cognitoidentityprovider.UpdateResourceServerInput, optFns ...func(*cognitoidentityprovider.Options)) (*cognitoidentityprovider.UpdateResourceServerOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateResourceServer")
	}

	var r0 *cognitoidentityprovider.UpdateResourceServerOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *cognitoidentityprovider.UpdateResourceServerInput, ...func(*cognitoidentityprovider.Options)) (*cognitoidentityprovider.UpdateResourceServerOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *cognitoidentityprovider.UpdateResourceServerInput, ...func(*cognitoidentityprovider.Options)) *cognitoidentityprovider.UpdateResourceServerOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cognitoidentityprovider.UpdateResourceServerOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *cognitoidentityprovider.UpdateResourceServerInput, ...func(*cognitoidentityprovider.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateUserAttributes provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UpdateUserAttributes(ctx context.Context, params *cognitoidentityprovider.UpdateUserAttributesInput, optFns ...func(*cognitoidentityprovider.Options)) (*cognitoidentityprovider.UpdateUserAttributesOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateUserAttributes")
	}

	var r0 *cognitoidentityprovider.UpdateUserAttributesOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *cognitoidentityprovider.UpdateUserAttributesInput, ...func(*cognitoidentityprovider.Options)) (*cognitoidentityprovider.UpdateUserAttributesOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *cognitoidentityprovider.UpdateUserAttributesInput, ...func(*cognitoidentityprovider.Options)) *cognitoidentityprovider.UpdateUserAttributesOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cognitoidentityprovider.UpdateUserAttributesOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *cognitoidentityprovider.UpdateUserAttributesInput, ...func(*cognitoidentityprovider.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateUserPool provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UpdateUserPool(ctx context.Context, params *cognitoidentityprovider.UpdateUserPoolInput, optFns ...func(*cognitoidentityprovider.Options)) (*cognitoidentityprovider.UpdateUserPoolOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateUserPool")
	}

	var r0 *cognitoidentityprovider.UpdateUserPoolOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *cognitoidentityprovider.UpdateUserPoolInput, ...func(*cognitoidentityprovider.Options)) (*cognitoidentityprovider.UpdateUserPoolOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *cognitoidentityprovider.UpdateUserPoolInput, ...func(*cognitoidentityprovider.Options)) *cognitoidentityprovider.UpdateUserPoolOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cognitoidentityprovider.UpdateUserPoolOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *cognitoidentityprovider.UpdateUserPoolInput, ...func(*cognitoidentityprovider.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateUserPoolClient provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UpdateUserPoolClient(ctx context.Context, params *cognitoidentityprovider.UpdateUserPoolClientInput, optFns ...func(*cognitoidentityprovider.Options)) (*cognitoidentityprovider.UpdateUserPoolClientOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateUserPoolClient")
	}

	var r0 *cognitoidentityprovider.UpdateUserPoolClientOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *cognitoidentityprovider.UpdateUserPoolClientInput, ...func(*cognitoidentityprovider.Options)) (*cognitoidentityprovider.UpdateUserPoolClientOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *cognitoidentityprovider.UpdateUserPoolClientInput, ...func(*cognitoidentityprovider.Options)) *cognitoidentityprovider.UpdateUserPoolClientOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cognitoidentityprovider.UpdateUserPoolClientOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *cognitoidentityprovider.UpdateUserPoolClientInput, ...func(*cognitoidentityprovider.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateUserPoolDomain provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UpdateUserPoolDomain(ctx context.Context, params *cognitoidentityprovider.UpdateUserPoolDomainInput, optFns ...func(*cognitoidentityprovider.Options)) (*cognitoidentityprovider.UpdateUserPoolDomainOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateUserPoolDomain")
	}

	var r0 *cognitoidentityprovider.UpdateUserPoolDomainOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *cognitoidentityprovider.UpdateUserPoolDomainInput, ...func(*cognitoidentityprovider.Options)) (*cognitoidentityprovider.UpdateUserPoolDomainOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *cognitoidentityprovider.UpdateUserPoolDomainInput, ...func(*cognitoidentityprovider.Options)) *cognitoidentityprovider.UpdateUserPoolDomainOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cognitoidentityprovider.UpdateUserPoolDomainOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *cognitoidentityprovider.UpdateUserPoolDomainInput, ...func(*cognitoidentityprovider.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// VerifySoftwareToken provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) VerifySoftwareToken(ctx context.Context, params *cognitoidentityprovider.VerifySoftwareTokenInput, optFns ...func(*cognitoidentityprovider.Options)) (*cognitoidentityprovider.VerifySoftwareTokenOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for VerifySoftwareToken")
	}

	var r0 *cognitoidentityprovider.VerifySoftwareTokenOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *cognitoidentityprovider.VerifySoftwareTokenInput, ...func(*cognitoidentityprovider.Options)) (*cognitoidentityprovider.VerifySoftwareTokenOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *cognitoidentityprovider.VerifySoftwareTokenInput, ...func(*cognitoidentityprovider.Options)) *cognitoidentityprovider.VerifySoftwareTokenOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cognitoidentityprovider.VerifySoftwareTokenOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *cognitoidentityprovider.VerifySoftwareTokenInput, ...func(*cognitoidentityprovider.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// VerifyUserAttribute provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) VerifyUserAttribute(ctx context.Context, params *cognitoidentityprovider.VerifyUserAttributeInput, optFns ...func(*cognitoidentityprovider.Options)) (*cognitoidentityprovider.VerifyUserAttributeOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for VerifyUserAttribute")
	}

	var r0 *cognitoidentityprovider.VerifyUserAttributeOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *cognitoidentityprovider.VerifyUserAttributeInput, ...func(*cognitoidentityprovider.Options)) (*cognitoidentityprovider.VerifyUserAttributeOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *cognitoidentityprovider.VerifyUserAttributeInput, ...func(*cognitoidentityprovider.Options)) *cognitoidentityprovider.VerifyUserAttributeOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cognitoidentityprovider.VerifyUserAttributeOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *cognitoidentityprovider.VerifyUserAttributeInput, ...func(*cognitoidentityprovider.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewIClient creates a new instance of IClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewIClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *IClient {
	mock := &IClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
