// Code generated by mockery v2.53.4. DO NOT EDIT.

package mocks

import (
	context "context"

	sms "github.com/aws/aws-sdk-go-v2/service/sms"
	mock "github.com/stretchr/testify/mock"
)

// IClient is an autogenerated mock type for the IClient type
type IClient struct {
	mock.Mock
}

// CreateApp provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CreateApp(ctx context.Context, params *sms.CreateAppInput, optFns ...func(*sms.Options)) (*sms.CreateAppOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateApp")
	}

	var r0 *sms.CreateAppOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *sms.CreateAppInput, ...func(*sms.Options)) (*sms.CreateAppOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *sms.CreateAppInput, ...func(*sms.Options)) *sms.CreateAppOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sms.CreateAppOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *sms.CreateAppInput, ...func(*sms.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateReplicationJob provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CreateReplicationJob(ctx context.Context, params *sms.CreateReplicationJobInput, optFns ...func(*sms.Options)) (*sms.CreateReplicationJobOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateReplicationJob")
	}

	var r0 *sms.CreateReplicationJobOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *sms.CreateReplicationJobInput, ...func(*sms.Options)) (*sms.CreateReplicationJobOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *sms.CreateReplicationJobInput, ...func(*sms.Options)) *sms.CreateReplicationJobOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sms.CreateReplicationJobOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *sms.CreateReplicationJobInput, ...func(*sms.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteApp provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteApp(ctx context.Context, params *sms.DeleteAppInput, optFns ...func(*sms.Options)) (*sms.DeleteAppOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteApp")
	}

	var r0 *sms.DeleteAppOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *sms.DeleteAppInput, ...func(*sms.Options)) (*sms.DeleteAppOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *sms.DeleteAppInput, ...func(*sms.Options)) *sms.DeleteAppOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sms.DeleteAppOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *sms.DeleteAppInput, ...func(*sms.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteAppLaunchConfiguration provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteAppLaunchConfiguration(ctx context.Context, params *sms.DeleteAppLaunchConfigurationInput, optFns ...func(*sms.Options)) (*sms.DeleteAppLaunchConfigurationOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteAppLaunchConfiguration")
	}

	var r0 *sms.DeleteAppLaunchConfigurationOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *sms.DeleteAppLaunchConfigurationInput, ...func(*sms.Options)) (*sms.DeleteAppLaunchConfigurationOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *sms.DeleteAppLaunchConfigurationInput, ...func(*sms.Options)) *sms.DeleteAppLaunchConfigurationOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sms.DeleteAppLaunchConfigurationOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *sms.DeleteAppLaunchConfigurationInput, ...func(*sms.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteAppReplicationConfiguration provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteAppReplicationConfiguration(ctx context.Context, params *sms.DeleteAppReplicationConfigurationInput, optFns ...func(*sms.Options)) (*sms.DeleteAppReplicationConfigurationOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteAppReplicationConfiguration")
	}

	var r0 *sms.DeleteAppReplicationConfigurationOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *sms.DeleteAppReplicationConfigurationInput, ...func(*sms.Options)) (*sms.DeleteAppReplicationConfigurationOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *sms.DeleteAppReplicationConfigurationInput, ...func(*sms.Options)) *sms.DeleteAppReplicationConfigurationOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sms.DeleteAppReplicationConfigurationOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *sms.DeleteAppReplicationConfigurationInput, ...func(*sms.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteAppValidationConfiguration provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteAppValidationConfiguration(ctx context.Context, params *sms.DeleteAppValidationConfigurationInput, optFns ...func(*sms.Options)) (*sms.DeleteAppValidationConfigurationOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteAppValidationConfiguration")
	}

	var r0 *sms.DeleteAppValidationConfigurationOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *sms.DeleteAppValidationConfigurationInput, ...func(*sms.Options)) (*sms.DeleteAppValidationConfigurationOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *sms.DeleteAppValidationConfigurationInput, ...func(*sms.Options)) *sms.DeleteAppValidationConfigurationOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sms.DeleteAppValidationConfigurationOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *sms.DeleteAppValidationConfigurationInput, ...func(*sms.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteReplicationJob provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteReplicationJob(ctx context.Context, params *sms.DeleteReplicationJobInput, optFns ...func(*sms.Options)) (*sms.DeleteReplicationJobOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteReplicationJob")
	}

	var r0 *sms.DeleteReplicationJobOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *sms.DeleteReplicationJobInput, ...func(*sms.Options)) (*sms.DeleteReplicationJobOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *sms.DeleteReplicationJobInput, ...func(*sms.Options)) *sms.DeleteReplicationJobOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sms.DeleteReplicationJobOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *sms.DeleteReplicationJobInput, ...func(*sms.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteServerCatalog provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteServerCatalog(ctx context.Context, params *sms.DeleteServerCatalogInput, optFns ...func(*sms.Options)) (*sms.DeleteServerCatalogOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteServerCatalog")
	}

	var r0 *sms.DeleteServerCatalogOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *sms.DeleteServerCatalogInput, ...func(*sms.Options)) (*sms.DeleteServerCatalogOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *sms.DeleteServerCatalogInput, ...func(*sms.Options)) *sms.DeleteServerCatalogOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sms.DeleteServerCatalogOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *sms.DeleteServerCatalogInput, ...func(*sms.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DisassociateConnector provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DisassociateConnector(ctx context.Context, params *sms.DisassociateConnectorInput, optFns ...func(*sms.Options)) (*sms.DisassociateConnectorOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DisassociateConnector")
	}

	var r0 *sms.DisassociateConnectorOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *sms.DisassociateConnectorInput, ...func(*sms.Options)) (*sms.DisassociateConnectorOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *sms.DisassociateConnectorInput, ...func(*sms.Options)) *sms.DisassociateConnectorOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sms.DisassociateConnectorOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *sms.DisassociateConnectorInput, ...func(*sms.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GenerateChangeSet provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GenerateChangeSet(ctx context.Context, params *sms.GenerateChangeSetInput, optFns ...func(*sms.Options)) (*sms.GenerateChangeSetOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GenerateChangeSet")
	}

	var r0 *sms.GenerateChangeSetOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *sms.GenerateChangeSetInput, ...func(*sms.Options)) (*sms.GenerateChangeSetOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *sms.GenerateChangeSetInput, ...func(*sms.Options)) *sms.GenerateChangeSetOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sms.GenerateChangeSetOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *sms.GenerateChangeSetInput, ...func(*sms.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GenerateTemplate provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GenerateTemplate(ctx context.Context, params *sms.GenerateTemplateInput, optFns ...func(*sms.Options)) (*sms.GenerateTemplateOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GenerateTemplate")
	}

	var r0 *sms.GenerateTemplateOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *sms.GenerateTemplateInput, ...func(*sms.Options)) (*sms.GenerateTemplateOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *sms.GenerateTemplateInput, ...func(*sms.Options)) *sms.GenerateTemplateOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sms.GenerateTemplateOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *sms.GenerateTemplateInput, ...func(*sms.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetApp provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetApp(ctx context.Context, params *sms.GetAppInput, optFns ...func(*sms.Options)) (*sms.GetAppOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetApp")
	}

	var r0 *sms.GetAppOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *sms.GetAppInput, ...func(*sms.Options)) (*sms.GetAppOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *sms.GetAppInput, ...func(*sms.Options)) *sms.GetAppOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sms.GetAppOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *sms.GetAppInput, ...func(*sms.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAppLaunchConfiguration provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetAppLaunchConfiguration(ctx context.Context, params *sms.GetAppLaunchConfigurationInput, optFns ...func(*sms.Options)) (*sms.GetAppLaunchConfigurationOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetAppLaunchConfiguration")
	}

	var r0 *sms.GetAppLaunchConfigurationOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *sms.GetAppLaunchConfigurationInput, ...func(*sms.Options)) (*sms.GetAppLaunchConfigurationOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *sms.GetAppLaunchConfigurationInput, ...func(*sms.Options)) *sms.GetAppLaunchConfigurationOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sms.GetAppLaunchConfigurationOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *sms.GetAppLaunchConfigurationInput, ...func(*sms.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAppReplicationConfiguration provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetAppReplicationConfiguration(ctx context.Context, params *sms.GetAppReplicationConfigurationInput, optFns ...func(*sms.Options)) (*sms.GetAppReplicationConfigurationOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetAppReplicationConfiguration")
	}

	var r0 *sms.GetAppReplicationConfigurationOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *sms.GetAppReplicationConfigurationInput, ...func(*sms.Options)) (*sms.GetAppReplicationConfigurationOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *sms.GetAppReplicationConfigurationInput, ...func(*sms.Options)) *sms.GetAppReplicationConfigurationOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sms.GetAppReplicationConfigurationOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *sms.GetAppReplicationConfigurationInput, ...func(*sms.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAppValidationConfiguration provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetAppValidationConfiguration(ctx context.Context, params *sms.GetAppValidationConfigurationInput, optFns ...func(*sms.Options)) (*sms.GetAppValidationConfigurationOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetAppValidationConfiguration")
	}

	var r0 *sms.GetAppValidationConfigurationOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *sms.GetAppValidationConfigurationInput, ...func(*sms.Options)) (*sms.GetAppValidationConfigurationOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *sms.GetAppValidationConfigurationInput, ...func(*sms.Options)) *sms.GetAppValidationConfigurationOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sms.GetAppValidationConfigurationOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *sms.GetAppValidationConfigurationInput, ...func(*sms.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAppValidationOutput provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetAppValidationOutput(ctx context.Context, params *sms.GetAppValidationOutputInput, optFns ...func(*sms.Options)) (*sms.GetAppValidationOutputOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetAppValidationOutput")
	}

	var r0 *sms.GetAppValidationOutputOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *sms.GetAppValidationOutputInput, ...func(*sms.Options)) (*sms.GetAppValidationOutputOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *sms.GetAppValidationOutputInput, ...func(*sms.Options)) *sms.GetAppValidationOutputOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sms.GetAppValidationOutputOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *sms.GetAppValidationOutputInput, ...func(*sms.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetConnectors provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetConnectors(ctx context.Context, params *sms.GetConnectorsInput, optFns ...func(*sms.Options)) (*sms.GetConnectorsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetConnectors")
	}

	var r0 *sms.GetConnectorsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *sms.GetConnectorsInput, ...func(*sms.Options)) (*sms.GetConnectorsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *sms.GetConnectorsInput, ...func(*sms.Options)) *sms.GetConnectorsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sms.GetConnectorsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *sms.GetConnectorsInput, ...func(*sms.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetReplicationJobs provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetReplicationJobs(ctx context.Context, params *sms.GetReplicationJobsInput, optFns ...func(*sms.Options)) (*sms.GetReplicationJobsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetReplicationJobs")
	}

	var r0 *sms.GetReplicationJobsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *sms.GetReplicationJobsInput, ...func(*sms.Options)) (*sms.GetReplicationJobsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *sms.GetReplicationJobsInput, ...func(*sms.Options)) *sms.GetReplicationJobsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sms.GetReplicationJobsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *sms.GetReplicationJobsInput, ...func(*sms.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetReplicationRuns provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetReplicationRuns(ctx context.Context, params *sms.GetReplicationRunsInput, optFns ...func(*sms.Options)) (*sms.GetReplicationRunsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetReplicationRuns")
	}

	var r0 *sms.GetReplicationRunsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *sms.GetReplicationRunsInput, ...func(*sms.Options)) (*sms.GetReplicationRunsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *sms.GetReplicationRunsInput, ...func(*sms.Options)) *sms.GetReplicationRunsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sms.GetReplicationRunsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *sms.GetReplicationRunsInput, ...func(*sms.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetServers provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetServers(ctx context.Context, params *sms.GetServersInput, optFns ...func(*sms.Options)) (*sms.GetServersOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetServers")
	}

	var r0 *sms.GetServersOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *sms.GetServersInput, ...func(*sms.Options)) (*sms.GetServersOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *sms.GetServersInput, ...func(*sms.Options)) *sms.GetServersOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sms.GetServersOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *sms.GetServersInput, ...func(*sms.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ImportAppCatalog provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ImportAppCatalog(ctx context.Context, params *sms.ImportAppCatalogInput, optFns ...func(*sms.Options)) (*sms.ImportAppCatalogOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ImportAppCatalog")
	}

	var r0 *sms.ImportAppCatalogOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *sms.ImportAppCatalogInput, ...func(*sms.Options)) (*sms.ImportAppCatalogOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *sms.ImportAppCatalogInput, ...func(*sms.Options)) *sms.ImportAppCatalogOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sms.ImportAppCatalogOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *sms.ImportAppCatalogInput, ...func(*sms.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ImportServerCatalog provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ImportServerCatalog(ctx context.Context, params *sms.ImportServerCatalogInput, optFns ...func(*sms.Options)) (*sms.ImportServerCatalogOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ImportServerCatalog")
	}

	var r0 *sms.ImportServerCatalogOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *sms.ImportServerCatalogInput, ...func(*sms.Options)) (*sms.ImportServerCatalogOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *sms.ImportServerCatalogInput, ...func(*sms.Options)) *sms.ImportServerCatalogOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sms.ImportServerCatalogOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *sms.ImportServerCatalogInput, ...func(*sms.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// LaunchApp provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) LaunchApp(ctx context.Context, params *sms.LaunchAppInput, optFns ...func(*sms.Options)) (*sms.LaunchAppOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for LaunchApp")
	}

	var r0 *sms.LaunchAppOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *sms.LaunchAppInput, ...func(*sms.Options)) (*sms.LaunchAppOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *sms.LaunchAppInput, ...func(*sms.Options)) *sms.LaunchAppOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sms.LaunchAppOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *sms.LaunchAppInput, ...func(*sms.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListApps provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListApps(ctx context.Context, params *sms.ListAppsInput, optFns ...func(*sms.Options)) (*sms.ListAppsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListApps")
	}

	var r0 *sms.ListAppsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *sms.ListAppsInput, ...func(*sms.Options)) (*sms.ListAppsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *sms.ListAppsInput, ...func(*sms.Options)) *sms.ListAppsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sms.ListAppsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *sms.ListAppsInput, ...func(*sms.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NotifyAppValidationOutput provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) NotifyAppValidationOutput(ctx context.Context, params *sms.NotifyAppValidationOutputInput, optFns ...func(*sms.Options)) (*sms.NotifyAppValidationOutputOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for NotifyAppValidationOutput")
	}

	var r0 *sms.NotifyAppValidationOutputOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *sms.NotifyAppValidationOutputInput, ...func(*sms.Options)) (*sms.NotifyAppValidationOutputOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *sms.NotifyAppValidationOutputInput, ...func(*sms.Options)) *sms.NotifyAppValidationOutputOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sms.NotifyAppValidationOutputOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *sms.NotifyAppValidationOutputInput, ...func(*sms.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Options provides a mock function with no fields
func (_m *IClient) Options() sms.Options {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Options")
	}

	var r0 sms.Options
	if rf, ok := ret.Get(0).(func() sms.Options); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(sms.Options)
	}

	return r0
}

// PutAppLaunchConfiguration provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) PutAppLaunchConfiguration(ctx context.Context, params *sms.PutAppLaunchConfigurationInput, optFns ...func(*sms.Options)) (*sms.PutAppLaunchConfigurationOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for PutAppLaunchConfiguration")
	}

	var r0 *sms.PutAppLaunchConfigurationOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *sms.PutAppLaunchConfigurationInput, ...func(*sms.Options)) (*sms.PutAppLaunchConfigurationOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *sms.PutAppLaunchConfigurationInput, ...func(*sms.Options)) *sms.PutAppLaunchConfigurationOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sms.PutAppLaunchConfigurationOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *sms.PutAppLaunchConfigurationInput, ...func(*sms.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PutAppReplicationConfiguration provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) PutAppReplicationConfiguration(ctx context.Context, params *sms.PutAppReplicationConfigurationInput, optFns ...func(*sms.Options)) (*sms.PutAppReplicationConfigurationOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for PutAppReplicationConfiguration")
	}

	var r0 *sms.PutAppReplicationConfigurationOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *sms.PutAppReplicationConfigurationInput, ...func(*sms.Options)) (*sms.PutAppReplicationConfigurationOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *sms.PutAppReplicationConfigurationInput, ...func(*sms.Options)) *sms.PutAppReplicationConfigurationOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sms.PutAppReplicationConfigurationOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *sms.PutAppReplicationConfigurationInput, ...func(*sms.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PutAppValidationConfiguration provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) PutAppValidationConfiguration(ctx context.Context, params *sms.PutAppValidationConfigurationInput, optFns ...func(*sms.Options)) (*sms.PutAppValidationConfigurationOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for PutAppValidationConfiguration")
	}

	var r0 *sms.PutAppValidationConfigurationOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *sms.PutAppValidationConfigurationInput, ...func(*sms.Options)) (*sms.PutAppValidationConfigurationOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *sms.PutAppValidationConfigurationInput, ...func(*sms.Options)) *sms.PutAppValidationConfigurationOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sms.PutAppValidationConfigurationOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *sms.PutAppValidationConfigurationInput, ...func(*sms.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// StartAppReplication provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) StartAppReplication(ctx context.Context, params *sms.StartAppReplicationInput, optFns ...func(*sms.Options)) (*sms.StartAppReplicationOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for StartAppReplication")
	}

	var r0 *sms.StartAppReplicationOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *sms.StartAppReplicationInput, ...func(*sms.Options)) (*sms.StartAppReplicationOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *sms.StartAppReplicationInput, ...func(*sms.Options)) *sms.StartAppReplicationOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sms.StartAppReplicationOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *sms.StartAppReplicationInput, ...func(*sms.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// StartOnDemandAppReplication provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) StartOnDemandAppReplication(ctx context.Context, params *sms.StartOnDemandAppReplicationInput, optFns ...func(*sms.Options)) (*sms.StartOnDemandAppReplicationOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for StartOnDemandAppReplication")
	}

	var r0 *sms.StartOnDemandAppReplicationOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *sms.StartOnDemandAppReplicationInput, ...func(*sms.Options)) (*sms.StartOnDemandAppReplicationOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *sms.StartOnDemandAppReplicationInput, ...func(*sms.Options)) *sms.StartOnDemandAppReplicationOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sms.StartOnDemandAppReplicationOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *sms.StartOnDemandAppReplicationInput, ...func(*sms.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// StartOnDemandReplicationRun provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) StartOnDemandReplicationRun(ctx context.Context, params *sms.StartOnDemandReplicationRunInput, optFns ...func(*sms.Options)) (*sms.StartOnDemandReplicationRunOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for StartOnDemandReplicationRun")
	}

	var r0 *sms.StartOnDemandReplicationRunOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *sms.StartOnDemandReplicationRunInput, ...func(*sms.Options)) (*sms.StartOnDemandReplicationRunOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *sms.StartOnDemandReplicationRunInput, ...func(*sms.Options)) *sms.StartOnDemandReplicationRunOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sms.StartOnDemandReplicationRunOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *sms.StartOnDemandReplicationRunInput, ...func(*sms.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// StopAppReplication provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) StopAppReplication(ctx context.Context, params *sms.StopAppReplicationInput, optFns ...func(*sms.Options)) (*sms.StopAppReplicationOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for StopAppReplication")
	}

	var r0 *sms.StopAppReplicationOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *sms.StopAppReplicationInput, ...func(*sms.Options)) (*sms.StopAppReplicationOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *sms.StopAppReplicationInput, ...func(*sms.Options)) *sms.StopAppReplicationOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sms.StopAppReplicationOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *sms.StopAppReplicationInput, ...func(*sms.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// TerminateApp provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) TerminateApp(ctx context.Context, params *sms.TerminateAppInput, optFns ...func(*sms.Options)) (*sms.TerminateAppOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for TerminateApp")
	}

	var r0 *sms.TerminateAppOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *sms.TerminateAppInput, ...func(*sms.Options)) (*sms.TerminateAppOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *sms.TerminateAppInput, ...func(*sms.Options)) *sms.TerminateAppOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sms.TerminateAppOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *sms.TerminateAppInput, ...func(*sms.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateApp provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UpdateApp(ctx context.Context, params *sms.UpdateAppInput, optFns ...func(*sms.Options)) (*sms.UpdateAppOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateApp")
	}

	var r0 *sms.UpdateAppOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *sms.UpdateAppInput, ...func(*sms.Options)) (*sms.UpdateAppOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *sms.UpdateAppInput, ...func(*sms.Options)) *sms.UpdateAppOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sms.UpdateAppOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *sms.UpdateAppInput, ...func(*sms.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateReplicationJob provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UpdateReplicationJob(ctx context.Context, params *sms.UpdateReplicationJobInput, optFns ...func(*sms.Options)) (*sms.UpdateReplicationJobOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateReplicationJob")
	}

	var r0 *sms.UpdateReplicationJobOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *sms.UpdateReplicationJobInput, ...func(*sms.Options)) (*sms.UpdateReplicationJobOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *sms.UpdateReplicationJobInput, ...func(*sms.Options)) *sms.UpdateReplicationJobOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sms.UpdateReplicationJobOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *sms.UpdateReplicationJobInput, ...func(*sms.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewIClient creates a new instance of IClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewIClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *IClient {
	mock := &IClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
