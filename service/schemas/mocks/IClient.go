// Code generated by mockery v2.53.4. DO NOT EDIT.

package mocks

import (
	context "context"

	schemas "github.com/aws/aws-sdk-go-v2/service/schemas"
	mock "github.com/stretchr/testify/mock"
)

// IClient is an autogenerated mock type for the IClient type
type IClient struct {
	mock.Mock
}

// CreateDiscoverer provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CreateDiscoverer(ctx context.Context, params *schemas.CreateDiscovererInput, optFns ...func(*schemas.Options)) (*schemas.CreateDiscovererOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateDiscoverer")
	}

	var r0 *schemas.CreateDiscovererOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *schemas.CreateDiscovererInput, ...func(*schemas.Options)) (*schemas.CreateDiscovererOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *schemas.CreateDiscovererInput, ...func(*schemas.Options)) *schemas.CreateDiscovererOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*schemas.CreateDiscovererOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *schemas.CreateDiscovererInput, ...func(*schemas.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateRegistry provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CreateRegistry(ctx context.Context, params *schemas.CreateRegistryInput, optFns ...func(*schemas.Options)) (*schemas.CreateRegistryOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateRegistry")
	}

	var r0 *schemas.CreateRegistryOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *schemas.CreateRegistryInput, ...func(*schemas.Options)) (*schemas.CreateRegistryOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *schemas.CreateRegistryInput, ...func(*schemas.Options)) *schemas.CreateRegistryOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*schemas.CreateRegistryOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *schemas.CreateRegistryInput, ...func(*schemas.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateSchema provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CreateSchema(ctx context.Context, params *schemas.CreateSchemaInput, optFns ...func(*schemas.Options)) (*schemas.CreateSchemaOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateSchema")
	}

	var r0 *schemas.CreateSchemaOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *schemas.CreateSchemaInput, ...func(*schemas.Options)) (*schemas.CreateSchemaOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *schemas.CreateSchemaInput, ...func(*schemas.Options)) *schemas.CreateSchemaOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*schemas.CreateSchemaOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *schemas.CreateSchemaInput, ...func(*schemas.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteDiscoverer provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteDiscoverer(ctx context.Context, params *schemas.DeleteDiscovererInput, optFns ...func(*schemas.Options)) (*schemas.DeleteDiscovererOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteDiscoverer")
	}

	var r0 *schemas.DeleteDiscovererOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *schemas.DeleteDiscovererInput, ...func(*schemas.Options)) (*schemas.DeleteDiscovererOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *schemas.DeleteDiscovererInput, ...func(*schemas.Options)) *schemas.DeleteDiscovererOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*schemas.DeleteDiscovererOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *schemas.DeleteDiscovererInput, ...func(*schemas.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteRegistry provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteRegistry(ctx context.Context, params *schemas.DeleteRegistryInput, optFns ...func(*schemas.Options)) (*schemas.DeleteRegistryOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteRegistry")
	}

	var r0 *schemas.DeleteRegistryOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *schemas.DeleteRegistryInput, ...func(*schemas.Options)) (*schemas.DeleteRegistryOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *schemas.DeleteRegistryInput, ...func(*schemas.Options)) *schemas.DeleteRegistryOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*schemas.DeleteRegistryOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *schemas.DeleteRegistryInput, ...func(*schemas.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteResourcePolicy provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteResourcePolicy(ctx context.Context, params *schemas.DeleteResourcePolicyInput, optFns ...func(*schemas.Options)) (*schemas.DeleteResourcePolicyOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteResourcePolicy")
	}

	var r0 *schemas.DeleteResourcePolicyOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *schemas.DeleteResourcePolicyInput, ...func(*schemas.Options)) (*schemas.DeleteResourcePolicyOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *schemas.DeleteResourcePolicyInput, ...func(*schemas.Options)) *schemas.DeleteResourcePolicyOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*schemas.DeleteResourcePolicyOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *schemas.DeleteResourcePolicyInput, ...func(*schemas.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteSchema provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteSchema(ctx context.Context, params *schemas.DeleteSchemaInput, optFns ...func(*schemas.Options)) (*schemas.DeleteSchemaOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteSchema")
	}

	var r0 *schemas.DeleteSchemaOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *schemas.DeleteSchemaInput, ...func(*schemas.Options)) (*schemas.DeleteSchemaOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *schemas.DeleteSchemaInput, ...func(*schemas.Options)) *schemas.DeleteSchemaOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*schemas.DeleteSchemaOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *schemas.DeleteSchemaInput, ...func(*schemas.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteSchemaVersion provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteSchemaVersion(ctx context.Context, params *schemas.DeleteSchemaVersionInput, optFns ...func(*schemas.Options)) (*schemas.DeleteSchemaVersionOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteSchemaVersion")
	}

	var r0 *schemas.DeleteSchemaVersionOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *schemas.DeleteSchemaVersionInput, ...func(*schemas.Options)) (*schemas.DeleteSchemaVersionOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *schemas.DeleteSchemaVersionInput, ...func(*schemas.Options)) *schemas.DeleteSchemaVersionOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*schemas.DeleteSchemaVersionOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *schemas.DeleteSchemaVersionInput, ...func(*schemas.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeCodeBinding provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DescribeCodeBinding(ctx context.Context, params *schemas.DescribeCodeBindingInput, optFns ...func(*schemas.Options)) (*schemas.DescribeCodeBindingOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DescribeCodeBinding")
	}

	var r0 *schemas.DescribeCodeBindingOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *schemas.DescribeCodeBindingInput, ...func(*schemas.Options)) (*schemas.DescribeCodeBindingOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *schemas.DescribeCodeBindingInput, ...func(*schemas.Options)) *schemas.DescribeCodeBindingOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*schemas.DescribeCodeBindingOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *schemas.DescribeCodeBindingInput, ...func(*schemas.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeDiscoverer provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DescribeDiscoverer(ctx context.Context, params *schemas.DescribeDiscovererInput, optFns ...func(*schemas.Options)) (*schemas.DescribeDiscovererOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DescribeDiscoverer")
	}

	var r0 *schemas.DescribeDiscovererOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *schemas.DescribeDiscovererInput, ...func(*schemas.Options)) (*schemas.DescribeDiscovererOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *schemas.DescribeDiscovererInput, ...func(*schemas.Options)) *schemas.DescribeDiscovererOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*schemas.DescribeDiscovererOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *schemas.DescribeDiscovererInput, ...func(*schemas.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeRegistry provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DescribeRegistry(ctx context.Context, params *schemas.DescribeRegistryInput, optFns ...func(*schemas.Options)) (*schemas.DescribeRegistryOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DescribeRegistry")
	}

	var r0 *schemas.DescribeRegistryOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *schemas.DescribeRegistryInput, ...func(*schemas.Options)) (*schemas.DescribeRegistryOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *schemas.DescribeRegistryInput, ...func(*schemas.Options)) *schemas.DescribeRegistryOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*schemas.DescribeRegistryOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *schemas.DescribeRegistryInput, ...func(*schemas.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeSchema provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DescribeSchema(ctx context.Context, params *schemas.DescribeSchemaInput, optFns ...func(*schemas.Options)) (*schemas.DescribeSchemaOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DescribeSchema")
	}

	var r0 *schemas.DescribeSchemaOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *schemas.DescribeSchemaInput, ...func(*schemas.Options)) (*schemas.DescribeSchemaOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *schemas.DescribeSchemaInput, ...func(*schemas.Options)) *schemas.DescribeSchemaOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*schemas.DescribeSchemaOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *schemas.DescribeSchemaInput, ...func(*schemas.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ExportSchema provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ExportSchema(ctx context.Context, params *schemas.ExportSchemaInput, optFns ...func(*schemas.Options)) (*schemas.ExportSchemaOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ExportSchema")
	}

	var r0 *schemas.ExportSchemaOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *schemas.ExportSchemaInput, ...func(*schemas.Options)) (*schemas.ExportSchemaOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *schemas.ExportSchemaInput, ...func(*schemas.Options)) *schemas.ExportSchemaOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*schemas.ExportSchemaOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *schemas.ExportSchemaInput, ...func(*schemas.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetCodeBindingSource provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetCodeBindingSource(ctx context.Context, params *schemas.GetCodeBindingSourceInput, optFns ...func(*schemas.Options)) (*schemas.GetCodeBindingSourceOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetCodeBindingSource")
	}

	var r0 *schemas.GetCodeBindingSourceOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *schemas.GetCodeBindingSourceInput, ...func(*schemas.Options)) (*schemas.GetCodeBindingSourceOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *schemas.GetCodeBindingSourceInput, ...func(*schemas.Options)) *schemas.GetCodeBindingSourceOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*schemas.GetCodeBindingSourceOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *schemas.GetCodeBindingSourceInput, ...func(*schemas.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetDiscoveredSchema provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetDiscoveredSchema(ctx context.Context, params *schemas.GetDiscoveredSchemaInput, optFns ...func(*schemas.Options)) (*schemas.GetDiscoveredSchemaOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetDiscoveredSchema")
	}

	var r0 *schemas.GetDiscoveredSchemaOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *schemas.GetDiscoveredSchemaInput, ...func(*schemas.Options)) (*schemas.GetDiscoveredSchemaOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *schemas.GetDiscoveredSchemaInput, ...func(*schemas.Options)) *schemas.GetDiscoveredSchemaOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*schemas.GetDiscoveredSchemaOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *schemas.GetDiscoveredSchemaInput, ...func(*schemas.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetResourcePolicy provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetResourcePolicy(ctx context.Context, params *schemas.GetResourcePolicyInput, optFns ...func(*schemas.Options)) (*schemas.GetResourcePolicyOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetResourcePolicy")
	}

	var r0 *schemas.GetResourcePolicyOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *schemas.GetResourcePolicyInput, ...func(*schemas.Options)) (*schemas.GetResourcePolicyOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *schemas.GetResourcePolicyInput, ...func(*schemas.Options)) *schemas.GetResourcePolicyOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*schemas.GetResourcePolicyOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *schemas.GetResourcePolicyInput, ...func(*schemas.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListDiscoverers provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListDiscoverers(ctx context.Context, params *schemas.ListDiscoverersInput, optFns ...func(*schemas.Options)) (*schemas.ListDiscoverersOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListDiscoverers")
	}

	var r0 *schemas.ListDiscoverersOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *schemas.ListDiscoverersInput, ...func(*schemas.Options)) (*schemas.ListDiscoverersOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *schemas.ListDiscoverersInput, ...func(*schemas.Options)) *schemas.ListDiscoverersOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*schemas.ListDiscoverersOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *schemas.ListDiscoverersInput, ...func(*schemas.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListRegistries provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListRegistries(ctx context.Context, params *schemas.ListRegistriesInput, optFns ...func(*schemas.Options)) (*schemas.ListRegistriesOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListRegistries")
	}

	var r0 *schemas.ListRegistriesOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *schemas.ListRegistriesInput, ...func(*schemas.Options)) (*schemas.ListRegistriesOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *schemas.ListRegistriesInput, ...func(*schemas.Options)) *schemas.ListRegistriesOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*schemas.ListRegistriesOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *schemas.ListRegistriesInput, ...func(*schemas.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListSchemaVersions provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListSchemaVersions(ctx context.Context, params *schemas.ListSchemaVersionsInput, optFns ...func(*schemas.Options)) (*schemas.ListSchemaVersionsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListSchemaVersions")
	}

	var r0 *schemas.ListSchemaVersionsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *schemas.ListSchemaVersionsInput, ...func(*schemas.Options)) (*schemas.ListSchemaVersionsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *schemas.ListSchemaVersionsInput, ...func(*schemas.Options)) *schemas.ListSchemaVersionsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*schemas.ListSchemaVersionsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *schemas.ListSchemaVersionsInput, ...func(*schemas.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListSchemas provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListSchemas(ctx context.Context, params *schemas.ListSchemasInput, optFns ...func(*schemas.Options)) (*schemas.ListSchemasOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListSchemas")
	}

	var r0 *schemas.ListSchemasOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *schemas.ListSchemasInput, ...func(*schemas.Options)) (*schemas.ListSchemasOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *schemas.ListSchemasInput, ...func(*schemas.Options)) *schemas.ListSchemasOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*schemas.ListSchemasOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *schemas.ListSchemasInput, ...func(*schemas.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListTagsForResource provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListTagsForResource(ctx context.Context, params *schemas.ListTagsForResourceInput, optFns ...func(*schemas.Options)) (*schemas.ListTagsForResourceOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListTagsForResource")
	}

	var r0 *schemas.ListTagsForResourceOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *schemas.ListTagsForResourceInput, ...func(*schemas.Options)) (*schemas.ListTagsForResourceOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *schemas.ListTagsForResourceInput, ...func(*schemas.Options)) *schemas.ListTagsForResourceOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*schemas.ListTagsForResourceOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *schemas.ListTagsForResourceInput, ...func(*schemas.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Options provides a mock function with no fields
func (_m *IClient) Options() schemas.Options {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Options")
	}

	var r0 schemas.Options
	if rf, ok := ret.Get(0).(func() schemas.Options); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(schemas.Options)
	}

	return r0
}

// PutCodeBinding provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) PutCodeBinding(ctx context.Context, params *schemas.PutCodeBindingInput, optFns ...func(*schemas.Options)) (*schemas.PutCodeBindingOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for PutCodeBinding")
	}

	var r0 *schemas.PutCodeBindingOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *schemas.PutCodeBindingInput, ...func(*schemas.Options)) (*schemas.PutCodeBindingOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *schemas.PutCodeBindingInput, ...func(*schemas.Options)) *schemas.PutCodeBindingOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*schemas.PutCodeBindingOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *schemas.PutCodeBindingInput, ...func(*schemas.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PutResourcePolicy provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) PutResourcePolicy(ctx context.Context, params *schemas.PutResourcePolicyInput, optFns ...func(*schemas.Options)) (*schemas.PutResourcePolicyOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for PutResourcePolicy")
	}

	var r0 *schemas.PutResourcePolicyOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *schemas.PutResourcePolicyInput, ...func(*schemas.Options)) (*schemas.PutResourcePolicyOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *schemas.PutResourcePolicyInput, ...func(*schemas.Options)) *schemas.PutResourcePolicyOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*schemas.PutResourcePolicyOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *schemas.PutResourcePolicyInput, ...func(*schemas.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SearchSchemas provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) SearchSchemas(ctx context.Context, params *schemas.SearchSchemasInput, optFns ...func(*schemas.Options)) (*schemas.SearchSchemasOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for SearchSchemas")
	}

	var r0 *schemas.SearchSchemasOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *schemas.SearchSchemasInput, ...func(*schemas.Options)) (*schemas.SearchSchemasOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *schemas.SearchSchemasInput, ...func(*schemas.Options)) *schemas.SearchSchemasOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*schemas.SearchSchemasOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *schemas.SearchSchemasInput, ...func(*schemas.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// StartDiscoverer provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) StartDiscoverer(ctx context.Context, params *schemas.StartDiscovererInput, optFns ...func(*schemas.Options)) (*schemas.StartDiscovererOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for StartDiscoverer")
	}

	var r0 *schemas.StartDiscovererOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *schemas.StartDiscovererInput, ...func(*schemas.Options)) (*schemas.StartDiscovererOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *schemas.StartDiscovererInput, ...func(*schemas.Options)) *schemas.StartDiscovererOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*schemas.StartDiscovererOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *schemas.StartDiscovererInput, ...func(*schemas.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// StopDiscoverer provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) StopDiscoverer(ctx context.Context, params *schemas.StopDiscovererInput, optFns ...func(*schemas.Options)) (*schemas.StopDiscovererOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for StopDiscoverer")
	}

	var r0 *schemas.StopDiscovererOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *schemas.StopDiscovererInput, ...func(*schemas.Options)) (*schemas.StopDiscovererOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *schemas.StopDiscovererInput, ...func(*schemas.Options)) *schemas.StopDiscovererOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*schemas.StopDiscovererOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *schemas.StopDiscovererInput, ...func(*schemas.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// TagResource provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) TagResource(ctx context.Context, params *schemas.TagResourceInput, optFns ...func(*schemas.Options)) (*schemas.TagResourceOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for TagResource")
	}

	var r0 *schemas.TagResourceOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *schemas.TagResourceInput, ...func(*schemas.Options)) (*schemas.TagResourceOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *schemas.TagResourceInput, ...func(*schemas.Options)) *schemas.TagResourceOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*schemas.TagResourceOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *schemas.TagResourceInput, ...func(*schemas.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UntagResource provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UntagResource(ctx context.Context, params *schemas.UntagResourceInput, optFns ...func(*schemas.Options)) (*schemas.UntagResourceOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UntagResource")
	}

	var r0 *schemas.UntagResourceOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *schemas.UntagResourceInput, ...func(*schemas.Options)) (*schemas.UntagResourceOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *schemas.UntagResourceInput, ...func(*schemas.Options)) *schemas.UntagResourceOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*schemas.UntagResourceOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *schemas.UntagResourceInput, ...func(*schemas.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateDiscoverer provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UpdateDiscoverer(ctx context.Context, params *schemas.UpdateDiscovererInput, optFns ...func(*schemas.Options)) (*schemas.UpdateDiscovererOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateDiscoverer")
	}

	var r0 *schemas.UpdateDiscovererOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *schemas.UpdateDiscovererInput, ...func(*schemas.Options)) (*schemas.UpdateDiscovererOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *schemas.UpdateDiscovererInput, ...func(*schemas.Options)) *schemas.UpdateDiscovererOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*schemas.UpdateDiscovererOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *schemas.UpdateDiscovererInput, ...func(*schemas.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateRegistry provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UpdateRegistry(ctx context.Context, params *schemas.UpdateRegistryInput, optFns ...func(*schemas.Options)) (*schemas.UpdateRegistryOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateRegistry")
	}

	var r0 *schemas.UpdateRegistryOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *schemas.UpdateRegistryInput, ...func(*schemas.Options)) (*schemas.UpdateRegistryOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *schemas.UpdateRegistryInput, ...func(*schemas.Options)) *schemas.UpdateRegistryOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*schemas.UpdateRegistryOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *schemas.UpdateRegistryInput, ...func(*schemas.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateSchema provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UpdateSchema(ctx context.Context, params *schemas.UpdateSchemaInput, optFns ...func(*schemas.Options)) (*schemas.UpdateSchemaOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateSchema")
	}

	var r0 *schemas.UpdateSchemaOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *schemas.UpdateSchemaInput, ...func(*schemas.Options)) (*schemas.UpdateSchemaOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *schemas.UpdateSchemaInput, ...func(*schemas.Options)) *schemas.UpdateSchemaOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*schemas.UpdateSchemaOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *schemas.UpdateSchemaInput, ...func(*schemas.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewIClient creates a new instance of IClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewIClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *IClient {
	mock := &IClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
