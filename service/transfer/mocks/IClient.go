// Code generated by mockery v2.53.4. DO NOT EDIT.

package mocks

import (
	context "context"

	transfer "github.com/aws/aws-sdk-go-v2/service/transfer"
	mock "github.com/stretchr/testify/mock"
)

// IClient is an autogenerated mock type for the IClient type
type IClient struct {
	mock.Mock
}

// CreateAccess provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CreateAccess(ctx context.Context, params *transfer.CreateAccessInput, optFns ...func(*transfer.Options)) (*transfer.CreateAccessOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateAccess")
	}

	var r0 *transfer.CreateAccessOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *transfer.CreateAccessInput, ...func(*transfer.Options)) (*transfer.CreateAccessOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *transfer.CreateAccessInput, ...func(*transfer.Options)) *transfer.CreateAccessOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*transfer.CreateAccessOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *transfer.CreateAccessInput, ...func(*transfer.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateAgreement provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CreateAgreement(ctx context.Context, params *transfer.CreateAgreementInput, optFns ...func(*transfer.Options)) (*transfer.CreateAgreementOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateAgreement")
	}

	var r0 *transfer.CreateAgreementOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *transfer.CreateAgreementInput, ...func(*transfer.Options)) (*transfer.CreateAgreementOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *transfer.CreateAgreementInput, ...func(*transfer.Options)) *transfer.CreateAgreementOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*transfer.CreateAgreementOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *transfer.CreateAgreementInput, ...func(*transfer.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateConnector provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CreateConnector(ctx context.Context, params *transfer.CreateConnectorInput, optFns ...func(*transfer.Options)) (*transfer.CreateConnectorOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateConnector")
	}

	var r0 *transfer.CreateConnectorOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *transfer.CreateConnectorInput, ...func(*transfer.Options)) (*transfer.CreateConnectorOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *transfer.CreateConnectorInput, ...func(*transfer.Options)) *transfer.CreateConnectorOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*transfer.CreateConnectorOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *transfer.CreateConnectorInput, ...func(*transfer.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateProfile provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CreateProfile(ctx context.Context, params *transfer.CreateProfileInput, optFns ...func(*transfer.Options)) (*transfer.CreateProfileOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateProfile")
	}

	var r0 *transfer.CreateProfileOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *transfer.CreateProfileInput, ...func(*transfer.Options)) (*transfer.CreateProfileOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *transfer.CreateProfileInput, ...func(*transfer.Options)) *transfer.CreateProfileOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*transfer.CreateProfileOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *transfer.CreateProfileInput, ...func(*transfer.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateServer provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CreateServer(ctx context.Context, params *transfer.CreateServerInput, optFns ...func(*transfer.Options)) (*transfer.CreateServerOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateServer")
	}

	var r0 *transfer.CreateServerOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *transfer.CreateServerInput, ...func(*transfer.Options)) (*transfer.CreateServerOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *transfer.CreateServerInput, ...func(*transfer.Options)) *transfer.CreateServerOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*transfer.CreateServerOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *transfer.CreateServerInput, ...func(*transfer.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateUser provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CreateUser(ctx context.Context, params *transfer.CreateUserInput, optFns ...func(*transfer.Options)) (*transfer.CreateUserOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateUser")
	}

	var r0 *transfer.CreateUserOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *transfer.CreateUserInput, ...func(*transfer.Options)) (*transfer.CreateUserOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *transfer.CreateUserInput, ...func(*transfer.Options)) *transfer.CreateUserOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*transfer.CreateUserOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *transfer.CreateUserInput, ...func(*transfer.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateWebApp provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CreateWebApp(ctx context.Context, params *transfer.CreateWebAppInput, optFns ...func(*transfer.Options)) (*transfer.CreateWebAppOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateWebApp")
	}

	var r0 *transfer.CreateWebAppOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *transfer.CreateWebAppInput, ...func(*transfer.Options)) (*transfer.CreateWebAppOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *transfer.CreateWebAppInput, ...func(*transfer.Options)) *transfer.CreateWebAppOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*transfer.CreateWebAppOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *transfer.CreateWebAppInput, ...func(*transfer.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateWorkflow provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CreateWorkflow(ctx context.Context, params *transfer.CreateWorkflowInput, optFns ...func(*transfer.Options)) (*transfer.CreateWorkflowOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateWorkflow")
	}

	var r0 *transfer.CreateWorkflowOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *transfer.CreateWorkflowInput, ...func(*transfer.Options)) (*transfer.CreateWorkflowOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *transfer.CreateWorkflowInput, ...func(*transfer.Options)) *transfer.CreateWorkflowOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*transfer.CreateWorkflowOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *transfer.CreateWorkflowInput, ...func(*transfer.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteAccess provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteAccess(ctx context.Context, params *transfer.DeleteAccessInput, optFns ...func(*transfer.Options)) (*transfer.DeleteAccessOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteAccess")
	}

	var r0 *transfer.DeleteAccessOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *transfer.DeleteAccessInput, ...func(*transfer.Options)) (*transfer.DeleteAccessOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *transfer.DeleteAccessInput, ...func(*transfer.Options)) *transfer.DeleteAccessOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*transfer.DeleteAccessOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *transfer.DeleteAccessInput, ...func(*transfer.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteAgreement provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteAgreement(ctx context.Context, params *transfer.DeleteAgreementInput, optFns ...func(*transfer.Options)) (*transfer.DeleteAgreementOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteAgreement")
	}

	var r0 *transfer.DeleteAgreementOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *transfer.DeleteAgreementInput, ...func(*transfer.Options)) (*transfer.DeleteAgreementOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *transfer.DeleteAgreementInput, ...func(*transfer.Options)) *transfer.DeleteAgreementOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*transfer.DeleteAgreementOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *transfer.DeleteAgreementInput, ...func(*transfer.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteCertificate provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteCertificate(ctx context.Context, params *transfer.DeleteCertificateInput, optFns ...func(*transfer.Options)) (*transfer.DeleteCertificateOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteCertificate")
	}

	var r0 *transfer.DeleteCertificateOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *transfer.DeleteCertificateInput, ...func(*transfer.Options)) (*transfer.DeleteCertificateOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *transfer.DeleteCertificateInput, ...func(*transfer.Options)) *transfer.DeleteCertificateOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*transfer.DeleteCertificateOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *transfer.DeleteCertificateInput, ...func(*transfer.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteConnector provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteConnector(ctx context.Context, params *transfer.DeleteConnectorInput, optFns ...func(*transfer.Options)) (*transfer.DeleteConnectorOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteConnector")
	}

	var r0 *transfer.DeleteConnectorOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *transfer.DeleteConnectorInput, ...func(*transfer.Options)) (*transfer.DeleteConnectorOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *transfer.DeleteConnectorInput, ...func(*transfer.Options)) *transfer.DeleteConnectorOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*transfer.DeleteConnectorOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *transfer.DeleteConnectorInput, ...func(*transfer.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteHostKey provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteHostKey(ctx context.Context, params *transfer.DeleteHostKeyInput, optFns ...func(*transfer.Options)) (*transfer.DeleteHostKeyOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteHostKey")
	}

	var r0 *transfer.DeleteHostKeyOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *transfer.DeleteHostKeyInput, ...func(*transfer.Options)) (*transfer.DeleteHostKeyOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *transfer.DeleteHostKeyInput, ...func(*transfer.Options)) *transfer.DeleteHostKeyOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*transfer.DeleteHostKeyOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *transfer.DeleteHostKeyInput, ...func(*transfer.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteProfile provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteProfile(ctx context.Context, params *transfer.DeleteProfileInput, optFns ...func(*transfer.Options)) (*transfer.DeleteProfileOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteProfile")
	}

	var r0 *transfer.DeleteProfileOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *transfer.DeleteProfileInput, ...func(*transfer.Options)) (*transfer.DeleteProfileOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *transfer.DeleteProfileInput, ...func(*transfer.Options)) *transfer.DeleteProfileOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*transfer.DeleteProfileOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *transfer.DeleteProfileInput, ...func(*transfer.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteServer provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteServer(ctx context.Context, params *transfer.DeleteServerInput, optFns ...func(*transfer.Options)) (*transfer.DeleteServerOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteServer")
	}

	var r0 *transfer.DeleteServerOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *transfer.DeleteServerInput, ...func(*transfer.Options)) (*transfer.DeleteServerOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *transfer.DeleteServerInput, ...func(*transfer.Options)) *transfer.DeleteServerOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*transfer.DeleteServerOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *transfer.DeleteServerInput, ...func(*transfer.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteSshPublicKey provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteSshPublicKey(ctx context.Context, params *transfer.DeleteSshPublicKeyInput, optFns ...func(*transfer.Options)) (*transfer.DeleteSshPublicKeyOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteSshPublicKey")
	}

	var r0 *transfer.DeleteSshPublicKeyOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *transfer.DeleteSshPublicKeyInput, ...func(*transfer.Options)) (*transfer.DeleteSshPublicKeyOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *transfer.DeleteSshPublicKeyInput, ...func(*transfer.Options)) *transfer.DeleteSshPublicKeyOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*transfer.DeleteSshPublicKeyOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *transfer.DeleteSshPublicKeyInput, ...func(*transfer.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteUser provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteUser(ctx context.Context, params *transfer.DeleteUserInput, optFns ...func(*transfer.Options)) (*transfer.DeleteUserOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteUser")
	}

	var r0 *transfer.DeleteUserOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *transfer.DeleteUserInput, ...func(*transfer.Options)) (*transfer.DeleteUserOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *transfer.DeleteUserInput, ...func(*transfer.Options)) *transfer.DeleteUserOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*transfer.DeleteUserOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *transfer.DeleteUserInput, ...func(*transfer.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteWebApp provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteWebApp(ctx context.Context, params *transfer.DeleteWebAppInput, optFns ...func(*transfer.Options)) (*transfer.DeleteWebAppOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteWebApp")
	}

	var r0 *transfer.DeleteWebAppOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *transfer.DeleteWebAppInput, ...func(*transfer.Options)) (*transfer.DeleteWebAppOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *transfer.DeleteWebAppInput, ...func(*transfer.Options)) *transfer.DeleteWebAppOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*transfer.DeleteWebAppOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *transfer.DeleteWebAppInput, ...func(*transfer.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteWebAppCustomization provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteWebAppCustomization(ctx context.Context, params *transfer.DeleteWebAppCustomizationInput, optFns ...func(*transfer.Options)) (*transfer.DeleteWebAppCustomizationOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteWebAppCustomization")
	}

	var r0 *transfer.DeleteWebAppCustomizationOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *transfer.DeleteWebAppCustomizationInput, ...func(*transfer.Options)) (*transfer.DeleteWebAppCustomizationOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *transfer.DeleteWebAppCustomizationInput, ...func(*transfer.Options)) *transfer.DeleteWebAppCustomizationOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*transfer.DeleteWebAppCustomizationOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *transfer.DeleteWebAppCustomizationInput, ...func(*transfer.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteWorkflow provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteWorkflow(ctx context.Context, params *transfer.DeleteWorkflowInput, optFns ...func(*transfer.Options)) (*transfer.DeleteWorkflowOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteWorkflow")
	}

	var r0 *transfer.DeleteWorkflowOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *transfer.DeleteWorkflowInput, ...func(*transfer.Options)) (*transfer.DeleteWorkflowOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *transfer.DeleteWorkflowInput, ...func(*transfer.Options)) *transfer.DeleteWorkflowOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*transfer.DeleteWorkflowOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *transfer.DeleteWorkflowInput, ...func(*transfer.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeAccess provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DescribeAccess(ctx context.Context, params *transfer.DescribeAccessInput, optFns ...func(*transfer.Options)) (*transfer.DescribeAccessOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DescribeAccess")
	}

	var r0 *transfer.DescribeAccessOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *transfer.DescribeAccessInput, ...func(*transfer.Options)) (*transfer.DescribeAccessOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *transfer.DescribeAccessInput, ...func(*transfer.Options)) *transfer.DescribeAccessOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*transfer.DescribeAccessOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *transfer.DescribeAccessInput, ...func(*transfer.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeAgreement provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DescribeAgreement(ctx context.Context, params *transfer.DescribeAgreementInput, optFns ...func(*transfer.Options)) (*transfer.DescribeAgreementOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DescribeAgreement")
	}

	var r0 *transfer.DescribeAgreementOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *transfer.DescribeAgreementInput, ...func(*transfer.Options)) (*transfer.DescribeAgreementOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *transfer.DescribeAgreementInput, ...func(*transfer.Options)) *transfer.DescribeAgreementOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*transfer.DescribeAgreementOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *transfer.DescribeAgreementInput, ...func(*transfer.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeCertificate provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DescribeCertificate(ctx context.Context, params *transfer.DescribeCertificateInput, optFns ...func(*transfer.Options)) (*transfer.DescribeCertificateOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DescribeCertificate")
	}

	var r0 *transfer.DescribeCertificateOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *transfer.DescribeCertificateInput, ...func(*transfer.Options)) (*transfer.DescribeCertificateOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *transfer.DescribeCertificateInput, ...func(*transfer.Options)) *transfer.DescribeCertificateOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*transfer.DescribeCertificateOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *transfer.DescribeCertificateInput, ...func(*transfer.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeConnector provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DescribeConnector(ctx context.Context, params *transfer.DescribeConnectorInput, optFns ...func(*transfer.Options)) (*transfer.DescribeConnectorOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DescribeConnector")
	}

	var r0 *transfer.DescribeConnectorOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *transfer.DescribeConnectorInput, ...func(*transfer.Options)) (*transfer.DescribeConnectorOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *transfer.DescribeConnectorInput, ...func(*transfer.Options)) *transfer.DescribeConnectorOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*transfer.DescribeConnectorOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *transfer.DescribeConnectorInput, ...func(*transfer.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeExecution provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DescribeExecution(ctx context.Context, params *transfer.DescribeExecutionInput, optFns ...func(*transfer.Options)) (*transfer.DescribeExecutionOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DescribeExecution")
	}

	var r0 *transfer.DescribeExecutionOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *transfer.DescribeExecutionInput, ...func(*transfer.Options)) (*transfer.DescribeExecutionOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *transfer.DescribeExecutionInput, ...func(*transfer.Options)) *transfer.DescribeExecutionOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*transfer.DescribeExecutionOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *transfer.DescribeExecutionInput, ...func(*transfer.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeHostKey provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DescribeHostKey(ctx context.Context, params *transfer.DescribeHostKeyInput, optFns ...func(*transfer.Options)) (*transfer.DescribeHostKeyOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DescribeHostKey")
	}

	var r0 *transfer.DescribeHostKeyOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *transfer.DescribeHostKeyInput, ...func(*transfer.Options)) (*transfer.DescribeHostKeyOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *transfer.DescribeHostKeyInput, ...func(*transfer.Options)) *transfer.DescribeHostKeyOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*transfer.DescribeHostKeyOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *transfer.DescribeHostKeyInput, ...func(*transfer.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeProfile provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DescribeProfile(ctx context.Context, params *transfer.DescribeProfileInput, optFns ...func(*transfer.Options)) (*transfer.DescribeProfileOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DescribeProfile")
	}

	var r0 *transfer.DescribeProfileOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *transfer.DescribeProfileInput, ...func(*transfer.Options)) (*transfer.DescribeProfileOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *transfer.DescribeProfileInput, ...func(*transfer.Options)) *transfer.DescribeProfileOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*transfer.DescribeProfileOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *transfer.DescribeProfileInput, ...func(*transfer.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeSecurityPolicy provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DescribeSecurityPolicy(ctx context.Context, params *transfer.DescribeSecurityPolicyInput, optFns ...func(*transfer.Options)) (*transfer.DescribeSecurityPolicyOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DescribeSecurityPolicy")
	}

	var r0 *transfer.DescribeSecurityPolicyOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *transfer.DescribeSecurityPolicyInput, ...func(*transfer.Options)) (*transfer.DescribeSecurityPolicyOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *transfer.DescribeSecurityPolicyInput, ...func(*transfer.Options)) *transfer.DescribeSecurityPolicyOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*transfer.DescribeSecurityPolicyOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *transfer.DescribeSecurityPolicyInput, ...func(*transfer.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeServer provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DescribeServer(ctx context.Context, params *transfer.DescribeServerInput, optFns ...func(*transfer.Options)) (*transfer.DescribeServerOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DescribeServer")
	}

	var r0 *transfer.DescribeServerOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *transfer.DescribeServerInput, ...func(*transfer.Options)) (*transfer.DescribeServerOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *transfer.DescribeServerInput, ...func(*transfer.Options)) *transfer.DescribeServerOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*transfer.DescribeServerOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *transfer.DescribeServerInput, ...func(*transfer.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeUser provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DescribeUser(ctx context.Context, params *transfer.DescribeUserInput, optFns ...func(*transfer.Options)) (*transfer.DescribeUserOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DescribeUser")
	}

	var r0 *transfer.DescribeUserOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *transfer.DescribeUserInput, ...func(*transfer.Options)) (*transfer.DescribeUserOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *transfer.DescribeUserInput, ...func(*transfer.Options)) *transfer.DescribeUserOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*transfer.DescribeUserOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *transfer.DescribeUserInput, ...func(*transfer.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeWebApp provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DescribeWebApp(ctx context.Context, params *transfer.DescribeWebAppInput, optFns ...func(*transfer.Options)) (*transfer.DescribeWebAppOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DescribeWebApp")
	}

	var r0 *transfer.DescribeWebAppOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *transfer.DescribeWebAppInput, ...func(*transfer.Options)) (*transfer.DescribeWebAppOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *transfer.DescribeWebAppInput, ...func(*transfer.Options)) *transfer.DescribeWebAppOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*transfer.DescribeWebAppOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *transfer.DescribeWebAppInput, ...func(*transfer.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeWebAppCustomization provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DescribeWebAppCustomization(ctx context.Context, params *transfer.DescribeWebAppCustomizationInput, optFns ...func(*transfer.Options)) (*transfer.DescribeWebAppCustomizationOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DescribeWebAppCustomization")
	}

	var r0 *transfer.DescribeWebAppCustomizationOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *transfer.DescribeWebAppCustomizationInput, ...func(*transfer.Options)) (*transfer.DescribeWebAppCustomizationOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *transfer.DescribeWebAppCustomizationInput, ...func(*transfer.Options)) *transfer.DescribeWebAppCustomizationOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*transfer.DescribeWebAppCustomizationOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *transfer.DescribeWebAppCustomizationInput, ...func(*transfer.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeWorkflow provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DescribeWorkflow(ctx context.Context, params *transfer.DescribeWorkflowInput, optFns ...func(*transfer.Options)) (*transfer.DescribeWorkflowOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DescribeWorkflow")
	}

	var r0 *transfer.DescribeWorkflowOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *transfer.DescribeWorkflowInput, ...func(*transfer.Options)) (*transfer.DescribeWorkflowOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *transfer.DescribeWorkflowInput, ...func(*transfer.Options)) *transfer.DescribeWorkflowOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*transfer.DescribeWorkflowOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *transfer.DescribeWorkflowInput, ...func(*transfer.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ImportCertificate provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ImportCertificate(ctx context.Context, params *transfer.ImportCertificateInput, optFns ...func(*transfer.Options)) (*transfer.ImportCertificateOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ImportCertificate")
	}

	var r0 *transfer.ImportCertificateOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *transfer.ImportCertificateInput, ...func(*transfer.Options)) (*transfer.ImportCertificateOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *transfer.ImportCertificateInput, ...func(*transfer.Options)) *transfer.ImportCertificateOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*transfer.ImportCertificateOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *transfer.ImportCertificateInput, ...func(*transfer.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ImportHostKey provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ImportHostKey(ctx context.Context, params *transfer.ImportHostKeyInput, optFns ...func(*transfer.Options)) (*transfer.ImportHostKeyOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ImportHostKey")
	}

	var r0 *transfer.ImportHostKeyOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *transfer.ImportHostKeyInput, ...func(*transfer.Options)) (*transfer.ImportHostKeyOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *transfer.ImportHostKeyInput, ...func(*transfer.Options)) *transfer.ImportHostKeyOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*transfer.ImportHostKeyOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *transfer.ImportHostKeyInput, ...func(*transfer.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ImportSshPublicKey provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ImportSshPublicKey(ctx context.Context, params *transfer.ImportSshPublicKeyInput, optFns ...func(*transfer.Options)) (*transfer.ImportSshPublicKeyOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ImportSshPublicKey")
	}

	var r0 *transfer.ImportSshPublicKeyOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *transfer.ImportSshPublicKeyInput, ...func(*transfer.Options)) (*transfer.ImportSshPublicKeyOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *transfer.ImportSshPublicKeyInput, ...func(*transfer.Options)) *transfer.ImportSshPublicKeyOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*transfer.ImportSshPublicKeyOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *transfer.ImportSshPublicKeyInput, ...func(*transfer.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListAccesses provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListAccesses(ctx context.Context, params *transfer.ListAccessesInput, optFns ...func(*transfer.Options)) (*transfer.ListAccessesOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListAccesses")
	}

	var r0 *transfer.ListAccessesOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *transfer.ListAccessesInput, ...func(*transfer.Options)) (*transfer.ListAccessesOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *transfer.ListAccessesInput, ...func(*transfer.Options)) *transfer.ListAccessesOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*transfer.ListAccessesOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *transfer.ListAccessesInput, ...func(*transfer.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListAgreements provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListAgreements(ctx context.Context, params *transfer.ListAgreementsInput, optFns ...func(*transfer.Options)) (*transfer.ListAgreementsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListAgreements")
	}

	var r0 *transfer.ListAgreementsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *transfer.ListAgreementsInput, ...func(*transfer.Options)) (*transfer.ListAgreementsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *transfer.ListAgreementsInput, ...func(*transfer.Options)) *transfer.ListAgreementsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*transfer.ListAgreementsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *transfer.ListAgreementsInput, ...func(*transfer.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListCertificates provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListCertificates(ctx context.Context, params *transfer.ListCertificatesInput, optFns ...func(*transfer.Options)) (*transfer.ListCertificatesOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListCertificates")
	}

	var r0 *transfer.ListCertificatesOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *transfer.ListCertificatesInput, ...func(*transfer.Options)) (*transfer.ListCertificatesOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *transfer.ListCertificatesInput, ...func(*transfer.Options)) *transfer.ListCertificatesOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*transfer.ListCertificatesOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *transfer.ListCertificatesInput, ...func(*transfer.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListConnectors provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListConnectors(ctx context.Context, params *transfer.ListConnectorsInput, optFns ...func(*transfer.Options)) (*transfer.ListConnectorsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListConnectors")
	}

	var r0 *transfer.ListConnectorsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *transfer.ListConnectorsInput, ...func(*transfer.Options)) (*transfer.ListConnectorsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *transfer.ListConnectorsInput, ...func(*transfer.Options)) *transfer.ListConnectorsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*transfer.ListConnectorsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *transfer.ListConnectorsInput, ...func(*transfer.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListExecutions provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListExecutions(ctx context.Context, params *transfer.ListExecutionsInput, optFns ...func(*transfer.Options)) (*transfer.ListExecutionsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListExecutions")
	}

	var r0 *transfer.ListExecutionsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *transfer.ListExecutionsInput, ...func(*transfer.Options)) (*transfer.ListExecutionsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *transfer.ListExecutionsInput, ...func(*transfer.Options)) *transfer.ListExecutionsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*transfer.ListExecutionsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *transfer.ListExecutionsInput, ...func(*transfer.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListFileTransferResults provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListFileTransferResults(ctx context.Context, params *transfer.ListFileTransferResultsInput, optFns ...func(*transfer.Options)) (*transfer.ListFileTransferResultsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListFileTransferResults")
	}

	var r0 *transfer.ListFileTransferResultsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *transfer.ListFileTransferResultsInput, ...func(*transfer.Options)) (*transfer.ListFileTransferResultsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *transfer.ListFileTransferResultsInput, ...func(*transfer.Options)) *transfer.ListFileTransferResultsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*transfer.ListFileTransferResultsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *transfer.ListFileTransferResultsInput, ...func(*transfer.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListHostKeys provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListHostKeys(ctx context.Context, params *transfer.ListHostKeysInput, optFns ...func(*transfer.Options)) (*transfer.ListHostKeysOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListHostKeys")
	}

	var r0 *transfer.ListHostKeysOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *transfer.ListHostKeysInput, ...func(*transfer.Options)) (*transfer.ListHostKeysOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *transfer.ListHostKeysInput, ...func(*transfer.Options)) *transfer.ListHostKeysOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*transfer.ListHostKeysOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *transfer.ListHostKeysInput, ...func(*transfer.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListProfiles provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListProfiles(ctx context.Context, params *transfer.ListProfilesInput, optFns ...func(*transfer.Options)) (*transfer.ListProfilesOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListProfiles")
	}

	var r0 *transfer.ListProfilesOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *transfer.ListProfilesInput, ...func(*transfer.Options)) (*transfer.ListProfilesOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *transfer.ListProfilesInput, ...func(*transfer.Options)) *transfer.ListProfilesOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*transfer.ListProfilesOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *transfer.ListProfilesInput, ...func(*transfer.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListSecurityPolicies provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListSecurityPolicies(ctx context.Context, params *transfer.ListSecurityPoliciesInput, optFns ...func(*transfer.Options)) (*transfer.ListSecurityPoliciesOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListSecurityPolicies")
	}

	var r0 *transfer.ListSecurityPoliciesOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *transfer.ListSecurityPoliciesInput, ...func(*transfer.Options)) (*transfer.ListSecurityPoliciesOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *transfer.ListSecurityPoliciesInput, ...func(*transfer.Options)) *transfer.ListSecurityPoliciesOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*transfer.ListSecurityPoliciesOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *transfer.ListSecurityPoliciesInput, ...func(*transfer.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListServers provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListServers(ctx context.Context, params *transfer.ListServersInput, optFns ...func(*transfer.Options)) (*transfer.ListServersOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListServers")
	}

	var r0 *transfer.ListServersOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *transfer.ListServersInput, ...func(*transfer.Options)) (*transfer.ListServersOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *transfer.ListServersInput, ...func(*transfer.Options)) *transfer.ListServersOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*transfer.ListServersOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *transfer.ListServersInput, ...func(*transfer.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListTagsForResource provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListTagsForResource(ctx context.Context, params *transfer.ListTagsForResourceInput, optFns ...func(*transfer.Options)) (*transfer.ListTagsForResourceOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListTagsForResource")
	}

	var r0 *transfer.ListTagsForResourceOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *transfer.ListTagsForResourceInput, ...func(*transfer.Options)) (*transfer.ListTagsForResourceOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *transfer.ListTagsForResourceInput, ...func(*transfer.Options)) *transfer.ListTagsForResourceOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*transfer.ListTagsForResourceOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *transfer.ListTagsForResourceInput, ...func(*transfer.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListUsers provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListUsers(ctx context.Context, params *transfer.ListUsersInput, optFns ...func(*transfer.Options)) (*transfer.ListUsersOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListUsers")
	}

	var r0 *transfer.ListUsersOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *transfer.ListUsersInput, ...func(*transfer.Options)) (*transfer.ListUsersOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *transfer.ListUsersInput, ...func(*transfer.Options)) *transfer.ListUsersOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*transfer.ListUsersOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *transfer.ListUsersInput, ...func(*transfer.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListWebApps provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListWebApps(ctx context.Context, params *transfer.ListWebAppsInput, optFns ...func(*transfer.Options)) (*transfer.ListWebAppsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListWebApps")
	}

	var r0 *transfer.ListWebAppsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *transfer.ListWebAppsInput, ...func(*transfer.Options)) (*transfer.ListWebAppsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *transfer.ListWebAppsInput, ...func(*transfer.Options)) *transfer.ListWebAppsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*transfer.ListWebAppsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *transfer.ListWebAppsInput, ...func(*transfer.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListWorkflows provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListWorkflows(ctx context.Context, params *transfer.ListWorkflowsInput, optFns ...func(*transfer.Options)) (*transfer.ListWorkflowsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListWorkflows")
	}

	var r0 *transfer.ListWorkflowsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *transfer.ListWorkflowsInput, ...func(*transfer.Options)) (*transfer.ListWorkflowsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *transfer.ListWorkflowsInput, ...func(*transfer.Options)) *transfer.ListWorkflowsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*transfer.ListWorkflowsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *transfer.ListWorkflowsInput, ...func(*transfer.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Options provides a mock function with no fields
func (_m *IClient) Options() transfer.Options {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Options")
	}

	var r0 transfer.Options
	if rf, ok := ret.Get(0).(func() transfer.Options); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(transfer.Options)
	}

	return r0
}

// SendWorkflowStepState provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) SendWorkflowStepState(ctx context.Context, params *transfer.SendWorkflowStepStateInput, optFns ...func(*transfer.Options)) (*transfer.SendWorkflowStepStateOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for SendWorkflowStepState")
	}

	var r0 *transfer.SendWorkflowStepStateOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *transfer.SendWorkflowStepStateInput, ...func(*transfer.Options)) (*transfer.SendWorkflowStepStateOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *transfer.SendWorkflowStepStateInput, ...func(*transfer.Options)) *transfer.SendWorkflowStepStateOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*transfer.SendWorkflowStepStateOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *transfer.SendWorkflowStepStateInput, ...func(*transfer.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// StartDirectoryListing provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) StartDirectoryListing(ctx context.Context, params *transfer.StartDirectoryListingInput, optFns ...func(*transfer.Options)) (*transfer.StartDirectoryListingOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for StartDirectoryListing")
	}

	var r0 *transfer.StartDirectoryListingOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *transfer.StartDirectoryListingInput, ...func(*transfer.Options)) (*transfer.StartDirectoryListingOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *transfer.StartDirectoryListingInput, ...func(*transfer.Options)) *transfer.StartDirectoryListingOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*transfer.StartDirectoryListingOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *transfer.StartDirectoryListingInput, ...func(*transfer.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// StartFileTransfer provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) StartFileTransfer(ctx context.Context, params *transfer.StartFileTransferInput, optFns ...func(*transfer.Options)) (*transfer.StartFileTransferOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for StartFileTransfer")
	}

	var r0 *transfer.StartFileTransferOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *transfer.StartFileTransferInput, ...func(*transfer.Options)) (*transfer.StartFileTransferOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *transfer.StartFileTransferInput, ...func(*transfer.Options)) *transfer.StartFileTransferOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*transfer.StartFileTransferOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *transfer.StartFileTransferInput, ...func(*transfer.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// StartRemoteDelete provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) StartRemoteDelete(ctx context.Context, params *transfer.StartRemoteDeleteInput, optFns ...func(*transfer.Options)) (*transfer.StartRemoteDeleteOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for StartRemoteDelete")
	}

	var r0 *transfer.StartRemoteDeleteOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *transfer.StartRemoteDeleteInput, ...func(*transfer.Options)) (*transfer.StartRemoteDeleteOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *transfer.StartRemoteDeleteInput, ...func(*transfer.Options)) *transfer.StartRemoteDeleteOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*transfer.StartRemoteDeleteOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *transfer.StartRemoteDeleteInput, ...func(*transfer.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// StartRemoteMove provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) StartRemoteMove(ctx context.Context, params *transfer.StartRemoteMoveInput, optFns ...func(*transfer.Options)) (*transfer.StartRemoteMoveOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for StartRemoteMove")
	}

	var r0 *transfer.StartRemoteMoveOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *transfer.StartRemoteMoveInput, ...func(*transfer.Options)) (*transfer.StartRemoteMoveOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *transfer.StartRemoteMoveInput, ...func(*transfer.Options)) *transfer.StartRemoteMoveOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*transfer.StartRemoteMoveOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *transfer.StartRemoteMoveInput, ...func(*transfer.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// StartServer provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) StartServer(ctx context.Context, params *transfer.StartServerInput, optFns ...func(*transfer.Options)) (*transfer.StartServerOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for StartServer")
	}

	var r0 *transfer.StartServerOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *transfer.StartServerInput, ...func(*transfer.Options)) (*transfer.StartServerOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *transfer.StartServerInput, ...func(*transfer.Options)) *transfer.StartServerOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*transfer.StartServerOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *transfer.StartServerInput, ...func(*transfer.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// StopServer provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) StopServer(ctx context.Context, params *transfer.StopServerInput, optFns ...func(*transfer.Options)) (*transfer.StopServerOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for StopServer")
	}

	var r0 *transfer.StopServerOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *transfer.StopServerInput, ...func(*transfer.Options)) (*transfer.StopServerOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *transfer.StopServerInput, ...func(*transfer.Options)) *transfer.StopServerOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*transfer.StopServerOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *transfer.StopServerInput, ...func(*transfer.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// TagResource provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) TagResource(ctx context.Context, params *transfer.TagResourceInput, optFns ...func(*transfer.Options)) (*transfer.TagResourceOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for TagResource")
	}

	var r0 *transfer.TagResourceOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *transfer.TagResourceInput, ...func(*transfer.Options)) (*transfer.TagResourceOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *transfer.TagResourceInput, ...func(*transfer.Options)) *transfer.TagResourceOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*transfer.TagResourceOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *transfer.TagResourceInput, ...func(*transfer.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// TestConnection provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) TestConnection(ctx context.Context, params *transfer.TestConnectionInput, optFns ...func(*transfer.Options)) (*transfer.TestConnectionOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for TestConnection")
	}

	var r0 *transfer.TestConnectionOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *transfer.TestConnectionInput, ...func(*transfer.Options)) (*transfer.TestConnectionOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *transfer.TestConnectionInput, ...func(*transfer.Options)) *transfer.TestConnectionOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*transfer.TestConnectionOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *transfer.TestConnectionInput, ...func(*transfer.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// TestIdentityProvider provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) TestIdentityProvider(ctx context.Context, params *transfer.TestIdentityProviderInput, optFns ...func(*transfer.Options)) (*transfer.TestIdentityProviderOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for TestIdentityProvider")
	}

	var r0 *transfer.TestIdentityProviderOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *transfer.TestIdentityProviderInput, ...func(*transfer.Options)) (*transfer.TestIdentityProviderOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *transfer.TestIdentityProviderInput, ...func(*transfer.Options)) *transfer.TestIdentityProviderOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*transfer.TestIdentityProviderOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *transfer.TestIdentityProviderInput, ...func(*transfer.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UntagResource provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UntagResource(ctx context.Context, params *transfer.UntagResourceInput, optFns ...func(*transfer.Options)) (*transfer.UntagResourceOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UntagResource")
	}

	var r0 *transfer.UntagResourceOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *transfer.UntagResourceInput, ...func(*transfer.Options)) (*transfer.UntagResourceOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *transfer.UntagResourceInput, ...func(*transfer.Options)) *transfer.UntagResourceOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*transfer.UntagResourceOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *transfer.UntagResourceInput, ...func(*transfer.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateAccess provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UpdateAccess(ctx context.Context, params *transfer.UpdateAccessInput, optFns ...func(*transfer.Options)) (*transfer.UpdateAccessOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateAccess")
	}

	var r0 *transfer.UpdateAccessOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *transfer.UpdateAccessInput, ...func(*transfer.Options)) (*transfer.UpdateAccessOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *transfer.UpdateAccessInput, ...func(*transfer.Options)) *transfer.UpdateAccessOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*transfer.UpdateAccessOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *transfer.UpdateAccessInput, ...func(*transfer.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateAgreement provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UpdateAgreement(ctx context.Context, params *transfer.UpdateAgreementInput, optFns ...func(*transfer.Options)) (*transfer.UpdateAgreementOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateAgreement")
	}

	var r0 *transfer.UpdateAgreementOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *transfer.UpdateAgreementInput, ...func(*transfer.Options)) (*transfer.UpdateAgreementOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *transfer.UpdateAgreementInput, ...func(*transfer.Options)) *transfer.UpdateAgreementOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*transfer.UpdateAgreementOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *transfer.UpdateAgreementInput, ...func(*transfer.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateCertificate provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UpdateCertificate(ctx context.Context, params *transfer.UpdateCertificateInput, optFns ...func(*transfer.Options)) (*transfer.UpdateCertificateOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateCertificate")
	}

	var r0 *transfer.UpdateCertificateOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *transfer.UpdateCertificateInput, ...func(*transfer.Options)) (*transfer.UpdateCertificateOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *transfer.UpdateCertificateInput, ...func(*transfer.Options)) *transfer.UpdateCertificateOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*transfer.UpdateCertificateOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *transfer.UpdateCertificateInput, ...func(*transfer.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateConnector provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UpdateConnector(ctx context.Context, params *transfer.UpdateConnectorInput, optFns ...func(*transfer.Options)) (*transfer.UpdateConnectorOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateConnector")
	}

	var r0 *transfer.UpdateConnectorOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *transfer.UpdateConnectorInput, ...func(*transfer.Options)) (*transfer.UpdateConnectorOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *transfer.UpdateConnectorInput, ...func(*transfer.Options)) *transfer.UpdateConnectorOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*transfer.UpdateConnectorOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *transfer.UpdateConnectorInput, ...func(*transfer.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateHostKey provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UpdateHostKey(ctx context.Context, params *transfer.UpdateHostKeyInput, optFns ...func(*transfer.Options)) (*transfer.UpdateHostKeyOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateHostKey")
	}

	var r0 *transfer.UpdateHostKeyOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *transfer.UpdateHostKeyInput, ...func(*transfer.Options)) (*transfer.UpdateHostKeyOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *transfer.UpdateHostKeyInput, ...func(*transfer.Options)) *transfer.UpdateHostKeyOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*transfer.UpdateHostKeyOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *transfer.UpdateHostKeyInput, ...func(*transfer.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateProfile provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UpdateProfile(ctx context.Context, params *transfer.UpdateProfileInput, optFns ...func(*transfer.Options)) (*transfer.UpdateProfileOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateProfile")
	}

	var r0 *transfer.UpdateProfileOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *transfer.UpdateProfileInput, ...func(*transfer.Options)) (*transfer.UpdateProfileOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *transfer.UpdateProfileInput, ...func(*transfer.Options)) *transfer.UpdateProfileOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*transfer.UpdateProfileOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *transfer.UpdateProfileInput, ...func(*transfer.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateServer provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UpdateServer(ctx context.Context, params *transfer.UpdateServerInput, optFns ...func(*transfer.Options)) (*transfer.UpdateServerOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateServer")
	}

	var r0 *transfer.UpdateServerOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *transfer.UpdateServerInput, ...func(*transfer.Options)) (*transfer.UpdateServerOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *transfer.UpdateServerInput, ...func(*transfer.Options)) *transfer.UpdateServerOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*transfer.UpdateServerOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *transfer.UpdateServerInput, ...func(*transfer.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateUser provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UpdateUser(ctx context.Context, params *transfer.UpdateUserInput, optFns ...func(*transfer.Options)) (*transfer.UpdateUserOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateUser")
	}

	var r0 *transfer.UpdateUserOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *transfer.UpdateUserInput, ...func(*transfer.Options)) (*transfer.UpdateUserOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *transfer.UpdateUserInput, ...func(*transfer.Options)) *transfer.UpdateUserOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*transfer.UpdateUserOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *transfer.UpdateUserInput, ...func(*transfer.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateWebApp provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UpdateWebApp(ctx context.Context, params *transfer.UpdateWebAppInput, optFns ...func(*transfer.Options)) (*transfer.UpdateWebAppOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateWebApp")
	}

	var r0 *transfer.UpdateWebAppOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *transfer.UpdateWebAppInput, ...func(*transfer.Options)) (*transfer.UpdateWebAppOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *transfer.UpdateWebAppInput, ...func(*transfer.Options)) *transfer.UpdateWebAppOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*transfer.UpdateWebAppOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *transfer.UpdateWebAppInput, ...func(*transfer.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateWebAppCustomization provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UpdateWebAppCustomization(ctx context.Context, params *transfer.UpdateWebAppCustomizationInput, optFns ...func(*transfer.Options)) (*transfer.UpdateWebAppCustomizationOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateWebAppCustomization")
	}

	var r0 *transfer.UpdateWebAppCustomizationOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *transfer.UpdateWebAppCustomizationInput, ...func(*transfer.Options)) (*transfer.UpdateWebAppCustomizationOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *transfer.UpdateWebAppCustomizationInput, ...func(*transfer.Options)) *transfer.UpdateWebAppCustomizationOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*transfer.UpdateWebAppCustomizationOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *transfer.UpdateWebAppCustomizationInput, ...func(*transfer.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewIClient creates a new instance of IClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewIClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *IClient {
	mock := &IClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
