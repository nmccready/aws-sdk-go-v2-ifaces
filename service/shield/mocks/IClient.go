// Code generated by mockery v2.39.2. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"

	shield "github.com/aws/aws-sdk-go-v2/service/shield"
)

// IClient is an autogenerated mock type for the IClient type
type IClient struct {
	mock.Mock
}

// AssociateDRTLogBucket provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) AssociateDRTLogBucket(ctx context.Context, params *shield.AssociateDRTLogBucketInput, optFns ...func(*shield.Options)) (*shield.AssociateDRTLogBucketOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for AssociateDRTLogBucket")
	}

	var r0 *shield.AssociateDRTLogBucketOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *shield.AssociateDRTLogBucketInput, ...func(*shield.Options)) (*shield.AssociateDRTLogBucketOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *shield.AssociateDRTLogBucketInput, ...func(*shield.Options)) *shield.AssociateDRTLogBucketOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*shield.AssociateDRTLogBucketOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *shield.AssociateDRTLogBucketInput, ...func(*shield.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AssociateDRTRole provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) AssociateDRTRole(ctx context.Context, params *shield.AssociateDRTRoleInput, optFns ...func(*shield.Options)) (*shield.AssociateDRTRoleOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for AssociateDRTRole")
	}

	var r0 *shield.AssociateDRTRoleOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *shield.AssociateDRTRoleInput, ...func(*shield.Options)) (*shield.AssociateDRTRoleOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *shield.AssociateDRTRoleInput, ...func(*shield.Options)) *shield.AssociateDRTRoleOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*shield.AssociateDRTRoleOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *shield.AssociateDRTRoleInput, ...func(*shield.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AssociateHealthCheck provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) AssociateHealthCheck(ctx context.Context, params *shield.AssociateHealthCheckInput, optFns ...func(*shield.Options)) (*shield.AssociateHealthCheckOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for AssociateHealthCheck")
	}

	var r0 *shield.AssociateHealthCheckOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *shield.AssociateHealthCheckInput, ...func(*shield.Options)) (*shield.AssociateHealthCheckOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *shield.AssociateHealthCheckInput, ...func(*shield.Options)) *shield.AssociateHealthCheckOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*shield.AssociateHealthCheckOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *shield.AssociateHealthCheckInput, ...func(*shield.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AssociateProactiveEngagementDetails provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) AssociateProactiveEngagementDetails(ctx context.Context, params *shield.AssociateProactiveEngagementDetailsInput, optFns ...func(*shield.Options)) (*shield.AssociateProactiveEngagementDetailsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for AssociateProactiveEngagementDetails")
	}

	var r0 *shield.AssociateProactiveEngagementDetailsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *shield.AssociateProactiveEngagementDetailsInput, ...func(*shield.Options)) (*shield.AssociateProactiveEngagementDetailsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *shield.AssociateProactiveEngagementDetailsInput, ...func(*shield.Options)) *shield.AssociateProactiveEngagementDetailsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*shield.AssociateProactiveEngagementDetailsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *shield.AssociateProactiveEngagementDetailsInput, ...func(*shield.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateProtection provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CreateProtection(ctx context.Context, params *shield.CreateProtectionInput, optFns ...func(*shield.Options)) (*shield.CreateProtectionOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateProtection")
	}

	var r0 *shield.CreateProtectionOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *shield.CreateProtectionInput, ...func(*shield.Options)) (*shield.CreateProtectionOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *shield.CreateProtectionInput, ...func(*shield.Options)) *shield.CreateProtectionOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*shield.CreateProtectionOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *shield.CreateProtectionInput, ...func(*shield.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateProtectionGroup provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CreateProtectionGroup(ctx context.Context, params *shield.CreateProtectionGroupInput, optFns ...func(*shield.Options)) (*shield.CreateProtectionGroupOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateProtectionGroup")
	}

	var r0 *shield.CreateProtectionGroupOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *shield.CreateProtectionGroupInput, ...func(*shield.Options)) (*shield.CreateProtectionGroupOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *shield.CreateProtectionGroupInput, ...func(*shield.Options)) *shield.CreateProtectionGroupOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*shield.CreateProtectionGroupOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *shield.CreateProtectionGroupInput, ...func(*shield.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateSubscription provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CreateSubscription(ctx context.Context, params *shield.CreateSubscriptionInput, optFns ...func(*shield.Options)) (*shield.CreateSubscriptionOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateSubscription")
	}

	var r0 *shield.CreateSubscriptionOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *shield.CreateSubscriptionInput, ...func(*shield.Options)) (*shield.CreateSubscriptionOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *shield.CreateSubscriptionInput, ...func(*shield.Options)) *shield.CreateSubscriptionOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*shield.CreateSubscriptionOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *shield.CreateSubscriptionInput, ...func(*shield.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteProtection provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteProtection(ctx context.Context, params *shield.DeleteProtectionInput, optFns ...func(*shield.Options)) (*shield.DeleteProtectionOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteProtection")
	}

	var r0 *shield.DeleteProtectionOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *shield.DeleteProtectionInput, ...func(*shield.Options)) (*shield.DeleteProtectionOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *shield.DeleteProtectionInput, ...func(*shield.Options)) *shield.DeleteProtectionOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*shield.DeleteProtectionOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *shield.DeleteProtectionInput, ...func(*shield.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteProtectionGroup provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteProtectionGroup(ctx context.Context, params *shield.DeleteProtectionGroupInput, optFns ...func(*shield.Options)) (*shield.DeleteProtectionGroupOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteProtectionGroup")
	}

	var r0 *shield.DeleteProtectionGroupOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *shield.DeleteProtectionGroupInput, ...func(*shield.Options)) (*shield.DeleteProtectionGroupOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *shield.DeleteProtectionGroupInput, ...func(*shield.Options)) *shield.DeleteProtectionGroupOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*shield.DeleteProtectionGroupOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *shield.DeleteProtectionGroupInput, ...func(*shield.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteSubscription provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteSubscription(ctx context.Context, params *shield.DeleteSubscriptionInput, optFns ...func(*shield.Options)) (*shield.DeleteSubscriptionOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteSubscription")
	}

	var r0 *shield.DeleteSubscriptionOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *shield.DeleteSubscriptionInput, ...func(*shield.Options)) (*shield.DeleteSubscriptionOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *shield.DeleteSubscriptionInput, ...func(*shield.Options)) *shield.DeleteSubscriptionOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*shield.DeleteSubscriptionOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *shield.DeleteSubscriptionInput, ...func(*shield.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeAttack provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DescribeAttack(ctx context.Context, params *shield.DescribeAttackInput, optFns ...func(*shield.Options)) (*shield.DescribeAttackOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DescribeAttack")
	}

	var r0 *shield.DescribeAttackOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *shield.DescribeAttackInput, ...func(*shield.Options)) (*shield.DescribeAttackOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *shield.DescribeAttackInput, ...func(*shield.Options)) *shield.DescribeAttackOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*shield.DescribeAttackOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *shield.DescribeAttackInput, ...func(*shield.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeAttackStatistics provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DescribeAttackStatistics(ctx context.Context, params *shield.DescribeAttackStatisticsInput, optFns ...func(*shield.Options)) (*shield.DescribeAttackStatisticsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DescribeAttackStatistics")
	}

	var r0 *shield.DescribeAttackStatisticsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *shield.DescribeAttackStatisticsInput, ...func(*shield.Options)) (*shield.DescribeAttackStatisticsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *shield.DescribeAttackStatisticsInput, ...func(*shield.Options)) *shield.DescribeAttackStatisticsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*shield.DescribeAttackStatisticsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *shield.DescribeAttackStatisticsInput, ...func(*shield.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeDRTAccess provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DescribeDRTAccess(ctx context.Context, params *shield.DescribeDRTAccessInput, optFns ...func(*shield.Options)) (*shield.DescribeDRTAccessOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DescribeDRTAccess")
	}

	var r0 *shield.DescribeDRTAccessOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *shield.DescribeDRTAccessInput, ...func(*shield.Options)) (*shield.DescribeDRTAccessOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *shield.DescribeDRTAccessInput, ...func(*shield.Options)) *shield.DescribeDRTAccessOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*shield.DescribeDRTAccessOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *shield.DescribeDRTAccessInput, ...func(*shield.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeEmergencyContactSettings provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DescribeEmergencyContactSettings(ctx context.Context, params *shield.DescribeEmergencyContactSettingsInput, optFns ...func(*shield.Options)) (*shield.DescribeEmergencyContactSettingsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DescribeEmergencyContactSettings")
	}

	var r0 *shield.DescribeEmergencyContactSettingsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *shield.DescribeEmergencyContactSettingsInput, ...func(*shield.Options)) (*shield.DescribeEmergencyContactSettingsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *shield.DescribeEmergencyContactSettingsInput, ...func(*shield.Options)) *shield.DescribeEmergencyContactSettingsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*shield.DescribeEmergencyContactSettingsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *shield.DescribeEmergencyContactSettingsInput, ...func(*shield.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeProtection provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DescribeProtection(ctx context.Context, params *shield.DescribeProtectionInput, optFns ...func(*shield.Options)) (*shield.DescribeProtectionOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DescribeProtection")
	}

	var r0 *shield.DescribeProtectionOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *shield.DescribeProtectionInput, ...func(*shield.Options)) (*shield.DescribeProtectionOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *shield.DescribeProtectionInput, ...func(*shield.Options)) *shield.DescribeProtectionOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*shield.DescribeProtectionOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *shield.DescribeProtectionInput, ...func(*shield.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeProtectionGroup provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DescribeProtectionGroup(ctx context.Context, params *shield.DescribeProtectionGroupInput, optFns ...func(*shield.Options)) (*shield.DescribeProtectionGroupOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DescribeProtectionGroup")
	}

	var r0 *shield.DescribeProtectionGroupOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *shield.DescribeProtectionGroupInput, ...func(*shield.Options)) (*shield.DescribeProtectionGroupOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *shield.DescribeProtectionGroupInput, ...func(*shield.Options)) *shield.DescribeProtectionGroupOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*shield.DescribeProtectionGroupOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *shield.DescribeProtectionGroupInput, ...func(*shield.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeSubscription provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DescribeSubscription(ctx context.Context, params *shield.DescribeSubscriptionInput, optFns ...func(*shield.Options)) (*shield.DescribeSubscriptionOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DescribeSubscription")
	}

	var r0 *shield.DescribeSubscriptionOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *shield.DescribeSubscriptionInput, ...func(*shield.Options)) (*shield.DescribeSubscriptionOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *shield.DescribeSubscriptionInput, ...func(*shield.Options)) *shield.DescribeSubscriptionOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*shield.DescribeSubscriptionOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *shield.DescribeSubscriptionInput, ...func(*shield.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DisableApplicationLayerAutomaticResponse provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DisableApplicationLayerAutomaticResponse(ctx context.Context, params *shield.DisableApplicationLayerAutomaticResponseInput, optFns ...func(*shield.Options)) (*shield.DisableApplicationLayerAutomaticResponseOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DisableApplicationLayerAutomaticResponse")
	}

	var r0 *shield.DisableApplicationLayerAutomaticResponseOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *shield.DisableApplicationLayerAutomaticResponseInput, ...func(*shield.Options)) (*shield.DisableApplicationLayerAutomaticResponseOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *shield.DisableApplicationLayerAutomaticResponseInput, ...func(*shield.Options)) *shield.DisableApplicationLayerAutomaticResponseOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*shield.DisableApplicationLayerAutomaticResponseOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *shield.DisableApplicationLayerAutomaticResponseInput, ...func(*shield.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DisableProactiveEngagement provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DisableProactiveEngagement(ctx context.Context, params *shield.DisableProactiveEngagementInput, optFns ...func(*shield.Options)) (*shield.DisableProactiveEngagementOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DisableProactiveEngagement")
	}

	var r0 *shield.DisableProactiveEngagementOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *shield.DisableProactiveEngagementInput, ...func(*shield.Options)) (*shield.DisableProactiveEngagementOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *shield.DisableProactiveEngagementInput, ...func(*shield.Options)) *shield.DisableProactiveEngagementOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*shield.DisableProactiveEngagementOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *shield.DisableProactiveEngagementInput, ...func(*shield.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DisassociateDRTLogBucket provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DisassociateDRTLogBucket(ctx context.Context, params *shield.DisassociateDRTLogBucketInput, optFns ...func(*shield.Options)) (*shield.DisassociateDRTLogBucketOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DisassociateDRTLogBucket")
	}

	var r0 *shield.DisassociateDRTLogBucketOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *shield.DisassociateDRTLogBucketInput, ...func(*shield.Options)) (*shield.DisassociateDRTLogBucketOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *shield.DisassociateDRTLogBucketInput, ...func(*shield.Options)) *shield.DisassociateDRTLogBucketOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*shield.DisassociateDRTLogBucketOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *shield.DisassociateDRTLogBucketInput, ...func(*shield.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DisassociateDRTRole provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DisassociateDRTRole(ctx context.Context, params *shield.DisassociateDRTRoleInput, optFns ...func(*shield.Options)) (*shield.DisassociateDRTRoleOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DisassociateDRTRole")
	}

	var r0 *shield.DisassociateDRTRoleOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *shield.DisassociateDRTRoleInput, ...func(*shield.Options)) (*shield.DisassociateDRTRoleOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *shield.DisassociateDRTRoleInput, ...func(*shield.Options)) *shield.DisassociateDRTRoleOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*shield.DisassociateDRTRoleOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *shield.DisassociateDRTRoleInput, ...func(*shield.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DisassociateHealthCheck provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DisassociateHealthCheck(ctx context.Context, params *shield.DisassociateHealthCheckInput, optFns ...func(*shield.Options)) (*shield.DisassociateHealthCheckOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DisassociateHealthCheck")
	}

	var r0 *shield.DisassociateHealthCheckOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *shield.DisassociateHealthCheckInput, ...func(*shield.Options)) (*shield.DisassociateHealthCheckOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *shield.DisassociateHealthCheckInput, ...func(*shield.Options)) *shield.DisassociateHealthCheckOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*shield.DisassociateHealthCheckOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *shield.DisassociateHealthCheckInput, ...func(*shield.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// EnableApplicationLayerAutomaticResponse provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) EnableApplicationLayerAutomaticResponse(ctx context.Context, params *shield.EnableApplicationLayerAutomaticResponseInput, optFns ...func(*shield.Options)) (*shield.EnableApplicationLayerAutomaticResponseOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for EnableApplicationLayerAutomaticResponse")
	}

	var r0 *shield.EnableApplicationLayerAutomaticResponseOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *shield.EnableApplicationLayerAutomaticResponseInput, ...func(*shield.Options)) (*shield.EnableApplicationLayerAutomaticResponseOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *shield.EnableApplicationLayerAutomaticResponseInput, ...func(*shield.Options)) *shield.EnableApplicationLayerAutomaticResponseOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*shield.EnableApplicationLayerAutomaticResponseOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *shield.EnableApplicationLayerAutomaticResponseInput, ...func(*shield.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// EnableProactiveEngagement provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) EnableProactiveEngagement(ctx context.Context, params *shield.EnableProactiveEngagementInput, optFns ...func(*shield.Options)) (*shield.EnableProactiveEngagementOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for EnableProactiveEngagement")
	}

	var r0 *shield.EnableProactiveEngagementOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *shield.EnableProactiveEngagementInput, ...func(*shield.Options)) (*shield.EnableProactiveEngagementOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *shield.EnableProactiveEngagementInput, ...func(*shield.Options)) *shield.EnableProactiveEngagementOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*shield.EnableProactiveEngagementOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *shield.EnableProactiveEngagementInput, ...func(*shield.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetSubscriptionState provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetSubscriptionState(ctx context.Context, params *shield.GetSubscriptionStateInput, optFns ...func(*shield.Options)) (*shield.GetSubscriptionStateOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetSubscriptionState")
	}

	var r0 *shield.GetSubscriptionStateOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *shield.GetSubscriptionStateInput, ...func(*shield.Options)) (*shield.GetSubscriptionStateOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *shield.GetSubscriptionStateInput, ...func(*shield.Options)) *shield.GetSubscriptionStateOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*shield.GetSubscriptionStateOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *shield.GetSubscriptionStateInput, ...func(*shield.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListAttacks provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListAttacks(ctx context.Context, params *shield.ListAttacksInput, optFns ...func(*shield.Options)) (*shield.ListAttacksOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListAttacks")
	}

	var r0 *shield.ListAttacksOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *shield.ListAttacksInput, ...func(*shield.Options)) (*shield.ListAttacksOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *shield.ListAttacksInput, ...func(*shield.Options)) *shield.ListAttacksOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*shield.ListAttacksOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *shield.ListAttacksInput, ...func(*shield.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListProtectionGroups provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListProtectionGroups(ctx context.Context, params *shield.ListProtectionGroupsInput, optFns ...func(*shield.Options)) (*shield.ListProtectionGroupsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListProtectionGroups")
	}

	var r0 *shield.ListProtectionGroupsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *shield.ListProtectionGroupsInput, ...func(*shield.Options)) (*shield.ListProtectionGroupsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *shield.ListProtectionGroupsInput, ...func(*shield.Options)) *shield.ListProtectionGroupsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*shield.ListProtectionGroupsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *shield.ListProtectionGroupsInput, ...func(*shield.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListProtections provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListProtections(ctx context.Context, params *shield.ListProtectionsInput, optFns ...func(*shield.Options)) (*shield.ListProtectionsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListProtections")
	}

	var r0 *shield.ListProtectionsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *shield.ListProtectionsInput, ...func(*shield.Options)) (*shield.ListProtectionsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *shield.ListProtectionsInput, ...func(*shield.Options)) *shield.ListProtectionsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*shield.ListProtectionsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *shield.ListProtectionsInput, ...func(*shield.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListResourcesInProtectionGroup provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListResourcesInProtectionGroup(ctx context.Context, params *shield.ListResourcesInProtectionGroupInput, optFns ...func(*shield.Options)) (*shield.ListResourcesInProtectionGroupOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListResourcesInProtectionGroup")
	}

	var r0 *shield.ListResourcesInProtectionGroupOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *shield.ListResourcesInProtectionGroupInput, ...func(*shield.Options)) (*shield.ListResourcesInProtectionGroupOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *shield.ListResourcesInProtectionGroupInput, ...func(*shield.Options)) *shield.ListResourcesInProtectionGroupOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*shield.ListResourcesInProtectionGroupOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *shield.ListResourcesInProtectionGroupInput, ...func(*shield.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListTagsForResource provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListTagsForResource(ctx context.Context, params *shield.ListTagsForResourceInput, optFns ...func(*shield.Options)) (*shield.ListTagsForResourceOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListTagsForResource")
	}

	var r0 *shield.ListTagsForResourceOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *shield.ListTagsForResourceInput, ...func(*shield.Options)) (*shield.ListTagsForResourceOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *shield.ListTagsForResourceInput, ...func(*shield.Options)) *shield.ListTagsForResourceOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*shield.ListTagsForResourceOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *shield.ListTagsForResourceInput, ...func(*shield.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Options provides a mock function with given fields:
func (_m *IClient) Options() shield.Options {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Options")
	}

	var r0 shield.Options
	if rf, ok := ret.Get(0).(func() shield.Options); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(shield.Options)
	}

	return r0
}

// TagResource provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) TagResource(ctx context.Context, params *shield.TagResourceInput, optFns ...func(*shield.Options)) (*shield.TagResourceOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for TagResource")
	}

	var r0 *shield.TagResourceOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *shield.TagResourceInput, ...func(*shield.Options)) (*shield.TagResourceOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *shield.TagResourceInput, ...func(*shield.Options)) *shield.TagResourceOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*shield.TagResourceOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *shield.TagResourceInput, ...func(*shield.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UntagResource provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UntagResource(ctx context.Context, params *shield.UntagResourceInput, optFns ...func(*shield.Options)) (*shield.UntagResourceOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UntagResource")
	}

	var r0 *shield.UntagResourceOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *shield.UntagResourceInput, ...func(*shield.Options)) (*shield.UntagResourceOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *shield.UntagResourceInput, ...func(*shield.Options)) *shield.UntagResourceOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*shield.UntagResourceOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *shield.UntagResourceInput, ...func(*shield.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateApplicationLayerAutomaticResponse provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UpdateApplicationLayerAutomaticResponse(ctx context.Context, params *shield.UpdateApplicationLayerAutomaticResponseInput, optFns ...func(*shield.Options)) (*shield.UpdateApplicationLayerAutomaticResponseOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateApplicationLayerAutomaticResponse")
	}

	var r0 *shield.UpdateApplicationLayerAutomaticResponseOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *shield.UpdateApplicationLayerAutomaticResponseInput, ...func(*shield.Options)) (*shield.UpdateApplicationLayerAutomaticResponseOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *shield.UpdateApplicationLayerAutomaticResponseInput, ...func(*shield.Options)) *shield.UpdateApplicationLayerAutomaticResponseOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*shield.UpdateApplicationLayerAutomaticResponseOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *shield.UpdateApplicationLayerAutomaticResponseInput, ...func(*shield.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateEmergencyContactSettings provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UpdateEmergencyContactSettings(ctx context.Context, params *shield.UpdateEmergencyContactSettingsInput, optFns ...func(*shield.Options)) (*shield.UpdateEmergencyContactSettingsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateEmergencyContactSettings")
	}

	var r0 *shield.UpdateEmergencyContactSettingsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *shield.UpdateEmergencyContactSettingsInput, ...func(*shield.Options)) (*shield.UpdateEmergencyContactSettingsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *shield.UpdateEmergencyContactSettingsInput, ...func(*shield.Options)) *shield.UpdateEmergencyContactSettingsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*shield.UpdateEmergencyContactSettingsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *shield.UpdateEmergencyContactSettingsInput, ...func(*shield.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateProtectionGroup provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UpdateProtectionGroup(ctx context.Context, params *shield.UpdateProtectionGroupInput, optFns ...func(*shield.Options)) (*shield.UpdateProtectionGroupOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateProtectionGroup")
	}

	var r0 *shield.UpdateProtectionGroupOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *shield.UpdateProtectionGroupInput, ...func(*shield.Options)) (*shield.UpdateProtectionGroupOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *shield.UpdateProtectionGroupInput, ...func(*shield.Options)) *shield.UpdateProtectionGroupOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*shield.UpdateProtectionGroupOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *shield.UpdateProtectionGroupInput, ...func(*shield.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateSubscription provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UpdateSubscription(ctx context.Context, params *shield.UpdateSubscriptionInput, optFns ...func(*shield.Options)) (*shield.UpdateSubscriptionOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateSubscription")
	}

	var r0 *shield.UpdateSubscriptionOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *shield.UpdateSubscriptionInput, ...func(*shield.Options)) (*shield.UpdateSubscriptionOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *shield.UpdateSubscriptionInput, ...func(*shield.Options)) *shield.UpdateSubscriptionOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*shield.UpdateSubscriptionOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *shield.UpdateSubscriptionInput, ...func(*shield.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewIClient creates a new instance of IClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewIClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *IClient {
	mock := &IClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
