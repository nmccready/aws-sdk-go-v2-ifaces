// Code generated by mockery v2.43.2. DO NOT EDIT.

package mocks

import (
	applicationinsights "github.com/aws/aws-sdk-go-v2/service/applicationinsights"

	context "context"

	mock "github.com/stretchr/testify/mock"
)

// IClient is an autogenerated mock type for the IClient type
type IClient struct {
	mock.Mock
}

// AddWorkload provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) AddWorkload(ctx context.Context, params *applicationinsights.AddWorkloadInput, optFns ...func(*applicationinsights.Options)) (*applicationinsights.AddWorkloadOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for AddWorkload")
	}

	var r0 *applicationinsights.AddWorkloadOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *applicationinsights.AddWorkloadInput, ...func(*applicationinsights.Options)) (*applicationinsights.AddWorkloadOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *applicationinsights.AddWorkloadInput, ...func(*applicationinsights.Options)) *applicationinsights.AddWorkloadOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*applicationinsights.AddWorkloadOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *applicationinsights.AddWorkloadInput, ...func(*applicationinsights.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateApplication provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CreateApplication(ctx context.Context, params *applicationinsights.CreateApplicationInput, optFns ...func(*applicationinsights.Options)) (*applicationinsights.CreateApplicationOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateApplication")
	}

	var r0 *applicationinsights.CreateApplicationOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *applicationinsights.CreateApplicationInput, ...func(*applicationinsights.Options)) (*applicationinsights.CreateApplicationOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *applicationinsights.CreateApplicationInput, ...func(*applicationinsights.Options)) *applicationinsights.CreateApplicationOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*applicationinsights.CreateApplicationOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *applicationinsights.CreateApplicationInput, ...func(*applicationinsights.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateComponent provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CreateComponent(ctx context.Context, params *applicationinsights.CreateComponentInput, optFns ...func(*applicationinsights.Options)) (*applicationinsights.CreateComponentOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateComponent")
	}

	var r0 *applicationinsights.CreateComponentOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *applicationinsights.CreateComponentInput, ...func(*applicationinsights.Options)) (*applicationinsights.CreateComponentOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *applicationinsights.CreateComponentInput, ...func(*applicationinsights.Options)) *applicationinsights.CreateComponentOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*applicationinsights.CreateComponentOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *applicationinsights.CreateComponentInput, ...func(*applicationinsights.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateLogPattern provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CreateLogPattern(ctx context.Context, params *applicationinsights.CreateLogPatternInput, optFns ...func(*applicationinsights.Options)) (*applicationinsights.CreateLogPatternOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateLogPattern")
	}

	var r0 *applicationinsights.CreateLogPatternOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *applicationinsights.CreateLogPatternInput, ...func(*applicationinsights.Options)) (*applicationinsights.CreateLogPatternOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *applicationinsights.CreateLogPatternInput, ...func(*applicationinsights.Options)) *applicationinsights.CreateLogPatternOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*applicationinsights.CreateLogPatternOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *applicationinsights.CreateLogPatternInput, ...func(*applicationinsights.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteApplication provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteApplication(ctx context.Context, params *applicationinsights.DeleteApplicationInput, optFns ...func(*applicationinsights.Options)) (*applicationinsights.DeleteApplicationOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteApplication")
	}

	var r0 *applicationinsights.DeleteApplicationOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *applicationinsights.DeleteApplicationInput, ...func(*applicationinsights.Options)) (*applicationinsights.DeleteApplicationOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *applicationinsights.DeleteApplicationInput, ...func(*applicationinsights.Options)) *applicationinsights.DeleteApplicationOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*applicationinsights.DeleteApplicationOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *applicationinsights.DeleteApplicationInput, ...func(*applicationinsights.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteComponent provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteComponent(ctx context.Context, params *applicationinsights.DeleteComponentInput, optFns ...func(*applicationinsights.Options)) (*applicationinsights.DeleteComponentOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteComponent")
	}

	var r0 *applicationinsights.DeleteComponentOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *applicationinsights.DeleteComponentInput, ...func(*applicationinsights.Options)) (*applicationinsights.DeleteComponentOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *applicationinsights.DeleteComponentInput, ...func(*applicationinsights.Options)) *applicationinsights.DeleteComponentOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*applicationinsights.DeleteComponentOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *applicationinsights.DeleteComponentInput, ...func(*applicationinsights.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteLogPattern provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteLogPattern(ctx context.Context, params *applicationinsights.DeleteLogPatternInput, optFns ...func(*applicationinsights.Options)) (*applicationinsights.DeleteLogPatternOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteLogPattern")
	}

	var r0 *applicationinsights.DeleteLogPatternOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *applicationinsights.DeleteLogPatternInput, ...func(*applicationinsights.Options)) (*applicationinsights.DeleteLogPatternOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *applicationinsights.DeleteLogPatternInput, ...func(*applicationinsights.Options)) *applicationinsights.DeleteLogPatternOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*applicationinsights.DeleteLogPatternOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *applicationinsights.DeleteLogPatternInput, ...func(*applicationinsights.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeApplication provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DescribeApplication(ctx context.Context, params *applicationinsights.DescribeApplicationInput, optFns ...func(*applicationinsights.Options)) (*applicationinsights.DescribeApplicationOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DescribeApplication")
	}

	var r0 *applicationinsights.DescribeApplicationOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *applicationinsights.DescribeApplicationInput, ...func(*applicationinsights.Options)) (*applicationinsights.DescribeApplicationOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *applicationinsights.DescribeApplicationInput, ...func(*applicationinsights.Options)) *applicationinsights.DescribeApplicationOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*applicationinsights.DescribeApplicationOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *applicationinsights.DescribeApplicationInput, ...func(*applicationinsights.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeComponent provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DescribeComponent(ctx context.Context, params *applicationinsights.DescribeComponentInput, optFns ...func(*applicationinsights.Options)) (*applicationinsights.DescribeComponentOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DescribeComponent")
	}

	var r0 *applicationinsights.DescribeComponentOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *applicationinsights.DescribeComponentInput, ...func(*applicationinsights.Options)) (*applicationinsights.DescribeComponentOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *applicationinsights.DescribeComponentInput, ...func(*applicationinsights.Options)) *applicationinsights.DescribeComponentOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*applicationinsights.DescribeComponentOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *applicationinsights.DescribeComponentInput, ...func(*applicationinsights.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeComponentConfiguration provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DescribeComponentConfiguration(ctx context.Context, params *applicationinsights.DescribeComponentConfigurationInput, optFns ...func(*applicationinsights.Options)) (*applicationinsights.DescribeComponentConfigurationOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DescribeComponentConfiguration")
	}

	var r0 *applicationinsights.DescribeComponentConfigurationOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *applicationinsights.DescribeComponentConfigurationInput, ...func(*applicationinsights.Options)) (*applicationinsights.DescribeComponentConfigurationOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *applicationinsights.DescribeComponentConfigurationInput, ...func(*applicationinsights.Options)) *applicationinsights.DescribeComponentConfigurationOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*applicationinsights.DescribeComponentConfigurationOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *applicationinsights.DescribeComponentConfigurationInput, ...func(*applicationinsights.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeComponentConfigurationRecommendation provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DescribeComponentConfigurationRecommendation(ctx context.Context, params *applicationinsights.DescribeComponentConfigurationRecommendationInput, optFns ...func(*applicationinsights.Options)) (*applicationinsights.DescribeComponentConfigurationRecommendationOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DescribeComponentConfigurationRecommendation")
	}

	var r0 *applicationinsights.DescribeComponentConfigurationRecommendationOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *applicationinsights.DescribeComponentConfigurationRecommendationInput, ...func(*applicationinsights.Options)) (*applicationinsights.DescribeComponentConfigurationRecommendationOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *applicationinsights.DescribeComponentConfigurationRecommendationInput, ...func(*applicationinsights.Options)) *applicationinsights.DescribeComponentConfigurationRecommendationOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*applicationinsights.DescribeComponentConfigurationRecommendationOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *applicationinsights.DescribeComponentConfigurationRecommendationInput, ...func(*applicationinsights.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeLogPattern provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DescribeLogPattern(ctx context.Context, params *applicationinsights.DescribeLogPatternInput, optFns ...func(*applicationinsights.Options)) (*applicationinsights.DescribeLogPatternOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DescribeLogPattern")
	}

	var r0 *applicationinsights.DescribeLogPatternOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *applicationinsights.DescribeLogPatternInput, ...func(*applicationinsights.Options)) (*applicationinsights.DescribeLogPatternOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *applicationinsights.DescribeLogPatternInput, ...func(*applicationinsights.Options)) *applicationinsights.DescribeLogPatternOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*applicationinsights.DescribeLogPatternOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *applicationinsights.DescribeLogPatternInput, ...func(*applicationinsights.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeObservation provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DescribeObservation(ctx context.Context, params *applicationinsights.DescribeObservationInput, optFns ...func(*applicationinsights.Options)) (*applicationinsights.DescribeObservationOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DescribeObservation")
	}

	var r0 *applicationinsights.DescribeObservationOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *applicationinsights.DescribeObservationInput, ...func(*applicationinsights.Options)) (*applicationinsights.DescribeObservationOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *applicationinsights.DescribeObservationInput, ...func(*applicationinsights.Options)) *applicationinsights.DescribeObservationOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*applicationinsights.DescribeObservationOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *applicationinsights.DescribeObservationInput, ...func(*applicationinsights.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeProblem provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DescribeProblem(ctx context.Context, params *applicationinsights.DescribeProblemInput, optFns ...func(*applicationinsights.Options)) (*applicationinsights.DescribeProblemOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DescribeProblem")
	}

	var r0 *applicationinsights.DescribeProblemOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *applicationinsights.DescribeProblemInput, ...func(*applicationinsights.Options)) (*applicationinsights.DescribeProblemOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *applicationinsights.DescribeProblemInput, ...func(*applicationinsights.Options)) *applicationinsights.DescribeProblemOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*applicationinsights.DescribeProblemOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *applicationinsights.DescribeProblemInput, ...func(*applicationinsights.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeProblemObservations provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DescribeProblemObservations(ctx context.Context, params *applicationinsights.DescribeProblemObservationsInput, optFns ...func(*applicationinsights.Options)) (*applicationinsights.DescribeProblemObservationsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DescribeProblemObservations")
	}

	var r0 *applicationinsights.DescribeProblemObservationsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *applicationinsights.DescribeProblemObservationsInput, ...func(*applicationinsights.Options)) (*applicationinsights.DescribeProblemObservationsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *applicationinsights.DescribeProblemObservationsInput, ...func(*applicationinsights.Options)) *applicationinsights.DescribeProblemObservationsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*applicationinsights.DescribeProblemObservationsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *applicationinsights.DescribeProblemObservationsInput, ...func(*applicationinsights.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeWorkload provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DescribeWorkload(ctx context.Context, params *applicationinsights.DescribeWorkloadInput, optFns ...func(*applicationinsights.Options)) (*applicationinsights.DescribeWorkloadOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DescribeWorkload")
	}

	var r0 *applicationinsights.DescribeWorkloadOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *applicationinsights.DescribeWorkloadInput, ...func(*applicationinsights.Options)) (*applicationinsights.DescribeWorkloadOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *applicationinsights.DescribeWorkloadInput, ...func(*applicationinsights.Options)) *applicationinsights.DescribeWorkloadOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*applicationinsights.DescribeWorkloadOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *applicationinsights.DescribeWorkloadInput, ...func(*applicationinsights.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListApplications provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListApplications(ctx context.Context, params *applicationinsights.ListApplicationsInput, optFns ...func(*applicationinsights.Options)) (*applicationinsights.ListApplicationsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListApplications")
	}

	var r0 *applicationinsights.ListApplicationsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *applicationinsights.ListApplicationsInput, ...func(*applicationinsights.Options)) (*applicationinsights.ListApplicationsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *applicationinsights.ListApplicationsInput, ...func(*applicationinsights.Options)) *applicationinsights.ListApplicationsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*applicationinsights.ListApplicationsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *applicationinsights.ListApplicationsInput, ...func(*applicationinsights.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListComponents provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListComponents(ctx context.Context, params *applicationinsights.ListComponentsInput, optFns ...func(*applicationinsights.Options)) (*applicationinsights.ListComponentsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListComponents")
	}

	var r0 *applicationinsights.ListComponentsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *applicationinsights.ListComponentsInput, ...func(*applicationinsights.Options)) (*applicationinsights.ListComponentsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *applicationinsights.ListComponentsInput, ...func(*applicationinsights.Options)) *applicationinsights.ListComponentsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*applicationinsights.ListComponentsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *applicationinsights.ListComponentsInput, ...func(*applicationinsights.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListConfigurationHistory provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListConfigurationHistory(ctx context.Context, params *applicationinsights.ListConfigurationHistoryInput, optFns ...func(*applicationinsights.Options)) (*applicationinsights.ListConfigurationHistoryOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListConfigurationHistory")
	}

	var r0 *applicationinsights.ListConfigurationHistoryOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *applicationinsights.ListConfigurationHistoryInput, ...func(*applicationinsights.Options)) (*applicationinsights.ListConfigurationHistoryOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *applicationinsights.ListConfigurationHistoryInput, ...func(*applicationinsights.Options)) *applicationinsights.ListConfigurationHistoryOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*applicationinsights.ListConfigurationHistoryOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *applicationinsights.ListConfigurationHistoryInput, ...func(*applicationinsights.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListLogPatternSets provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListLogPatternSets(ctx context.Context, params *applicationinsights.ListLogPatternSetsInput, optFns ...func(*applicationinsights.Options)) (*applicationinsights.ListLogPatternSetsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListLogPatternSets")
	}

	var r0 *applicationinsights.ListLogPatternSetsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *applicationinsights.ListLogPatternSetsInput, ...func(*applicationinsights.Options)) (*applicationinsights.ListLogPatternSetsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *applicationinsights.ListLogPatternSetsInput, ...func(*applicationinsights.Options)) *applicationinsights.ListLogPatternSetsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*applicationinsights.ListLogPatternSetsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *applicationinsights.ListLogPatternSetsInput, ...func(*applicationinsights.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListLogPatterns provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListLogPatterns(ctx context.Context, params *applicationinsights.ListLogPatternsInput, optFns ...func(*applicationinsights.Options)) (*applicationinsights.ListLogPatternsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListLogPatterns")
	}

	var r0 *applicationinsights.ListLogPatternsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *applicationinsights.ListLogPatternsInput, ...func(*applicationinsights.Options)) (*applicationinsights.ListLogPatternsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *applicationinsights.ListLogPatternsInput, ...func(*applicationinsights.Options)) *applicationinsights.ListLogPatternsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*applicationinsights.ListLogPatternsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *applicationinsights.ListLogPatternsInput, ...func(*applicationinsights.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListProblems provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListProblems(ctx context.Context, params *applicationinsights.ListProblemsInput, optFns ...func(*applicationinsights.Options)) (*applicationinsights.ListProblemsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListProblems")
	}

	var r0 *applicationinsights.ListProblemsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *applicationinsights.ListProblemsInput, ...func(*applicationinsights.Options)) (*applicationinsights.ListProblemsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *applicationinsights.ListProblemsInput, ...func(*applicationinsights.Options)) *applicationinsights.ListProblemsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*applicationinsights.ListProblemsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *applicationinsights.ListProblemsInput, ...func(*applicationinsights.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListTagsForResource provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListTagsForResource(ctx context.Context, params *applicationinsights.ListTagsForResourceInput, optFns ...func(*applicationinsights.Options)) (*applicationinsights.ListTagsForResourceOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListTagsForResource")
	}

	var r0 *applicationinsights.ListTagsForResourceOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *applicationinsights.ListTagsForResourceInput, ...func(*applicationinsights.Options)) (*applicationinsights.ListTagsForResourceOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *applicationinsights.ListTagsForResourceInput, ...func(*applicationinsights.Options)) *applicationinsights.ListTagsForResourceOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*applicationinsights.ListTagsForResourceOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *applicationinsights.ListTagsForResourceInput, ...func(*applicationinsights.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListWorkloads provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListWorkloads(ctx context.Context, params *applicationinsights.ListWorkloadsInput, optFns ...func(*applicationinsights.Options)) (*applicationinsights.ListWorkloadsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListWorkloads")
	}

	var r0 *applicationinsights.ListWorkloadsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *applicationinsights.ListWorkloadsInput, ...func(*applicationinsights.Options)) (*applicationinsights.ListWorkloadsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *applicationinsights.ListWorkloadsInput, ...func(*applicationinsights.Options)) *applicationinsights.ListWorkloadsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*applicationinsights.ListWorkloadsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *applicationinsights.ListWorkloadsInput, ...func(*applicationinsights.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Options provides a mock function with given fields:
func (_m *IClient) Options() applicationinsights.Options {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Options")
	}

	var r0 applicationinsights.Options
	if rf, ok := ret.Get(0).(func() applicationinsights.Options); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(applicationinsights.Options)
	}

	return r0
}

// RemoveWorkload provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) RemoveWorkload(ctx context.Context, params *applicationinsights.RemoveWorkloadInput, optFns ...func(*applicationinsights.Options)) (*applicationinsights.RemoveWorkloadOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for RemoveWorkload")
	}

	var r0 *applicationinsights.RemoveWorkloadOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *applicationinsights.RemoveWorkloadInput, ...func(*applicationinsights.Options)) (*applicationinsights.RemoveWorkloadOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *applicationinsights.RemoveWorkloadInput, ...func(*applicationinsights.Options)) *applicationinsights.RemoveWorkloadOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*applicationinsights.RemoveWorkloadOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *applicationinsights.RemoveWorkloadInput, ...func(*applicationinsights.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// TagResource provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) TagResource(ctx context.Context, params *applicationinsights.TagResourceInput, optFns ...func(*applicationinsights.Options)) (*applicationinsights.TagResourceOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for TagResource")
	}

	var r0 *applicationinsights.TagResourceOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *applicationinsights.TagResourceInput, ...func(*applicationinsights.Options)) (*applicationinsights.TagResourceOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *applicationinsights.TagResourceInput, ...func(*applicationinsights.Options)) *applicationinsights.TagResourceOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*applicationinsights.TagResourceOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *applicationinsights.TagResourceInput, ...func(*applicationinsights.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UntagResource provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UntagResource(ctx context.Context, params *applicationinsights.UntagResourceInput, optFns ...func(*applicationinsights.Options)) (*applicationinsights.UntagResourceOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UntagResource")
	}

	var r0 *applicationinsights.UntagResourceOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *applicationinsights.UntagResourceInput, ...func(*applicationinsights.Options)) (*applicationinsights.UntagResourceOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *applicationinsights.UntagResourceInput, ...func(*applicationinsights.Options)) *applicationinsights.UntagResourceOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*applicationinsights.UntagResourceOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *applicationinsights.UntagResourceInput, ...func(*applicationinsights.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateApplication provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UpdateApplication(ctx context.Context, params *applicationinsights.UpdateApplicationInput, optFns ...func(*applicationinsights.Options)) (*applicationinsights.UpdateApplicationOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateApplication")
	}

	var r0 *applicationinsights.UpdateApplicationOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *applicationinsights.UpdateApplicationInput, ...func(*applicationinsights.Options)) (*applicationinsights.UpdateApplicationOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *applicationinsights.UpdateApplicationInput, ...func(*applicationinsights.Options)) *applicationinsights.UpdateApplicationOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*applicationinsights.UpdateApplicationOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *applicationinsights.UpdateApplicationInput, ...func(*applicationinsights.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateComponent provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UpdateComponent(ctx context.Context, params *applicationinsights.UpdateComponentInput, optFns ...func(*applicationinsights.Options)) (*applicationinsights.UpdateComponentOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateComponent")
	}

	var r0 *applicationinsights.UpdateComponentOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *applicationinsights.UpdateComponentInput, ...func(*applicationinsights.Options)) (*applicationinsights.UpdateComponentOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *applicationinsights.UpdateComponentInput, ...func(*applicationinsights.Options)) *applicationinsights.UpdateComponentOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*applicationinsights.UpdateComponentOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *applicationinsights.UpdateComponentInput, ...func(*applicationinsights.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateComponentConfiguration provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UpdateComponentConfiguration(ctx context.Context, params *applicationinsights.UpdateComponentConfigurationInput, optFns ...func(*applicationinsights.Options)) (*applicationinsights.UpdateComponentConfigurationOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateComponentConfiguration")
	}

	var r0 *applicationinsights.UpdateComponentConfigurationOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *applicationinsights.UpdateComponentConfigurationInput, ...func(*applicationinsights.Options)) (*applicationinsights.UpdateComponentConfigurationOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *applicationinsights.UpdateComponentConfigurationInput, ...func(*applicationinsights.Options)) *applicationinsights.UpdateComponentConfigurationOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*applicationinsights.UpdateComponentConfigurationOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *applicationinsights.UpdateComponentConfigurationInput, ...func(*applicationinsights.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateLogPattern provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UpdateLogPattern(ctx context.Context, params *applicationinsights.UpdateLogPatternInput, optFns ...func(*applicationinsights.Options)) (*applicationinsights.UpdateLogPatternOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateLogPattern")
	}

	var r0 *applicationinsights.UpdateLogPatternOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *applicationinsights.UpdateLogPatternInput, ...func(*applicationinsights.Options)) (*applicationinsights.UpdateLogPatternOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *applicationinsights.UpdateLogPatternInput, ...func(*applicationinsights.Options)) *applicationinsights.UpdateLogPatternOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*applicationinsights.UpdateLogPatternOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *applicationinsights.UpdateLogPatternInput, ...func(*applicationinsights.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateProblem provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UpdateProblem(ctx context.Context, params *applicationinsights.UpdateProblemInput, optFns ...func(*applicationinsights.Options)) (*applicationinsights.UpdateProblemOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateProblem")
	}

	var r0 *applicationinsights.UpdateProblemOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *applicationinsights.UpdateProblemInput, ...func(*applicationinsights.Options)) (*applicationinsights.UpdateProblemOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *applicationinsights.UpdateProblemInput, ...func(*applicationinsights.Options)) *applicationinsights.UpdateProblemOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*applicationinsights.UpdateProblemOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *applicationinsights.UpdateProblemInput, ...func(*applicationinsights.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateWorkload provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UpdateWorkload(ctx context.Context, params *applicationinsights.UpdateWorkloadInput, optFns ...func(*applicationinsights.Options)) (*applicationinsights.UpdateWorkloadOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateWorkload")
	}

	var r0 *applicationinsights.UpdateWorkloadOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *applicationinsights.UpdateWorkloadInput, ...func(*applicationinsights.Options)) (*applicationinsights.UpdateWorkloadOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *applicationinsights.UpdateWorkloadInput, ...func(*applicationinsights.Options)) *applicationinsights.UpdateWorkloadOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*applicationinsights.UpdateWorkloadOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *applicationinsights.UpdateWorkloadInput, ...func(*applicationinsights.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewIClient creates a new instance of IClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewIClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *IClient {
	mock := &IClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
