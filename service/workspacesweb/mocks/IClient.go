// Code generated by mockery v2.53.4. DO NOT EDIT.

package mocks

import (
	context "context"

	workspacesweb "github.com/aws/aws-sdk-go-v2/service/workspacesweb"
	mock "github.com/stretchr/testify/mock"
)

// IClient is an autogenerated mock type for the IClient type
type IClient struct {
	mock.Mock
}

// AssociateBrowserSettings provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) AssociateBrowserSettings(ctx context.Context, params *workspacesweb.AssociateBrowserSettingsInput, optFns ...func(*workspacesweb.Options)) (*workspacesweb.AssociateBrowserSettingsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for AssociateBrowserSettings")
	}

	var r0 *workspacesweb.AssociateBrowserSettingsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *workspacesweb.AssociateBrowserSettingsInput, ...func(*workspacesweb.Options)) (*workspacesweb.AssociateBrowserSettingsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *workspacesweb.AssociateBrowserSettingsInput, ...func(*workspacesweb.Options)) *workspacesweb.AssociateBrowserSettingsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*workspacesweb.AssociateBrowserSettingsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *workspacesweb.AssociateBrowserSettingsInput, ...func(*workspacesweb.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AssociateDataProtectionSettings provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) AssociateDataProtectionSettings(ctx context.Context, params *workspacesweb.AssociateDataProtectionSettingsInput, optFns ...func(*workspacesweb.Options)) (*workspacesweb.AssociateDataProtectionSettingsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for AssociateDataProtectionSettings")
	}

	var r0 *workspacesweb.AssociateDataProtectionSettingsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *workspacesweb.AssociateDataProtectionSettingsInput, ...func(*workspacesweb.Options)) (*workspacesweb.AssociateDataProtectionSettingsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *workspacesweb.AssociateDataProtectionSettingsInput, ...func(*workspacesweb.Options)) *workspacesweb.AssociateDataProtectionSettingsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*workspacesweb.AssociateDataProtectionSettingsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *workspacesweb.AssociateDataProtectionSettingsInput, ...func(*workspacesweb.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AssociateIpAccessSettings provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) AssociateIpAccessSettings(ctx context.Context, params *workspacesweb.AssociateIpAccessSettingsInput, optFns ...func(*workspacesweb.Options)) (*workspacesweb.AssociateIpAccessSettingsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for AssociateIpAccessSettings")
	}

	var r0 *workspacesweb.AssociateIpAccessSettingsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *workspacesweb.AssociateIpAccessSettingsInput, ...func(*workspacesweb.Options)) (*workspacesweb.AssociateIpAccessSettingsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *workspacesweb.AssociateIpAccessSettingsInput, ...func(*workspacesweb.Options)) *workspacesweb.AssociateIpAccessSettingsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*workspacesweb.AssociateIpAccessSettingsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *workspacesweb.AssociateIpAccessSettingsInput, ...func(*workspacesweb.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AssociateNetworkSettings provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) AssociateNetworkSettings(ctx context.Context, params *workspacesweb.AssociateNetworkSettingsInput, optFns ...func(*workspacesweb.Options)) (*workspacesweb.AssociateNetworkSettingsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for AssociateNetworkSettings")
	}

	var r0 *workspacesweb.AssociateNetworkSettingsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *workspacesweb.AssociateNetworkSettingsInput, ...func(*workspacesweb.Options)) (*workspacesweb.AssociateNetworkSettingsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *workspacesweb.AssociateNetworkSettingsInput, ...func(*workspacesweb.Options)) *workspacesweb.AssociateNetworkSettingsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*workspacesweb.AssociateNetworkSettingsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *workspacesweb.AssociateNetworkSettingsInput, ...func(*workspacesweb.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AssociateTrustStore provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) AssociateTrustStore(ctx context.Context, params *workspacesweb.AssociateTrustStoreInput, optFns ...func(*workspacesweb.Options)) (*workspacesweb.AssociateTrustStoreOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for AssociateTrustStore")
	}

	var r0 *workspacesweb.AssociateTrustStoreOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *workspacesweb.AssociateTrustStoreInput, ...func(*workspacesweb.Options)) (*workspacesweb.AssociateTrustStoreOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *workspacesweb.AssociateTrustStoreInput, ...func(*workspacesweb.Options)) *workspacesweb.AssociateTrustStoreOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*workspacesweb.AssociateTrustStoreOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *workspacesweb.AssociateTrustStoreInput, ...func(*workspacesweb.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AssociateUserAccessLoggingSettings provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) AssociateUserAccessLoggingSettings(ctx context.Context, params *workspacesweb.AssociateUserAccessLoggingSettingsInput, optFns ...func(*workspacesweb.Options)) (*workspacesweb.AssociateUserAccessLoggingSettingsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for AssociateUserAccessLoggingSettings")
	}

	var r0 *workspacesweb.AssociateUserAccessLoggingSettingsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *workspacesweb.AssociateUserAccessLoggingSettingsInput, ...func(*workspacesweb.Options)) (*workspacesweb.AssociateUserAccessLoggingSettingsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *workspacesweb.AssociateUserAccessLoggingSettingsInput, ...func(*workspacesweb.Options)) *workspacesweb.AssociateUserAccessLoggingSettingsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*workspacesweb.AssociateUserAccessLoggingSettingsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *workspacesweb.AssociateUserAccessLoggingSettingsInput, ...func(*workspacesweb.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AssociateUserSettings provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) AssociateUserSettings(ctx context.Context, params *workspacesweb.AssociateUserSettingsInput, optFns ...func(*workspacesweb.Options)) (*workspacesweb.AssociateUserSettingsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for AssociateUserSettings")
	}

	var r0 *workspacesweb.AssociateUserSettingsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *workspacesweb.AssociateUserSettingsInput, ...func(*workspacesweb.Options)) (*workspacesweb.AssociateUserSettingsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *workspacesweb.AssociateUserSettingsInput, ...func(*workspacesweb.Options)) *workspacesweb.AssociateUserSettingsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*workspacesweb.AssociateUserSettingsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *workspacesweb.AssociateUserSettingsInput, ...func(*workspacesweb.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateBrowserSettings provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CreateBrowserSettings(ctx context.Context, params *workspacesweb.CreateBrowserSettingsInput, optFns ...func(*workspacesweb.Options)) (*workspacesweb.CreateBrowserSettingsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateBrowserSettings")
	}

	var r0 *workspacesweb.CreateBrowserSettingsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *workspacesweb.CreateBrowserSettingsInput, ...func(*workspacesweb.Options)) (*workspacesweb.CreateBrowserSettingsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *workspacesweb.CreateBrowserSettingsInput, ...func(*workspacesweb.Options)) *workspacesweb.CreateBrowserSettingsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*workspacesweb.CreateBrowserSettingsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *workspacesweb.CreateBrowserSettingsInput, ...func(*workspacesweb.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateDataProtectionSettings provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CreateDataProtectionSettings(ctx context.Context, params *workspacesweb.CreateDataProtectionSettingsInput, optFns ...func(*workspacesweb.Options)) (*workspacesweb.CreateDataProtectionSettingsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateDataProtectionSettings")
	}

	var r0 *workspacesweb.CreateDataProtectionSettingsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *workspacesweb.CreateDataProtectionSettingsInput, ...func(*workspacesweb.Options)) (*workspacesweb.CreateDataProtectionSettingsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *workspacesweb.CreateDataProtectionSettingsInput, ...func(*workspacesweb.Options)) *workspacesweb.CreateDataProtectionSettingsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*workspacesweb.CreateDataProtectionSettingsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *workspacesweb.CreateDataProtectionSettingsInput, ...func(*workspacesweb.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateIdentityProvider provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CreateIdentityProvider(ctx context.Context, params *workspacesweb.CreateIdentityProviderInput, optFns ...func(*workspacesweb.Options)) (*workspacesweb.CreateIdentityProviderOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateIdentityProvider")
	}

	var r0 *workspacesweb.CreateIdentityProviderOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *workspacesweb.CreateIdentityProviderInput, ...func(*workspacesweb.Options)) (*workspacesweb.CreateIdentityProviderOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *workspacesweb.CreateIdentityProviderInput, ...func(*workspacesweb.Options)) *workspacesweb.CreateIdentityProviderOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*workspacesweb.CreateIdentityProviderOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *workspacesweb.CreateIdentityProviderInput, ...func(*workspacesweb.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateIpAccessSettings provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CreateIpAccessSettings(ctx context.Context, params *workspacesweb.CreateIpAccessSettingsInput, optFns ...func(*workspacesweb.Options)) (*workspacesweb.CreateIpAccessSettingsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateIpAccessSettings")
	}

	var r0 *workspacesweb.CreateIpAccessSettingsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *workspacesweb.CreateIpAccessSettingsInput, ...func(*workspacesweb.Options)) (*workspacesweb.CreateIpAccessSettingsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *workspacesweb.CreateIpAccessSettingsInput, ...func(*workspacesweb.Options)) *workspacesweb.CreateIpAccessSettingsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*workspacesweb.CreateIpAccessSettingsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *workspacesweb.CreateIpAccessSettingsInput, ...func(*workspacesweb.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateNetworkSettings provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CreateNetworkSettings(ctx context.Context, params *workspacesweb.CreateNetworkSettingsInput, optFns ...func(*workspacesweb.Options)) (*workspacesweb.CreateNetworkSettingsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateNetworkSettings")
	}

	var r0 *workspacesweb.CreateNetworkSettingsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *workspacesweb.CreateNetworkSettingsInput, ...func(*workspacesweb.Options)) (*workspacesweb.CreateNetworkSettingsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *workspacesweb.CreateNetworkSettingsInput, ...func(*workspacesweb.Options)) *workspacesweb.CreateNetworkSettingsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*workspacesweb.CreateNetworkSettingsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *workspacesweb.CreateNetworkSettingsInput, ...func(*workspacesweb.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreatePortal provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CreatePortal(ctx context.Context, params *workspacesweb.CreatePortalInput, optFns ...func(*workspacesweb.Options)) (*workspacesweb.CreatePortalOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreatePortal")
	}

	var r0 *workspacesweb.CreatePortalOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *workspacesweb.CreatePortalInput, ...func(*workspacesweb.Options)) (*workspacesweb.CreatePortalOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *workspacesweb.CreatePortalInput, ...func(*workspacesweb.Options)) *workspacesweb.CreatePortalOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*workspacesweb.CreatePortalOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *workspacesweb.CreatePortalInput, ...func(*workspacesweb.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateTrustStore provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CreateTrustStore(ctx context.Context, params *workspacesweb.CreateTrustStoreInput, optFns ...func(*workspacesweb.Options)) (*workspacesweb.CreateTrustStoreOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateTrustStore")
	}

	var r0 *workspacesweb.CreateTrustStoreOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *workspacesweb.CreateTrustStoreInput, ...func(*workspacesweb.Options)) (*workspacesweb.CreateTrustStoreOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *workspacesweb.CreateTrustStoreInput, ...func(*workspacesweb.Options)) *workspacesweb.CreateTrustStoreOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*workspacesweb.CreateTrustStoreOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *workspacesweb.CreateTrustStoreInput, ...func(*workspacesweb.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateUserAccessLoggingSettings provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CreateUserAccessLoggingSettings(ctx context.Context, params *workspacesweb.CreateUserAccessLoggingSettingsInput, optFns ...func(*workspacesweb.Options)) (*workspacesweb.CreateUserAccessLoggingSettingsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateUserAccessLoggingSettings")
	}

	var r0 *workspacesweb.CreateUserAccessLoggingSettingsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *workspacesweb.CreateUserAccessLoggingSettingsInput, ...func(*workspacesweb.Options)) (*workspacesweb.CreateUserAccessLoggingSettingsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *workspacesweb.CreateUserAccessLoggingSettingsInput, ...func(*workspacesweb.Options)) *workspacesweb.CreateUserAccessLoggingSettingsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*workspacesweb.CreateUserAccessLoggingSettingsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *workspacesweb.CreateUserAccessLoggingSettingsInput, ...func(*workspacesweb.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateUserSettings provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CreateUserSettings(ctx context.Context, params *workspacesweb.CreateUserSettingsInput, optFns ...func(*workspacesweb.Options)) (*workspacesweb.CreateUserSettingsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateUserSettings")
	}

	var r0 *workspacesweb.CreateUserSettingsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *workspacesweb.CreateUserSettingsInput, ...func(*workspacesweb.Options)) (*workspacesweb.CreateUserSettingsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *workspacesweb.CreateUserSettingsInput, ...func(*workspacesweb.Options)) *workspacesweb.CreateUserSettingsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*workspacesweb.CreateUserSettingsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *workspacesweb.CreateUserSettingsInput, ...func(*workspacesweb.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteBrowserSettings provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteBrowserSettings(ctx context.Context, params *workspacesweb.DeleteBrowserSettingsInput, optFns ...func(*workspacesweb.Options)) (*workspacesweb.DeleteBrowserSettingsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteBrowserSettings")
	}

	var r0 *workspacesweb.DeleteBrowserSettingsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *workspacesweb.DeleteBrowserSettingsInput, ...func(*workspacesweb.Options)) (*workspacesweb.DeleteBrowserSettingsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *workspacesweb.DeleteBrowserSettingsInput, ...func(*workspacesweb.Options)) *workspacesweb.DeleteBrowserSettingsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*workspacesweb.DeleteBrowserSettingsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *workspacesweb.DeleteBrowserSettingsInput, ...func(*workspacesweb.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteDataProtectionSettings provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteDataProtectionSettings(ctx context.Context, params *workspacesweb.DeleteDataProtectionSettingsInput, optFns ...func(*workspacesweb.Options)) (*workspacesweb.DeleteDataProtectionSettingsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteDataProtectionSettings")
	}

	var r0 *workspacesweb.DeleteDataProtectionSettingsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *workspacesweb.DeleteDataProtectionSettingsInput, ...func(*workspacesweb.Options)) (*workspacesweb.DeleteDataProtectionSettingsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *workspacesweb.DeleteDataProtectionSettingsInput, ...func(*workspacesweb.Options)) *workspacesweb.DeleteDataProtectionSettingsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*workspacesweb.DeleteDataProtectionSettingsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *workspacesweb.DeleteDataProtectionSettingsInput, ...func(*workspacesweb.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteIdentityProvider provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteIdentityProvider(ctx context.Context, params *workspacesweb.DeleteIdentityProviderInput, optFns ...func(*workspacesweb.Options)) (*workspacesweb.DeleteIdentityProviderOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteIdentityProvider")
	}

	var r0 *workspacesweb.DeleteIdentityProviderOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *workspacesweb.DeleteIdentityProviderInput, ...func(*workspacesweb.Options)) (*workspacesweb.DeleteIdentityProviderOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *workspacesweb.DeleteIdentityProviderInput, ...func(*workspacesweb.Options)) *workspacesweb.DeleteIdentityProviderOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*workspacesweb.DeleteIdentityProviderOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *workspacesweb.DeleteIdentityProviderInput, ...func(*workspacesweb.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteIpAccessSettings provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteIpAccessSettings(ctx context.Context, params *workspacesweb.DeleteIpAccessSettingsInput, optFns ...func(*workspacesweb.Options)) (*workspacesweb.DeleteIpAccessSettingsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteIpAccessSettings")
	}

	var r0 *workspacesweb.DeleteIpAccessSettingsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *workspacesweb.DeleteIpAccessSettingsInput, ...func(*workspacesweb.Options)) (*workspacesweb.DeleteIpAccessSettingsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *workspacesweb.DeleteIpAccessSettingsInput, ...func(*workspacesweb.Options)) *workspacesweb.DeleteIpAccessSettingsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*workspacesweb.DeleteIpAccessSettingsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *workspacesweb.DeleteIpAccessSettingsInput, ...func(*workspacesweb.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteNetworkSettings provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteNetworkSettings(ctx context.Context, params *workspacesweb.DeleteNetworkSettingsInput, optFns ...func(*workspacesweb.Options)) (*workspacesweb.DeleteNetworkSettingsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteNetworkSettings")
	}

	var r0 *workspacesweb.DeleteNetworkSettingsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *workspacesweb.DeleteNetworkSettingsInput, ...func(*workspacesweb.Options)) (*workspacesweb.DeleteNetworkSettingsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *workspacesweb.DeleteNetworkSettingsInput, ...func(*workspacesweb.Options)) *workspacesweb.DeleteNetworkSettingsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*workspacesweb.DeleteNetworkSettingsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *workspacesweb.DeleteNetworkSettingsInput, ...func(*workspacesweb.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeletePortal provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeletePortal(ctx context.Context, params *workspacesweb.DeletePortalInput, optFns ...func(*workspacesweb.Options)) (*workspacesweb.DeletePortalOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeletePortal")
	}

	var r0 *workspacesweb.DeletePortalOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *workspacesweb.DeletePortalInput, ...func(*workspacesweb.Options)) (*workspacesweb.DeletePortalOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *workspacesweb.DeletePortalInput, ...func(*workspacesweb.Options)) *workspacesweb.DeletePortalOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*workspacesweb.DeletePortalOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *workspacesweb.DeletePortalInput, ...func(*workspacesweb.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteTrustStore provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteTrustStore(ctx context.Context, params *workspacesweb.DeleteTrustStoreInput, optFns ...func(*workspacesweb.Options)) (*workspacesweb.DeleteTrustStoreOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteTrustStore")
	}

	var r0 *workspacesweb.DeleteTrustStoreOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *workspacesweb.DeleteTrustStoreInput, ...func(*workspacesweb.Options)) (*workspacesweb.DeleteTrustStoreOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *workspacesweb.DeleteTrustStoreInput, ...func(*workspacesweb.Options)) *workspacesweb.DeleteTrustStoreOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*workspacesweb.DeleteTrustStoreOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *workspacesweb.DeleteTrustStoreInput, ...func(*workspacesweb.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteUserAccessLoggingSettings provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteUserAccessLoggingSettings(ctx context.Context, params *workspacesweb.DeleteUserAccessLoggingSettingsInput, optFns ...func(*workspacesweb.Options)) (*workspacesweb.DeleteUserAccessLoggingSettingsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteUserAccessLoggingSettings")
	}

	var r0 *workspacesweb.DeleteUserAccessLoggingSettingsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *workspacesweb.DeleteUserAccessLoggingSettingsInput, ...func(*workspacesweb.Options)) (*workspacesweb.DeleteUserAccessLoggingSettingsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *workspacesweb.DeleteUserAccessLoggingSettingsInput, ...func(*workspacesweb.Options)) *workspacesweb.DeleteUserAccessLoggingSettingsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*workspacesweb.DeleteUserAccessLoggingSettingsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *workspacesweb.DeleteUserAccessLoggingSettingsInput, ...func(*workspacesweb.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteUserSettings provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteUserSettings(ctx context.Context, params *workspacesweb.DeleteUserSettingsInput, optFns ...func(*workspacesweb.Options)) (*workspacesweb.DeleteUserSettingsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteUserSettings")
	}

	var r0 *workspacesweb.DeleteUserSettingsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *workspacesweb.DeleteUserSettingsInput, ...func(*workspacesweb.Options)) (*workspacesweb.DeleteUserSettingsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *workspacesweb.DeleteUserSettingsInput, ...func(*workspacesweb.Options)) *workspacesweb.DeleteUserSettingsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*workspacesweb.DeleteUserSettingsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *workspacesweb.DeleteUserSettingsInput, ...func(*workspacesweb.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DisassociateBrowserSettings provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DisassociateBrowserSettings(ctx context.Context, params *workspacesweb.DisassociateBrowserSettingsInput, optFns ...func(*workspacesweb.Options)) (*workspacesweb.DisassociateBrowserSettingsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DisassociateBrowserSettings")
	}

	var r0 *workspacesweb.DisassociateBrowserSettingsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *workspacesweb.DisassociateBrowserSettingsInput, ...func(*workspacesweb.Options)) (*workspacesweb.DisassociateBrowserSettingsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *workspacesweb.DisassociateBrowserSettingsInput, ...func(*workspacesweb.Options)) *workspacesweb.DisassociateBrowserSettingsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*workspacesweb.DisassociateBrowserSettingsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *workspacesweb.DisassociateBrowserSettingsInput, ...func(*workspacesweb.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DisassociateDataProtectionSettings provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DisassociateDataProtectionSettings(ctx context.Context, params *workspacesweb.DisassociateDataProtectionSettingsInput, optFns ...func(*workspacesweb.Options)) (*workspacesweb.DisassociateDataProtectionSettingsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DisassociateDataProtectionSettings")
	}

	var r0 *workspacesweb.DisassociateDataProtectionSettingsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *workspacesweb.DisassociateDataProtectionSettingsInput, ...func(*workspacesweb.Options)) (*workspacesweb.DisassociateDataProtectionSettingsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *workspacesweb.DisassociateDataProtectionSettingsInput, ...func(*workspacesweb.Options)) *workspacesweb.DisassociateDataProtectionSettingsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*workspacesweb.DisassociateDataProtectionSettingsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *workspacesweb.DisassociateDataProtectionSettingsInput, ...func(*workspacesweb.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DisassociateIpAccessSettings provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DisassociateIpAccessSettings(ctx context.Context, params *workspacesweb.DisassociateIpAccessSettingsInput, optFns ...func(*workspacesweb.Options)) (*workspacesweb.DisassociateIpAccessSettingsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DisassociateIpAccessSettings")
	}

	var r0 *workspacesweb.DisassociateIpAccessSettingsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *workspacesweb.DisassociateIpAccessSettingsInput, ...func(*workspacesweb.Options)) (*workspacesweb.DisassociateIpAccessSettingsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *workspacesweb.DisassociateIpAccessSettingsInput, ...func(*workspacesweb.Options)) *workspacesweb.DisassociateIpAccessSettingsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*workspacesweb.DisassociateIpAccessSettingsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *workspacesweb.DisassociateIpAccessSettingsInput, ...func(*workspacesweb.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DisassociateNetworkSettings provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DisassociateNetworkSettings(ctx context.Context, params *workspacesweb.DisassociateNetworkSettingsInput, optFns ...func(*workspacesweb.Options)) (*workspacesweb.DisassociateNetworkSettingsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DisassociateNetworkSettings")
	}

	var r0 *workspacesweb.DisassociateNetworkSettingsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *workspacesweb.DisassociateNetworkSettingsInput, ...func(*workspacesweb.Options)) (*workspacesweb.DisassociateNetworkSettingsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *workspacesweb.DisassociateNetworkSettingsInput, ...func(*workspacesweb.Options)) *workspacesweb.DisassociateNetworkSettingsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*workspacesweb.DisassociateNetworkSettingsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *workspacesweb.DisassociateNetworkSettingsInput, ...func(*workspacesweb.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DisassociateTrustStore provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DisassociateTrustStore(ctx context.Context, params *workspacesweb.DisassociateTrustStoreInput, optFns ...func(*workspacesweb.Options)) (*workspacesweb.DisassociateTrustStoreOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DisassociateTrustStore")
	}

	var r0 *workspacesweb.DisassociateTrustStoreOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *workspacesweb.DisassociateTrustStoreInput, ...func(*workspacesweb.Options)) (*workspacesweb.DisassociateTrustStoreOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *workspacesweb.DisassociateTrustStoreInput, ...func(*workspacesweb.Options)) *workspacesweb.DisassociateTrustStoreOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*workspacesweb.DisassociateTrustStoreOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *workspacesweb.DisassociateTrustStoreInput, ...func(*workspacesweb.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DisassociateUserAccessLoggingSettings provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DisassociateUserAccessLoggingSettings(ctx context.Context, params *workspacesweb.DisassociateUserAccessLoggingSettingsInput, optFns ...func(*workspacesweb.Options)) (*workspacesweb.DisassociateUserAccessLoggingSettingsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DisassociateUserAccessLoggingSettings")
	}

	var r0 *workspacesweb.DisassociateUserAccessLoggingSettingsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *workspacesweb.DisassociateUserAccessLoggingSettingsInput, ...func(*workspacesweb.Options)) (*workspacesweb.DisassociateUserAccessLoggingSettingsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *workspacesweb.DisassociateUserAccessLoggingSettingsInput, ...func(*workspacesweb.Options)) *workspacesweb.DisassociateUserAccessLoggingSettingsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*workspacesweb.DisassociateUserAccessLoggingSettingsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *workspacesweb.DisassociateUserAccessLoggingSettingsInput, ...func(*workspacesweb.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DisassociateUserSettings provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DisassociateUserSettings(ctx context.Context, params *workspacesweb.DisassociateUserSettingsInput, optFns ...func(*workspacesweb.Options)) (*workspacesweb.DisassociateUserSettingsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DisassociateUserSettings")
	}

	var r0 *workspacesweb.DisassociateUserSettingsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *workspacesweb.DisassociateUserSettingsInput, ...func(*workspacesweb.Options)) (*workspacesweb.DisassociateUserSettingsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *workspacesweb.DisassociateUserSettingsInput, ...func(*workspacesweb.Options)) *workspacesweb.DisassociateUserSettingsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*workspacesweb.DisassociateUserSettingsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *workspacesweb.DisassociateUserSettingsInput, ...func(*workspacesweb.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ExpireSession provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ExpireSession(ctx context.Context, params *workspacesweb.ExpireSessionInput, optFns ...func(*workspacesweb.Options)) (*workspacesweb.ExpireSessionOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ExpireSession")
	}

	var r0 *workspacesweb.ExpireSessionOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *workspacesweb.ExpireSessionInput, ...func(*workspacesweb.Options)) (*workspacesweb.ExpireSessionOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *workspacesweb.ExpireSessionInput, ...func(*workspacesweb.Options)) *workspacesweb.ExpireSessionOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*workspacesweb.ExpireSessionOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *workspacesweb.ExpireSessionInput, ...func(*workspacesweb.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetBrowserSettings provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetBrowserSettings(ctx context.Context, params *workspacesweb.GetBrowserSettingsInput, optFns ...func(*workspacesweb.Options)) (*workspacesweb.GetBrowserSettingsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetBrowserSettings")
	}

	var r0 *workspacesweb.GetBrowserSettingsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *workspacesweb.GetBrowserSettingsInput, ...func(*workspacesweb.Options)) (*workspacesweb.GetBrowserSettingsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *workspacesweb.GetBrowserSettingsInput, ...func(*workspacesweb.Options)) *workspacesweb.GetBrowserSettingsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*workspacesweb.GetBrowserSettingsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *workspacesweb.GetBrowserSettingsInput, ...func(*workspacesweb.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetDataProtectionSettings provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetDataProtectionSettings(ctx context.Context, params *workspacesweb.GetDataProtectionSettingsInput, optFns ...func(*workspacesweb.Options)) (*workspacesweb.GetDataProtectionSettingsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetDataProtectionSettings")
	}

	var r0 *workspacesweb.GetDataProtectionSettingsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *workspacesweb.GetDataProtectionSettingsInput, ...func(*workspacesweb.Options)) (*workspacesweb.GetDataProtectionSettingsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *workspacesweb.GetDataProtectionSettingsInput, ...func(*workspacesweb.Options)) *workspacesweb.GetDataProtectionSettingsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*workspacesweb.GetDataProtectionSettingsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *workspacesweb.GetDataProtectionSettingsInput, ...func(*workspacesweb.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetIdentityProvider provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetIdentityProvider(ctx context.Context, params *workspacesweb.GetIdentityProviderInput, optFns ...func(*workspacesweb.Options)) (*workspacesweb.GetIdentityProviderOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetIdentityProvider")
	}

	var r0 *workspacesweb.GetIdentityProviderOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *workspacesweb.GetIdentityProviderInput, ...func(*workspacesweb.Options)) (*workspacesweb.GetIdentityProviderOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *workspacesweb.GetIdentityProviderInput, ...func(*workspacesweb.Options)) *workspacesweb.GetIdentityProviderOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*workspacesweb.GetIdentityProviderOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *workspacesweb.GetIdentityProviderInput, ...func(*workspacesweb.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetIpAccessSettings provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetIpAccessSettings(ctx context.Context, params *workspacesweb.GetIpAccessSettingsInput, optFns ...func(*workspacesweb.Options)) (*workspacesweb.GetIpAccessSettingsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetIpAccessSettings")
	}

	var r0 *workspacesweb.GetIpAccessSettingsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *workspacesweb.GetIpAccessSettingsInput, ...func(*workspacesweb.Options)) (*workspacesweb.GetIpAccessSettingsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *workspacesweb.GetIpAccessSettingsInput, ...func(*workspacesweb.Options)) *workspacesweb.GetIpAccessSettingsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*workspacesweb.GetIpAccessSettingsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *workspacesweb.GetIpAccessSettingsInput, ...func(*workspacesweb.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetNetworkSettings provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetNetworkSettings(ctx context.Context, params *workspacesweb.GetNetworkSettingsInput, optFns ...func(*workspacesweb.Options)) (*workspacesweb.GetNetworkSettingsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetNetworkSettings")
	}

	var r0 *workspacesweb.GetNetworkSettingsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *workspacesweb.GetNetworkSettingsInput, ...func(*workspacesweb.Options)) (*workspacesweb.GetNetworkSettingsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *workspacesweb.GetNetworkSettingsInput, ...func(*workspacesweb.Options)) *workspacesweb.GetNetworkSettingsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*workspacesweb.GetNetworkSettingsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *workspacesweb.GetNetworkSettingsInput, ...func(*workspacesweb.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetPortal provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetPortal(ctx context.Context, params *workspacesweb.GetPortalInput, optFns ...func(*workspacesweb.Options)) (*workspacesweb.GetPortalOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetPortal")
	}

	var r0 *workspacesweb.GetPortalOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *workspacesweb.GetPortalInput, ...func(*workspacesweb.Options)) (*workspacesweb.GetPortalOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *workspacesweb.GetPortalInput, ...func(*workspacesweb.Options)) *workspacesweb.GetPortalOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*workspacesweb.GetPortalOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *workspacesweb.GetPortalInput, ...func(*workspacesweb.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetPortalServiceProviderMetadata provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetPortalServiceProviderMetadata(ctx context.Context, params *workspacesweb.GetPortalServiceProviderMetadataInput, optFns ...func(*workspacesweb.Options)) (*workspacesweb.GetPortalServiceProviderMetadataOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetPortalServiceProviderMetadata")
	}

	var r0 *workspacesweb.GetPortalServiceProviderMetadataOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *workspacesweb.GetPortalServiceProviderMetadataInput, ...func(*workspacesweb.Options)) (*workspacesweb.GetPortalServiceProviderMetadataOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *workspacesweb.GetPortalServiceProviderMetadataInput, ...func(*workspacesweb.Options)) *workspacesweb.GetPortalServiceProviderMetadataOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*workspacesweb.GetPortalServiceProviderMetadataOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *workspacesweb.GetPortalServiceProviderMetadataInput, ...func(*workspacesweb.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetSession provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetSession(ctx context.Context, params *workspacesweb.GetSessionInput, optFns ...func(*workspacesweb.Options)) (*workspacesweb.GetSessionOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetSession")
	}

	var r0 *workspacesweb.GetSessionOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *workspacesweb.GetSessionInput, ...func(*workspacesweb.Options)) (*workspacesweb.GetSessionOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *workspacesweb.GetSessionInput, ...func(*workspacesweb.Options)) *workspacesweb.GetSessionOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*workspacesweb.GetSessionOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *workspacesweb.GetSessionInput, ...func(*workspacesweb.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetTrustStore provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetTrustStore(ctx context.Context, params *workspacesweb.GetTrustStoreInput, optFns ...func(*workspacesweb.Options)) (*workspacesweb.GetTrustStoreOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetTrustStore")
	}

	var r0 *workspacesweb.GetTrustStoreOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *workspacesweb.GetTrustStoreInput, ...func(*workspacesweb.Options)) (*workspacesweb.GetTrustStoreOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *workspacesweb.GetTrustStoreInput, ...func(*workspacesweb.Options)) *workspacesweb.GetTrustStoreOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*workspacesweb.GetTrustStoreOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *workspacesweb.GetTrustStoreInput, ...func(*workspacesweb.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetTrustStoreCertificate provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetTrustStoreCertificate(ctx context.Context, params *workspacesweb.GetTrustStoreCertificateInput, optFns ...func(*workspacesweb.Options)) (*workspacesweb.GetTrustStoreCertificateOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetTrustStoreCertificate")
	}

	var r0 *workspacesweb.GetTrustStoreCertificateOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *workspacesweb.GetTrustStoreCertificateInput, ...func(*workspacesweb.Options)) (*workspacesweb.GetTrustStoreCertificateOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *workspacesweb.GetTrustStoreCertificateInput, ...func(*workspacesweb.Options)) *workspacesweb.GetTrustStoreCertificateOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*workspacesweb.GetTrustStoreCertificateOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *workspacesweb.GetTrustStoreCertificateInput, ...func(*workspacesweb.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetUserAccessLoggingSettings provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetUserAccessLoggingSettings(ctx context.Context, params *workspacesweb.GetUserAccessLoggingSettingsInput, optFns ...func(*workspacesweb.Options)) (*workspacesweb.GetUserAccessLoggingSettingsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetUserAccessLoggingSettings")
	}

	var r0 *workspacesweb.GetUserAccessLoggingSettingsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *workspacesweb.GetUserAccessLoggingSettingsInput, ...func(*workspacesweb.Options)) (*workspacesweb.GetUserAccessLoggingSettingsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *workspacesweb.GetUserAccessLoggingSettingsInput, ...func(*workspacesweb.Options)) *workspacesweb.GetUserAccessLoggingSettingsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*workspacesweb.GetUserAccessLoggingSettingsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *workspacesweb.GetUserAccessLoggingSettingsInput, ...func(*workspacesweb.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetUserSettings provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetUserSettings(ctx context.Context, params *workspacesweb.GetUserSettingsInput, optFns ...func(*workspacesweb.Options)) (*workspacesweb.GetUserSettingsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetUserSettings")
	}

	var r0 *workspacesweb.GetUserSettingsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *workspacesweb.GetUserSettingsInput, ...func(*workspacesweb.Options)) (*workspacesweb.GetUserSettingsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *workspacesweb.GetUserSettingsInput, ...func(*workspacesweb.Options)) *workspacesweb.GetUserSettingsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*workspacesweb.GetUserSettingsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *workspacesweb.GetUserSettingsInput, ...func(*workspacesweb.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListBrowserSettings provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListBrowserSettings(ctx context.Context, params *workspacesweb.ListBrowserSettingsInput, optFns ...func(*workspacesweb.Options)) (*workspacesweb.ListBrowserSettingsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListBrowserSettings")
	}

	var r0 *workspacesweb.ListBrowserSettingsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *workspacesweb.ListBrowserSettingsInput, ...func(*workspacesweb.Options)) (*workspacesweb.ListBrowserSettingsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *workspacesweb.ListBrowserSettingsInput, ...func(*workspacesweb.Options)) *workspacesweb.ListBrowserSettingsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*workspacesweb.ListBrowserSettingsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *workspacesweb.ListBrowserSettingsInput, ...func(*workspacesweb.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListDataProtectionSettings provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListDataProtectionSettings(ctx context.Context, params *workspacesweb.ListDataProtectionSettingsInput, optFns ...func(*workspacesweb.Options)) (*workspacesweb.ListDataProtectionSettingsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListDataProtectionSettings")
	}

	var r0 *workspacesweb.ListDataProtectionSettingsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *workspacesweb.ListDataProtectionSettingsInput, ...func(*workspacesweb.Options)) (*workspacesweb.ListDataProtectionSettingsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *workspacesweb.ListDataProtectionSettingsInput, ...func(*workspacesweb.Options)) *workspacesweb.ListDataProtectionSettingsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*workspacesweb.ListDataProtectionSettingsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *workspacesweb.ListDataProtectionSettingsInput, ...func(*workspacesweb.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListIdentityProviders provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListIdentityProviders(ctx context.Context, params *workspacesweb.ListIdentityProvidersInput, optFns ...func(*workspacesweb.Options)) (*workspacesweb.ListIdentityProvidersOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListIdentityProviders")
	}

	var r0 *workspacesweb.ListIdentityProvidersOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *workspacesweb.ListIdentityProvidersInput, ...func(*workspacesweb.Options)) (*workspacesweb.ListIdentityProvidersOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *workspacesweb.ListIdentityProvidersInput, ...func(*workspacesweb.Options)) *workspacesweb.ListIdentityProvidersOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*workspacesweb.ListIdentityProvidersOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *workspacesweb.ListIdentityProvidersInput, ...func(*workspacesweb.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListIpAccessSettings provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListIpAccessSettings(ctx context.Context, params *workspacesweb.ListIpAccessSettingsInput, optFns ...func(*workspacesweb.Options)) (*workspacesweb.ListIpAccessSettingsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListIpAccessSettings")
	}

	var r0 *workspacesweb.ListIpAccessSettingsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *workspacesweb.ListIpAccessSettingsInput, ...func(*workspacesweb.Options)) (*workspacesweb.ListIpAccessSettingsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *workspacesweb.ListIpAccessSettingsInput, ...func(*workspacesweb.Options)) *workspacesweb.ListIpAccessSettingsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*workspacesweb.ListIpAccessSettingsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *workspacesweb.ListIpAccessSettingsInput, ...func(*workspacesweb.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListNetworkSettings provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListNetworkSettings(ctx context.Context, params *workspacesweb.ListNetworkSettingsInput, optFns ...func(*workspacesweb.Options)) (*workspacesweb.ListNetworkSettingsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListNetworkSettings")
	}

	var r0 *workspacesweb.ListNetworkSettingsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *workspacesweb.ListNetworkSettingsInput, ...func(*workspacesweb.Options)) (*workspacesweb.ListNetworkSettingsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *workspacesweb.ListNetworkSettingsInput, ...func(*workspacesweb.Options)) *workspacesweb.ListNetworkSettingsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*workspacesweb.ListNetworkSettingsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *workspacesweb.ListNetworkSettingsInput, ...func(*workspacesweb.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListPortals provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListPortals(ctx context.Context, params *workspacesweb.ListPortalsInput, optFns ...func(*workspacesweb.Options)) (*workspacesweb.ListPortalsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListPortals")
	}

	var r0 *workspacesweb.ListPortalsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *workspacesweb.ListPortalsInput, ...func(*workspacesweb.Options)) (*workspacesweb.ListPortalsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *workspacesweb.ListPortalsInput, ...func(*workspacesweb.Options)) *workspacesweb.ListPortalsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*workspacesweb.ListPortalsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *workspacesweb.ListPortalsInput, ...func(*workspacesweb.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListSessions provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListSessions(ctx context.Context, params *workspacesweb.ListSessionsInput, optFns ...func(*workspacesweb.Options)) (*workspacesweb.ListSessionsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListSessions")
	}

	var r0 *workspacesweb.ListSessionsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *workspacesweb.ListSessionsInput, ...func(*workspacesweb.Options)) (*workspacesweb.ListSessionsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *workspacesweb.ListSessionsInput, ...func(*workspacesweb.Options)) *workspacesweb.ListSessionsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*workspacesweb.ListSessionsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *workspacesweb.ListSessionsInput, ...func(*workspacesweb.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListTagsForResource provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListTagsForResource(ctx context.Context, params *workspacesweb.ListTagsForResourceInput, optFns ...func(*workspacesweb.Options)) (*workspacesweb.ListTagsForResourceOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListTagsForResource")
	}

	var r0 *workspacesweb.ListTagsForResourceOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *workspacesweb.ListTagsForResourceInput, ...func(*workspacesweb.Options)) (*workspacesweb.ListTagsForResourceOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *workspacesweb.ListTagsForResourceInput, ...func(*workspacesweb.Options)) *workspacesweb.ListTagsForResourceOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*workspacesweb.ListTagsForResourceOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *workspacesweb.ListTagsForResourceInput, ...func(*workspacesweb.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListTrustStoreCertificates provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListTrustStoreCertificates(ctx context.Context, params *workspacesweb.ListTrustStoreCertificatesInput, optFns ...func(*workspacesweb.Options)) (*workspacesweb.ListTrustStoreCertificatesOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListTrustStoreCertificates")
	}

	var r0 *workspacesweb.ListTrustStoreCertificatesOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *workspacesweb.ListTrustStoreCertificatesInput, ...func(*workspacesweb.Options)) (*workspacesweb.ListTrustStoreCertificatesOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *workspacesweb.ListTrustStoreCertificatesInput, ...func(*workspacesweb.Options)) *workspacesweb.ListTrustStoreCertificatesOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*workspacesweb.ListTrustStoreCertificatesOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *workspacesweb.ListTrustStoreCertificatesInput, ...func(*workspacesweb.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListTrustStores provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListTrustStores(ctx context.Context, params *workspacesweb.ListTrustStoresInput, optFns ...func(*workspacesweb.Options)) (*workspacesweb.ListTrustStoresOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListTrustStores")
	}

	var r0 *workspacesweb.ListTrustStoresOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *workspacesweb.ListTrustStoresInput, ...func(*workspacesweb.Options)) (*workspacesweb.ListTrustStoresOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *workspacesweb.ListTrustStoresInput, ...func(*workspacesweb.Options)) *workspacesweb.ListTrustStoresOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*workspacesweb.ListTrustStoresOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *workspacesweb.ListTrustStoresInput, ...func(*workspacesweb.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListUserAccessLoggingSettings provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListUserAccessLoggingSettings(ctx context.Context, params *workspacesweb.ListUserAccessLoggingSettingsInput, optFns ...func(*workspacesweb.Options)) (*workspacesweb.ListUserAccessLoggingSettingsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListUserAccessLoggingSettings")
	}

	var r0 *workspacesweb.ListUserAccessLoggingSettingsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *workspacesweb.ListUserAccessLoggingSettingsInput, ...func(*workspacesweb.Options)) (*workspacesweb.ListUserAccessLoggingSettingsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *workspacesweb.ListUserAccessLoggingSettingsInput, ...func(*workspacesweb.Options)) *workspacesweb.ListUserAccessLoggingSettingsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*workspacesweb.ListUserAccessLoggingSettingsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *workspacesweb.ListUserAccessLoggingSettingsInput, ...func(*workspacesweb.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListUserSettings provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListUserSettings(ctx context.Context, params *workspacesweb.ListUserSettingsInput, optFns ...func(*workspacesweb.Options)) (*workspacesweb.ListUserSettingsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListUserSettings")
	}

	var r0 *workspacesweb.ListUserSettingsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *workspacesweb.ListUserSettingsInput, ...func(*workspacesweb.Options)) (*workspacesweb.ListUserSettingsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *workspacesweb.ListUserSettingsInput, ...func(*workspacesweb.Options)) *workspacesweb.ListUserSettingsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*workspacesweb.ListUserSettingsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *workspacesweb.ListUserSettingsInput, ...func(*workspacesweb.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Options provides a mock function with no fields
func (_m *IClient) Options() workspacesweb.Options {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Options")
	}

	var r0 workspacesweb.Options
	if rf, ok := ret.Get(0).(func() workspacesweb.Options); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(workspacesweb.Options)
	}

	return r0
}

// TagResource provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) TagResource(ctx context.Context, params *workspacesweb.TagResourceInput, optFns ...func(*workspacesweb.Options)) (*workspacesweb.TagResourceOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for TagResource")
	}

	var r0 *workspacesweb.TagResourceOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *workspacesweb.TagResourceInput, ...func(*workspacesweb.Options)) (*workspacesweb.TagResourceOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *workspacesweb.TagResourceInput, ...func(*workspacesweb.Options)) *workspacesweb.TagResourceOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*workspacesweb.TagResourceOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *workspacesweb.TagResourceInput, ...func(*workspacesweb.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UntagResource provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UntagResource(ctx context.Context, params *workspacesweb.UntagResourceInput, optFns ...func(*workspacesweb.Options)) (*workspacesweb.UntagResourceOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UntagResource")
	}

	var r0 *workspacesweb.UntagResourceOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *workspacesweb.UntagResourceInput, ...func(*workspacesweb.Options)) (*workspacesweb.UntagResourceOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *workspacesweb.UntagResourceInput, ...func(*workspacesweb.Options)) *workspacesweb.UntagResourceOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*workspacesweb.UntagResourceOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *workspacesweb.UntagResourceInput, ...func(*workspacesweb.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateBrowserSettings provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UpdateBrowserSettings(ctx context.Context, params *workspacesweb.UpdateBrowserSettingsInput, optFns ...func(*workspacesweb.Options)) (*workspacesweb.UpdateBrowserSettingsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateBrowserSettings")
	}

	var r0 *workspacesweb.UpdateBrowserSettingsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *workspacesweb.UpdateBrowserSettingsInput, ...func(*workspacesweb.Options)) (*workspacesweb.UpdateBrowserSettingsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *workspacesweb.UpdateBrowserSettingsInput, ...func(*workspacesweb.Options)) *workspacesweb.UpdateBrowserSettingsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*workspacesweb.UpdateBrowserSettingsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *workspacesweb.UpdateBrowserSettingsInput, ...func(*workspacesweb.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateDataProtectionSettings provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UpdateDataProtectionSettings(ctx context.Context, params *workspacesweb.UpdateDataProtectionSettingsInput, optFns ...func(*workspacesweb.Options)) (*workspacesweb.UpdateDataProtectionSettingsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateDataProtectionSettings")
	}

	var r0 *workspacesweb.UpdateDataProtectionSettingsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *workspacesweb.UpdateDataProtectionSettingsInput, ...func(*workspacesweb.Options)) (*workspacesweb.UpdateDataProtectionSettingsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *workspacesweb.UpdateDataProtectionSettingsInput, ...func(*workspacesweb.Options)) *workspacesweb.UpdateDataProtectionSettingsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*workspacesweb.UpdateDataProtectionSettingsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *workspacesweb.UpdateDataProtectionSettingsInput, ...func(*workspacesweb.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateIdentityProvider provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UpdateIdentityProvider(ctx context.Context, params *workspacesweb.UpdateIdentityProviderInput, optFns ...func(*workspacesweb.Options)) (*workspacesweb.UpdateIdentityProviderOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateIdentityProvider")
	}

	var r0 *workspacesweb.UpdateIdentityProviderOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *workspacesweb.UpdateIdentityProviderInput, ...func(*workspacesweb.Options)) (*workspacesweb.UpdateIdentityProviderOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *workspacesweb.UpdateIdentityProviderInput, ...func(*workspacesweb.Options)) *workspacesweb.UpdateIdentityProviderOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*workspacesweb.UpdateIdentityProviderOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *workspacesweb.UpdateIdentityProviderInput, ...func(*workspacesweb.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateIpAccessSettings provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UpdateIpAccessSettings(ctx context.Context, params *workspacesweb.UpdateIpAccessSettingsInput, optFns ...func(*workspacesweb.Options)) (*workspacesweb.UpdateIpAccessSettingsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateIpAccessSettings")
	}

	var r0 *workspacesweb.UpdateIpAccessSettingsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *workspacesweb.UpdateIpAccessSettingsInput, ...func(*workspacesweb.Options)) (*workspacesweb.UpdateIpAccessSettingsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *workspacesweb.UpdateIpAccessSettingsInput, ...func(*workspacesweb.Options)) *workspacesweb.UpdateIpAccessSettingsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*workspacesweb.UpdateIpAccessSettingsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *workspacesweb.UpdateIpAccessSettingsInput, ...func(*workspacesweb.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateNetworkSettings provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UpdateNetworkSettings(ctx context.Context, params *workspacesweb.UpdateNetworkSettingsInput, optFns ...func(*workspacesweb.Options)) (*workspacesweb.UpdateNetworkSettingsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateNetworkSettings")
	}

	var r0 *workspacesweb.UpdateNetworkSettingsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *workspacesweb.UpdateNetworkSettingsInput, ...func(*workspacesweb.Options)) (*workspacesweb.UpdateNetworkSettingsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *workspacesweb.UpdateNetworkSettingsInput, ...func(*workspacesweb.Options)) *workspacesweb.UpdateNetworkSettingsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*workspacesweb.UpdateNetworkSettingsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *workspacesweb.UpdateNetworkSettingsInput, ...func(*workspacesweb.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdatePortal provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UpdatePortal(ctx context.Context, params *workspacesweb.UpdatePortalInput, optFns ...func(*workspacesweb.Options)) (*workspacesweb.UpdatePortalOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdatePortal")
	}

	var r0 *workspacesweb.UpdatePortalOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *workspacesweb.UpdatePortalInput, ...func(*workspacesweb.Options)) (*workspacesweb.UpdatePortalOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *workspacesweb.UpdatePortalInput, ...func(*workspacesweb.Options)) *workspacesweb.UpdatePortalOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*workspacesweb.UpdatePortalOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *workspacesweb.UpdatePortalInput, ...func(*workspacesweb.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateTrustStore provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UpdateTrustStore(ctx context.Context, params *workspacesweb.UpdateTrustStoreInput, optFns ...func(*workspacesweb.Options)) (*workspacesweb.UpdateTrustStoreOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateTrustStore")
	}

	var r0 *workspacesweb.UpdateTrustStoreOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *workspacesweb.UpdateTrustStoreInput, ...func(*workspacesweb.Options)) (*workspacesweb.UpdateTrustStoreOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *workspacesweb.UpdateTrustStoreInput, ...func(*workspacesweb.Options)) *workspacesweb.UpdateTrustStoreOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*workspacesweb.UpdateTrustStoreOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *workspacesweb.UpdateTrustStoreInput, ...func(*workspacesweb.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateUserAccessLoggingSettings provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UpdateUserAccessLoggingSettings(ctx context.Context, params *workspacesweb.UpdateUserAccessLoggingSettingsInput, optFns ...func(*workspacesweb.Options)) (*workspacesweb.UpdateUserAccessLoggingSettingsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateUserAccessLoggingSettings")
	}

	var r0 *workspacesweb.UpdateUserAccessLoggingSettingsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *workspacesweb.UpdateUserAccessLoggingSettingsInput, ...func(*workspacesweb.Options)) (*workspacesweb.UpdateUserAccessLoggingSettingsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *workspacesweb.UpdateUserAccessLoggingSettingsInput, ...func(*workspacesweb.Options)) *workspacesweb.UpdateUserAccessLoggingSettingsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*workspacesweb.UpdateUserAccessLoggingSettingsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *workspacesweb.UpdateUserAccessLoggingSettingsInput, ...func(*workspacesweb.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateUserSettings provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UpdateUserSettings(ctx context.Context, params *workspacesweb.UpdateUserSettingsInput, optFns ...func(*workspacesweb.Options)) (*workspacesweb.UpdateUserSettingsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateUserSettings")
	}

	var r0 *workspacesweb.UpdateUserSettingsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *workspacesweb.UpdateUserSettingsInput, ...func(*workspacesweb.Options)) (*workspacesweb.UpdateUserSettingsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *workspacesweb.UpdateUserSettingsInput, ...func(*workspacesweb.Options)) *workspacesweb.UpdateUserSettingsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*workspacesweb.UpdateUserSettingsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *workspacesweb.UpdateUserSettingsInput, ...func(*workspacesweb.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewIClient creates a new instance of IClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewIClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *IClient {
	mock := &IClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
