// Code generated by mockery v2.43.2. DO NOT EDIT.

package mocks

import (
	context "context"

	directconnect "github.com/aws/aws-sdk-go-v2/service/directconnect"

	mock "github.com/stretchr/testify/mock"
)

// IClient is an autogenerated mock type for the IClient type
type IClient struct {
	mock.Mock
}

// AcceptDirectConnectGatewayAssociationProposal provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) AcceptDirectConnectGatewayAssociationProposal(ctx context.Context, params *directconnect.AcceptDirectConnectGatewayAssociationProposalInput, optFns ...func(*directconnect.Options)) (*directconnect.AcceptDirectConnectGatewayAssociationProposalOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for AcceptDirectConnectGatewayAssociationProposal")
	}

	var r0 *directconnect.AcceptDirectConnectGatewayAssociationProposalOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *directconnect.AcceptDirectConnectGatewayAssociationProposalInput, ...func(*directconnect.Options)) (*directconnect.AcceptDirectConnectGatewayAssociationProposalOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *directconnect.AcceptDirectConnectGatewayAssociationProposalInput, ...func(*directconnect.Options)) *directconnect.AcceptDirectConnectGatewayAssociationProposalOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*directconnect.AcceptDirectConnectGatewayAssociationProposalOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *directconnect.AcceptDirectConnectGatewayAssociationProposalInput, ...func(*directconnect.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AllocateConnectionOnInterconnect provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) AllocateConnectionOnInterconnect(ctx context.Context, params *directconnect.AllocateConnectionOnInterconnectInput, optFns ...func(*directconnect.Options)) (*directconnect.AllocateConnectionOnInterconnectOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for AllocateConnectionOnInterconnect")
	}

	var r0 *directconnect.AllocateConnectionOnInterconnectOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *directconnect.AllocateConnectionOnInterconnectInput, ...func(*directconnect.Options)) (*directconnect.AllocateConnectionOnInterconnectOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *directconnect.AllocateConnectionOnInterconnectInput, ...func(*directconnect.Options)) *directconnect.AllocateConnectionOnInterconnectOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*directconnect.AllocateConnectionOnInterconnectOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *directconnect.AllocateConnectionOnInterconnectInput, ...func(*directconnect.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AllocateHostedConnection provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) AllocateHostedConnection(ctx context.Context, params *directconnect.AllocateHostedConnectionInput, optFns ...func(*directconnect.Options)) (*directconnect.AllocateHostedConnectionOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for AllocateHostedConnection")
	}

	var r0 *directconnect.AllocateHostedConnectionOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *directconnect.AllocateHostedConnectionInput, ...func(*directconnect.Options)) (*directconnect.AllocateHostedConnectionOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *directconnect.AllocateHostedConnectionInput, ...func(*directconnect.Options)) *directconnect.AllocateHostedConnectionOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*directconnect.AllocateHostedConnectionOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *directconnect.AllocateHostedConnectionInput, ...func(*directconnect.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AllocatePrivateVirtualInterface provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) AllocatePrivateVirtualInterface(ctx context.Context, params *directconnect.AllocatePrivateVirtualInterfaceInput, optFns ...func(*directconnect.Options)) (*directconnect.AllocatePrivateVirtualInterfaceOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for AllocatePrivateVirtualInterface")
	}

	var r0 *directconnect.AllocatePrivateVirtualInterfaceOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *directconnect.AllocatePrivateVirtualInterfaceInput, ...func(*directconnect.Options)) (*directconnect.AllocatePrivateVirtualInterfaceOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *directconnect.AllocatePrivateVirtualInterfaceInput, ...func(*directconnect.Options)) *directconnect.AllocatePrivateVirtualInterfaceOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*directconnect.AllocatePrivateVirtualInterfaceOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *directconnect.AllocatePrivateVirtualInterfaceInput, ...func(*directconnect.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AllocatePublicVirtualInterface provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) AllocatePublicVirtualInterface(ctx context.Context, params *directconnect.AllocatePublicVirtualInterfaceInput, optFns ...func(*directconnect.Options)) (*directconnect.AllocatePublicVirtualInterfaceOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for AllocatePublicVirtualInterface")
	}

	var r0 *directconnect.AllocatePublicVirtualInterfaceOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *directconnect.AllocatePublicVirtualInterfaceInput, ...func(*directconnect.Options)) (*directconnect.AllocatePublicVirtualInterfaceOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *directconnect.AllocatePublicVirtualInterfaceInput, ...func(*directconnect.Options)) *directconnect.AllocatePublicVirtualInterfaceOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*directconnect.AllocatePublicVirtualInterfaceOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *directconnect.AllocatePublicVirtualInterfaceInput, ...func(*directconnect.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AllocateTransitVirtualInterface provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) AllocateTransitVirtualInterface(ctx context.Context, params *directconnect.AllocateTransitVirtualInterfaceInput, optFns ...func(*directconnect.Options)) (*directconnect.AllocateTransitVirtualInterfaceOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for AllocateTransitVirtualInterface")
	}

	var r0 *directconnect.AllocateTransitVirtualInterfaceOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *directconnect.AllocateTransitVirtualInterfaceInput, ...func(*directconnect.Options)) (*directconnect.AllocateTransitVirtualInterfaceOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *directconnect.AllocateTransitVirtualInterfaceInput, ...func(*directconnect.Options)) *directconnect.AllocateTransitVirtualInterfaceOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*directconnect.AllocateTransitVirtualInterfaceOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *directconnect.AllocateTransitVirtualInterfaceInput, ...func(*directconnect.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AssociateConnectionWithLag provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) AssociateConnectionWithLag(ctx context.Context, params *directconnect.AssociateConnectionWithLagInput, optFns ...func(*directconnect.Options)) (*directconnect.AssociateConnectionWithLagOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for AssociateConnectionWithLag")
	}

	var r0 *directconnect.AssociateConnectionWithLagOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *directconnect.AssociateConnectionWithLagInput, ...func(*directconnect.Options)) (*directconnect.AssociateConnectionWithLagOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *directconnect.AssociateConnectionWithLagInput, ...func(*directconnect.Options)) *directconnect.AssociateConnectionWithLagOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*directconnect.AssociateConnectionWithLagOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *directconnect.AssociateConnectionWithLagInput, ...func(*directconnect.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AssociateHostedConnection provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) AssociateHostedConnection(ctx context.Context, params *directconnect.AssociateHostedConnectionInput, optFns ...func(*directconnect.Options)) (*directconnect.AssociateHostedConnectionOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for AssociateHostedConnection")
	}

	var r0 *directconnect.AssociateHostedConnectionOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *directconnect.AssociateHostedConnectionInput, ...func(*directconnect.Options)) (*directconnect.AssociateHostedConnectionOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *directconnect.AssociateHostedConnectionInput, ...func(*directconnect.Options)) *directconnect.AssociateHostedConnectionOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*directconnect.AssociateHostedConnectionOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *directconnect.AssociateHostedConnectionInput, ...func(*directconnect.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AssociateMacSecKey provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) AssociateMacSecKey(ctx context.Context, params *directconnect.AssociateMacSecKeyInput, optFns ...func(*directconnect.Options)) (*directconnect.AssociateMacSecKeyOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for AssociateMacSecKey")
	}

	var r0 *directconnect.AssociateMacSecKeyOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *directconnect.AssociateMacSecKeyInput, ...func(*directconnect.Options)) (*directconnect.AssociateMacSecKeyOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *directconnect.AssociateMacSecKeyInput, ...func(*directconnect.Options)) *directconnect.AssociateMacSecKeyOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*directconnect.AssociateMacSecKeyOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *directconnect.AssociateMacSecKeyInput, ...func(*directconnect.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AssociateVirtualInterface provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) AssociateVirtualInterface(ctx context.Context, params *directconnect.AssociateVirtualInterfaceInput, optFns ...func(*directconnect.Options)) (*directconnect.AssociateVirtualInterfaceOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for AssociateVirtualInterface")
	}

	var r0 *directconnect.AssociateVirtualInterfaceOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *directconnect.AssociateVirtualInterfaceInput, ...func(*directconnect.Options)) (*directconnect.AssociateVirtualInterfaceOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *directconnect.AssociateVirtualInterfaceInput, ...func(*directconnect.Options)) *directconnect.AssociateVirtualInterfaceOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*directconnect.AssociateVirtualInterfaceOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *directconnect.AssociateVirtualInterfaceInput, ...func(*directconnect.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ConfirmConnection provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ConfirmConnection(ctx context.Context, params *directconnect.ConfirmConnectionInput, optFns ...func(*directconnect.Options)) (*directconnect.ConfirmConnectionOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ConfirmConnection")
	}

	var r0 *directconnect.ConfirmConnectionOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *directconnect.ConfirmConnectionInput, ...func(*directconnect.Options)) (*directconnect.ConfirmConnectionOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *directconnect.ConfirmConnectionInput, ...func(*directconnect.Options)) *directconnect.ConfirmConnectionOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*directconnect.ConfirmConnectionOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *directconnect.ConfirmConnectionInput, ...func(*directconnect.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ConfirmCustomerAgreement provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ConfirmCustomerAgreement(ctx context.Context, params *directconnect.ConfirmCustomerAgreementInput, optFns ...func(*directconnect.Options)) (*directconnect.ConfirmCustomerAgreementOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ConfirmCustomerAgreement")
	}

	var r0 *directconnect.ConfirmCustomerAgreementOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *directconnect.ConfirmCustomerAgreementInput, ...func(*directconnect.Options)) (*directconnect.ConfirmCustomerAgreementOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *directconnect.ConfirmCustomerAgreementInput, ...func(*directconnect.Options)) *directconnect.ConfirmCustomerAgreementOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*directconnect.ConfirmCustomerAgreementOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *directconnect.ConfirmCustomerAgreementInput, ...func(*directconnect.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ConfirmPrivateVirtualInterface provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ConfirmPrivateVirtualInterface(ctx context.Context, params *directconnect.ConfirmPrivateVirtualInterfaceInput, optFns ...func(*directconnect.Options)) (*directconnect.ConfirmPrivateVirtualInterfaceOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ConfirmPrivateVirtualInterface")
	}

	var r0 *directconnect.ConfirmPrivateVirtualInterfaceOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *directconnect.ConfirmPrivateVirtualInterfaceInput, ...func(*directconnect.Options)) (*directconnect.ConfirmPrivateVirtualInterfaceOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *directconnect.ConfirmPrivateVirtualInterfaceInput, ...func(*directconnect.Options)) *directconnect.ConfirmPrivateVirtualInterfaceOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*directconnect.ConfirmPrivateVirtualInterfaceOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *directconnect.ConfirmPrivateVirtualInterfaceInput, ...func(*directconnect.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ConfirmPublicVirtualInterface provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ConfirmPublicVirtualInterface(ctx context.Context, params *directconnect.ConfirmPublicVirtualInterfaceInput, optFns ...func(*directconnect.Options)) (*directconnect.ConfirmPublicVirtualInterfaceOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ConfirmPublicVirtualInterface")
	}

	var r0 *directconnect.ConfirmPublicVirtualInterfaceOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *directconnect.ConfirmPublicVirtualInterfaceInput, ...func(*directconnect.Options)) (*directconnect.ConfirmPublicVirtualInterfaceOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *directconnect.ConfirmPublicVirtualInterfaceInput, ...func(*directconnect.Options)) *directconnect.ConfirmPublicVirtualInterfaceOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*directconnect.ConfirmPublicVirtualInterfaceOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *directconnect.ConfirmPublicVirtualInterfaceInput, ...func(*directconnect.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ConfirmTransitVirtualInterface provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ConfirmTransitVirtualInterface(ctx context.Context, params *directconnect.ConfirmTransitVirtualInterfaceInput, optFns ...func(*directconnect.Options)) (*directconnect.ConfirmTransitVirtualInterfaceOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ConfirmTransitVirtualInterface")
	}

	var r0 *directconnect.ConfirmTransitVirtualInterfaceOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *directconnect.ConfirmTransitVirtualInterfaceInput, ...func(*directconnect.Options)) (*directconnect.ConfirmTransitVirtualInterfaceOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *directconnect.ConfirmTransitVirtualInterfaceInput, ...func(*directconnect.Options)) *directconnect.ConfirmTransitVirtualInterfaceOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*directconnect.ConfirmTransitVirtualInterfaceOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *directconnect.ConfirmTransitVirtualInterfaceInput, ...func(*directconnect.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateBGPPeer provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CreateBGPPeer(ctx context.Context, params *directconnect.CreateBGPPeerInput, optFns ...func(*directconnect.Options)) (*directconnect.CreateBGPPeerOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateBGPPeer")
	}

	var r0 *directconnect.CreateBGPPeerOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *directconnect.CreateBGPPeerInput, ...func(*directconnect.Options)) (*directconnect.CreateBGPPeerOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *directconnect.CreateBGPPeerInput, ...func(*directconnect.Options)) *directconnect.CreateBGPPeerOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*directconnect.CreateBGPPeerOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *directconnect.CreateBGPPeerInput, ...func(*directconnect.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateConnection provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CreateConnection(ctx context.Context, params *directconnect.CreateConnectionInput, optFns ...func(*directconnect.Options)) (*directconnect.CreateConnectionOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateConnection")
	}

	var r0 *directconnect.CreateConnectionOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *directconnect.CreateConnectionInput, ...func(*directconnect.Options)) (*directconnect.CreateConnectionOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *directconnect.CreateConnectionInput, ...func(*directconnect.Options)) *directconnect.CreateConnectionOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*directconnect.CreateConnectionOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *directconnect.CreateConnectionInput, ...func(*directconnect.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateDirectConnectGateway provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CreateDirectConnectGateway(ctx context.Context, params *directconnect.CreateDirectConnectGatewayInput, optFns ...func(*directconnect.Options)) (*directconnect.CreateDirectConnectGatewayOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateDirectConnectGateway")
	}

	var r0 *directconnect.CreateDirectConnectGatewayOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *directconnect.CreateDirectConnectGatewayInput, ...func(*directconnect.Options)) (*directconnect.CreateDirectConnectGatewayOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *directconnect.CreateDirectConnectGatewayInput, ...func(*directconnect.Options)) *directconnect.CreateDirectConnectGatewayOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*directconnect.CreateDirectConnectGatewayOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *directconnect.CreateDirectConnectGatewayInput, ...func(*directconnect.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateDirectConnectGatewayAssociation provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CreateDirectConnectGatewayAssociation(ctx context.Context, params *directconnect.CreateDirectConnectGatewayAssociationInput, optFns ...func(*directconnect.Options)) (*directconnect.CreateDirectConnectGatewayAssociationOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateDirectConnectGatewayAssociation")
	}

	var r0 *directconnect.CreateDirectConnectGatewayAssociationOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *directconnect.CreateDirectConnectGatewayAssociationInput, ...func(*directconnect.Options)) (*directconnect.CreateDirectConnectGatewayAssociationOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *directconnect.CreateDirectConnectGatewayAssociationInput, ...func(*directconnect.Options)) *directconnect.CreateDirectConnectGatewayAssociationOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*directconnect.CreateDirectConnectGatewayAssociationOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *directconnect.CreateDirectConnectGatewayAssociationInput, ...func(*directconnect.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateDirectConnectGatewayAssociationProposal provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CreateDirectConnectGatewayAssociationProposal(ctx context.Context, params *directconnect.CreateDirectConnectGatewayAssociationProposalInput, optFns ...func(*directconnect.Options)) (*directconnect.CreateDirectConnectGatewayAssociationProposalOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateDirectConnectGatewayAssociationProposal")
	}

	var r0 *directconnect.CreateDirectConnectGatewayAssociationProposalOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *directconnect.CreateDirectConnectGatewayAssociationProposalInput, ...func(*directconnect.Options)) (*directconnect.CreateDirectConnectGatewayAssociationProposalOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *directconnect.CreateDirectConnectGatewayAssociationProposalInput, ...func(*directconnect.Options)) *directconnect.CreateDirectConnectGatewayAssociationProposalOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*directconnect.CreateDirectConnectGatewayAssociationProposalOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *directconnect.CreateDirectConnectGatewayAssociationProposalInput, ...func(*directconnect.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateInterconnect provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CreateInterconnect(ctx context.Context, params *directconnect.CreateInterconnectInput, optFns ...func(*directconnect.Options)) (*directconnect.CreateInterconnectOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateInterconnect")
	}

	var r0 *directconnect.CreateInterconnectOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *directconnect.CreateInterconnectInput, ...func(*directconnect.Options)) (*directconnect.CreateInterconnectOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *directconnect.CreateInterconnectInput, ...func(*directconnect.Options)) *directconnect.CreateInterconnectOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*directconnect.CreateInterconnectOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *directconnect.CreateInterconnectInput, ...func(*directconnect.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateLag provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CreateLag(ctx context.Context, params *directconnect.CreateLagInput, optFns ...func(*directconnect.Options)) (*directconnect.CreateLagOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateLag")
	}

	var r0 *directconnect.CreateLagOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *directconnect.CreateLagInput, ...func(*directconnect.Options)) (*directconnect.CreateLagOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *directconnect.CreateLagInput, ...func(*directconnect.Options)) *directconnect.CreateLagOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*directconnect.CreateLagOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *directconnect.CreateLagInput, ...func(*directconnect.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreatePrivateVirtualInterface provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CreatePrivateVirtualInterface(ctx context.Context, params *directconnect.CreatePrivateVirtualInterfaceInput, optFns ...func(*directconnect.Options)) (*directconnect.CreatePrivateVirtualInterfaceOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreatePrivateVirtualInterface")
	}

	var r0 *directconnect.CreatePrivateVirtualInterfaceOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *directconnect.CreatePrivateVirtualInterfaceInput, ...func(*directconnect.Options)) (*directconnect.CreatePrivateVirtualInterfaceOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *directconnect.CreatePrivateVirtualInterfaceInput, ...func(*directconnect.Options)) *directconnect.CreatePrivateVirtualInterfaceOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*directconnect.CreatePrivateVirtualInterfaceOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *directconnect.CreatePrivateVirtualInterfaceInput, ...func(*directconnect.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreatePublicVirtualInterface provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CreatePublicVirtualInterface(ctx context.Context, params *directconnect.CreatePublicVirtualInterfaceInput, optFns ...func(*directconnect.Options)) (*directconnect.CreatePublicVirtualInterfaceOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreatePublicVirtualInterface")
	}

	var r0 *directconnect.CreatePublicVirtualInterfaceOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *directconnect.CreatePublicVirtualInterfaceInput, ...func(*directconnect.Options)) (*directconnect.CreatePublicVirtualInterfaceOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *directconnect.CreatePublicVirtualInterfaceInput, ...func(*directconnect.Options)) *directconnect.CreatePublicVirtualInterfaceOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*directconnect.CreatePublicVirtualInterfaceOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *directconnect.CreatePublicVirtualInterfaceInput, ...func(*directconnect.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateTransitVirtualInterface provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CreateTransitVirtualInterface(ctx context.Context, params *directconnect.CreateTransitVirtualInterfaceInput, optFns ...func(*directconnect.Options)) (*directconnect.CreateTransitVirtualInterfaceOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateTransitVirtualInterface")
	}

	var r0 *directconnect.CreateTransitVirtualInterfaceOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *directconnect.CreateTransitVirtualInterfaceInput, ...func(*directconnect.Options)) (*directconnect.CreateTransitVirtualInterfaceOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *directconnect.CreateTransitVirtualInterfaceInput, ...func(*directconnect.Options)) *directconnect.CreateTransitVirtualInterfaceOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*directconnect.CreateTransitVirtualInterfaceOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *directconnect.CreateTransitVirtualInterfaceInput, ...func(*directconnect.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteBGPPeer provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteBGPPeer(ctx context.Context, params *directconnect.DeleteBGPPeerInput, optFns ...func(*directconnect.Options)) (*directconnect.DeleteBGPPeerOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteBGPPeer")
	}

	var r0 *directconnect.DeleteBGPPeerOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *directconnect.DeleteBGPPeerInput, ...func(*directconnect.Options)) (*directconnect.DeleteBGPPeerOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *directconnect.DeleteBGPPeerInput, ...func(*directconnect.Options)) *directconnect.DeleteBGPPeerOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*directconnect.DeleteBGPPeerOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *directconnect.DeleteBGPPeerInput, ...func(*directconnect.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteConnection provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteConnection(ctx context.Context, params *directconnect.DeleteConnectionInput, optFns ...func(*directconnect.Options)) (*directconnect.DeleteConnectionOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteConnection")
	}

	var r0 *directconnect.DeleteConnectionOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *directconnect.DeleteConnectionInput, ...func(*directconnect.Options)) (*directconnect.DeleteConnectionOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *directconnect.DeleteConnectionInput, ...func(*directconnect.Options)) *directconnect.DeleteConnectionOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*directconnect.DeleteConnectionOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *directconnect.DeleteConnectionInput, ...func(*directconnect.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteDirectConnectGateway provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteDirectConnectGateway(ctx context.Context, params *directconnect.DeleteDirectConnectGatewayInput, optFns ...func(*directconnect.Options)) (*directconnect.DeleteDirectConnectGatewayOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteDirectConnectGateway")
	}

	var r0 *directconnect.DeleteDirectConnectGatewayOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *directconnect.DeleteDirectConnectGatewayInput, ...func(*directconnect.Options)) (*directconnect.DeleteDirectConnectGatewayOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *directconnect.DeleteDirectConnectGatewayInput, ...func(*directconnect.Options)) *directconnect.DeleteDirectConnectGatewayOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*directconnect.DeleteDirectConnectGatewayOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *directconnect.DeleteDirectConnectGatewayInput, ...func(*directconnect.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteDirectConnectGatewayAssociation provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteDirectConnectGatewayAssociation(ctx context.Context, params *directconnect.DeleteDirectConnectGatewayAssociationInput, optFns ...func(*directconnect.Options)) (*directconnect.DeleteDirectConnectGatewayAssociationOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteDirectConnectGatewayAssociation")
	}

	var r0 *directconnect.DeleteDirectConnectGatewayAssociationOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *directconnect.DeleteDirectConnectGatewayAssociationInput, ...func(*directconnect.Options)) (*directconnect.DeleteDirectConnectGatewayAssociationOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *directconnect.DeleteDirectConnectGatewayAssociationInput, ...func(*directconnect.Options)) *directconnect.DeleteDirectConnectGatewayAssociationOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*directconnect.DeleteDirectConnectGatewayAssociationOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *directconnect.DeleteDirectConnectGatewayAssociationInput, ...func(*directconnect.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteDirectConnectGatewayAssociationProposal provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteDirectConnectGatewayAssociationProposal(ctx context.Context, params *directconnect.DeleteDirectConnectGatewayAssociationProposalInput, optFns ...func(*directconnect.Options)) (*directconnect.DeleteDirectConnectGatewayAssociationProposalOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteDirectConnectGatewayAssociationProposal")
	}

	var r0 *directconnect.DeleteDirectConnectGatewayAssociationProposalOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *directconnect.DeleteDirectConnectGatewayAssociationProposalInput, ...func(*directconnect.Options)) (*directconnect.DeleteDirectConnectGatewayAssociationProposalOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *directconnect.DeleteDirectConnectGatewayAssociationProposalInput, ...func(*directconnect.Options)) *directconnect.DeleteDirectConnectGatewayAssociationProposalOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*directconnect.DeleteDirectConnectGatewayAssociationProposalOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *directconnect.DeleteDirectConnectGatewayAssociationProposalInput, ...func(*directconnect.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteInterconnect provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteInterconnect(ctx context.Context, params *directconnect.DeleteInterconnectInput, optFns ...func(*directconnect.Options)) (*directconnect.DeleteInterconnectOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteInterconnect")
	}

	var r0 *directconnect.DeleteInterconnectOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *directconnect.DeleteInterconnectInput, ...func(*directconnect.Options)) (*directconnect.DeleteInterconnectOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *directconnect.DeleteInterconnectInput, ...func(*directconnect.Options)) *directconnect.DeleteInterconnectOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*directconnect.DeleteInterconnectOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *directconnect.DeleteInterconnectInput, ...func(*directconnect.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteLag provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteLag(ctx context.Context, params *directconnect.DeleteLagInput, optFns ...func(*directconnect.Options)) (*directconnect.DeleteLagOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteLag")
	}

	var r0 *directconnect.DeleteLagOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *directconnect.DeleteLagInput, ...func(*directconnect.Options)) (*directconnect.DeleteLagOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *directconnect.DeleteLagInput, ...func(*directconnect.Options)) *directconnect.DeleteLagOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*directconnect.DeleteLagOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *directconnect.DeleteLagInput, ...func(*directconnect.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteVirtualInterface provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteVirtualInterface(ctx context.Context, params *directconnect.DeleteVirtualInterfaceInput, optFns ...func(*directconnect.Options)) (*directconnect.DeleteVirtualInterfaceOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteVirtualInterface")
	}

	var r0 *directconnect.DeleteVirtualInterfaceOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *directconnect.DeleteVirtualInterfaceInput, ...func(*directconnect.Options)) (*directconnect.DeleteVirtualInterfaceOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *directconnect.DeleteVirtualInterfaceInput, ...func(*directconnect.Options)) *directconnect.DeleteVirtualInterfaceOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*directconnect.DeleteVirtualInterfaceOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *directconnect.DeleteVirtualInterfaceInput, ...func(*directconnect.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeConnectionLoa provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DescribeConnectionLoa(ctx context.Context, params *directconnect.DescribeConnectionLoaInput, optFns ...func(*directconnect.Options)) (*directconnect.DescribeConnectionLoaOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DescribeConnectionLoa")
	}

	var r0 *directconnect.DescribeConnectionLoaOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *directconnect.DescribeConnectionLoaInput, ...func(*directconnect.Options)) (*directconnect.DescribeConnectionLoaOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *directconnect.DescribeConnectionLoaInput, ...func(*directconnect.Options)) *directconnect.DescribeConnectionLoaOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*directconnect.DescribeConnectionLoaOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *directconnect.DescribeConnectionLoaInput, ...func(*directconnect.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeConnections provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DescribeConnections(ctx context.Context, params *directconnect.DescribeConnectionsInput, optFns ...func(*directconnect.Options)) (*directconnect.DescribeConnectionsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DescribeConnections")
	}

	var r0 *directconnect.DescribeConnectionsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *directconnect.DescribeConnectionsInput, ...func(*directconnect.Options)) (*directconnect.DescribeConnectionsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *directconnect.DescribeConnectionsInput, ...func(*directconnect.Options)) *directconnect.DescribeConnectionsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*directconnect.DescribeConnectionsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *directconnect.DescribeConnectionsInput, ...func(*directconnect.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeConnectionsOnInterconnect provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DescribeConnectionsOnInterconnect(ctx context.Context, params *directconnect.DescribeConnectionsOnInterconnectInput, optFns ...func(*directconnect.Options)) (*directconnect.DescribeConnectionsOnInterconnectOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DescribeConnectionsOnInterconnect")
	}

	var r0 *directconnect.DescribeConnectionsOnInterconnectOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *directconnect.DescribeConnectionsOnInterconnectInput, ...func(*directconnect.Options)) (*directconnect.DescribeConnectionsOnInterconnectOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *directconnect.DescribeConnectionsOnInterconnectInput, ...func(*directconnect.Options)) *directconnect.DescribeConnectionsOnInterconnectOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*directconnect.DescribeConnectionsOnInterconnectOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *directconnect.DescribeConnectionsOnInterconnectInput, ...func(*directconnect.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeCustomerMetadata provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DescribeCustomerMetadata(ctx context.Context, params *directconnect.DescribeCustomerMetadataInput, optFns ...func(*directconnect.Options)) (*directconnect.DescribeCustomerMetadataOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DescribeCustomerMetadata")
	}

	var r0 *directconnect.DescribeCustomerMetadataOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *directconnect.DescribeCustomerMetadataInput, ...func(*directconnect.Options)) (*directconnect.DescribeCustomerMetadataOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *directconnect.DescribeCustomerMetadataInput, ...func(*directconnect.Options)) *directconnect.DescribeCustomerMetadataOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*directconnect.DescribeCustomerMetadataOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *directconnect.DescribeCustomerMetadataInput, ...func(*directconnect.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeDirectConnectGatewayAssociationProposals provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DescribeDirectConnectGatewayAssociationProposals(ctx context.Context, params *directconnect.DescribeDirectConnectGatewayAssociationProposalsInput, optFns ...func(*directconnect.Options)) (*directconnect.DescribeDirectConnectGatewayAssociationProposalsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DescribeDirectConnectGatewayAssociationProposals")
	}

	var r0 *directconnect.DescribeDirectConnectGatewayAssociationProposalsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *directconnect.DescribeDirectConnectGatewayAssociationProposalsInput, ...func(*directconnect.Options)) (*directconnect.DescribeDirectConnectGatewayAssociationProposalsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *directconnect.DescribeDirectConnectGatewayAssociationProposalsInput, ...func(*directconnect.Options)) *directconnect.DescribeDirectConnectGatewayAssociationProposalsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*directconnect.DescribeDirectConnectGatewayAssociationProposalsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *directconnect.DescribeDirectConnectGatewayAssociationProposalsInput, ...func(*directconnect.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeDirectConnectGatewayAssociations provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DescribeDirectConnectGatewayAssociations(ctx context.Context, params *directconnect.DescribeDirectConnectGatewayAssociationsInput, optFns ...func(*directconnect.Options)) (*directconnect.DescribeDirectConnectGatewayAssociationsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DescribeDirectConnectGatewayAssociations")
	}

	var r0 *directconnect.DescribeDirectConnectGatewayAssociationsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *directconnect.DescribeDirectConnectGatewayAssociationsInput, ...func(*directconnect.Options)) (*directconnect.DescribeDirectConnectGatewayAssociationsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *directconnect.DescribeDirectConnectGatewayAssociationsInput, ...func(*directconnect.Options)) *directconnect.DescribeDirectConnectGatewayAssociationsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*directconnect.DescribeDirectConnectGatewayAssociationsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *directconnect.DescribeDirectConnectGatewayAssociationsInput, ...func(*directconnect.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeDirectConnectGatewayAttachments provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DescribeDirectConnectGatewayAttachments(ctx context.Context, params *directconnect.DescribeDirectConnectGatewayAttachmentsInput, optFns ...func(*directconnect.Options)) (*directconnect.DescribeDirectConnectGatewayAttachmentsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DescribeDirectConnectGatewayAttachments")
	}

	var r0 *directconnect.DescribeDirectConnectGatewayAttachmentsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *directconnect.DescribeDirectConnectGatewayAttachmentsInput, ...func(*directconnect.Options)) (*directconnect.DescribeDirectConnectGatewayAttachmentsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *directconnect.DescribeDirectConnectGatewayAttachmentsInput, ...func(*directconnect.Options)) *directconnect.DescribeDirectConnectGatewayAttachmentsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*directconnect.DescribeDirectConnectGatewayAttachmentsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *directconnect.DescribeDirectConnectGatewayAttachmentsInput, ...func(*directconnect.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeDirectConnectGateways provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DescribeDirectConnectGateways(ctx context.Context, params *directconnect.DescribeDirectConnectGatewaysInput, optFns ...func(*directconnect.Options)) (*directconnect.DescribeDirectConnectGatewaysOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DescribeDirectConnectGateways")
	}

	var r0 *directconnect.DescribeDirectConnectGatewaysOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *directconnect.DescribeDirectConnectGatewaysInput, ...func(*directconnect.Options)) (*directconnect.DescribeDirectConnectGatewaysOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *directconnect.DescribeDirectConnectGatewaysInput, ...func(*directconnect.Options)) *directconnect.DescribeDirectConnectGatewaysOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*directconnect.DescribeDirectConnectGatewaysOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *directconnect.DescribeDirectConnectGatewaysInput, ...func(*directconnect.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeHostedConnections provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DescribeHostedConnections(ctx context.Context, params *directconnect.DescribeHostedConnectionsInput, optFns ...func(*directconnect.Options)) (*directconnect.DescribeHostedConnectionsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DescribeHostedConnections")
	}

	var r0 *directconnect.DescribeHostedConnectionsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *directconnect.DescribeHostedConnectionsInput, ...func(*directconnect.Options)) (*directconnect.DescribeHostedConnectionsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *directconnect.DescribeHostedConnectionsInput, ...func(*directconnect.Options)) *directconnect.DescribeHostedConnectionsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*directconnect.DescribeHostedConnectionsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *directconnect.DescribeHostedConnectionsInput, ...func(*directconnect.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeInterconnectLoa provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DescribeInterconnectLoa(ctx context.Context, params *directconnect.DescribeInterconnectLoaInput, optFns ...func(*directconnect.Options)) (*directconnect.DescribeInterconnectLoaOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DescribeInterconnectLoa")
	}

	var r0 *directconnect.DescribeInterconnectLoaOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *directconnect.DescribeInterconnectLoaInput, ...func(*directconnect.Options)) (*directconnect.DescribeInterconnectLoaOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *directconnect.DescribeInterconnectLoaInput, ...func(*directconnect.Options)) *directconnect.DescribeInterconnectLoaOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*directconnect.DescribeInterconnectLoaOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *directconnect.DescribeInterconnectLoaInput, ...func(*directconnect.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeInterconnects provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DescribeInterconnects(ctx context.Context, params *directconnect.DescribeInterconnectsInput, optFns ...func(*directconnect.Options)) (*directconnect.DescribeInterconnectsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DescribeInterconnects")
	}

	var r0 *directconnect.DescribeInterconnectsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *directconnect.DescribeInterconnectsInput, ...func(*directconnect.Options)) (*directconnect.DescribeInterconnectsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *directconnect.DescribeInterconnectsInput, ...func(*directconnect.Options)) *directconnect.DescribeInterconnectsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*directconnect.DescribeInterconnectsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *directconnect.DescribeInterconnectsInput, ...func(*directconnect.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeLags provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DescribeLags(ctx context.Context, params *directconnect.DescribeLagsInput, optFns ...func(*directconnect.Options)) (*directconnect.DescribeLagsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DescribeLags")
	}

	var r0 *directconnect.DescribeLagsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *directconnect.DescribeLagsInput, ...func(*directconnect.Options)) (*directconnect.DescribeLagsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *directconnect.DescribeLagsInput, ...func(*directconnect.Options)) *directconnect.DescribeLagsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*directconnect.DescribeLagsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *directconnect.DescribeLagsInput, ...func(*directconnect.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeLoa provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DescribeLoa(ctx context.Context, params *directconnect.DescribeLoaInput, optFns ...func(*directconnect.Options)) (*directconnect.DescribeLoaOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DescribeLoa")
	}

	var r0 *directconnect.DescribeLoaOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *directconnect.DescribeLoaInput, ...func(*directconnect.Options)) (*directconnect.DescribeLoaOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *directconnect.DescribeLoaInput, ...func(*directconnect.Options)) *directconnect.DescribeLoaOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*directconnect.DescribeLoaOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *directconnect.DescribeLoaInput, ...func(*directconnect.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeLocations provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DescribeLocations(ctx context.Context, params *directconnect.DescribeLocationsInput, optFns ...func(*directconnect.Options)) (*directconnect.DescribeLocationsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DescribeLocations")
	}

	var r0 *directconnect.DescribeLocationsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *directconnect.DescribeLocationsInput, ...func(*directconnect.Options)) (*directconnect.DescribeLocationsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *directconnect.DescribeLocationsInput, ...func(*directconnect.Options)) *directconnect.DescribeLocationsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*directconnect.DescribeLocationsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *directconnect.DescribeLocationsInput, ...func(*directconnect.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeRouterConfiguration provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DescribeRouterConfiguration(ctx context.Context, params *directconnect.DescribeRouterConfigurationInput, optFns ...func(*directconnect.Options)) (*directconnect.DescribeRouterConfigurationOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DescribeRouterConfiguration")
	}

	var r0 *directconnect.DescribeRouterConfigurationOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *directconnect.DescribeRouterConfigurationInput, ...func(*directconnect.Options)) (*directconnect.DescribeRouterConfigurationOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *directconnect.DescribeRouterConfigurationInput, ...func(*directconnect.Options)) *directconnect.DescribeRouterConfigurationOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*directconnect.DescribeRouterConfigurationOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *directconnect.DescribeRouterConfigurationInput, ...func(*directconnect.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeTags provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DescribeTags(ctx context.Context, params *directconnect.DescribeTagsInput, optFns ...func(*directconnect.Options)) (*directconnect.DescribeTagsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DescribeTags")
	}

	var r0 *directconnect.DescribeTagsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *directconnect.DescribeTagsInput, ...func(*directconnect.Options)) (*directconnect.DescribeTagsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *directconnect.DescribeTagsInput, ...func(*directconnect.Options)) *directconnect.DescribeTagsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*directconnect.DescribeTagsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *directconnect.DescribeTagsInput, ...func(*directconnect.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeVirtualGateways provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DescribeVirtualGateways(ctx context.Context, params *directconnect.DescribeVirtualGatewaysInput, optFns ...func(*directconnect.Options)) (*directconnect.DescribeVirtualGatewaysOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DescribeVirtualGateways")
	}

	var r0 *directconnect.DescribeVirtualGatewaysOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *directconnect.DescribeVirtualGatewaysInput, ...func(*directconnect.Options)) (*directconnect.DescribeVirtualGatewaysOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *directconnect.DescribeVirtualGatewaysInput, ...func(*directconnect.Options)) *directconnect.DescribeVirtualGatewaysOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*directconnect.DescribeVirtualGatewaysOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *directconnect.DescribeVirtualGatewaysInput, ...func(*directconnect.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeVirtualInterfaces provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DescribeVirtualInterfaces(ctx context.Context, params *directconnect.DescribeVirtualInterfacesInput, optFns ...func(*directconnect.Options)) (*directconnect.DescribeVirtualInterfacesOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DescribeVirtualInterfaces")
	}

	var r0 *directconnect.DescribeVirtualInterfacesOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *directconnect.DescribeVirtualInterfacesInput, ...func(*directconnect.Options)) (*directconnect.DescribeVirtualInterfacesOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *directconnect.DescribeVirtualInterfacesInput, ...func(*directconnect.Options)) *directconnect.DescribeVirtualInterfacesOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*directconnect.DescribeVirtualInterfacesOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *directconnect.DescribeVirtualInterfacesInput, ...func(*directconnect.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DisassociateConnectionFromLag provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DisassociateConnectionFromLag(ctx context.Context, params *directconnect.DisassociateConnectionFromLagInput, optFns ...func(*directconnect.Options)) (*directconnect.DisassociateConnectionFromLagOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DisassociateConnectionFromLag")
	}

	var r0 *directconnect.DisassociateConnectionFromLagOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *directconnect.DisassociateConnectionFromLagInput, ...func(*directconnect.Options)) (*directconnect.DisassociateConnectionFromLagOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *directconnect.DisassociateConnectionFromLagInput, ...func(*directconnect.Options)) *directconnect.DisassociateConnectionFromLagOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*directconnect.DisassociateConnectionFromLagOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *directconnect.DisassociateConnectionFromLagInput, ...func(*directconnect.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DisassociateMacSecKey provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DisassociateMacSecKey(ctx context.Context, params *directconnect.DisassociateMacSecKeyInput, optFns ...func(*directconnect.Options)) (*directconnect.DisassociateMacSecKeyOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DisassociateMacSecKey")
	}

	var r0 *directconnect.DisassociateMacSecKeyOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *directconnect.DisassociateMacSecKeyInput, ...func(*directconnect.Options)) (*directconnect.DisassociateMacSecKeyOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *directconnect.DisassociateMacSecKeyInput, ...func(*directconnect.Options)) *directconnect.DisassociateMacSecKeyOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*directconnect.DisassociateMacSecKeyOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *directconnect.DisassociateMacSecKeyInput, ...func(*directconnect.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListVirtualInterfaceTestHistory provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListVirtualInterfaceTestHistory(ctx context.Context, params *directconnect.ListVirtualInterfaceTestHistoryInput, optFns ...func(*directconnect.Options)) (*directconnect.ListVirtualInterfaceTestHistoryOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListVirtualInterfaceTestHistory")
	}

	var r0 *directconnect.ListVirtualInterfaceTestHistoryOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *directconnect.ListVirtualInterfaceTestHistoryInput, ...func(*directconnect.Options)) (*directconnect.ListVirtualInterfaceTestHistoryOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *directconnect.ListVirtualInterfaceTestHistoryInput, ...func(*directconnect.Options)) *directconnect.ListVirtualInterfaceTestHistoryOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*directconnect.ListVirtualInterfaceTestHistoryOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *directconnect.ListVirtualInterfaceTestHistoryInput, ...func(*directconnect.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Options provides a mock function with given fields:
func (_m *IClient) Options() directconnect.Options {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Options")
	}

	var r0 directconnect.Options
	if rf, ok := ret.Get(0).(func() directconnect.Options); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(directconnect.Options)
	}

	return r0
}

// StartBgpFailoverTest provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) StartBgpFailoverTest(ctx context.Context, params *directconnect.StartBgpFailoverTestInput, optFns ...func(*directconnect.Options)) (*directconnect.StartBgpFailoverTestOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for StartBgpFailoverTest")
	}

	var r0 *directconnect.StartBgpFailoverTestOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *directconnect.StartBgpFailoverTestInput, ...func(*directconnect.Options)) (*directconnect.StartBgpFailoverTestOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *directconnect.StartBgpFailoverTestInput, ...func(*directconnect.Options)) *directconnect.StartBgpFailoverTestOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*directconnect.StartBgpFailoverTestOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *directconnect.StartBgpFailoverTestInput, ...func(*directconnect.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// StopBgpFailoverTest provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) StopBgpFailoverTest(ctx context.Context, params *directconnect.StopBgpFailoverTestInput, optFns ...func(*directconnect.Options)) (*directconnect.StopBgpFailoverTestOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for StopBgpFailoverTest")
	}

	var r0 *directconnect.StopBgpFailoverTestOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *directconnect.StopBgpFailoverTestInput, ...func(*directconnect.Options)) (*directconnect.StopBgpFailoverTestOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *directconnect.StopBgpFailoverTestInput, ...func(*directconnect.Options)) *directconnect.StopBgpFailoverTestOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*directconnect.StopBgpFailoverTestOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *directconnect.StopBgpFailoverTestInput, ...func(*directconnect.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// TagResource provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) TagResource(ctx context.Context, params *directconnect.TagResourceInput, optFns ...func(*directconnect.Options)) (*directconnect.TagResourceOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for TagResource")
	}

	var r0 *directconnect.TagResourceOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *directconnect.TagResourceInput, ...func(*directconnect.Options)) (*directconnect.TagResourceOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *directconnect.TagResourceInput, ...func(*directconnect.Options)) *directconnect.TagResourceOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*directconnect.TagResourceOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *directconnect.TagResourceInput, ...func(*directconnect.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UntagResource provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UntagResource(ctx context.Context, params *directconnect.UntagResourceInput, optFns ...func(*directconnect.Options)) (*directconnect.UntagResourceOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UntagResource")
	}

	var r0 *directconnect.UntagResourceOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *directconnect.UntagResourceInput, ...func(*directconnect.Options)) (*directconnect.UntagResourceOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *directconnect.UntagResourceInput, ...func(*directconnect.Options)) *directconnect.UntagResourceOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*directconnect.UntagResourceOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *directconnect.UntagResourceInput, ...func(*directconnect.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateConnection provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UpdateConnection(ctx context.Context, params *directconnect.UpdateConnectionInput, optFns ...func(*directconnect.Options)) (*directconnect.UpdateConnectionOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateConnection")
	}

	var r0 *directconnect.UpdateConnectionOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *directconnect.UpdateConnectionInput, ...func(*directconnect.Options)) (*directconnect.UpdateConnectionOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *directconnect.UpdateConnectionInput, ...func(*directconnect.Options)) *directconnect.UpdateConnectionOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*directconnect.UpdateConnectionOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *directconnect.UpdateConnectionInput, ...func(*directconnect.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateDirectConnectGateway provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UpdateDirectConnectGateway(ctx context.Context, params *directconnect.UpdateDirectConnectGatewayInput, optFns ...func(*directconnect.Options)) (*directconnect.UpdateDirectConnectGatewayOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateDirectConnectGateway")
	}

	var r0 *directconnect.UpdateDirectConnectGatewayOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *directconnect.UpdateDirectConnectGatewayInput, ...func(*directconnect.Options)) (*directconnect.UpdateDirectConnectGatewayOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *directconnect.UpdateDirectConnectGatewayInput, ...func(*directconnect.Options)) *directconnect.UpdateDirectConnectGatewayOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*directconnect.UpdateDirectConnectGatewayOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *directconnect.UpdateDirectConnectGatewayInput, ...func(*directconnect.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateDirectConnectGatewayAssociation provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UpdateDirectConnectGatewayAssociation(ctx context.Context, params *directconnect.UpdateDirectConnectGatewayAssociationInput, optFns ...func(*directconnect.Options)) (*directconnect.UpdateDirectConnectGatewayAssociationOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateDirectConnectGatewayAssociation")
	}

	var r0 *directconnect.UpdateDirectConnectGatewayAssociationOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *directconnect.UpdateDirectConnectGatewayAssociationInput, ...func(*directconnect.Options)) (*directconnect.UpdateDirectConnectGatewayAssociationOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *directconnect.UpdateDirectConnectGatewayAssociationInput, ...func(*directconnect.Options)) *directconnect.UpdateDirectConnectGatewayAssociationOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*directconnect.UpdateDirectConnectGatewayAssociationOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *directconnect.UpdateDirectConnectGatewayAssociationInput, ...func(*directconnect.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateLag provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UpdateLag(ctx context.Context, params *directconnect.UpdateLagInput, optFns ...func(*directconnect.Options)) (*directconnect.UpdateLagOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateLag")
	}

	var r0 *directconnect.UpdateLagOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *directconnect.UpdateLagInput, ...func(*directconnect.Options)) (*directconnect.UpdateLagOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *directconnect.UpdateLagInput, ...func(*directconnect.Options)) *directconnect.UpdateLagOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*directconnect.UpdateLagOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *directconnect.UpdateLagInput, ...func(*directconnect.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateVirtualInterfaceAttributes provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UpdateVirtualInterfaceAttributes(ctx context.Context, params *directconnect.UpdateVirtualInterfaceAttributesInput, optFns ...func(*directconnect.Options)) (*directconnect.UpdateVirtualInterfaceAttributesOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateVirtualInterfaceAttributes")
	}

	var r0 *directconnect.UpdateVirtualInterfaceAttributesOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *directconnect.UpdateVirtualInterfaceAttributesInput, ...func(*directconnect.Options)) (*directconnect.UpdateVirtualInterfaceAttributesOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *directconnect.UpdateVirtualInterfaceAttributesInput, ...func(*directconnect.Options)) *directconnect.UpdateVirtualInterfaceAttributesOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*directconnect.UpdateVirtualInterfaceAttributesOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *directconnect.UpdateVirtualInterfaceAttributesInput, ...func(*directconnect.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewIClient creates a new instance of IClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewIClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *IClient {
	mock := &IClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
