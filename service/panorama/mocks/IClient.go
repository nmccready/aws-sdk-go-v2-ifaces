// Code generated by mockery v2.53.4. DO NOT EDIT.

package mocks

import (
	context "context"

	panorama "github.com/aws/aws-sdk-go-v2/service/panorama"
	mock "github.com/stretchr/testify/mock"
)

// IClient is an autogenerated mock type for the IClient type
type IClient struct {
	mock.Mock
}

// CreateApplicationInstance provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CreateApplicationInstance(ctx context.Context, params *panorama.CreateApplicationInstanceInput, optFns ...func(*panorama.Options)) (*panorama.CreateApplicationInstanceOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateApplicationInstance")
	}

	var r0 *panorama.CreateApplicationInstanceOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *panorama.CreateApplicationInstanceInput, ...func(*panorama.Options)) (*panorama.CreateApplicationInstanceOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *panorama.CreateApplicationInstanceInput, ...func(*panorama.Options)) *panorama.CreateApplicationInstanceOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*panorama.CreateApplicationInstanceOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *panorama.CreateApplicationInstanceInput, ...func(*panorama.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateJobForDevices provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CreateJobForDevices(ctx context.Context, params *panorama.CreateJobForDevicesInput, optFns ...func(*panorama.Options)) (*panorama.CreateJobForDevicesOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateJobForDevices")
	}

	var r0 *panorama.CreateJobForDevicesOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *panorama.CreateJobForDevicesInput, ...func(*panorama.Options)) (*panorama.CreateJobForDevicesOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *panorama.CreateJobForDevicesInput, ...func(*panorama.Options)) *panorama.CreateJobForDevicesOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*panorama.CreateJobForDevicesOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *panorama.CreateJobForDevicesInput, ...func(*panorama.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateNodeFromTemplateJob provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CreateNodeFromTemplateJob(ctx context.Context, params *panorama.CreateNodeFromTemplateJobInput, optFns ...func(*panorama.Options)) (*panorama.CreateNodeFromTemplateJobOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateNodeFromTemplateJob")
	}

	var r0 *panorama.CreateNodeFromTemplateJobOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *panorama.CreateNodeFromTemplateJobInput, ...func(*panorama.Options)) (*panorama.CreateNodeFromTemplateJobOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *panorama.CreateNodeFromTemplateJobInput, ...func(*panorama.Options)) *panorama.CreateNodeFromTemplateJobOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*panorama.CreateNodeFromTemplateJobOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *panorama.CreateNodeFromTemplateJobInput, ...func(*panorama.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreatePackage provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CreatePackage(ctx context.Context, params *panorama.CreatePackageInput, optFns ...func(*panorama.Options)) (*panorama.CreatePackageOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreatePackage")
	}

	var r0 *panorama.CreatePackageOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *panorama.CreatePackageInput, ...func(*panorama.Options)) (*panorama.CreatePackageOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *panorama.CreatePackageInput, ...func(*panorama.Options)) *panorama.CreatePackageOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*panorama.CreatePackageOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *panorama.CreatePackageInput, ...func(*panorama.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreatePackageImportJob provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CreatePackageImportJob(ctx context.Context, params *panorama.CreatePackageImportJobInput, optFns ...func(*panorama.Options)) (*panorama.CreatePackageImportJobOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreatePackageImportJob")
	}

	var r0 *panorama.CreatePackageImportJobOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *panorama.CreatePackageImportJobInput, ...func(*panorama.Options)) (*panorama.CreatePackageImportJobOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *panorama.CreatePackageImportJobInput, ...func(*panorama.Options)) *panorama.CreatePackageImportJobOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*panorama.CreatePackageImportJobOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *panorama.CreatePackageImportJobInput, ...func(*panorama.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteDevice provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteDevice(ctx context.Context, params *panorama.DeleteDeviceInput, optFns ...func(*panorama.Options)) (*panorama.DeleteDeviceOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteDevice")
	}

	var r0 *panorama.DeleteDeviceOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *panorama.DeleteDeviceInput, ...func(*panorama.Options)) (*panorama.DeleteDeviceOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *panorama.DeleteDeviceInput, ...func(*panorama.Options)) *panorama.DeleteDeviceOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*panorama.DeleteDeviceOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *panorama.DeleteDeviceInput, ...func(*panorama.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeletePackage provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeletePackage(ctx context.Context, params *panorama.DeletePackageInput, optFns ...func(*panorama.Options)) (*panorama.DeletePackageOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeletePackage")
	}

	var r0 *panorama.DeletePackageOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *panorama.DeletePackageInput, ...func(*panorama.Options)) (*panorama.DeletePackageOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *panorama.DeletePackageInput, ...func(*panorama.Options)) *panorama.DeletePackageOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*panorama.DeletePackageOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *panorama.DeletePackageInput, ...func(*panorama.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeregisterPackageVersion provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeregisterPackageVersion(ctx context.Context, params *panorama.DeregisterPackageVersionInput, optFns ...func(*panorama.Options)) (*panorama.DeregisterPackageVersionOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeregisterPackageVersion")
	}

	var r0 *panorama.DeregisterPackageVersionOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *panorama.DeregisterPackageVersionInput, ...func(*panorama.Options)) (*panorama.DeregisterPackageVersionOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *panorama.DeregisterPackageVersionInput, ...func(*panorama.Options)) *panorama.DeregisterPackageVersionOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*panorama.DeregisterPackageVersionOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *panorama.DeregisterPackageVersionInput, ...func(*panorama.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeApplicationInstance provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DescribeApplicationInstance(ctx context.Context, params *panorama.DescribeApplicationInstanceInput, optFns ...func(*panorama.Options)) (*panorama.DescribeApplicationInstanceOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DescribeApplicationInstance")
	}

	var r0 *panorama.DescribeApplicationInstanceOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *panorama.DescribeApplicationInstanceInput, ...func(*panorama.Options)) (*panorama.DescribeApplicationInstanceOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *panorama.DescribeApplicationInstanceInput, ...func(*panorama.Options)) *panorama.DescribeApplicationInstanceOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*panorama.DescribeApplicationInstanceOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *panorama.DescribeApplicationInstanceInput, ...func(*panorama.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeApplicationInstanceDetails provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DescribeApplicationInstanceDetails(ctx context.Context, params *panorama.DescribeApplicationInstanceDetailsInput, optFns ...func(*panorama.Options)) (*panorama.DescribeApplicationInstanceDetailsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DescribeApplicationInstanceDetails")
	}

	var r0 *panorama.DescribeApplicationInstanceDetailsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *panorama.DescribeApplicationInstanceDetailsInput, ...func(*panorama.Options)) (*panorama.DescribeApplicationInstanceDetailsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *panorama.DescribeApplicationInstanceDetailsInput, ...func(*panorama.Options)) *panorama.DescribeApplicationInstanceDetailsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*panorama.DescribeApplicationInstanceDetailsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *panorama.DescribeApplicationInstanceDetailsInput, ...func(*panorama.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeDevice provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DescribeDevice(ctx context.Context, params *panorama.DescribeDeviceInput, optFns ...func(*panorama.Options)) (*panorama.DescribeDeviceOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DescribeDevice")
	}

	var r0 *panorama.DescribeDeviceOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *panorama.DescribeDeviceInput, ...func(*panorama.Options)) (*panorama.DescribeDeviceOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *panorama.DescribeDeviceInput, ...func(*panorama.Options)) *panorama.DescribeDeviceOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*panorama.DescribeDeviceOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *panorama.DescribeDeviceInput, ...func(*panorama.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeDeviceJob provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DescribeDeviceJob(ctx context.Context, params *panorama.DescribeDeviceJobInput, optFns ...func(*panorama.Options)) (*panorama.DescribeDeviceJobOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DescribeDeviceJob")
	}

	var r0 *panorama.DescribeDeviceJobOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *panorama.DescribeDeviceJobInput, ...func(*panorama.Options)) (*panorama.DescribeDeviceJobOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *panorama.DescribeDeviceJobInput, ...func(*panorama.Options)) *panorama.DescribeDeviceJobOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*panorama.DescribeDeviceJobOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *panorama.DescribeDeviceJobInput, ...func(*panorama.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeNode provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DescribeNode(ctx context.Context, params *panorama.DescribeNodeInput, optFns ...func(*panorama.Options)) (*panorama.DescribeNodeOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DescribeNode")
	}

	var r0 *panorama.DescribeNodeOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *panorama.DescribeNodeInput, ...func(*panorama.Options)) (*panorama.DescribeNodeOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *panorama.DescribeNodeInput, ...func(*panorama.Options)) *panorama.DescribeNodeOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*panorama.DescribeNodeOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *panorama.DescribeNodeInput, ...func(*panorama.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeNodeFromTemplateJob provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DescribeNodeFromTemplateJob(ctx context.Context, params *panorama.DescribeNodeFromTemplateJobInput, optFns ...func(*panorama.Options)) (*panorama.DescribeNodeFromTemplateJobOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DescribeNodeFromTemplateJob")
	}

	var r0 *panorama.DescribeNodeFromTemplateJobOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *panorama.DescribeNodeFromTemplateJobInput, ...func(*panorama.Options)) (*panorama.DescribeNodeFromTemplateJobOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *panorama.DescribeNodeFromTemplateJobInput, ...func(*panorama.Options)) *panorama.DescribeNodeFromTemplateJobOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*panorama.DescribeNodeFromTemplateJobOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *panorama.DescribeNodeFromTemplateJobInput, ...func(*panorama.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribePackage provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DescribePackage(ctx context.Context, params *panorama.DescribePackageInput, optFns ...func(*panorama.Options)) (*panorama.DescribePackageOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DescribePackage")
	}

	var r0 *panorama.DescribePackageOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *panorama.DescribePackageInput, ...func(*panorama.Options)) (*panorama.DescribePackageOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *panorama.DescribePackageInput, ...func(*panorama.Options)) *panorama.DescribePackageOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*panorama.DescribePackageOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *panorama.DescribePackageInput, ...func(*panorama.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribePackageImportJob provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DescribePackageImportJob(ctx context.Context, params *panorama.DescribePackageImportJobInput, optFns ...func(*panorama.Options)) (*panorama.DescribePackageImportJobOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DescribePackageImportJob")
	}

	var r0 *panorama.DescribePackageImportJobOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *panorama.DescribePackageImportJobInput, ...func(*panorama.Options)) (*panorama.DescribePackageImportJobOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *panorama.DescribePackageImportJobInput, ...func(*panorama.Options)) *panorama.DescribePackageImportJobOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*panorama.DescribePackageImportJobOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *panorama.DescribePackageImportJobInput, ...func(*panorama.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribePackageVersion provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DescribePackageVersion(ctx context.Context, params *panorama.DescribePackageVersionInput, optFns ...func(*panorama.Options)) (*panorama.DescribePackageVersionOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DescribePackageVersion")
	}

	var r0 *panorama.DescribePackageVersionOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *panorama.DescribePackageVersionInput, ...func(*panorama.Options)) (*panorama.DescribePackageVersionOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *panorama.DescribePackageVersionInput, ...func(*panorama.Options)) *panorama.DescribePackageVersionOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*panorama.DescribePackageVersionOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *panorama.DescribePackageVersionInput, ...func(*panorama.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListApplicationInstanceDependencies provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListApplicationInstanceDependencies(ctx context.Context, params *panorama.ListApplicationInstanceDependenciesInput, optFns ...func(*panorama.Options)) (*panorama.ListApplicationInstanceDependenciesOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListApplicationInstanceDependencies")
	}

	var r0 *panorama.ListApplicationInstanceDependenciesOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *panorama.ListApplicationInstanceDependenciesInput, ...func(*panorama.Options)) (*panorama.ListApplicationInstanceDependenciesOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *panorama.ListApplicationInstanceDependenciesInput, ...func(*panorama.Options)) *panorama.ListApplicationInstanceDependenciesOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*panorama.ListApplicationInstanceDependenciesOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *panorama.ListApplicationInstanceDependenciesInput, ...func(*panorama.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListApplicationInstanceNodeInstances provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListApplicationInstanceNodeInstances(ctx context.Context, params *panorama.ListApplicationInstanceNodeInstancesInput, optFns ...func(*panorama.Options)) (*panorama.ListApplicationInstanceNodeInstancesOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListApplicationInstanceNodeInstances")
	}

	var r0 *panorama.ListApplicationInstanceNodeInstancesOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *panorama.ListApplicationInstanceNodeInstancesInput, ...func(*panorama.Options)) (*panorama.ListApplicationInstanceNodeInstancesOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *panorama.ListApplicationInstanceNodeInstancesInput, ...func(*panorama.Options)) *panorama.ListApplicationInstanceNodeInstancesOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*panorama.ListApplicationInstanceNodeInstancesOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *panorama.ListApplicationInstanceNodeInstancesInput, ...func(*panorama.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListApplicationInstances provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListApplicationInstances(ctx context.Context, params *panorama.ListApplicationInstancesInput, optFns ...func(*panorama.Options)) (*panorama.ListApplicationInstancesOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListApplicationInstances")
	}

	var r0 *panorama.ListApplicationInstancesOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *panorama.ListApplicationInstancesInput, ...func(*panorama.Options)) (*panorama.ListApplicationInstancesOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *panorama.ListApplicationInstancesInput, ...func(*panorama.Options)) *panorama.ListApplicationInstancesOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*panorama.ListApplicationInstancesOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *panorama.ListApplicationInstancesInput, ...func(*panorama.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListDevices provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListDevices(ctx context.Context, params *panorama.ListDevicesInput, optFns ...func(*panorama.Options)) (*panorama.ListDevicesOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListDevices")
	}

	var r0 *panorama.ListDevicesOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *panorama.ListDevicesInput, ...func(*panorama.Options)) (*panorama.ListDevicesOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *panorama.ListDevicesInput, ...func(*panorama.Options)) *panorama.ListDevicesOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*panorama.ListDevicesOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *panorama.ListDevicesInput, ...func(*panorama.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListDevicesJobs provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListDevicesJobs(ctx context.Context, params *panorama.ListDevicesJobsInput, optFns ...func(*panorama.Options)) (*panorama.ListDevicesJobsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListDevicesJobs")
	}

	var r0 *panorama.ListDevicesJobsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *panorama.ListDevicesJobsInput, ...func(*panorama.Options)) (*panorama.ListDevicesJobsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *panorama.ListDevicesJobsInput, ...func(*panorama.Options)) *panorama.ListDevicesJobsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*panorama.ListDevicesJobsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *panorama.ListDevicesJobsInput, ...func(*panorama.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListNodeFromTemplateJobs provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListNodeFromTemplateJobs(ctx context.Context, params *panorama.ListNodeFromTemplateJobsInput, optFns ...func(*panorama.Options)) (*panorama.ListNodeFromTemplateJobsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListNodeFromTemplateJobs")
	}

	var r0 *panorama.ListNodeFromTemplateJobsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *panorama.ListNodeFromTemplateJobsInput, ...func(*panorama.Options)) (*panorama.ListNodeFromTemplateJobsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *panorama.ListNodeFromTemplateJobsInput, ...func(*panorama.Options)) *panorama.ListNodeFromTemplateJobsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*panorama.ListNodeFromTemplateJobsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *panorama.ListNodeFromTemplateJobsInput, ...func(*panorama.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListNodes provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListNodes(ctx context.Context, params *panorama.ListNodesInput, optFns ...func(*panorama.Options)) (*panorama.ListNodesOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListNodes")
	}

	var r0 *panorama.ListNodesOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *panorama.ListNodesInput, ...func(*panorama.Options)) (*panorama.ListNodesOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *panorama.ListNodesInput, ...func(*panorama.Options)) *panorama.ListNodesOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*panorama.ListNodesOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *panorama.ListNodesInput, ...func(*panorama.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListPackageImportJobs provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListPackageImportJobs(ctx context.Context, params *panorama.ListPackageImportJobsInput, optFns ...func(*panorama.Options)) (*panorama.ListPackageImportJobsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListPackageImportJobs")
	}

	var r0 *panorama.ListPackageImportJobsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *panorama.ListPackageImportJobsInput, ...func(*panorama.Options)) (*panorama.ListPackageImportJobsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *panorama.ListPackageImportJobsInput, ...func(*panorama.Options)) *panorama.ListPackageImportJobsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*panorama.ListPackageImportJobsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *panorama.ListPackageImportJobsInput, ...func(*panorama.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListPackages provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListPackages(ctx context.Context, params *panorama.ListPackagesInput, optFns ...func(*panorama.Options)) (*panorama.ListPackagesOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListPackages")
	}

	var r0 *panorama.ListPackagesOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *panorama.ListPackagesInput, ...func(*panorama.Options)) (*panorama.ListPackagesOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *panorama.ListPackagesInput, ...func(*panorama.Options)) *panorama.ListPackagesOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*panorama.ListPackagesOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *panorama.ListPackagesInput, ...func(*panorama.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListTagsForResource provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListTagsForResource(ctx context.Context, params *panorama.ListTagsForResourceInput, optFns ...func(*panorama.Options)) (*panorama.ListTagsForResourceOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListTagsForResource")
	}

	var r0 *panorama.ListTagsForResourceOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *panorama.ListTagsForResourceInput, ...func(*panorama.Options)) (*panorama.ListTagsForResourceOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *panorama.ListTagsForResourceInput, ...func(*panorama.Options)) *panorama.ListTagsForResourceOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*panorama.ListTagsForResourceOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *panorama.ListTagsForResourceInput, ...func(*panorama.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Options provides a mock function with no fields
func (_m *IClient) Options() panorama.Options {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Options")
	}

	var r0 panorama.Options
	if rf, ok := ret.Get(0).(func() panorama.Options); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(panorama.Options)
	}

	return r0
}

// ProvisionDevice provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ProvisionDevice(ctx context.Context, params *panorama.ProvisionDeviceInput, optFns ...func(*panorama.Options)) (*panorama.ProvisionDeviceOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ProvisionDevice")
	}

	var r0 *panorama.ProvisionDeviceOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *panorama.ProvisionDeviceInput, ...func(*panorama.Options)) (*panorama.ProvisionDeviceOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *panorama.ProvisionDeviceInput, ...func(*panorama.Options)) *panorama.ProvisionDeviceOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*panorama.ProvisionDeviceOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *panorama.ProvisionDeviceInput, ...func(*panorama.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RegisterPackageVersion provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) RegisterPackageVersion(ctx context.Context, params *panorama.RegisterPackageVersionInput, optFns ...func(*panorama.Options)) (*panorama.RegisterPackageVersionOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for RegisterPackageVersion")
	}

	var r0 *panorama.RegisterPackageVersionOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *panorama.RegisterPackageVersionInput, ...func(*panorama.Options)) (*panorama.RegisterPackageVersionOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *panorama.RegisterPackageVersionInput, ...func(*panorama.Options)) *panorama.RegisterPackageVersionOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*panorama.RegisterPackageVersionOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *panorama.RegisterPackageVersionInput, ...func(*panorama.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RemoveApplicationInstance provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) RemoveApplicationInstance(ctx context.Context, params *panorama.RemoveApplicationInstanceInput, optFns ...func(*panorama.Options)) (*panorama.RemoveApplicationInstanceOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for RemoveApplicationInstance")
	}

	var r0 *panorama.RemoveApplicationInstanceOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *panorama.RemoveApplicationInstanceInput, ...func(*panorama.Options)) (*panorama.RemoveApplicationInstanceOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *panorama.RemoveApplicationInstanceInput, ...func(*panorama.Options)) *panorama.RemoveApplicationInstanceOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*panorama.RemoveApplicationInstanceOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *panorama.RemoveApplicationInstanceInput, ...func(*panorama.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SignalApplicationInstanceNodeInstances provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) SignalApplicationInstanceNodeInstances(ctx context.Context, params *panorama.SignalApplicationInstanceNodeInstancesInput, optFns ...func(*panorama.Options)) (*panorama.SignalApplicationInstanceNodeInstancesOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for SignalApplicationInstanceNodeInstances")
	}

	var r0 *panorama.SignalApplicationInstanceNodeInstancesOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *panorama.SignalApplicationInstanceNodeInstancesInput, ...func(*panorama.Options)) (*panorama.SignalApplicationInstanceNodeInstancesOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *panorama.SignalApplicationInstanceNodeInstancesInput, ...func(*panorama.Options)) *panorama.SignalApplicationInstanceNodeInstancesOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*panorama.SignalApplicationInstanceNodeInstancesOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *panorama.SignalApplicationInstanceNodeInstancesInput, ...func(*panorama.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// TagResource provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) TagResource(ctx context.Context, params *panorama.TagResourceInput, optFns ...func(*panorama.Options)) (*panorama.TagResourceOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for TagResource")
	}

	var r0 *panorama.TagResourceOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *panorama.TagResourceInput, ...func(*panorama.Options)) (*panorama.TagResourceOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *panorama.TagResourceInput, ...func(*panorama.Options)) *panorama.TagResourceOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*panorama.TagResourceOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *panorama.TagResourceInput, ...func(*panorama.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UntagResource provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UntagResource(ctx context.Context, params *panorama.UntagResourceInput, optFns ...func(*panorama.Options)) (*panorama.UntagResourceOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UntagResource")
	}

	var r0 *panorama.UntagResourceOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *panorama.UntagResourceInput, ...func(*panorama.Options)) (*panorama.UntagResourceOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *panorama.UntagResourceInput, ...func(*panorama.Options)) *panorama.UntagResourceOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*panorama.UntagResourceOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *panorama.UntagResourceInput, ...func(*panorama.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateDeviceMetadata provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UpdateDeviceMetadata(ctx context.Context, params *panorama.UpdateDeviceMetadataInput, optFns ...func(*panorama.Options)) (*panorama.UpdateDeviceMetadataOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateDeviceMetadata")
	}

	var r0 *panorama.UpdateDeviceMetadataOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *panorama.UpdateDeviceMetadataInput, ...func(*panorama.Options)) (*panorama.UpdateDeviceMetadataOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *panorama.UpdateDeviceMetadataInput, ...func(*panorama.Options)) *panorama.UpdateDeviceMetadataOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*panorama.UpdateDeviceMetadataOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *panorama.UpdateDeviceMetadataInput, ...func(*panorama.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewIClient creates a new instance of IClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewIClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *IClient {
	mock := &IClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
