// Code generated by mockery v2.53.4. DO NOT EDIT.

package mocks

import (
	chimesdkidentity "github.com/aws/aws-sdk-go-v2/service/chimesdkidentity"

	context "context"

	mock "github.com/stretchr/testify/mock"
)

// IClient is an autogenerated mock type for the IClient type
type IClient struct {
	mock.Mock
}

// CreateAppInstance provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CreateAppInstance(ctx context.Context, params *chimesdkidentity.CreateAppInstanceInput, optFns ...func(*chimesdkidentity.Options)) (*chimesdkidentity.CreateAppInstanceOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateAppInstance")
	}

	var r0 *chimesdkidentity.CreateAppInstanceOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *chimesdkidentity.CreateAppInstanceInput, ...func(*chimesdkidentity.Options)) (*chimesdkidentity.CreateAppInstanceOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *chimesdkidentity.CreateAppInstanceInput, ...func(*chimesdkidentity.Options)) *chimesdkidentity.CreateAppInstanceOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*chimesdkidentity.CreateAppInstanceOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *chimesdkidentity.CreateAppInstanceInput, ...func(*chimesdkidentity.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateAppInstanceAdmin provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CreateAppInstanceAdmin(ctx context.Context, params *chimesdkidentity.CreateAppInstanceAdminInput, optFns ...func(*chimesdkidentity.Options)) (*chimesdkidentity.CreateAppInstanceAdminOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateAppInstanceAdmin")
	}

	var r0 *chimesdkidentity.CreateAppInstanceAdminOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *chimesdkidentity.CreateAppInstanceAdminInput, ...func(*chimesdkidentity.Options)) (*chimesdkidentity.CreateAppInstanceAdminOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *chimesdkidentity.CreateAppInstanceAdminInput, ...func(*chimesdkidentity.Options)) *chimesdkidentity.CreateAppInstanceAdminOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*chimesdkidentity.CreateAppInstanceAdminOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *chimesdkidentity.CreateAppInstanceAdminInput, ...func(*chimesdkidentity.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateAppInstanceBot provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CreateAppInstanceBot(ctx context.Context, params *chimesdkidentity.CreateAppInstanceBotInput, optFns ...func(*chimesdkidentity.Options)) (*chimesdkidentity.CreateAppInstanceBotOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateAppInstanceBot")
	}

	var r0 *chimesdkidentity.CreateAppInstanceBotOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *chimesdkidentity.CreateAppInstanceBotInput, ...func(*chimesdkidentity.Options)) (*chimesdkidentity.CreateAppInstanceBotOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *chimesdkidentity.CreateAppInstanceBotInput, ...func(*chimesdkidentity.Options)) *chimesdkidentity.CreateAppInstanceBotOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*chimesdkidentity.CreateAppInstanceBotOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *chimesdkidentity.CreateAppInstanceBotInput, ...func(*chimesdkidentity.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateAppInstanceUser provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CreateAppInstanceUser(ctx context.Context, params *chimesdkidentity.CreateAppInstanceUserInput, optFns ...func(*chimesdkidentity.Options)) (*chimesdkidentity.CreateAppInstanceUserOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateAppInstanceUser")
	}

	var r0 *chimesdkidentity.CreateAppInstanceUserOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *chimesdkidentity.CreateAppInstanceUserInput, ...func(*chimesdkidentity.Options)) (*chimesdkidentity.CreateAppInstanceUserOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *chimesdkidentity.CreateAppInstanceUserInput, ...func(*chimesdkidentity.Options)) *chimesdkidentity.CreateAppInstanceUserOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*chimesdkidentity.CreateAppInstanceUserOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *chimesdkidentity.CreateAppInstanceUserInput, ...func(*chimesdkidentity.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteAppInstance provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteAppInstance(ctx context.Context, params *chimesdkidentity.DeleteAppInstanceInput, optFns ...func(*chimesdkidentity.Options)) (*chimesdkidentity.DeleteAppInstanceOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteAppInstance")
	}

	var r0 *chimesdkidentity.DeleteAppInstanceOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *chimesdkidentity.DeleteAppInstanceInput, ...func(*chimesdkidentity.Options)) (*chimesdkidentity.DeleteAppInstanceOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *chimesdkidentity.DeleteAppInstanceInput, ...func(*chimesdkidentity.Options)) *chimesdkidentity.DeleteAppInstanceOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*chimesdkidentity.DeleteAppInstanceOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *chimesdkidentity.DeleteAppInstanceInput, ...func(*chimesdkidentity.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteAppInstanceAdmin provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteAppInstanceAdmin(ctx context.Context, params *chimesdkidentity.DeleteAppInstanceAdminInput, optFns ...func(*chimesdkidentity.Options)) (*chimesdkidentity.DeleteAppInstanceAdminOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteAppInstanceAdmin")
	}

	var r0 *chimesdkidentity.DeleteAppInstanceAdminOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *chimesdkidentity.DeleteAppInstanceAdminInput, ...func(*chimesdkidentity.Options)) (*chimesdkidentity.DeleteAppInstanceAdminOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *chimesdkidentity.DeleteAppInstanceAdminInput, ...func(*chimesdkidentity.Options)) *chimesdkidentity.DeleteAppInstanceAdminOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*chimesdkidentity.DeleteAppInstanceAdminOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *chimesdkidentity.DeleteAppInstanceAdminInput, ...func(*chimesdkidentity.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteAppInstanceBot provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteAppInstanceBot(ctx context.Context, params *chimesdkidentity.DeleteAppInstanceBotInput, optFns ...func(*chimesdkidentity.Options)) (*chimesdkidentity.DeleteAppInstanceBotOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteAppInstanceBot")
	}

	var r0 *chimesdkidentity.DeleteAppInstanceBotOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *chimesdkidentity.DeleteAppInstanceBotInput, ...func(*chimesdkidentity.Options)) (*chimesdkidentity.DeleteAppInstanceBotOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *chimesdkidentity.DeleteAppInstanceBotInput, ...func(*chimesdkidentity.Options)) *chimesdkidentity.DeleteAppInstanceBotOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*chimesdkidentity.DeleteAppInstanceBotOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *chimesdkidentity.DeleteAppInstanceBotInput, ...func(*chimesdkidentity.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteAppInstanceUser provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteAppInstanceUser(ctx context.Context, params *chimesdkidentity.DeleteAppInstanceUserInput, optFns ...func(*chimesdkidentity.Options)) (*chimesdkidentity.DeleteAppInstanceUserOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteAppInstanceUser")
	}

	var r0 *chimesdkidentity.DeleteAppInstanceUserOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *chimesdkidentity.DeleteAppInstanceUserInput, ...func(*chimesdkidentity.Options)) (*chimesdkidentity.DeleteAppInstanceUserOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *chimesdkidentity.DeleteAppInstanceUserInput, ...func(*chimesdkidentity.Options)) *chimesdkidentity.DeleteAppInstanceUserOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*chimesdkidentity.DeleteAppInstanceUserOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *chimesdkidentity.DeleteAppInstanceUserInput, ...func(*chimesdkidentity.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeregisterAppInstanceUserEndpoint provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeregisterAppInstanceUserEndpoint(ctx context.Context, params *chimesdkidentity.DeregisterAppInstanceUserEndpointInput, optFns ...func(*chimesdkidentity.Options)) (*chimesdkidentity.DeregisterAppInstanceUserEndpointOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeregisterAppInstanceUserEndpoint")
	}

	var r0 *chimesdkidentity.DeregisterAppInstanceUserEndpointOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *chimesdkidentity.DeregisterAppInstanceUserEndpointInput, ...func(*chimesdkidentity.Options)) (*chimesdkidentity.DeregisterAppInstanceUserEndpointOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *chimesdkidentity.DeregisterAppInstanceUserEndpointInput, ...func(*chimesdkidentity.Options)) *chimesdkidentity.DeregisterAppInstanceUserEndpointOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*chimesdkidentity.DeregisterAppInstanceUserEndpointOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *chimesdkidentity.DeregisterAppInstanceUserEndpointInput, ...func(*chimesdkidentity.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeAppInstance provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DescribeAppInstance(ctx context.Context, params *chimesdkidentity.DescribeAppInstanceInput, optFns ...func(*chimesdkidentity.Options)) (*chimesdkidentity.DescribeAppInstanceOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DescribeAppInstance")
	}

	var r0 *chimesdkidentity.DescribeAppInstanceOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *chimesdkidentity.DescribeAppInstanceInput, ...func(*chimesdkidentity.Options)) (*chimesdkidentity.DescribeAppInstanceOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *chimesdkidentity.DescribeAppInstanceInput, ...func(*chimesdkidentity.Options)) *chimesdkidentity.DescribeAppInstanceOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*chimesdkidentity.DescribeAppInstanceOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *chimesdkidentity.DescribeAppInstanceInput, ...func(*chimesdkidentity.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeAppInstanceAdmin provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DescribeAppInstanceAdmin(ctx context.Context, params *chimesdkidentity.DescribeAppInstanceAdminInput, optFns ...func(*chimesdkidentity.Options)) (*chimesdkidentity.DescribeAppInstanceAdminOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DescribeAppInstanceAdmin")
	}

	var r0 *chimesdkidentity.DescribeAppInstanceAdminOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *chimesdkidentity.DescribeAppInstanceAdminInput, ...func(*chimesdkidentity.Options)) (*chimesdkidentity.DescribeAppInstanceAdminOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *chimesdkidentity.DescribeAppInstanceAdminInput, ...func(*chimesdkidentity.Options)) *chimesdkidentity.DescribeAppInstanceAdminOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*chimesdkidentity.DescribeAppInstanceAdminOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *chimesdkidentity.DescribeAppInstanceAdminInput, ...func(*chimesdkidentity.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeAppInstanceBot provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DescribeAppInstanceBot(ctx context.Context, params *chimesdkidentity.DescribeAppInstanceBotInput, optFns ...func(*chimesdkidentity.Options)) (*chimesdkidentity.DescribeAppInstanceBotOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DescribeAppInstanceBot")
	}

	var r0 *chimesdkidentity.DescribeAppInstanceBotOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *chimesdkidentity.DescribeAppInstanceBotInput, ...func(*chimesdkidentity.Options)) (*chimesdkidentity.DescribeAppInstanceBotOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *chimesdkidentity.DescribeAppInstanceBotInput, ...func(*chimesdkidentity.Options)) *chimesdkidentity.DescribeAppInstanceBotOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*chimesdkidentity.DescribeAppInstanceBotOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *chimesdkidentity.DescribeAppInstanceBotInput, ...func(*chimesdkidentity.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeAppInstanceUser provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DescribeAppInstanceUser(ctx context.Context, params *chimesdkidentity.DescribeAppInstanceUserInput, optFns ...func(*chimesdkidentity.Options)) (*chimesdkidentity.DescribeAppInstanceUserOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DescribeAppInstanceUser")
	}

	var r0 *chimesdkidentity.DescribeAppInstanceUserOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *chimesdkidentity.DescribeAppInstanceUserInput, ...func(*chimesdkidentity.Options)) (*chimesdkidentity.DescribeAppInstanceUserOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *chimesdkidentity.DescribeAppInstanceUserInput, ...func(*chimesdkidentity.Options)) *chimesdkidentity.DescribeAppInstanceUserOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*chimesdkidentity.DescribeAppInstanceUserOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *chimesdkidentity.DescribeAppInstanceUserInput, ...func(*chimesdkidentity.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeAppInstanceUserEndpoint provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DescribeAppInstanceUserEndpoint(ctx context.Context, params *chimesdkidentity.DescribeAppInstanceUserEndpointInput, optFns ...func(*chimesdkidentity.Options)) (*chimesdkidentity.DescribeAppInstanceUserEndpointOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DescribeAppInstanceUserEndpoint")
	}

	var r0 *chimesdkidentity.DescribeAppInstanceUserEndpointOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *chimesdkidentity.DescribeAppInstanceUserEndpointInput, ...func(*chimesdkidentity.Options)) (*chimesdkidentity.DescribeAppInstanceUserEndpointOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *chimesdkidentity.DescribeAppInstanceUserEndpointInput, ...func(*chimesdkidentity.Options)) *chimesdkidentity.DescribeAppInstanceUserEndpointOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*chimesdkidentity.DescribeAppInstanceUserEndpointOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *chimesdkidentity.DescribeAppInstanceUserEndpointInput, ...func(*chimesdkidentity.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAppInstanceRetentionSettings provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetAppInstanceRetentionSettings(ctx context.Context, params *chimesdkidentity.GetAppInstanceRetentionSettingsInput, optFns ...func(*chimesdkidentity.Options)) (*chimesdkidentity.GetAppInstanceRetentionSettingsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetAppInstanceRetentionSettings")
	}

	var r0 *chimesdkidentity.GetAppInstanceRetentionSettingsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *chimesdkidentity.GetAppInstanceRetentionSettingsInput, ...func(*chimesdkidentity.Options)) (*chimesdkidentity.GetAppInstanceRetentionSettingsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *chimesdkidentity.GetAppInstanceRetentionSettingsInput, ...func(*chimesdkidentity.Options)) *chimesdkidentity.GetAppInstanceRetentionSettingsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*chimesdkidentity.GetAppInstanceRetentionSettingsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *chimesdkidentity.GetAppInstanceRetentionSettingsInput, ...func(*chimesdkidentity.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListAppInstanceAdmins provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListAppInstanceAdmins(ctx context.Context, params *chimesdkidentity.ListAppInstanceAdminsInput, optFns ...func(*chimesdkidentity.Options)) (*chimesdkidentity.ListAppInstanceAdminsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListAppInstanceAdmins")
	}

	var r0 *chimesdkidentity.ListAppInstanceAdminsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *chimesdkidentity.ListAppInstanceAdminsInput, ...func(*chimesdkidentity.Options)) (*chimesdkidentity.ListAppInstanceAdminsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *chimesdkidentity.ListAppInstanceAdminsInput, ...func(*chimesdkidentity.Options)) *chimesdkidentity.ListAppInstanceAdminsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*chimesdkidentity.ListAppInstanceAdminsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *chimesdkidentity.ListAppInstanceAdminsInput, ...func(*chimesdkidentity.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListAppInstanceBots provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListAppInstanceBots(ctx context.Context, params *chimesdkidentity.ListAppInstanceBotsInput, optFns ...func(*chimesdkidentity.Options)) (*chimesdkidentity.ListAppInstanceBotsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListAppInstanceBots")
	}

	var r0 *chimesdkidentity.ListAppInstanceBotsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *chimesdkidentity.ListAppInstanceBotsInput, ...func(*chimesdkidentity.Options)) (*chimesdkidentity.ListAppInstanceBotsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *chimesdkidentity.ListAppInstanceBotsInput, ...func(*chimesdkidentity.Options)) *chimesdkidentity.ListAppInstanceBotsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*chimesdkidentity.ListAppInstanceBotsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *chimesdkidentity.ListAppInstanceBotsInput, ...func(*chimesdkidentity.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListAppInstanceUserEndpoints provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListAppInstanceUserEndpoints(ctx context.Context, params *chimesdkidentity.ListAppInstanceUserEndpointsInput, optFns ...func(*chimesdkidentity.Options)) (*chimesdkidentity.ListAppInstanceUserEndpointsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListAppInstanceUserEndpoints")
	}

	var r0 *chimesdkidentity.ListAppInstanceUserEndpointsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *chimesdkidentity.ListAppInstanceUserEndpointsInput, ...func(*chimesdkidentity.Options)) (*chimesdkidentity.ListAppInstanceUserEndpointsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *chimesdkidentity.ListAppInstanceUserEndpointsInput, ...func(*chimesdkidentity.Options)) *chimesdkidentity.ListAppInstanceUserEndpointsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*chimesdkidentity.ListAppInstanceUserEndpointsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *chimesdkidentity.ListAppInstanceUserEndpointsInput, ...func(*chimesdkidentity.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListAppInstanceUsers provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListAppInstanceUsers(ctx context.Context, params *chimesdkidentity.ListAppInstanceUsersInput, optFns ...func(*chimesdkidentity.Options)) (*chimesdkidentity.ListAppInstanceUsersOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListAppInstanceUsers")
	}

	var r0 *chimesdkidentity.ListAppInstanceUsersOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *chimesdkidentity.ListAppInstanceUsersInput, ...func(*chimesdkidentity.Options)) (*chimesdkidentity.ListAppInstanceUsersOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *chimesdkidentity.ListAppInstanceUsersInput, ...func(*chimesdkidentity.Options)) *chimesdkidentity.ListAppInstanceUsersOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*chimesdkidentity.ListAppInstanceUsersOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *chimesdkidentity.ListAppInstanceUsersInput, ...func(*chimesdkidentity.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListAppInstances provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListAppInstances(ctx context.Context, params *chimesdkidentity.ListAppInstancesInput, optFns ...func(*chimesdkidentity.Options)) (*chimesdkidentity.ListAppInstancesOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListAppInstances")
	}

	var r0 *chimesdkidentity.ListAppInstancesOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *chimesdkidentity.ListAppInstancesInput, ...func(*chimesdkidentity.Options)) (*chimesdkidentity.ListAppInstancesOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *chimesdkidentity.ListAppInstancesInput, ...func(*chimesdkidentity.Options)) *chimesdkidentity.ListAppInstancesOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*chimesdkidentity.ListAppInstancesOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *chimesdkidentity.ListAppInstancesInput, ...func(*chimesdkidentity.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListTagsForResource provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListTagsForResource(ctx context.Context, params *chimesdkidentity.ListTagsForResourceInput, optFns ...func(*chimesdkidentity.Options)) (*chimesdkidentity.ListTagsForResourceOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListTagsForResource")
	}

	var r0 *chimesdkidentity.ListTagsForResourceOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *chimesdkidentity.ListTagsForResourceInput, ...func(*chimesdkidentity.Options)) (*chimesdkidentity.ListTagsForResourceOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *chimesdkidentity.ListTagsForResourceInput, ...func(*chimesdkidentity.Options)) *chimesdkidentity.ListTagsForResourceOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*chimesdkidentity.ListTagsForResourceOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *chimesdkidentity.ListTagsForResourceInput, ...func(*chimesdkidentity.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Options provides a mock function with no fields
func (_m *IClient) Options() chimesdkidentity.Options {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Options")
	}

	var r0 chimesdkidentity.Options
	if rf, ok := ret.Get(0).(func() chimesdkidentity.Options); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(chimesdkidentity.Options)
	}

	return r0
}

// PutAppInstanceRetentionSettings provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) PutAppInstanceRetentionSettings(ctx context.Context, params *chimesdkidentity.PutAppInstanceRetentionSettingsInput, optFns ...func(*chimesdkidentity.Options)) (*chimesdkidentity.PutAppInstanceRetentionSettingsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for PutAppInstanceRetentionSettings")
	}

	var r0 *chimesdkidentity.PutAppInstanceRetentionSettingsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *chimesdkidentity.PutAppInstanceRetentionSettingsInput, ...func(*chimesdkidentity.Options)) (*chimesdkidentity.PutAppInstanceRetentionSettingsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *chimesdkidentity.PutAppInstanceRetentionSettingsInput, ...func(*chimesdkidentity.Options)) *chimesdkidentity.PutAppInstanceRetentionSettingsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*chimesdkidentity.PutAppInstanceRetentionSettingsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *chimesdkidentity.PutAppInstanceRetentionSettingsInput, ...func(*chimesdkidentity.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PutAppInstanceUserExpirationSettings provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) PutAppInstanceUserExpirationSettings(ctx context.Context, params *chimesdkidentity.PutAppInstanceUserExpirationSettingsInput, optFns ...func(*chimesdkidentity.Options)) (*chimesdkidentity.PutAppInstanceUserExpirationSettingsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for PutAppInstanceUserExpirationSettings")
	}

	var r0 *chimesdkidentity.PutAppInstanceUserExpirationSettingsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *chimesdkidentity.PutAppInstanceUserExpirationSettingsInput, ...func(*chimesdkidentity.Options)) (*chimesdkidentity.PutAppInstanceUserExpirationSettingsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *chimesdkidentity.PutAppInstanceUserExpirationSettingsInput, ...func(*chimesdkidentity.Options)) *chimesdkidentity.PutAppInstanceUserExpirationSettingsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*chimesdkidentity.PutAppInstanceUserExpirationSettingsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *chimesdkidentity.PutAppInstanceUserExpirationSettingsInput, ...func(*chimesdkidentity.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RegisterAppInstanceUserEndpoint provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) RegisterAppInstanceUserEndpoint(ctx context.Context, params *chimesdkidentity.RegisterAppInstanceUserEndpointInput, optFns ...func(*chimesdkidentity.Options)) (*chimesdkidentity.RegisterAppInstanceUserEndpointOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for RegisterAppInstanceUserEndpoint")
	}

	var r0 *chimesdkidentity.RegisterAppInstanceUserEndpointOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *chimesdkidentity.RegisterAppInstanceUserEndpointInput, ...func(*chimesdkidentity.Options)) (*chimesdkidentity.RegisterAppInstanceUserEndpointOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *chimesdkidentity.RegisterAppInstanceUserEndpointInput, ...func(*chimesdkidentity.Options)) *chimesdkidentity.RegisterAppInstanceUserEndpointOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*chimesdkidentity.RegisterAppInstanceUserEndpointOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *chimesdkidentity.RegisterAppInstanceUserEndpointInput, ...func(*chimesdkidentity.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// TagResource provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) TagResource(ctx context.Context, params *chimesdkidentity.TagResourceInput, optFns ...func(*chimesdkidentity.Options)) (*chimesdkidentity.TagResourceOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for TagResource")
	}

	var r0 *chimesdkidentity.TagResourceOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *chimesdkidentity.TagResourceInput, ...func(*chimesdkidentity.Options)) (*chimesdkidentity.TagResourceOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *chimesdkidentity.TagResourceInput, ...func(*chimesdkidentity.Options)) *chimesdkidentity.TagResourceOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*chimesdkidentity.TagResourceOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *chimesdkidentity.TagResourceInput, ...func(*chimesdkidentity.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UntagResource provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UntagResource(ctx context.Context, params *chimesdkidentity.UntagResourceInput, optFns ...func(*chimesdkidentity.Options)) (*chimesdkidentity.UntagResourceOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UntagResource")
	}

	var r0 *chimesdkidentity.UntagResourceOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *chimesdkidentity.UntagResourceInput, ...func(*chimesdkidentity.Options)) (*chimesdkidentity.UntagResourceOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *chimesdkidentity.UntagResourceInput, ...func(*chimesdkidentity.Options)) *chimesdkidentity.UntagResourceOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*chimesdkidentity.UntagResourceOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *chimesdkidentity.UntagResourceInput, ...func(*chimesdkidentity.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateAppInstance provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UpdateAppInstance(ctx context.Context, params *chimesdkidentity.UpdateAppInstanceInput, optFns ...func(*chimesdkidentity.Options)) (*chimesdkidentity.UpdateAppInstanceOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateAppInstance")
	}

	var r0 *chimesdkidentity.UpdateAppInstanceOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *chimesdkidentity.UpdateAppInstanceInput, ...func(*chimesdkidentity.Options)) (*chimesdkidentity.UpdateAppInstanceOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *chimesdkidentity.UpdateAppInstanceInput, ...func(*chimesdkidentity.Options)) *chimesdkidentity.UpdateAppInstanceOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*chimesdkidentity.UpdateAppInstanceOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *chimesdkidentity.UpdateAppInstanceInput, ...func(*chimesdkidentity.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateAppInstanceBot provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UpdateAppInstanceBot(ctx context.Context, params *chimesdkidentity.UpdateAppInstanceBotInput, optFns ...func(*chimesdkidentity.Options)) (*chimesdkidentity.UpdateAppInstanceBotOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateAppInstanceBot")
	}

	var r0 *chimesdkidentity.UpdateAppInstanceBotOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *chimesdkidentity.UpdateAppInstanceBotInput, ...func(*chimesdkidentity.Options)) (*chimesdkidentity.UpdateAppInstanceBotOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *chimesdkidentity.UpdateAppInstanceBotInput, ...func(*chimesdkidentity.Options)) *chimesdkidentity.UpdateAppInstanceBotOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*chimesdkidentity.UpdateAppInstanceBotOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *chimesdkidentity.UpdateAppInstanceBotInput, ...func(*chimesdkidentity.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateAppInstanceUser provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UpdateAppInstanceUser(ctx context.Context, params *chimesdkidentity.UpdateAppInstanceUserInput, optFns ...func(*chimesdkidentity.Options)) (*chimesdkidentity.UpdateAppInstanceUserOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateAppInstanceUser")
	}

	var r0 *chimesdkidentity.UpdateAppInstanceUserOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *chimesdkidentity.UpdateAppInstanceUserInput, ...func(*chimesdkidentity.Options)) (*chimesdkidentity.UpdateAppInstanceUserOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *chimesdkidentity.UpdateAppInstanceUserInput, ...func(*chimesdkidentity.Options)) *chimesdkidentity.UpdateAppInstanceUserOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*chimesdkidentity.UpdateAppInstanceUserOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *chimesdkidentity.UpdateAppInstanceUserInput, ...func(*chimesdkidentity.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateAppInstanceUserEndpoint provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UpdateAppInstanceUserEndpoint(ctx context.Context, params *chimesdkidentity.UpdateAppInstanceUserEndpointInput, optFns ...func(*chimesdkidentity.Options)) (*chimesdkidentity.UpdateAppInstanceUserEndpointOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateAppInstanceUserEndpoint")
	}

	var r0 *chimesdkidentity.UpdateAppInstanceUserEndpointOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *chimesdkidentity.UpdateAppInstanceUserEndpointInput, ...func(*chimesdkidentity.Options)) (*chimesdkidentity.UpdateAppInstanceUserEndpointOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *chimesdkidentity.UpdateAppInstanceUserEndpointInput, ...func(*chimesdkidentity.Options)) *chimesdkidentity.UpdateAppInstanceUserEndpointOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*chimesdkidentity.UpdateAppInstanceUserEndpointOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *chimesdkidentity.UpdateAppInstanceUserEndpointInput, ...func(*chimesdkidentity.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewIClient creates a new instance of IClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewIClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *IClient {
	mock := &IClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
