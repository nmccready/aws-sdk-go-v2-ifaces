// Code generated by mockery v2.39.2. DO NOT EDIT.

package mocks

import (
	context "context"

	servicequotas "github.com/aws/aws-sdk-go-v2/service/servicequotas"
	mock "github.com/stretchr/testify/mock"
)

// IClient is an autogenerated mock type for the IClient type
type IClient struct {
	mock.Mock
}

// AssociateServiceQuotaTemplate provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) AssociateServiceQuotaTemplate(ctx context.Context, params *servicequotas.AssociateServiceQuotaTemplateInput, optFns ...func(*servicequotas.Options)) (*servicequotas.AssociateServiceQuotaTemplateOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for AssociateServiceQuotaTemplate")
	}

	var r0 *servicequotas.AssociateServiceQuotaTemplateOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *servicequotas.AssociateServiceQuotaTemplateInput, ...func(*servicequotas.Options)) (*servicequotas.AssociateServiceQuotaTemplateOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *servicequotas.AssociateServiceQuotaTemplateInput, ...func(*servicequotas.Options)) *servicequotas.AssociateServiceQuotaTemplateOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*servicequotas.AssociateServiceQuotaTemplateOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *servicequotas.AssociateServiceQuotaTemplateInput, ...func(*servicequotas.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteServiceQuotaIncreaseRequestFromTemplate provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteServiceQuotaIncreaseRequestFromTemplate(ctx context.Context, params *servicequotas.DeleteServiceQuotaIncreaseRequestFromTemplateInput, optFns ...func(*servicequotas.Options)) (*servicequotas.DeleteServiceQuotaIncreaseRequestFromTemplateOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteServiceQuotaIncreaseRequestFromTemplate")
	}

	var r0 *servicequotas.DeleteServiceQuotaIncreaseRequestFromTemplateOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *servicequotas.DeleteServiceQuotaIncreaseRequestFromTemplateInput, ...func(*servicequotas.Options)) (*servicequotas.DeleteServiceQuotaIncreaseRequestFromTemplateOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *servicequotas.DeleteServiceQuotaIncreaseRequestFromTemplateInput, ...func(*servicequotas.Options)) *servicequotas.DeleteServiceQuotaIncreaseRequestFromTemplateOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*servicequotas.DeleteServiceQuotaIncreaseRequestFromTemplateOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *servicequotas.DeleteServiceQuotaIncreaseRequestFromTemplateInput, ...func(*servicequotas.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DisassociateServiceQuotaTemplate provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DisassociateServiceQuotaTemplate(ctx context.Context, params *servicequotas.DisassociateServiceQuotaTemplateInput, optFns ...func(*servicequotas.Options)) (*servicequotas.DisassociateServiceQuotaTemplateOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DisassociateServiceQuotaTemplate")
	}

	var r0 *servicequotas.DisassociateServiceQuotaTemplateOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *servicequotas.DisassociateServiceQuotaTemplateInput, ...func(*servicequotas.Options)) (*servicequotas.DisassociateServiceQuotaTemplateOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *servicequotas.DisassociateServiceQuotaTemplateInput, ...func(*servicequotas.Options)) *servicequotas.DisassociateServiceQuotaTemplateOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*servicequotas.DisassociateServiceQuotaTemplateOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *servicequotas.DisassociateServiceQuotaTemplateInput, ...func(*servicequotas.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAWSDefaultServiceQuota provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetAWSDefaultServiceQuota(ctx context.Context, params *servicequotas.GetAWSDefaultServiceQuotaInput, optFns ...func(*servicequotas.Options)) (*servicequotas.GetAWSDefaultServiceQuotaOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetAWSDefaultServiceQuota")
	}

	var r0 *servicequotas.GetAWSDefaultServiceQuotaOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *servicequotas.GetAWSDefaultServiceQuotaInput, ...func(*servicequotas.Options)) (*servicequotas.GetAWSDefaultServiceQuotaOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *servicequotas.GetAWSDefaultServiceQuotaInput, ...func(*servicequotas.Options)) *servicequotas.GetAWSDefaultServiceQuotaOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*servicequotas.GetAWSDefaultServiceQuotaOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *servicequotas.GetAWSDefaultServiceQuotaInput, ...func(*servicequotas.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAssociationForServiceQuotaTemplate provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetAssociationForServiceQuotaTemplate(ctx context.Context, params *servicequotas.GetAssociationForServiceQuotaTemplateInput, optFns ...func(*servicequotas.Options)) (*servicequotas.GetAssociationForServiceQuotaTemplateOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetAssociationForServiceQuotaTemplate")
	}

	var r0 *servicequotas.GetAssociationForServiceQuotaTemplateOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *servicequotas.GetAssociationForServiceQuotaTemplateInput, ...func(*servicequotas.Options)) (*servicequotas.GetAssociationForServiceQuotaTemplateOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *servicequotas.GetAssociationForServiceQuotaTemplateInput, ...func(*servicequotas.Options)) *servicequotas.GetAssociationForServiceQuotaTemplateOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*servicequotas.GetAssociationForServiceQuotaTemplateOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *servicequotas.GetAssociationForServiceQuotaTemplateInput, ...func(*servicequotas.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetRequestedServiceQuotaChange provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetRequestedServiceQuotaChange(ctx context.Context, params *servicequotas.GetRequestedServiceQuotaChangeInput, optFns ...func(*servicequotas.Options)) (*servicequotas.GetRequestedServiceQuotaChangeOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetRequestedServiceQuotaChange")
	}

	var r0 *servicequotas.GetRequestedServiceQuotaChangeOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *servicequotas.GetRequestedServiceQuotaChangeInput, ...func(*servicequotas.Options)) (*servicequotas.GetRequestedServiceQuotaChangeOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *servicequotas.GetRequestedServiceQuotaChangeInput, ...func(*servicequotas.Options)) *servicequotas.GetRequestedServiceQuotaChangeOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*servicequotas.GetRequestedServiceQuotaChangeOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *servicequotas.GetRequestedServiceQuotaChangeInput, ...func(*servicequotas.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetServiceQuota provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetServiceQuota(ctx context.Context, params *servicequotas.GetServiceQuotaInput, optFns ...func(*servicequotas.Options)) (*servicequotas.GetServiceQuotaOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetServiceQuota")
	}

	var r0 *servicequotas.GetServiceQuotaOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *servicequotas.GetServiceQuotaInput, ...func(*servicequotas.Options)) (*servicequotas.GetServiceQuotaOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *servicequotas.GetServiceQuotaInput, ...func(*servicequotas.Options)) *servicequotas.GetServiceQuotaOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*servicequotas.GetServiceQuotaOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *servicequotas.GetServiceQuotaInput, ...func(*servicequotas.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetServiceQuotaIncreaseRequestFromTemplate provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetServiceQuotaIncreaseRequestFromTemplate(ctx context.Context, params *servicequotas.GetServiceQuotaIncreaseRequestFromTemplateInput, optFns ...func(*servicequotas.Options)) (*servicequotas.GetServiceQuotaIncreaseRequestFromTemplateOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetServiceQuotaIncreaseRequestFromTemplate")
	}

	var r0 *servicequotas.GetServiceQuotaIncreaseRequestFromTemplateOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *servicequotas.GetServiceQuotaIncreaseRequestFromTemplateInput, ...func(*servicequotas.Options)) (*servicequotas.GetServiceQuotaIncreaseRequestFromTemplateOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *servicequotas.GetServiceQuotaIncreaseRequestFromTemplateInput, ...func(*servicequotas.Options)) *servicequotas.GetServiceQuotaIncreaseRequestFromTemplateOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*servicequotas.GetServiceQuotaIncreaseRequestFromTemplateOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *servicequotas.GetServiceQuotaIncreaseRequestFromTemplateInput, ...func(*servicequotas.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListAWSDefaultServiceQuotas provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListAWSDefaultServiceQuotas(ctx context.Context, params *servicequotas.ListAWSDefaultServiceQuotasInput, optFns ...func(*servicequotas.Options)) (*servicequotas.ListAWSDefaultServiceQuotasOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListAWSDefaultServiceQuotas")
	}

	var r0 *servicequotas.ListAWSDefaultServiceQuotasOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *servicequotas.ListAWSDefaultServiceQuotasInput, ...func(*servicequotas.Options)) (*servicequotas.ListAWSDefaultServiceQuotasOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *servicequotas.ListAWSDefaultServiceQuotasInput, ...func(*servicequotas.Options)) *servicequotas.ListAWSDefaultServiceQuotasOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*servicequotas.ListAWSDefaultServiceQuotasOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *servicequotas.ListAWSDefaultServiceQuotasInput, ...func(*servicequotas.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListRequestedServiceQuotaChangeHistory provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListRequestedServiceQuotaChangeHistory(ctx context.Context, params *servicequotas.ListRequestedServiceQuotaChangeHistoryInput, optFns ...func(*servicequotas.Options)) (*servicequotas.ListRequestedServiceQuotaChangeHistoryOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListRequestedServiceQuotaChangeHistory")
	}

	var r0 *servicequotas.ListRequestedServiceQuotaChangeHistoryOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *servicequotas.ListRequestedServiceQuotaChangeHistoryInput, ...func(*servicequotas.Options)) (*servicequotas.ListRequestedServiceQuotaChangeHistoryOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *servicequotas.ListRequestedServiceQuotaChangeHistoryInput, ...func(*servicequotas.Options)) *servicequotas.ListRequestedServiceQuotaChangeHistoryOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*servicequotas.ListRequestedServiceQuotaChangeHistoryOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *servicequotas.ListRequestedServiceQuotaChangeHistoryInput, ...func(*servicequotas.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListRequestedServiceQuotaChangeHistoryByQuota provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListRequestedServiceQuotaChangeHistoryByQuota(ctx context.Context, params *servicequotas.ListRequestedServiceQuotaChangeHistoryByQuotaInput, optFns ...func(*servicequotas.Options)) (*servicequotas.ListRequestedServiceQuotaChangeHistoryByQuotaOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListRequestedServiceQuotaChangeHistoryByQuota")
	}

	var r0 *servicequotas.ListRequestedServiceQuotaChangeHistoryByQuotaOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *servicequotas.ListRequestedServiceQuotaChangeHistoryByQuotaInput, ...func(*servicequotas.Options)) (*servicequotas.ListRequestedServiceQuotaChangeHistoryByQuotaOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *servicequotas.ListRequestedServiceQuotaChangeHistoryByQuotaInput, ...func(*servicequotas.Options)) *servicequotas.ListRequestedServiceQuotaChangeHistoryByQuotaOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*servicequotas.ListRequestedServiceQuotaChangeHistoryByQuotaOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *servicequotas.ListRequestedServiceQuotaChangeHistoryByQuotaInput, ...func(*servicequotas.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListServiceQuotaIncreaseRequestsInTemplate provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListServiceQuotaIncreaseRequestsInTemplate(ctx context.Context, params *servicequotas.ListServiceQuotaIncreaseRequestsInTemplateInput, optFns ...func(*servicequotas.Options)) (*servicequotas.ListServiceQuotaIncreaseRequestsInTemplateOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListServiceQuotaIncreaseRequestsInTemplate")
	}

	var r0 *servicequotas.ListServiceQuotaIncreaseRequestsInTemplateOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *servicequotas.ListServiceQuotaIncreaseRequestsInTemplateInput, ...func(*servicequotas.Options)) (*servicequotas.ListServiceQuotaIncreaseRequestsInTemplateOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *servicequotas.ListServiceQuotaIncreaseRequestsInTemplateInput, ...func(*servicequotas.Options)) *servicequotas.ListServiceQuotaIncreaseRequestsInTemplateOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*servicequotas.ListServiceQuotaIncreaseRequestsInTemplateOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *servicequotas.ListServiceQuotaIncreaseRequestsInTemplateInput, ...func(*servicequotas.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListServiceQuotas provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListServiceQuotas(ctx context.Context, params *servicequotas.ListServiceQuotasInput, optFns ...func(*servicequotas.Options)) (*servicequotas.ListServiceQuotasOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListServiceQuotas")
	}

	var r0 *servicequotas.ListServiceQuotasOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *servicequotas.ListServiceQuotasInput, ...func(*servicequotas.Options)) (*servicequotas.ListServiceQuotasOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *servicequotas.ListServiceQuotasInput, ...func(*servicequotas.Options)) *servicequotas.ListServiceQuotasOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*servicequotas.ListServiceQuotasOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *servicequotas.ListServiceQuotasInput, ...func(*servicequotas.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListServices provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListServices(ctx context.Context, params *servicequotas.ListServicesInput, optFns ...func(*servicequotas.Options)) (*servicequotas.ListServicesOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListServices")
	}

	var r0 *servicequotas.ListServicesOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *servicequotas.ListServicesInput, ...func(*servicequotas.Options)) (*servicequotas.ListServicesOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *servicequotas.ListServicesInput, ...func(*servicequotas.Options)) *servicequotas.ListServicesOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*servicequotas.ListServicesOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *servicequotas.ListServicesInput, ...func(*servicequotas.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListTagsForResource provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListTagsForResource(ctx context.Context, params *servicequotas.ListTagsForResourceInput, optFns ...func(*servicequotas.Options)) (*servicequotas.ListTagsForResourceOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListTagsForResource")
	}

	var r0 *servicequotas.ListTagsForResourceOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *servicequotas.ListTagsForResourceInput, ...func(*servicequotas.Options)) (*servicequotas.ListTagsForResourceOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *servicequotas.ListTagsForResourceInput, ...func(*servicequotas.Options)) *servicequotas.ListTagsForResourceOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*servicequotas.ListTagsForResourceOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *servicequotas.ListTagsForResourceInput, ...func(*servicequotas.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Options provides a mock function with given fields:
func (_m *IClient) Options() servicequotas.Options {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Options")
	}

	var r0 servicequotas.Options
	if rf, ok := ret.Get(0).(func() servicequotas.Options); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(servicequotas.Options)
	}

	return r0
}

// PutServiceQuotaIncreaseRequestIntoTemplate provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) PutServiceQuotaIncreaseRequestIntoTemplate(ctx context.Context, params *servicequotas.PutServiceQuotaIncreaseRequestIntoTemplateInput, optFns ...func(*servicequotas.Options)) (*servicequotas.PutServiceQuotaIncreaseRequestIntoTemplateOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for PutServiceQuotaIncreaseRequestIntoTemplate")
	}

	var r0 *servicequotas.PutServiceQuotaIncreaseRequestIntoTemplateOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *servicequotas.PutServiceQuotaIncreaseRequestIntoTemplateInput, ...func(*servicequotas.Options)) (*servicequotas.PutServiceQuotaIncreaseRequestIntoTemplateOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *servicequotas.PutServiceQuotaIncreaseRequestIntoTemplateInput, ...func(*servicequotas.Options)) *servicequotas.PutServiceQuotaIncreaseRequestIntoTemplateOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*servicequotas.PutServiceQuotaIncreaseRequestIntoTemplateOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *servicequotas.PutServiceQuotaIncreaseRequestIntoTemplateInput, ...func(*servicequotas.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RequestServiceQuotaIncrease provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) RequestServiceQuotaIncrease(ctx context.Context, params *servicequotas.RequestServiceQuotaIncreaseInput, optFns ...func(*servicequotas.Options)) (*servicequotas.RequestServiceQuotaIncreaseOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for RequestServiceQuotaIncrease")
	}

	var r0 *servicequotas.RequestServiceQuotaIncreaseOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *servicequotas.RequestServiceQuotaIncreaseInput, ...func(*servicequotas.Options)) (*servicequotas.RequestServiceQuotaIncreaseOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *servicequotas.RequestServiceQuotaIncreaseInput, ...func(*servicequotas.Options)) *servicequotas.RequestServiceQuotaIncreaseOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*servicequotas.RequestServiceQuotaIncreaseOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *servicequotas.RequestServiceQuotaIncreaseInput, ...func(*servicequotas.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// TagResource provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) TagResource(ctx context.Context, params *servicequotas.TagResourceInput, optFns ...func(*servicequotas.Options)) (*servicequotas.TagResourceOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for TagResource")
	}

	var r0 *servicequotas.TagResourceOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *servicequotas.TagResourceInput, ...func(*servicequotas.Options)) (*servicequotas.TagResourceOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *servicequotas.TagResourceInput, ...func(*servicequotas.Options)) *servicequotas.TagResourceOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*servicequotas.TagResourceOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *servicequotas.TagResourceInput, ...func(*servicequotas.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UntagResource provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UntagResource(ctx context.Context, params *servicequotas.UntagResourceInput, optFns ...func(*servicequotas.Options)) (*servicequotas.UntagResourceOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UntagResource")
	}

	var r0 *servicequotas.UntagResourceOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *servicequotas.UntagResourceInput, ...func(*servicequotas.Options)) (*servicequotas.UntagResourceOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *servicequotas.UntagResourceInput, ...func(*servicequotas.Options)) *servicequotas.UntagResourceOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*servicequotas.UntagResourceOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *servicequotas.UntagResourceInput, ...func(*servicequotas.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewIClient creates a new instance of IClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewIClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *IClient {
	mock := &IClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
