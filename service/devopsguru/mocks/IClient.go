// Code generated by mockery v2.43.2. DO NOT EDIT.

package mocks

import (
	context "context"

	devopsguru "github.com/aws/aws-sdk-go-v2/service/devopsguru"

	mock "github.com/stretchr/testify/mock"
)

// IClient is an autogenerated mock type for the IClient type
type IClient struct {
	mock.Mock
}

// AddNotificationChannel provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) AddNotificationChannel(ctx context.Context, params *devopsguru.AddNotificationChannelInput, optFns ...func(*devopsguru.Options)) (*devopsguru.AddNotificationChannelOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for AddNotificationChannel")
	}

	var r0 *devopsguru.AddNotificationChannelOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *devopsguru.AddNotificationChannelInput, ...func(*devopsguru.Options)) (*devopsguru.AddNotificationChannelOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *devopsguru.AddNotificationChannelInput, ...func(*devopsguru.Options)) *devopsguru.AddNotificationChannelOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*devopsguru.AddNotificationChannelOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *devopsguru.AddNotificationChannelInput, ...func(*devopsguru.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteInsight provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteInsight(ctx context.Context, params *devopsguru.DeleteInsightInput, optFns ...func(*devopsguru.Options)) (*devopsguru.DeleteInsightOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteInsight")
	}

	var r0 *devopsguru.DeleteInsightOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *devopsguru.DeleteInsightInput, ...func(*devopsguru.Options)) (*devopsguru.DeleteInsightOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *devopsguru.DeleteInsightInput, ...func(*devopsguru.Options)) *devopsguru.DeleteInsightOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*devopsguru.DeleteInsightOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *devopsguru.DeleteInsightInput, ...func(*devopsguru.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeAccountHealth provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DescribeAccountHealth(ctx context.Context, params *devopsguru.DescribeAccountHealthInput, optFns ...func(*devopsguru.Options)) (*devopsguru.DescribeAccountHealthOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DescribeAccountHealth")
	}

	var r0 *devopsguru.DescribeAccountHealthOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *devopsguru.DescribeAccountHealthInput, ...func(*devopsguru.Options)) (*devopsguru.DescribeAccountHealthOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *devopsguru.DescribeAccountHealthInput, ...func(*devopsguru.Options)) *devopsguru.DescribeAccountHealthOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*devopsguru.DescribeAccountHealthOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *devopsguru.DescribeAccountHealthInput, ...func(*devopsguru.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeAccountOverview provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DescribeAccountOverview(ctx context.Context, params *devopsguru.DescribeAccountOverviewInput, optFns ...func(*devopsguru.Options)) (*devopsguru.DescribeAccountOverviewOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DescribeAccountOverview")
	}

	var r0 *devopsguru.DescribeAccountOverviewOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *devopsguru.DescribeAccountOverviewInput, ...func(*devopsguru.Options)) (*devopsguru.DescribeAccountOverviewOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *devopsguru.DescribeAccountOverviewInput, ...func(*devopsguru.Options)) *devopsguru.DescribeAccountOverviewOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*devopsguru.DescribeAccountOverviewOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *devopsguru.DescribeAccountOverviewInput, ...func(*devopsguru.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeAnomaly provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DescribeAnomaly(ctx context.Context, params *devopsguru.DescribeAnomalyInput, optFns ...func(*devopsguru.Options)) (*devopsguru.DescribeAnomalyOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DescribeAnomaly")
	}

	var r0 *devopsguru.DescribeAnomalyOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *devopsguru.DescribeAnomalyInput, ...func(*devopsguru.Options)) (*devopsguru.DescribeAnomalyOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *devopsguru.DescribeAnomalyInput, ...func(*devopsguru.Options)) *devopsguru.DescribeAnomalyOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*devopsguru.DescribeAnomalyOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *devopsguru.DescribeAnomalyInput, ...func(*devopsguru.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeEventSourcesConfig provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DescribeEventSourcesConfig(ctx context.Context, params *devopsguru.DescribeEventSourcesConfigInput, optFns ...func(*devopsguru.Options)) (*devopsguru.DescribeEventSourcesConfigOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DescribeEventSourcesConfig")
	}

	var r0 *devopsguru.DescribeEventSourcesConfigOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *devopsguru.DescribeEventSourcesConfigInput, ...func(*devopsguru.Options)) (*devopsguru.DescribeEventSourcesConfigOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *devopsguru.DescribeEventSourcesConfigInput, ...func(*devopsguru.Options)) *devopsguru.DescribeEventSourcesConfigOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*devopsguru.DescribeEventSourcesConfigOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *devopsguru.DescribeEventSourcesConfigInput, ...func(*devopsguru.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeFeedback provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DescribeFeedback(ctx context.Context, params *devopsguru.DescribeFeedbackInput, optFns ...func(*devopsguru.Options)) (*devopsguru.DescribeFeedbackOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DescribeFeedback")
	}

	var r0 *devopsguru.DescribeFeedbackOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *devopsguru.DescribeFeedbackInput, ...func(*devopsguru.Options)) (*devopsguru.DescribeFeedbackOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *devopsguru.DescribeFeedbackInput, ...func(*devopsguru.Options)) *devopsguru.DescribeFeedbackOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*devopsguru.DescribeFeedbackOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *devopsguru.DescribeFeedbackInput, ...func(*devopsguru.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeInsight provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DescribeInsight(ctx context.Context, params *devopsguru.DescribeInsightInput, optFns ...func(*devopsguru.Options)) (*devopsguru.DescribeInsightOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DescribeInsight")
	}

	var r0 *devopsguru.DescribeInsightOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *devopsguru.DescribeInsightInput, ...func(*devopsguru.Options)) (*devopsguru.DescribeInsightOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *devopsguru.DescribeInsightInput, ...func(*devopsguru.Options)) *devopsguru.DescribeInsightOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*devopsguru.DescribeInsightOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *devopsguru.DescribeInsightInput, ...func(*devopsguru.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeOrganizationHealth provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DescribeOrganizationHealth(ctx context.Context, params *devopsguru.DescribeOrganizationHealthInput, optFns ...func(*devopsguru.Options)) (*devopsguru.DescribeOrganizationHealthOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DescribeOrganizationHealth")
	}

	var r0 *devopsguru.DescribeOrganizationHealthOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *devopsguru.DescribeOrganizationHealthInput, ...func(*devopsguru.Options)) (*devopsguru.DescribeOrganizationHealthOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *devopsguru.DescribeOrganizationHealthInput, ...func(*devopsguru.Options)) *devopsguru.DescribeOrganizationHealthOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*devopsguru.DescribeOrganizationHealthOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *devopsguru.DescribeOrganizationHealthInput, ...func(*devopsguru.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeOrganizationOverview provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DescribeOrganizationOverview(ctx context.Context, params *devopsguru.DescribeOrganizationOverviewInput, optFns ...func(*devopsguru.Options)) (*devopsguru.DescribeOrganizationOverviewOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DescribeOrganizationOverview")
	}

	var r0 *devopsguru.DescribeOrganizationOverviewOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *devopsguru.DescribeOrganizationOverviewInput, ...func(*devopsguru.Options)) (*devopsguru.DescribeOrganizationOverviewOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *devopsguru.DescribeOrganizationOverviewInput, ...func(*devopsguru.Options)) *devopsguru.DescribeOrganizationOverviewOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*devopsguru.DescribeOrganizationOverviewOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *devopsguru.DescribeOrganizationOverviewInput, ...func(*devopsguru.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeOrganizationResourceCollectionHealth provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DescribeOrganizationResourceCollectionHealth(ctx context.Context, params *devopsguru.DescribeOrganizationResourceCollectionHealthInput, optFns ...func(*devopsguru.Options)) (*devopsguru.DescribeOrganizationResourceCollectionHealthOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DescribeOrganizationResourceCollectionHealth")
	}

	var r0 *devopsguru.DescribeOrganizationResourceCollectionHealthOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *devopsguru.DescribeOrganizationResourceCollectionHealthInput, ...func(*devopsguru.Options)) (*devopsguru.DescribeOrganizationResourceCollectionHealthOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *devopsguru.DescribeOrganizationResourceCollectionHealthInput, ...func(*devopsguru.Options)) *devopsguru.DescribeOrganizationResourceCollectionHealthOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*devopsguru.DescribeOrganizationResourceCollectionHealthOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *devopsguru.DescribeOrganizationResourceCollectionHealthInput, ...func(*devopsguru.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeResourceCollectionHealth provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DescribeResourceCollectionHealth(ctx context.Context, params *devopsguru.DescribeResourceCollectionHealthInput, optFns ...func(*devopsguru.Options)) (*devopsguru.DescribeResourceCollectionHealthOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DescribeResourceCollectionHealth")
	}

	var r0 *devopsguru.DescribeResourceCollectionHealthOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *devopsguru.DescribeResourceCollectionHealthInput, ...func(*devopsguru.Options)) (*devopsguru.DescribeResourceCollectionHealthOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *devopsguru.DescribeResourceCollectionHealthInput, ...func(*devopsguru.Options)) *devopsguru.DescribeResourceCollectionHealthOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*devopsguru.DescribeResourceCollectionHealthOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *devopsguru.DescribeResourceCollectionHealthInput, ...func(*devopsguru.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeServiceIntegration provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DescribeServiceIntegration(ctx context.Context, params *devopsguru.DescribeServiceIntegrationInput, optFns ...func(*devopsguru.Options)) (*devopsguru.DescribeServiceIntegrationOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DescribeServiceIntegration")
	}

	var r0 *devopsguru.DescribeServiceIntegrationOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *devopsguru.DescribeServiceIntegrationInput, ...func(*devopsguru.Options)) (*devopsguru.DescribeServiceIntegrationOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *devopsguru.DescribeServiceIntegrationInput, ...func(*devopsguru.Options)) *devopsguru.DescribeServiceIntegrationOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*devopsguru.DescribeServiceIntegrationOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *devopsguru.DescribeServiceIntegrationInput, ...func(*devopsguru.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetCostEstimation provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetCostEstimation(ctx context.Context, params *devopsguru.GetCostEstimationInput, optFns ...func(*devopsguru.Options)) (*devopsguru.GetCostEstimationOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetCostEstimation")
	}

	var r0 *devopsguru.GetCostEstimationOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *devopsguru.GetCostEstimationInput, ...func(*devopsguru.Options)) (*devopsguru.GetCostEstimationOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *devopsguru.GetCostEstimationInput, ...func(*devopsguru.Options)) *devopsguru.GetCostEstimationOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*devopsguru.GetCostEstimationOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *devopsguru.GetCostEstimationInput, ...func(*devopsguru.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetResourceCollection provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetResourceCollection(ctx context.Context, params *devopsguru.GetResourceCollectionInput, optFns ...func(*devopsguru.Options)) (*devopsguru.GetResourceCollectionOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetResourceCollection")
	}

	var r0 *devopsguru.GetResourceCollectionOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *devopsguru.GetResourceCollectionInput, ...func(*devopsguru.Options)) (*devopsguru.GetResourceCollectionOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *devopsguru.GetResourceCollectionInput, ...func(*devopsguru.Options)) *devopsguru.GetResourceCollectionOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*devopsguru.GetResourceCollectionOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *devopsguru.GetResourceCollectionInput, ...func(*devopsguru.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListAnomaliesForInsight provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListAnomaliesForInsight(ctx context.Context, params *devopsguru.ListAnomaliesForInsightInput, optFns ...func(*devopsguru.Options)) (*devopsguru.ListAnomaliesForInsightOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListAnomaliesForInsight")
	}

	var r0 *devopsguru.ListAnomaliesForInsightOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *devopsguru.ListAnomaliesForInsightInput, ...func(*devopsguru.Options)) (*devopsguru.ListAnomaliesForInsightOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *devopsguru.ListAnomaliesForInsightInput, ...func(*devopsguru.Options)) *devopsguru.ListAnomaliesForInsightOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*devopsguru.ListAnomaliesForInsightOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *devopsguru.ListAnomaliesForInsightInput, ...func(*devopsguru.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListAnomalousLogGroups provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListAnomalousLogGroups(ctx context.Context, params *devopsguru.ListAnomalousLogGroupsInput, optFns ...func(*devopsguru.Options)) (*devopsguru.ListAnomalousLogGroupsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListAnomalousLogGroups")
	}

	var r0 *devopsguru.ListAnomalousLogGroupsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *devopsguru.ListAnomalousLogGroupsInput, ...func(*devopsguru.Options)) (*devopsguru.ListAnomalousLogGroupsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *devopsguru.ListAnomalousLogGroupsInput, ...func(*devopsguru.Options)) *devopsguru.ListAnomalousLogGroupsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*devopsguru.ListAnomalousLogGroupsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *devopsguru.ListAnomalousLogGroupsInput, ...func(*devopsguru.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListEvents provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListEvents(ctx context.Context, params *devopsguru.ListEventsInput, optFns ...func(*devopsguru.Options)) (*devopsguru.ListEventsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListEvents")
	}

	var r0 *devopsguru.ListEventsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *devopsguru.ListEventsInput, ...func(*devopsguru.Options)) (*devopsguru.ListEventsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *devopsguru.ListEventsInput, ...func(*devopsguru.Options)) *devopsguru.ListEventsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*devopsguru.ListEventsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *devopsguru.ListEventsInput, ...func(*devopsguru.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListInsights provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListInsights(ctx context.Context, params *devopsguru.ListInsightsInput, optFns ...func(*devopsguru.Options)) (*devopsguru.ListInsightsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListInsights")
	}

	var r0 *devopsguru.ListInsightsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *devopsguru.ListInsightsInput, ...func(*devopsguru.Options)) (*devopsguru.ListInsightsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *devopsguru.ListInsightsInput, ...func(*devopsguru.Options)) *devopsguru.ListInsightsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*devopsguru.ListInsightsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *devopsguru.ListInsightsInput, ...func(*devopsguru.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListMonitoredResources provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListMonitoredResources(ctx context.Context, params *devopsguru.ListMonitoredResourcesInput, optFns ...func(*devopsguru.Options)) (*devopsguru.ListMonitoredResourcesOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListMonitoredResources")
	}

	var r0 *devopsguru.ListMonitoredResourcesOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *devopsguru.ListMonitoredResourcesInput, ...func(*devopsguru.Options)) (*devopsguru.ListMonitoredResourcesOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *devopsguru.ListMonitoredResourcesInput, ...func(*devopsguru.Options)) *devopsguru.ListMonitoredResourcesOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*devopsguru.ListMonitoredResourcesOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *devopsguru.ListMonitoredResourcesInput, ...func(*devopsguru.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListNotificationChannels provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListNotificationChannels(ctx context.Context, params *devopsguru.ListNotificationChannelsInput, optFns ...func(*devopsguru.Options)) (*devopsguru.ListNotificationChannelsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListNotificationChannels")
	}

	var r0 *devopsguru.ListNotificationChannelsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *devopsguru.ListNotificationChannelsInput, ...func(*devopsguru.Options)) (*devopsguru.ListNotificationChannelsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *devopsguru.ListNotificationChannelsInput, ...func(*devopsguru.Options)) *devopsguru.ListNotificationChannelsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*devopsguru.ListNotificationChannelsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *devopsguru.ListNotificationChannelsInput, ...func(*devopsguru.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListOrganizationInsights provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListOrganizationInsights(ctx context.Context, params *devopsguru.ListOrganizationInsightsInput, optFns ...func(*devopsguru.Options)) (*devopsguru.ListOrganizationInsightsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListOrganizationInsights")
	}

	var r0 *devopsguru.ListOrganizationInsightsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *devopsguru.ListOrganizationInsightsInput, ...func(*devopsguru.Options)) (*devopsguru.ListOrganizationInsightsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *devopsguru.ListOrganizationInsightsInput, ...func(*devopsguru.Options)) *devopsguru.ListOrganizationInsightsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*devopsguru.ListOrganizationInsightsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *devopsguru.ListOrganizationInsightsInput, ...func(*devopsguru.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListRecommendations provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListRecommendations(ctx context.Context, params *devopsguru.ListRecommendationsInput, optFns ...func(*devopsguru.Options)) (*devopsguru.ListRecommendationsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListRecommendations")
	}

	var r0 *devopsguru.ListRecommendationsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *devopsguru.ListRecommendationsInput, ...func(*devopsguru.Options)) (*devopsguru.ListRecommendationsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *devopsguru.ListRecommendationsInput, ...func(*devopsguru.Options)) *devopsguru.ListRecommendationsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*devopsguru.ListRecommendationsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *devopsguru.ListRecommendationsInput, ...func(*devopsguru.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Options provides a mock function with given fields:
func (_m *IClient) Options() devopsguru.Options {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Options")
	}

	var r0 devopsguru.Options
	if rf, ok := ret.Get(0).(func() devopsguru.Options); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(devopsguru.Options)
	}

	return r0
}

// PutFeedback provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) PutFeedback(ctx context.Context, params *devopsguru.PutFeedbackInput, optFns ...func(*devopsguru.Options)) (*devopsguru.PutFeedbackOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for PutFeedback")
	}

	var r0 *devopsguru.PutFeedbackOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *devopsguru.PutFeedbackInput, ...func(*devopsguru.Options)) (*devopsguru.PutFeedbackOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *devopsguru.PutFeedbackInput, ...func(*devopsguru.Options)) *devopsguru.PutFeedbackOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*devopsguru.PutFeedbackOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *devopsguru.PutFeedbackInput, ...func(*devopsguru.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RemoveNotificationChannel provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) RemoveNotificationChannel(ctx context.Context, params *devopsguru.RemoveNotificationChannelInput, optFns ...func(*devopsguru.Options)) (*devopsguru.RemoveNotificationChannelOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for RemoveNotificationChannel")
	}

	var r0 *devopsguru.RemoveNotificationChannelOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *devopsguru.RemoveNotificationChannelInput, ...func(*devopsguru.Options)) (*devopsguru.RemoveNotificationChannelOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *devopsguru.RemoveNotificationChannelInput, ...func(*devopsguru.Options)) *devopsguru.RemoveNotificationChannelOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*devopsguru.RemoveNotificationChannelOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *devopsguru.RemoveNotificationChannelInput, ...func(*devopsguru.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SearchInsights provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) SearchInsights(ctx context.Context, params *devopsguru.SearchInsightsInput, optFns ...func(*devopsguru.Options)) (*devopsguru.SearchInsightsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for SearchInsights")
	}

	var r0 *devopsguru.SearchInsightsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *devopsguru.SearchInsightsInput, ...func(*devopsguru.Options)) (*devopsguru.SearchInsightsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *devopsguru.SearchInsightsInput, ...func(*devopsguru.Options)) *devopsguru.SearchInsightsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*devopsguru.SearchInsightsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *devopsguru.SearchInsightsInput, ...func(*devopsguru.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SearchOrganizationInsights provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) SearchOrganizationInsights(ctx context.Context, params *devopsguru.SearchOrganizationInsightsInput, optFns ...func(*devopsguru.Options)) (*devopsguru.SearchOrganizationInsightsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for SearchOrganizationInsights")
	}

	var r0 *devopsguru.SearchOrganizationInsightsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *devopsguru.SearchOrganizationInsightsInput, ...func(*devopsguru.Options)) (*devopsguru.SearchOrganizationInsightsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *devopsguru.SearchOrganizationInsightsInput, ...func(*devopsguru.Options)) *devopsguru.SearchOrganizationInsightsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*devopsguru.SearchOrganizationInsightsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *devopsguru.SearchOrganizationInsightsInput, ...func(*devopsguru.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// StartCostEstimation provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) StartCostEstimation(ctx context.Context, params *devopsguru.StartCostEstimationInput, optFns ...func(*devopsguru.Options)) (*devopsguru.StartCostEstimationOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for StartCostEstimation")
	}

	var r0 *devopsguru.StartCostEstimationOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *devopsguru.StartCostEstimationInput, ...func(*devopsguru.Options)) (*devopsguru.StartCostEstimationOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *devopsguru.StartCostEstimationInput, ...func(*devopsguru.Options)) *devopsguru.StartCostEstimationOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*devopsguru.StartCostEstimationOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *devopsguru.StartCostEstimationInput, ...func(*devopsguru.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateEventSourcesConfig provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UpdateEventSourcesConfig(ctx context.Context, params *devopsguru.UpdateEventSourcesConfigInput, optFns ...func(*devopsguru.Options)) (*devopsguru.UpdateEventSourcesConfigOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateEventSourcesConfig")
	}

	var r0 *devopsguru.UpdateEventSourcesConfigOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *devopsguru.UpdateEventSourcesConfigInput, ...func(*devopsguru.Options)) (*devopsguru.UpdateEventSourcesConfigOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *devopsguru.UpdateEventSourcesConfigInput, ...func(*devopsguru.Options)) *devopsguru.UpdateEventSourcesConfigOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*devopsguru.UpdateEventSourcesConfigOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *devopsguru.UpdateEventSourcesConfigInput, ...func(*devopsguru.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateResourceCollection provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UpdateResourceCollection(ctx context.Context, params *devopsguru.UpdateResourceCollectionInput, optFns ...func(*devopsguru.Options)) (*devopsguru.UpdateResourceCollectionOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateResourceCollection")
	}

	var r0 *devopsguru.UpdateResourceCollectionOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *devopsguru.UpdateResourceCollectionInput, ...func(*devopsguru.Options)) (*devopsguru.UpdateResourceCollectionOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *devopsguru.UpdateResourceCollectionInput, ...func(*devopsguru.Options)) *devopsguru.UpdateResourceCollectionOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*devopsguru.UpdateResourceCollectionOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *devopsguru.UpdateResourceCollectionInput, ...func(*devopsguru.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateServiceIntegration provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UpdateServiceIntegration(ctx context.Context, params *devopsguru.UpdateServiceIntegrationInput, optFns ...func(*devopsguru.Options)) (*devopsguru.UpdateServiceIntegrationOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateServiceIntegration")
	}

	var r0 *devopsguru.UpdateServiceIntegrationOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *devopsguru.UpdateServiceIntegrationInput, ...func(*devopsguru.Options)) (*devopsguru.UpdateServiceIntegrationOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *devopsguru.UpdateServiceIntegrationInput, ...func(*devopsguru.Options)) *devopsguru.UpdateServiceIntegrationOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*devopsguru.UpdateServiceIntegrationOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *devopsguru.UpdateServiceIntegrationInput, ...func(*devopsguru.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewIClient creates a new instance of IClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewIClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *IClient {
	mock := &IClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
