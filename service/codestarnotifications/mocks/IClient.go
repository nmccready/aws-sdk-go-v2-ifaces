// Code generated by mockery v2.43.2. DO NOT EDIT.

package mocks

import (
	codestarnotifications "github.com/aws/aws-sdk-go-v2/service/codestarnotifications"

	context "context"

	mock "github.com/stretchr/testify/mock"
)

// IClient is an autogenerated mock type for the IClient type
type IClient struct {
	mock.Mock
}

// CreateNotificationRule provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CreateNotificationRule(ctx context.Context, params *codestarnotifications.CreateNotificationRuleInput, optFns ...func(*codestarnotifications.Options)) (*codestarnotifications.CreateNotificationRuleOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateNotificationRule")
	}

	var r0 *codestarnotifications.CreateNotificationRuleOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *codestarnotifications.CreateNotificationRuleInput, ...func(*codestarnotifications.Options)) (*codestarnotifications.CreateNotificationRuleOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *codestarnotifications.CreateNotificationRuleInput, ...func(*codestarnotifications.Options)) *codestarnotifications.CreateNotificationRuleOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*codestarnotifications.CreateNotificationRuleOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *codestarnotifications.CreateNotificationRuleInput, ...func(*codestarnotifications.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteNotificationRule provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteNotificationRule(ctx context.Context, params *codestarnotifications.DeleteNotificationRuleInput, optFns ...func(*codestarnotifications.Options)) (*codestarnotifications.DeleteNotificationRuleOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteNotificationRule")
	}

	var r0 *codestarnotifications.DeleteNotificationRuleOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *codestarnotifications.DeleteNotificationRuleInput, ...func(*codestarnotifications.Options)) (*codestarnotifications.DeleteNotificationRuleOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *codestarnotifications.DeleteNotificationRuleInput, ...func(*codestarnotifications.Options)) *codestarnotifications.DeleteNotificationRuleOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*codestarnotifications.DeleteNotificationRuleOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *codestarnotifications.DeleteNotificationRuleInput, ...func(*codestarnotifications.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteTarget provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteTarget(ctx context.Context, params *codestarnotifications.DeleteTargetInput, optFns ...func(*codestarnotifications.Options)) (*codestarnotifications.DeleteTargetOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteTarget")
	}

	var r0 *codestarnotifications.DeleteTargetOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *codestarnotifications.DeleteTargetInput, ...func(*codestarnotifications.Options)) (*codestarnotifications.DeleteTargetOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *codestarnotifications.DeleteTargetInput, ...func(*codestarnotifications.Options)) *codestarnotifications.DeleteTargetOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*codestarnotifications.DeleteTargetOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *codestarnotifications.DeleteTargetInput, ...func(*codestarnotifications.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeNotificationRule provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DescribeNotificationRule(ctx context.Context, params *codestarnotifications.DescribeNotificationRuleInput, optFns ...func(*codestarnotifications.Options)) (*codestarnotifications.DescribeNotificationRuleOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DescribeNotificationRule")
	}

	var r0 *codestarnotifications.DescribeNotificationRuleOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *codestarnotifications.DescribeNotificationRuleInput, ...func(*codestarnotifications.Options)) (*codestarnotifications.DescribeNotificationRuleOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *codestarnotifications.DescribeNotificationRuleInput, ...func(*codestarnotifications.Options)) *codestarnotifications.DescribeNotificationRuleOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*codestarnotifications.DescribeNotificationRuleOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *codestarnotifications.DescribeNotificationRuleInput, ...func(*codestarnotifications.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListEventTypes provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListEventTypes(ctx context.Context, params *codestarnotifications.ListEventTypesInput, optFns ...func(*codestarnotifications.Options)) (*codestarnotifications.ListEventTypesOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListEventTypes")
	}

	var r0 *codestarnotifications.ListEventTypesOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *codestarnotifications.ListEventTypesInput, ...func(*codestarnotifications.Options)) (*codestarnotifications.ListEventTypesOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *codestarnotifications.ListEventTypesInput, ...func(*codestarnotifications.Options)) *codestarnotifications.ListEventTypesOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*codestarnotifications.ListEventTypesOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *codestarnotifications.ListEventTypesInput, ...func(*codestarnotifications.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListNotificationRules provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListNotificationRules(ctx context.Context, params *codestarnotifications.ListNotificationRulesInput, optFns ...func(*codestarnotifications.Options)) (*codestarnotifications.ListNotificationRulesOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListNotificationRules")
	}

	var r0 *codestarnotifications.ListNotificationRulesOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *codestarnotifications.ListNotificationRulesInput, ...func(*codestarnotifications.Options)) (*codestarnotifications.ListNotificationRulesOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *codestarnotifications.ListNotificationRulesInput, ...func(*codestarnotifications.Options)) *codestarnotifications.ListNotificationRulesOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*codestarnotifications.ListNotificationRulesOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *codestarnotifications.ListNotificationRulesInput, ...func(*codestarnotifications.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListTagsForResource provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListTagsForResource(ctx context.Context, params *codestarnotifications.ListTagsForResourceInput, optFns ...func(*codestarnotifications.Options)) (*codestarnotifications.ListTagsForResourceOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListTagsForResource")
	}

	var r0 *codestarnotifications.ListTagsForResourceOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *codestarnotifications.ListTagsForResourceInput, ...func(*codestarnotifications.Options)) (*codestarnotifications.ListTagsForResourceOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *codestarnotifications.ListTagsForResourceInput, ...func(*codestarnotifications.Options)) *codestarnotifications.ListTagsForResourceOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*codestarnotifications.ListTagsForResourceOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *codestarnotifications.ListTagsForResourceInput, ...func(*codestarnotifications.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListTargets provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListTargets(ctx context.Context, params *codestarnotifications.ListTargetsInput, optFns ...func(*codestarnotifications.Options)) (*codestarnotifications.ListTargetsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListTargets")
	}

	var r0 *codestarnotifications.ListTargetsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *codestarnotifications.ListTargetsInput, ...func(*codestarnotifications.Options)) (*codestarnotifications.ListTargetsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *codestarnotifications.ListTargetsInput, ...func(*codestarnotifications.Options)) *codestarnotifications.ListTargetsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*codestarnotifications.ListTargetsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *codestarnotifications.ListTargetsInput, ...func(*codestarnotifications.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Options provides a mock function with given fields:
func (_m *IClient) Options() codestarnotifications.Options {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Options")
	}

	var r0 codestarnotifications.Options
	if rf, ok := ret.Get(0).(func() codestarnotifications.Options); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(codestarnotifications.Options)
	}

	return r0
}

// Subscribe provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) Subscribe(ctx context.Context, params *codestarnotifications.SubscribeInput, optFns ...func(*codestarnotifications.Options)) (*codestarnotifications.SubscribeOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for Subscribe")
	}

	var r0 *codestarnotifications.SubscribeOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *codestarnotifications.SubscribeInput, ...func(*codestarnotifications.Options)) (*codestarnotifications.SubscribeOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *codestarnotifications.SubscribeInput, ...func(*codestarnotifications.Options)) *codestarnotifications.SubscribeOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*codestarnotifications.SubscribeOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *codestarnotifications.SubscribeInput, ...func(*codestarnotifications.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// TagResource provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) TagResource(ctx context.Context, params *codestarnotifications.TagResourceInput, optFns ...func(*codestarnotifications.Options)) (*codestarnotifications.TagResourceOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for TagResource")
	}

	var r0 *codestarnotifications.TagResourceOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *codestarnotifications.TagResourceInput, ...func(*codestarnotifications.Options)) (*codestarnotifications.TagResourceOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *codestarnotifications.TagResourceInput, ...func(*codestarnotifications.Options)) *codestarnotifications.TagResourceOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*codestarnotifications.TagResourceOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *codestarnotifications.TagResourceInput, ...func(*codestarnotifications.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Unsubscribe provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) Unsubscribe(ctx context.Context, params *codestarnotifications.UnsubscribeInput, optFns ...func(*codestarnotifications.Options)) (*codestarnotifications.UnsubscribeOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for Unsubscribe")
	}

	var r0 *codestarnotifications.UnsubscribeOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *codestarnotifications.UnsubscribeInput, ...func(*codestarnotifications.Options)) (*codestarnotifications.UnsubscribeOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *codestarnotifications.UnsubscribeInput, ...func(*codestarnotifications.Options)) *codestarnotifications.UnsubscribeOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*codestarnotifications.UnsubscribeOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *codestarnotifications.UnsubscribeInput, ...func(*codestarnotifications.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UntagResource provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UntagResource(ctx context.Context, params *codestarnotifications.UntagResourceInput, optFns ...func(*codestarnotifications.Options)) (*codestarnotifications.UntagResourceOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UntagResource")
	}

	var r0 *codestarnotifications.UntagResourceOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *codestarnotifications.UntagResourceInput, ...func(*codestarnotifications.Options)) (*codestarnotifications.UntagResourceOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *codestarnotifications.UntagResourceInput, ...func(*codestarnotifications.Options)) *codestarnotifications.UntagResourceOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*codestarnotifications.UntagResourceOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *codestarnotifications.UntagResourceInput, ...func(*codestarnotifications.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateNotificationRule provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UpdateNotificationRule(ctx context.Context, params *codestarnotifications.UpdateNotificationRuleInput, optFns ...func(*codestarnotifications.Options)) (*codestarnotifications.UpdateNotificationRuleOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateNotificationRule")
	}

	var r0 *codestarnotifications.UpdateNotificationRuleOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *codestarnotifications.UpdateNotificationRuleInput, ...func(*codestarnotifications.Options)) (*codestarnotifications.UpdateNotificationRuleOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *codestarnotifications.UpdateNotificationRuleInput, ...func(*codestarnotifications.Options)) *codestarnotifications.UpdateNotificationRuleOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*codestarnotifications.UpdateNotificationRuleOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *codestarnotifications.UpdateNotificationRuleInput, ...func(*codestarnotifications.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewIClient creates a new instance of IClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewIClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *IClient {
	mock := &IClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
