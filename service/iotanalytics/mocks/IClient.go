// Code generated by mockery v2.39.2. DO NOT EDIT.

package mocks

import (
	context "context"

	iotanalytics "github.com/aws/aws-sdk-go-v2/service/iotanalytics"
	mock "github.com/stretchr/testify/mock"
)

// IClient is an autogenerated mock type for the IClient type
type IClient struct {
	mock.Mock
}

// BatchPutMessage provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) BatchPutMessage(ctx context.Context, params *iotanalytics.BatchPutMessageInput, optFns ...func(*iotanalytics.Options)) (*iotanalytics.BatchPutMessageOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for BatchPutMessage")
	}

	var r0 *iotanalytics.BatchPutMessageOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *iotanalytics.BatchPutMessageInput, ...func(*iotanalytics.Options)) (*iotanalytics.BatchPutMessageOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *iotanalytics.BatchPutMessageInput, ...func(*iotanalytics.Options)) *iotanalytics.BatchPutMessageOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*iotanalytics.BatchPutMessageOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *iotanalytics.BatchPutMessageInput, ...func(*iotanalytics.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CancelPipelineReprocessing provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CancelPipelineReprocessing(ctx context.Context, params *iotanalytics.CancelPipelineReprocessingInput, optFns ...func(*iotanalytics.Options)) (*iotanalytics.CancelPipelineReprocessingOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CancelPipelineReprocessing")
	}

	var r0 *iotanalytics.CancelPipelineReprocessingOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *iotanalytics.CancelPipelineReprocessingInput, ...func(*iotanalytics.Options)) (*iotanalytics.CancelPipelineReprocessingOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *iotanalytics.CancelPipelineReprocessingInput, ...func(*iotanalytics.Options)) *iotanalytics.CancelPipelineReprocessingOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*iotanalytics.CancelPipelineReprocessingOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *iotanalytics.CancelPipelineReprocessingInput, ...func(*iotanalytics.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateChannel provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CreateChannel(ctx context.Context, params *iotanalytics.CreateChannelInput, optFns ...func(*iotanalytics.Options)) (*iotanalytics.CreateChannelOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateChannel")
	}

	var r0 *iotanalytics.CreateChannelOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *iotanalytics.CreateChannelInput, ...func(*iotanalytics.Options)) (*iotanalytics.CreateChannelOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *iotanalytics.CreateChannelInput, ...func(*iotanalytics.Options)) *iotanalytics.CreateChannelOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*iotanalytics.CreateChannelOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *iotanalytics.CreateChannelInput, ...func(*iotanalytics.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateDataset provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CreateDataset(ctx context.Context, params *iotanalytics.CreateDatasetInput, optFns ...func(*iotanalytics.Options)) (*iotanalytics.CreateDatasetOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateDataset")
	}

	var r0 *iotanalytics.CreateDatasetOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *iotanalytics.CreateDatasetInput, ...func(*iotanalytics.Options)) (*iotanalytics.CreateDatasetOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *iotanalytics.CreateDatasetInput, ...func(*iotanalytics.Options)) *iotanalytics.CreateDatasetOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*iotanalytics.CreateDatasetOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *iotanalytics.CreateDatasetInput, ...func(*iotanalytics.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateDatasetContent provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CreateDatasetContent(ctx context.Context, params *iotanalytics.CreateDatasetContentInput, optFns ...func(*iotanalytics.Options)) (*iotanalytics.CreateDatasetContentOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateDatasetContent")
	}

	var r0 *iotanalytics.CreateDatasetContentOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *iotanalytics.CreateDatasetContentInput, ...func(*iotanalytics.Options)) (*iotanalytics.CreateDatasetContentOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *iotanalytics.CreateDatasetContentInput, ...func(*iotanalytics.Options)) *iotanalytics.CreateDatasetContentOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*iotanalytics.CreateDatasetContentOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *iotanalytics.CreateDatasetContentInput, ...func(*iotanalytics.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateDatastore provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CreateDatastore(ctx context.Context, params *iotanalytics.CreateDatastoreInput, optFns ...func(*iotanalytics.Options)) (*iotanalytics.CreateDatastoreOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateDatastore")
	}

	var r0 *iotanalytics.CreateDatastoreOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *iotanalytics.CreateDatastoreInput, ...func(*iotanalytics.Options)) (*iotanalytics.CreateDatastoreOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *iotanalytics.CreateDatastoreInput, ...func(*iotanalytics.Options)) *iotanalytics.CreateDatastoreOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*iotanalytics.CreateDatastoreOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *iotanalytics.CreateDatastoreInput, ...func(*iotanalytics.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreatePipeline provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CreatePipeline(ctx context.Context, params *iotanalytics.CreatePipelineInput, optFns ...func(*iotanalytics.Options)) (*iotanalytics.CreatePipelineOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreatePipeline")
	}

	var r0 *iotanalytics.CreatePipelineOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *iotanalytics.CreatePipelineInput, ...func(*iotanalytics.Options)) (*iotanalytics.CreatePipelineOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *iotanalytics.CreatePipelineInput, ...func(*iotanalytics.Options)) *iotanalytics.CreatePipelineOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*iotanalytics.CreatePipelineOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *iotanalytics.CreatePipelineInput, ...func(*iotanalytics.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteChannel provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteChannel(ctx context.Context, params *iotanalytics.DeleteChannelInput, optFns ...func(*iotanalytics.Options)) (*iotanalytics.DeleteChannelOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteChannel")
	}

	var r0 *iotanalytics.DeleteChannelOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *iotanalytics.DeleteChannelInput, ...func(*iotanalytics.Options)) (*iotanalytics.DeleteChannelOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *iotanalytics.DeleteChannelInput, ...func(*iotanalytics.Options)) *iotanalytics.DeleteChannelOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*iotanalytics.DeleteChannelOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *iotanalytics.DeleteChannelInput, ...func(*iotanalytics.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteDataset provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteDataset(ctx context.Context, params *iotanalytics.DeleteDatasetInput, optFns ...func(*iotanalytics.Options)) (*iotanalytics.DeleteDatasetOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteDataset")
	}

	var r0 *iotanalytics.DeleteDatasetOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *iotanalytics.DeleteDatasetInput, ...func(*iotanalytics.Options)) (*iotanalytics.DeleteDatasetOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *iotanalytics.DeleteDatasetInput, ...func(*iotanalytics.Options)) *iotanalytics.DeleteDatasetOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*iotanalytics.DeleteDatasetOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *iotanalytics.DeleteDatasetInput, ...func(*iotanalytics.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteDatasetContent provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteDatasetContent(ctx context.Context, params *iotanalytics.DeleteDatasetContentInput, optFns ...func(*iotanalytics.Options)) (*iotanalytics.DeleteDatasetContentOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteDatasetContent")
	}

	var r0 *iotanalytics.DeleteDatasetContentOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *iotanalytics.DeleteDatasetContentInput, ...func(*iotanalytics.Options)) (*iotanalytics.DeleteDatasetContentOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *iotanalytics.DeleteDatasetContentInput, ...func(*iotanalytics.Options)) *iotanalytics.DeleteDatasetContentOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*iotanalytics.DeleteDatasetContentOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *iotanalytics.DeleteDatasetContentInput, ...func(*iotanalytics.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteDatastore provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteDatastore(ctx context.Context, params *iotanalytics.DeleteDatastoreInput, optFns ...func(*iotanalytics.Options)) (*iotanalytics.DeleteDatastoreOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteDatastore")
	}

	var r0 *iotanalytics.DeleteDatastoreOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *iotanalytics.DeleteDatastoreInput, ...func(*iotanalytics.Options)) (*iotanalytics.DeleteDatastoreOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *iotanalytics.DeleteDatastoreInput, ...func(*iotanalytics.Options)) *iotanalytics.DeleteDatastoreOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*iotanalytics.DeleteDatastoreOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *iotanalytics.DeleteDatastoreInput, ...func(*iotanalytics.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeletePipeline provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeletePipeline(ctx context.Context, params *iotanalytics.DeletePipelineInput, optFns ...func(*iotanalytics.Options)) (*iotanalytics.DeletePipelineOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeletePipeline")
	}

	var r0 *iotanalytics.DeletePipelineOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *iotanalytics.DeletePipelineInput, ...func(*iotanalytics.Options)) (*iotanalytics.DeletePipelineOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *iotanalytics.DeletePipelineInput, ...func(*iotanalytics.Options)) *iotanalytics.DeletePipelineOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*iotanalytics.DeletePipelineOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *iotanalytics.DeletePipelineInput, ...func(*iotanalytics.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeChannel provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DescribeChannel(ctx context.Context, params *iotanalytics.DescribeChannelInput, optFns ...func(*iotanalytics.Options)) (*iotanalytics.DescribeChannelOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DescribeChannel")
	}

	var r0 *iotanalytics.DescribeChannelOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *iotanalytics.DescribeChannelInput, ...func(*iotanalytics.Options)) (*iotanalytics.DescribeChannelOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *iotanalytics.DescribeChannelInput, ...func(*iotanalytics.Options)) *iotanalytics.DescribeChannelOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*iotanalytics.DescribeChannelOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *iotanalytics.DescribeChannelInput, ...func(*iotanalytics.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeDataset provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DescribeDataset(ctx context.Context, params *iotanalytics.DescribeDatasetInput, optFns ...func(*iotanalytics.Options)) (*iotanalytics.DescribeDatasetOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DescribeDataset")
	}

	var r0 *iotanalytics.DescribeDatasetOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *iotanalytics.DescribeDatasetInput, ...func(*iotanalytics.Options)) (*iotanalytics.DescribeDatasetOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *iotanalytics.DescribeDatasetInput, ...func(*iotanalytics.Options)) *iotanalytics.DescribeDatasetOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*iotanalytics.DescribeDatasetOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *iotanalytics.DescribeDatasetInput, ...func(*iotanalytics.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeDatastore provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DescribeDatastore(ctx context.Context, params *iotanalytics.DescribeDatastoreInput, optFns ...func(*iotanalytics.Options)) (*iotanalytics.DescribeDatastoreOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DescribeDatastore")
	}

	var r0 *iotanalytics.DescribeDatastoreOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *iotanalytics.DescribeDatastoreInput, ...func(*iotanalytics.Options)) (*iotanalytics.DescribeDatastoreOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *iotanalytics.DescribeDatastoreInput, ...func(*iotanalytics.Options)) *iotanalytics.DescribeDatastoreOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*iotanalytics.DescribeDatastoreOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *iotanalytics.DescribeDatastoreInput, ...func(*iotanalytics.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeLoggingOptions provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DescribeLoggingOptions(ctx context.Context, params *iotanalytics.DescribeLoggingOptionsInput, optFns ...func(*iotanalytics.Options)) (*iotanalytics.DescribeLoggingOptionsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DescribeLoggingOptions")
	}

	var r0 *iotanalytics.DescribeLoggingOptionsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *iotanalytics.DescribeLoggingOptionsInput, ...func(*iotanalytics.Options)) (*iotanalytics.DescribeLoggingOptionsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *iotanalytics.DescribeLoggingOptionsInput, ...func(*iotanalytics.Options)) *iotanalytics.DescribeLoggingOptionsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*iotanalytics.DescribeLoggingOptionsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *iotanalytics.DescribeLoggingOptionsInput, ...func(*iotanalytics.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribePipeline provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DescribePipeline(ctx context.Context, params *iotanalytics.DescribePipelineInput, optFns ...func(*iotanalytics.Options)) (*iotanalytics.DescribePipelineOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DescribePipeline")
	}

	var r0 *iotanalytics.DescribePipelineOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *iotanalytics.DescribePipelineInput, ...func(*iotanalytics.Options)) (*iotanalytics.DescribePipelineOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *iotanalytics.DescribePipelineInput, ...func(*iotanalytics.Options)) *iotanalytics.DescribePipelineOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*iotanalytics.DescribePipelineOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *iotanalytics.DescribePipelineInput, ...func(*iotanalytics.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetDatasetContent provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetDatasetContent(ctx context.Context, params *iotanalytics.GetDatasetContentInput, optFns ...func(*iotanalytics.Options)) (*iotanalytics.GetDatasetContentOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetDatasetContent")
	}

	var r0 *iotanalytics.GetDatasetContentOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *iotanalytics.GetDatasetContentInput, ...func(*iotanalytics.Options)) (*iotanalytics.GetDatasetContentOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *iotanalytics.GetDatasetContentInput, ...func(*iotanalytics.Options)) *iotanalytics.GetDatasetContentOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*iotanalytics.GetDatasetContentOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *iotanalytics.GetDatasetContentInput, ...func(*iotanalytics.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListChannels provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListChannels(ctx context.Context, params *iotanalytics.ListChannelsInput, optFns ...func(*iotanalytics.Options)) (*iotanalytics.ListChannelsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListChannels")
	}

	var r0 *iotanalytics.ListChannelsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *iotanalytics.ListChannelsInput, ...func(*iotanalytics.Options)) (*iotanalytics.ListChannelsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *iotanalytics.ListChannelsInput, ...func(*iotanalytics.Options)) *iotanalytics.ListChannelsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*iotanalytics.ListChannelsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *iotanalytics.ListChannelsInput, ...func(*iotanalytics.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListDatasetContents provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListDatasetContents(ctx context.Context, params *iotanalytics.ListDatasetContentsInput, optFns ...func(*iotanalytics.Options)) (*iotanalytics.ListDatasetContentsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListDatasetContents")
	}

	var r0 *iotanalytics.ListDatasetContentsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *iotanalytics.ListDatasetContentsInput, ...func(*iotanalytics.Options)) (*iotanalytics.ListDatasetContentsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *iotanalytics.ListDatasetContentsInput, ...func(*iotanalytics.Options)) *iotanalytics.ListDatasetContentsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*iotanalytics.ListDatasetContentsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *iotanalytics.ListDatasetContentsInput, ...func(*iotanalytics.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListDatasets provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListDatasets(ctx context.Context, params *iotanalytics.ListDatasetsInput, optFns ...func(*iotanalytics.Options)) (*iotanalytics.ListDatasetsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListDatasets")
	}

	var r0 *iotanalytics.ListDatasetsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *iotanalytics.ListDatasetsInput, ...func(*iotanalytics.Options)) (*iotanalytics.ListDatasetsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *iotanalytics.ListDatasetsInput, ...func(*iotanalytics.Options)) *iotanalytics.ListDatasetsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*iotanalytics.ListDatasetsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *iotanalytics.ListDatasetsInput, ...func(*iotanalytics.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListDatastores provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListDatastores(ctx context.Context, params *iotanalytics.ListDatastoresInput, optFns ...func(*iotanalytics.Options)) (*iotanalytics.ListDatastoresOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListDatastores")
	}

	var r0 *iotanalytics.ListDatastoresOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *iotanalytics.ListDatastoresInput, ...func(*iotanalytics.Options)) (*iotanalytics.ListDatastoresOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *iotanalytics.ListDatastoresInput, ...func(*iotanalytics.Options)) *iotanalytics.ListDatastoresOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*iotanalytics.ListDatastoresOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *iotanalytics.ListDatastoresInput, ...func(*iotanalytics.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListPipelines provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListPipelines(ctx context.Context, params *iotanalytics.ListPipelinesInput, optFns ...func(*iotanalytics.Options)) (*iotanalytics.ListPipelinesOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListPipelines")
	}

	var r0 *iotanalytics.ListPipelinesOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *iotanalytics.ListPipelinesInput, ...func(*iotanalytics.Options)) (*iotanalytics.ListPipelinesOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *iotanalytics.ListPipelinesInput, ...func(*iotanalytics.Options)) *iotanalytics.ListPipelinesOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*iotanalytics.ListPipelinesOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *iotanalytics.ListPipelinesInput, ...func(*iotanalytics.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListTagsForResource provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListTagsForResource(ctx context.Context, params *iotanalytics.ListTagsForResourceInput, optFns ...func(*iotanalytics.Options)) (*iotanalytics.ListTagsForResourceOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListTagsForResource")
	}

	var r0 *iotanalytics.ListTagsForResourceOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *iotanalytics.ListTagsForResourceInput, ...func(*iotanalytics.Options)) (*iotanalytics.ListTagsForResourceOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *iotanalytics.ListTagsForResourceInput, ...func(*iotanalytics.Options)) *iotanalytics.ListTagsForResourceOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*iotanalytics.ListTagsForResourceOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *iotanalytics.ListTagsForResourceInput, ...func(*iotanalytics.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Options provides a mock function with given fields:
func (_m *IClient) Options() iotanalytics.Options {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Options")
	}

	var r0 iotanalytics.Options
	if rf, ok := ret.Get(0).(func() iotanalytics.Options); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(iotanalytics.Options)
	}

	return r0
}

// PutLoggingOptions provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) PutLoggingOptions(ctx context.Context, params *iotanalytics.PutLoggingOptionsInput, optFns ...func(*iotanalytics.Options)) (*iotanalytics.PutLoggingOptionsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for PutLoggingOptions")
	}

	var r0 *iotanalytics.PutLoggingOptionsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *iotanalytics.PutLoggingOptionsInput, ...func(*iotanalytics.Options)) (*iotanalytics.PutLoggingOptionsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *iotanalytics.PutLoggingOptionsInput, ...func(*iotanalytics.Options)) *iotanalytics.PutLoggingOptionsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*iotanalytics.PutLoggingOptionsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *iotanalytics.PutLoggingOptionsInput, ...func(*iotanalytics.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RunPipelineActivity provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) RunPipelineActivity(ctx context.Context, params *iotanalytics.RunPipelineActivityInput, optFns ...func(*iotanalytics.Options)) (*iotanalytics.RunPipelineActivityOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for RunPipelineActivity")
	}

	var r0 *iotanalytics.RunPipelineActivityOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *iotanalytics.RunPipelineActivityInput, ...func(*iotanalytics.Options)) (*iotanalytics.RunPipelineActivityOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *iotanalytics.RunPipelineActivityInput, ...func(*iotanalytics.Options)) *iotanalytics.RunPipelineActivityOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*iotanalytics.RunPipelineActivityOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *iotanalytics.RunPipelineActivityInput, ...func(*iotanalytics.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SampleChannelData provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) SampleChannelData(ctx context.Context, params *iotanalytics.SampleChannelDataInput, optFns ...func(*iotanalytics.Options)) (*iotanalytics.SampleChannelDataOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for SampleChannelData")
	}

	var r0 *iotanalytics.SampleChannelDataOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *iotanalytics.SampleChannelDataInput, ...func(*iotanalytics.Options)) (*iotanalytics.SampleChannelDataOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *iotanalytics.SampleChannelDataInput, ...func(*iotanalytics.Options)) *iotanalytics.SampleChannelDataOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*iotanalytics.SampleChannelDataOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *iotanalytics.SampleChannelDataInput, ...func(*iotanalytics.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// StartPipelineReprocessing provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) StartPipelineReprocessing(ctx context.Context, params *iotanalytics.StartPipelineReprocessingInput, optFns ...func(*iotanalytics.Options)) (*iotanalytics.StartPipelineReprocessingOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for StartPipelineReprocessing")
	}

	var r0 *iotanalytics.StartPipelineReprocessingOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *iotanalytics.StartPipelineReprocessingInput, ...func(*iotanalytics.Options)) (*iotanalytics.StartPipelineReprocessingOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *iotanalytics.StartPipelineReprocessingInput, ...func(*iotanalytics.Options)) *iotanalytics.StartPipelineReprocessingOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*iotanalytics.StartPipelineReprocessingOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *iotanalytics.StartPipelineReprocessingInput, ...func(*iotanalytics.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// TagResource provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) TagResource(ctx context.Context, params *iotanalytics.TagResourceInput, optFns ...func(*iotanalytics.Options)) (*iotanalytics.TagResourceOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for TagResource")
	}

	var r0 *iotanalytics.TagResourceOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *iotanalytics.TagResourceInput, ...func(*iotanalytics.Options)) (*iotanalytics.TagResourceOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *iotanalytics.TagResourceInput, ...func(*iotanalytics.Options)) *iotanalytics.TagResourceOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*iotanalytics.TagResourceOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *iotanalytics.TagResourceInput, ...func(*iotanalytics.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UntagResource provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UntagResource(ctx context.Context, params *iotanalytics.UntagResourceInput, optFns ...func(*iotanalytics.Options)) (*iotanalytics.UntagResourceOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UntagResource")
	}

	var r0 *iotanalytics.UntagResourceOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *iotanalytics.UntagResourceInput, ...func(*iotanalytics.Options)) (*iotanalytics.UntagResourceOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *iotanalytics.UntagResourceInput, ...func(*iotanalytics.Options)) *iotanalytics.UntagResourceOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*iotanalytics.UntagResourceOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *iotanalytics.UntagResourceInput, ...func(*iotanalytics.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateChannel provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UpdateChannel(ctx context.Context, params *iotanalytics.UpdateChannelInput, optFns ...func(*iotanalytics.Options)) (*iotanalytics.UpdateChannelOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateChannel")
	}

	var r0 *iotanalytics.UpdateChannelOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *iotanalytics.UpdateChannelInput, ...func(*iotanalytics.Options)) (*iotanalytics.UpdateChannelOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *iotanalytics.UpdateChannelInput, ...func(*iotanalytics.Options)) *iotanalytics.UpdateChannelOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*iotanalytics.UpdateChannelOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *iotanalytics.UpdateChannelInput, ...func(*iotanalytics.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateDataset provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UpdateDataset(ctx context.Context, params *iotanalytics.UpdateDatasetInput, optFns ...func(*iotanalytics.Options)) (*iotanalytics.UpdateDatasetOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateDataset")
	}

	var r0 *iotanalytics.UpdateDatasetOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *iotanalytics.UpdateDatasetInput, ...func(*iotanalytics.Options)) (*iotanalytics.UpdateDatasetOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *iotanalytics.UpdateDatasetInput, ...func(*iotanalytics.Options)) *iotanalytics.UpdateDatasetOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*iotanalytics.UpdateDatasetOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *iotanalytics.UpdateDatasetInput, ...func(*iotanalytics.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateDatastore provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UpdateDatastore(ctx context.Context, params *iotanalytics.UpdateDatastoreInput, optFns ...func(*iotanalytics.Options)) (*iotanalytics.UpdateDatastoreOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateDatastore")
	}

	var r0 *iotanalytics.UpdateDatastoreOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *iotanalytics.UpdateDatastoreInput, ...func(*iotanalytics.Options)) (*iotanalytics.UpdateDatastoreOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *iotanalytics.UpdateDatastoreInput, ...func(*iotanalytics.Options)) *iotanalytics.UpdateDatastoreOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*iotanalytics.UpdateDatastoreOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *iotanalytics.UpdateDatastoreInput, ...func(*iotanalytics.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdatePipeline provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UpdatePipeline(ctx context.Context, params *iotanalytics.UpdatePipelineInput, optFns ...func(*iotanalytics.Options)) (*iotanalytics.UpdatePipelineOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdatePipeline")
	}

	var r0 *iotanalytics.UpdatePipelineOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *iotanalytics.UpdatePipelineInput, ...func(*iotanalytics.Options)) (*iotanalytics.UpdatePipelineOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *iotanalytics.UpdatePipelineInput, ...func(*iotanalytics.Options)) *iotanalytics.UpdatePipelineOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*iotanalytics.UpdatePipelineOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *iotanalytics.UpdatePipelineInput, ...func(*iotanalytics.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewIClient creates a new instance of IClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewIClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *IClient {
	mock := &IClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
